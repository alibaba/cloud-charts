(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["AiscWidgets"] = factory(require("react"));
	else
		root["AiscWidgets"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_7__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(61);
	module.exports = __webpack_require__(201);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var assign = __webpack_require__(2);
	var isNil = __webpack_require__(35);
	var isObject = __webpack_require__(44);
	var uniqueId = __webpack_require__(162);
	var EventEmitter = __webpack_require__(68);
	var View = __webpack_require__(25);
	var CONSTANTS = __webpack_require__(38);

	var DataSet = function (_EventEmitter) {
	  _inherits(DataSet, _EventEmitter);

	  function DataSet() {
	    var initialProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { state: {} };

	    _classCallCheck(this, DataSet);

	    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

	    var me = _this;
	    assign(me, {
	      _onChangeTimer: null,
	      DataSet: DataSet,
	      isDataSet: true,
	      views: {}
	    }, initialProps);
	    return _this;
	  }

	  DataSet.prototype._getUniqueViewName = function _getUniqueViewName() {
	    var me = this;
	    var name = uniqueId('view_');
	    while (me.views[name]) {
	      name = uniqueId('view_');
	    }
	    return name;
	  };

	  DataSet.prototype.createView = function createView(name) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var me = this;
	    if (isNil(name)) {
	      name = me._getUniqueViewName();
	    }
	    if (isObject(name)) {
	      options = name;
	      name = me._getUniqueViewName();
	    }
	    if (me.views[name]) {
	      throw new Error('data view exists: ' + name);
	    }
	    var view = new View(me, options);
	    me.views[name] = view;
	    return view;
	  };

	  DataSet.prototype.getView = function getView(name) {
	    return this.views[name];
	  };

	  DataSet.prototype.setView = function setView(name, view) {
	    this.views[name] = view;
	  };

	  DataSet.prototype.setState = function setState(name, value) {
	    var me = this;
	    me.state[name] = value;
	    if (me._onChangeTimer) {
	      clearTimeout(me._onChangeTimer);
	      me._onChangeTimer = null;
	    }
	    me._onChangeTimer = setTimeout(function () {
	      me.emit('statechange', name, value);
	    }, 16); // execute after one frame
	  };

	  return DataSet;
	}(EventEmitter);

	assign(DataSet, {
	  CONSTANTS: CONSTANTS,
	  DataSet: DataSet,
	  DataView: View, // alias
	  View: View,
	  connectors: {},
	  transforms: {},

	  registerConnector: function registerConnector(name, connector) {
	    DataSet.connectors[name] = connector;
	  },
	  getConnector: function getConnector(name) {
	    return DataSet.connectors[name] || DataSet.connectors.default;
	  },
	  registerTransform: function registerTransform(name, transform) {
	    DataSet.transforms[name] = transform;
	  },
	  getTransform: function getTransform(name) {
	    return DataSet.transforms[name] || DataSet.transforms.default;
	  }
	}, CONSTANTS);

	View.DataSet = DataSet;
	assign(DataSet.prototype, {
	  view: DataSet.prototype.createView // alias
	});

	DataSet.version = '____DATASET_VERSION____';

	module.exports = DataSet;

/***/ },
/* 2 */
/***/ function(module, exports) {

	function _mix(dist, obj) {
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key) && key !== 'constructor' && obj[key] !== undefined) {
	      dist[key] = obj[key];
	    }
	  }
	}

	var mix = function mix(dist, src1, src2, src3) {
	  if (src1) _mix(dist, src1);
	  if (src2) _mix(dist, src2);
	  if (src3) _mix(dist, src3);
	  return dist;
	};

	module.exports = mix;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var isType = __webpack_require__(27);

	var isArray = Array.isArray ? Array.isArray : function (value) {
	  return isType(value, 'Array');
	};

	module.exports = isArray;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);

	var INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';
	var INVALID_FIELDS_ERR_MSG = 'Invalid fields: it must be an array!';

	module.exports = {
	  getField: function getField(options, defaultField) {
	    var field = options.field,
	        fields = options.fields;

	    if (isString(field)) {
	      return field;
	    }
	    if (isArray(field)) {
	      console.warn(INVALID_FIELD_ERR_MSG);
	      return field[0];
	    }
	    console.warn(INVALID_FIELD_ERR_MSG + ' will try to get fields instead.');
	    if (isString(fields)) {
	      return fields;
	    }
	    if (isArray(fields) && fields.length) {
	      return fields[0];
	    }
	    if (defaultField) {
	      return defaultField;
	    }
	    throw new TypeError(INVALID_FIELD_ERR_MSG);
	  },
	  getFields: function getFields(options, defaultFields) {
	    var field = options.field,
	        fields = options.fields;

	    if (isArray(fields)) {
	      return fields;
	    }
	    if (isString(fields)) {
	      console.warn(INVALID_FIELDS_ERR_MSG);
	      return [fields];
	    }
	    console.warn(INVALID_FIELDS_ERR_MSG + ' will try to get field instead.');
	    if (isString(field)) {
	      console.warn(INVALID_FIELDS_ERR_MSG);
	      return [field];
	    }
	    if (isArray(field) && field.length) {
	      console.warn(INVALID_FIELDS_ERR_MSG);
	      return field;
	    }
	    if (defaultFields) {
	      return defaultFields;
	    }
	    throw new TypeError(INVALID_FIELDS_ERR_MSG);
	  }
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(44);
	var isArray = __webpack_require__(3);

	var each = function each(elements, func) {
	  if (!elements) {
	    return;
	  }
	  var rst = void 0;
	  if (isArray(elements)) {
	    for (var i = 0, len = elements.length; i < len; i++) {
	      rst = func(elements[i], i);
	      if (rst === false) {
	        break;
	      }
	    }
	  } else if (isObject(elements)) {
	    for (var k in elements) {
	      if (elements.hasOwnProperty(k)) {
	        rst = func(elements[k], k);
	        if (rst === false) {
	          break;
	        }
	      }
	    }
	  }
	};

	module.exports = each;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var isType = __webpack_require__(27);

	var isString = function isString(str) {
	  return isType(str, 'String');
	};

	module.exports = isString;

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.propertyMap = exports.requestAnimationFrame = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.propertyAssign = propertyAssign;
	exports.getParentSize = getParentSize;
	exports.pxToNumber = pxToNumber;
	exports.getDataIndexColor = getDataIndexColor;
	exports.getStatusColor = getStatusColor;
	exports.getStatusColorName = getStatusColorName;
	exports.isInvalidNumber = isInvalidNumber;
	exports.numberDecimal = numberDecimal;
	exports.beautifyNumber = beautifyNumber;
	exports.noop = noop;
	exports.getRawData = getRawData;
	exports.filterKey = filterKey;

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _index = __webpack_require__(9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var requestAnimationFrame = exports.requestAnimationFrame = window && window.requestAnimationFrame || _g2.default.DomUtil.requestAnimationFrame;

	// name: 类型 ，相当于type
	// stash: 每组类型的一些信息集，注意，要符合G2语法
	// Util: G2的Util
	// dotDom: 图例的图标dom
	// chart: chart实例
	// export function g2LegendFilter(name, stash, Util, dotDom, chart, filterString='type'){
	//   let obj = stash[name];
	//   let filterNames = [];
	//   obj.isChecked = obj.isChecked ? false : true;
	//   Util.each(stash, function (v) {
	//     if (v.isChecked) {
	//       dotDom[v.index].style.background = v.color;
	//       filterNames.push(v.name);
	//     } else {
	//       dotDom[v.index].style.background = '#999';
	//     }
	//   });
	//
	//   chart.filter(filterString, filterNames);
	//   chart.repaint();
	// }

	var propertyMap = exports.propertyMap = {
	  xAxis: ['type', 'alias', 'range', 'ticks', 'tickCount', 'tickInterval', 'formatter', 'min', 'max', 'minLimit', 'maxLimit', 'nice', 'values', 'mask', 'base', 'exponent', 'sync'],
	  yAxis: ['type', 'alias', 'range', 'ticks', 'tickCount', 'tickInterval', 'formatter', 'min', 'max', 'minLimit', 'maxLimit', 'nice', 'values', 'mask', 'base', 'exponent', 'sync']
	};

	function propertyAssign(keys, target, source) {
	  if (!source) {
	    return target;
	  }
	  keys.forEach(function (key) {
	    // 仅判断undefined的情况
	    if (source[key] !== undefined) {
	      target[key] = source[key];
	    }
	  });

	  return target;
	}

	/**
	 * 找到对应元素的父元素的大小
	 *
	 * @param {element} element Html元素
	 * @param {number} width props中传递的width属性
	 * @param {number} height props中传递的height属性
	 *
	 * @return {array} 宽和高的数组
	 * */
	function getParentSize(element, width, height) {
	  var w = width || '',
	      h = height || '';

	  var parent = element && element.parentElement;

	  if (parent) {
	    var parentStyle = window.getComputedStyle(parent);
	    var paddingTop = pxToNumber(parentStyle.getPropertyValue('padding-top'));
	    var paddingRight = pxToNumber(parentStyle.getPropertyValue('padding-right'));
	    var paddingBottom = pxToNumber(parentStyle.getPropertyValue('padding-bottom'));
	    var paddingLeft = pxToNumber(parentStyle.getPropertyValue('padding-left'));

	    if (!width) {
	      w = parent.clientWidth - paddingLeft - paddingRight;
	    }
	    if (!height) {
	      h = parent.clientHeight - paddingTop - paddingBottom;
	    }
	  }
	  return [w, h];
	}

	function pxToNumber(px) {
	  return Number(px.replace('px', ''));
	}

	/**
	 * 从Highcharts格式数据中找到对应index的颜色
	 *
	 * @param {array} colors 颜色数组
	 * @param {array} rawData Highcharts 格式的数据
	 * @param {number} dataIndex y轴对应的index
	 * */
	function getDataIndexColor(colors, rawData, dataIndex) {
	  var colorIndex = null;
	  // 找到第一个顺序值和数据中yAxis值匹配的index
	  rawData.some(function (d, i) {
	    var dataYAxisIndex = d.yAxis || 0;
	    if (dataYAxisIndex === dataIndex) {
	      colorIndex = i;
	      return true;
	    }
	    return false;
	  });

	  if (colorIndex !== null) {
	    return colors[colorIndex];
	  }
	}

	var statusMap = {
	  error: _index.color.widgetsColorRed,
	  red: _index.color.widgetsColorRed,

	  warning: _index.color.widgetsColorOrange,
	  orange: _index.color.widgetsColorOrange,

	  normal: _index.color.widgetsColorBlue,
	  blue: _index.color.widgetsColorBlue,

	  success: _index.color.widgetsColorGreen,
	  green: _index.color.widgetsColorGreen,

	  none: _index.color.widgetsColorGray,
	  gray: _index.color.widgetsColorGray
	};

	function getStatusColor(status) {
	  return statusMap[status] || status || statusMap.normal;
	}

	var statusColorMap = {
	  error: 'red',
	  warning: 'orange',
	  normal: 'blue',
	  success: 'green',
	  none: 'gray'
	};
	function getStatusColorName(status) {
	  return statusColorMap[status] || status || statusColorMap.normal;
	}

	/**
	 * 判断是否是有效数字
	 *
	 * @param v 输入值
	 *
	 * @return {boolean} 是否有效数字
	 * */
	function isInvalidNumber(v) {
	  return isNaN(v) || !isFinite(v) || v === '' || (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object';
	}

	/**
	 * 数字格式化小数位
	 *
	 * @param {number} num 输入数字
	 * @param {number} decimal 小数位数，默认两位
	 *
	 * @return {string|number} 如果不是数字，返回横杠字符串。如果是数字，返回设定小数位的字符串。
	 * */
	function numberDecimal(num) {
	  var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

	  if (isInvalidNumber(num) || isInvalidNumber(decimal)) {
	    return '-';
	  }

	  return Math.round(Number(num) * Math.pow(10, decimal)) / Math.pow(10, decimal);
	}

	/**
	 * 数字格式化千分位
	 *
	 * @param {number} num 输入数字
	 * @param {number} char 分隔符，默认为逗号
	 *
	 * @return {string|number} 如果不是数字，返回横杠字符串。如果是数字，返回千分位的字符串。
	 * */
	function beautifyNumber(num) {
	  var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';

	  if (isInvalidNumber(num)) {
	    return '-';
	  }
	  var isNegative = num < 0;
	  var numberArr = num.toString().split('.');
	  var number = numberArr[0].replace('-', ''),
	      result = '';
	  while (number.length > 3) {
	    result = char + number.slice(-3) + result;
	    number = number.slice(0, number.length - 3);
	  }
	  if (number) {
	    result = number + result;
	  }
	  // fix 保留了小数位数字
	  if (numberArr[1]) {
	    result = result + '.' + numberArr[1];
	  }
	  // 处理负数
	  if (isNegative) {
	    result = '-' + result;
	  }
	  return result;
	}

	/**
	 * 空函数
	 * */
	function noop() {}

	/**
	* tooltip item 获取原始数据
	*
	* @param {object} config 图表配置项
	* @param {array} rawData 挂载于 this.rawData 上的原始数据
	* @param {number} item tooltip格式化函数的当前数据项
	*
	* @return {object} 寻找得到的原始数据，没有找到则返回空对象。
	* */
	function getRawData(config, rawData, item) {
	  if (!rawData) {
	    return {};
	  }

	  var originData = item.point && item.point._origin || {};
	  if (config.dataType !== 'g2' && Array.isArray(rawData)) {
	    rawData.some(function (r) {
	      if (r.name === originData.type) {
	        // 如果原数据中定义了 facet，需要额外判定 facet 字段
	        if (r.facet && originData.facet !== r.facet) {
	          return false;
	        }
	        originData = r;
	        return true;
	      }
	      return false;
	    });
	  }

	  return originData;
	}

	/**
	* 过滤对象中的key，长用于过滤传递给div的props，防止react invalid attribute warning
	*
	 * @param {object} obj 过滤的对象
	 * @param {array} keys 过滤的键列表
	*
	* @return {object} 过滤后的结果
	* */
	function filterKey(obj, keys) {
	  var result = {};
	  Object.keys(obj).forEach(function (key) {
	    if (keys.indexOf(key) === -1) {
	      result[key] = obj[key];
	    }
	  });
	  return result;
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\common.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\common.js"); } } })();

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _normal = __webpack_require__(202);

	Object.keys(_normal).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _normal[key];
	    }
	  });
	});

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\theme\\index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\theme\\index.js"); } } })();

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = function () {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}();

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    _Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map || ListCache)(),
	    'string': new Hash()
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache();
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
	    object[key] = value;
	  }
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || isFunc && !object) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = baseKeysIn(source);
	  }
	  arrayEach(props || source, function (srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack());
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    } else {
	      var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      } else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      } else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      } else {
	        newValue = objValue;
	      }
	    } else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor());
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor());
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function (object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	  getTag = function getTag(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString:
	          return dataViewTag;
	        case mapCtorString:
	          return mapTag;
	        case promiseCtorString:
	          return promiseTag;
	        case setCtorString:
	          return setTag;
	        case weakMapCtorString:
	          return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag:case float64Tag:
	    case int8Tag:case int16Tag:case int32Tag:
	    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	  return value === proto;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function (object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = merge;

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\merge.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\merge.js"); } } })();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(239)(module)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 是否为函数
	 * @param  {*} fn 对象
	 * @return {Boolean}  是否函数
	 */
	var isType = __webpack_require__(27);

	var isFunction = function isFunction(value) {
	  return isType(value, 'Function');
	};

	module.exports = isFunction;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (false) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(194)();
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3);
	var isFunction = __webpack_require__(11);
	var isString = __webpack_require__(6);
	var groupBy = __webpack_require__(157);
	var simpleSortBy = __webpack_require__(142);

	module.exports = function (rows, group_by) {
	  var order_by = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

	  var newRows = rows;
	  if (order_by && order_by.length) {
	    newRows = simpleSortBy(rows, order_by);
	  }

	  var groupingFn = void 0;
	  if (isFunction(group_by)) {
	    groupingFn = group_by;
	  } else if (isArray(group_by)) {
	    groupingFn = function groupingFn(row) {
	      return '_' + group_by.map(function (col) {
	        return row[col];
	      }).join('-');
	    };
	    // NOTE: Object.keys({'b': 'b', '2': '2', '1': '1', 'a': 'a'}) => [ '1', '2', 'b', 'a' ]
	    // that is why we have to add a prefix
	  } else if (isString(group_by)) {
	    groupingFn = function groupingFn(row) {
	      return '_' + row[group_by];
	    };
	  }
	  var groups = groupBy(newRows, groupingFn);
	  return groups;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = chartLog;
	exports.getLog = getLog;
	/**
	 * 日志记录
	 *
	 * 包含 chartLog  getLog 方法
	 * */

	var logMap = {};

	/**
	 * chartLog 图表日志
	 *
	 * @param {string} name 图表名称
	 * @param {string} logType 单次日志类型
	 * */
	function chartLog(name, logType) {
	  if (!logMap[name]) {
	    logMap[name] = {
	      init: 0
	    };
	  }

	  if (logType === 'init') {
	    logMap[name][logType] += 1;
	  }
	}

	function getLog() {
	  return logMap;
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\log.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\log.js"); } } })();

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	!function(t,r){ true?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(t.ss={})}(this,function(t){"use strict";function r(t){if(0===t.length)return 0;for(var r,n=t[0],e=0,a=1;a<t.length;a++)r=n+t[a],Math.abs(n)>=Math.abs(t[a])?e+=n-r+t[a]:e+=t[a]-r+n,n=r;return n+e}function g(t){if(0===t.length)throw new Error("mean requires at least one data point");return r(t)/t.length}function n(t,r){var n,e,a=g(t),o=0;if(2===r)for(e=0;e<t.length;e++)o+=(n=t[e]-a)*n;else for(e=0;e<t.length;e++)o+=Math.pow(t[e]-a,r);return o}function e(t){if(0===t.length)throw new Error("variance requires at least one data point");return n(t,2)/t.length}function a(t){if(1===t.length)return 0;var r=e(t);return Math.sqrt(r)}function o(t){if(0===t.length)throw new Error("mode requires at least one data point");if(1===t.length)return t[0];for(var r=t[0],n=NaN,e=0,a=1,o=1;o<t.length+1;o++)t[o]!==r?(e<a&&(e=a,n=r),a=1,r=t[o]):a++;return n}function f(t){return t.slice().sort(function(t,r){return t-r})}function u(t){if(0===t.length)throw new Error("min requires at least one data point");for(var r=t[0],n=1;n<t.length;n++)t[n]<r&&(r=t[n]);return r}function h(t){if(0===t.length)throw new Error("max requires at least one data point");for(var r=t[0],n=1;n<t.length;n++)t[n]>r&&(r=t[n]);return r}function i(t,r){var n=t.length*r;if(0===t.length)throw new Error("quantile requires at least one data point.");if(r<0||1<r)throw new Error("quantiles must be between 0 and 1");return 1===r?t[t.length-1]:0===r?t[0]:n%1!=0?t[Math.ceil(n)-1]:t.length%2==0?(t[n-1]+t[n])/2:t[n]}function c(t,r,n,e){for(n=n||0,e=e||t.length-1;n<e;){if(600<e-n){var a=e-n+1,o=r-n+1,i=Math.log(a),u=.5*Math.exp(2*i/3),h=.5*Math.sqrt(i*u*(a-u)/a);o-a/2<0&&(h*=-1),c(t,r,Math.max(n,Math.floor(r-o*u/a+h)),Math.min(e,Math.floor(r+(a-o)*u/a+h)))}var f=t[r],s=n,l=e;for(p(t,n,r),t[e]>f&&p(t,n,e);s<l;){for(p(t,s,l),s++,l--;t[s]<f;)s++;for(;t[l]>f;)l--}t[n]===f?p(t,n,l):p(t,++l,e),l<=r&&(n=l+1),r<=l&&(e=l-1)}}function p(t,r,n){var e=t[r];t[r]=t[n],t[n]=e}function s(t,r){var n=t.slice();if(Array.isArray(r)){!function(t,r){for(var n=[0],e=0;e<r.length;e++)n.push(w(t.length,r[e]));n.push(t.length-1),n.sort(v);var a=[0,n.length-1];for(;a.length;){var o=Math.ceil(a.pop()),i=Math.floor(a.pop());if(!(o-i<=1)){var u=Math.floor((i+o)/2);l(t,n[u],n[i],n[o]),a.push(i,u,u,o)}}}(n,r);for(var e=[],a=0;a<r.length;a++)e[a]=i(n,r[a]);return e}return l(n,w(n.length,r),0,n.length-1),i(n,r)}function l(t,r,n,e){r%1==0?c(t,r,n,e):(c(t,r=Math.floor(r),n,e),c(t,r+1,r+1,e))}function v(t,r){return t-r}function w(t,r){var n=t*r;return 1===r?t-1:0===r?0:n%1!=0?Math.ceil(n)-1:t%2==0?n-.5:n}function M(t,r){if(r<t[0])return 0;if(r>t[t.length-1])return 1;var n=function(t,r){var n=0,e=0,a=t.length;for(;e<a;)r<=t[n=e+a>>>1]?a=n:e=-~n;return e}(t,r);if(t[n]!==r)return n/t.length;n++;var e=function(t,r){var n=0,e=0,a=t.length;for(;e<a;)r>=t[n=e+a>>>1]?e=-~n:a=n;return e}(t,r);if(e===n)return n/t.length;var a=e-n+1;return a*(e+n)/2/a/t.length}function m(t){var r=s(t,.75),n=s(t,.25);if("number"==typeof r&&"number"==typeof n)return r-n}function d(t){return+s(t,.5)}function b(t){for(var r=d(t),n=[],e=0;e<t.length;e++)n.push(Math.abs(t[e]-r));return d(n)}function q(t,r){r=r||Math.random;for(var n,e,a=t.length;0<a;)e=Math.floor(r()*a--),n=t[a],t[a]=t[e],t[e]=n;return t}function E(t,r){return q(t.slice().slice(),r)}function y(t){for(var r,n=0,e=0;e<t.length;e++)0!==e&&t[e]===r||(r=t[e],n++);return n}function S(t,r){for(var n=[],e=0;e<t;e++){for(var a=[],o=0;o<r;o++)a.push(0);n.push(a)}return n}function x(t,r,n,e){var a;if(0<t){var o=(n[r]-n[t-1])/(r-t+1);a=e[r]-e[t-1]-(r-t+1)*o*o}else a=e[r]-n[r]*n[r]/(r+1);return a<0?0:a}function P(t,r,n,e,a,o,i){if(!(r<t)){var u=Math.floor((t+r)/2);e[n][u]=e[n-1][u-1],a[n][u]=u;var h=n;n<t&&(h=Math.max(h,a[n][t-1]||0)),h=Math.max(h,a[n-1][u]||0);var f,s,l,c=u-1;r<e.length-1&&(c=Math.min(c,a[n][r+1]||0));for(var g=c;h<=g&&!((f=x(g,u,o,i))+e[n-1][h-1]>=e[n][u]);--g)(s=x(h,u,o,i)+e[n-1][h-1])<e[n][u]&&(e[n][u]=s,a[n][u]=h),h++,(l=f+e[n-1][g-1])<e[n][u]&&(e[n][u]=l,a[n][u]=g);P(t,u-1,n,e,a,o,i),P(u+1,r,n,e,a,o,i)}}function k(t,r){if(t.length!==r.length)throw new Error("sampleCovariance requires samples with equal lengths");if(t.length<2)throw new Error("sampleCovariance requires at least two data points in each sample");for(var n=g(t),e=g(r),a=0,o=0;o<t.length;o++)a+=(t[o]-n)*(r[o]-e);return a/(t.length-1)}function I(t){if(t.length<2)throw new Error("sampleVariance requires at least two data points");return n(t,2)/(t.length-1)}function D(t){var r=I(t);return Math.sqrt(r)}function C(t,r,n,e){return(t*r+n*e)/(r+e)}function T(t){if(0===t.length)throw new Error("rootMeanSquare requires at least one data point");for(var r=0,n=0;n<t.length;n++)r+=Math.pow(t[n],2);return Math.sqrt(r/t.length)}function _(){this.totalCount=0,this.data={}}function F(){this.weights=[],this.bias=0}_.prototype.train=function(t,r){for(var n in this.data[r]||(this.data[r]={}),t){var e=t[n];void 0===this.data[r][n]&&(this.data[r][n]={}),void 0===this.data[r][n][e]&&(this.data[r][n][e]=0),this.data[r][n][e]++}this.totalCount++},_.prototype.score=function(t){var r,n={};for(var e in t){var a=t[e];for(r in this.data)n[r]={},this.data[r][e]?n[r][e+"_"+a]=(this.data[r][e][a]||0)/this.totalCount:n[r][e+"_"+a]=0}var o={};for(r in n)for(var i in o[r]=0,n[r])o[r]+=n[r][i];return o},F.prototype.predict=function(t){if(t.length!==this.weights.length)return null;for(var r=0,n=0;n<this.weights.length;n++)r+=this.weights[n]*t[n];return 0<(r+=this.bias)?1:0},F.prototype.train=function(t,r){if(0!==r&&1!==r)return null;t.length!==this.weights.length&&(this.weights=t,this.bias=1);var n=this.predict(t);if(n!==r){for(var e=r-n,a=0;a<this.weights.length;a++)this.weights[a]+=e*t[a];this.bias+=e}return this};var N=1e-4;function R(t){if(t<0)throw new Error("factorial requires a non-negative value");if(Math.floor(t)!==t)throw new Error("factorial requires an integer input");for(var r=1,n=2;n<=t;n++)r*=n;return r}var A=[.9999999999999971,57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],z=Math.log(Math.sqrt(2*Math.PI));var V={1:{.995:0,.99:0,.975:0,.95:0,.9:.02,.5:.45,.1:2.71,.05:3.84,.025:5.02,.01:6.63,.005:7.88},2:{.995:.01,.99:.02,.975:.05,.95:.1,.9:.21,.5:1.39,.1:4.61,.05:5.99,.025:7.38,.01:9.21,.005:10.6},3:{.995:.07,.99:.11,.975:.22,.95:.35,.9:.58,.5:2.37,.1:6.25,.05:7.81,.025:9.35,.01:11.34,.005:12.84},4:{.995:.21,.99:.3,.975:.48,.95:.71,.9:1.06,.5:3.36,.1:7.78,.05:9.49,.025:11.14,.01:13.28,.005:14.86},5:{.995:.41,.99:.55,.975:.83,.95:1.15,.9:1.61,.5:4.35,.1:9.24,.05:11.07,.025:12.83,.01:15.09,.005:16.75},6:{.995:.68,.99:.87,.975:1.24,.95:1.64,.9:2.2,.5:5.35,.1:10.65,.05:12.59,.025:14.45,.01:16.81,.005:18.55},7:{.995:.99,.99:1.25,.975:1.69,.95:2.17,.9:2.83,.5:6.35,.1:12.02,.05:14.07,.025:16.01,.01:18.48,.005:20.28},8:{.995:1.34,.99:1.65,.975:2.18,.95:2.73,.9:3.49,.5:7.34,.1:13.36,.05:15.51,.025:17.53,.01:20.09,.005:21.96},9:{.995:1.73,.99:2.09,.975:2.7,.95:3.33,.9:4.17,.5:8.34,.1:14.68,.05:16.92,.025:19.02,.01:21.67,.005:23.59},10:{.995:2.16,.99:2.56,.975:3.25,.95:3.94,.9:4.87,.5:9.34,.1:15.99,.05:18.31,.025:20.48,.01:23.21,.005:25.19},11:{.995:2.6,.99:3.05,.975:3.82,.95:4.57,.9:5.58,.5:10.34,.1:17.28,.05:19.68,.025:21.92,.01:24.72,.005:26.76},12:{.995:3.07,.99:3.57,.975:4.4,.95:5.23,.9:6.3,.5:11.34,.1:18.55,.05:21.03,.025:23.34,.01:26.22,.005:28.3},13:{.995:3.57,.99:4.11,.975:5.01,.95:5.89,.9:7.04,.5:12.34,.1:19.81,.05:22.36,.025:24.74,.01:27.69,.005:29.82},14:{.995:4.07,.99:4.66,.975:5.63,.95:6.57,.9:7.79,.5:13.34,.1:21.06,.05:23.68,.025:26.12,.01:29.14,.005:31.32},15:{.995:4.6,.99:5.23,.975:6.27,.95:7.26,.9:8.55,.5:14.34,.1:22.31,.05:25,.025:27.49,.01:30.58,.005:32.8},16:{.995:5.14,.99:5.81,.975:6.91,.95:7.96,.9:9.31,.5:15.34,.1:23.54,.05:26.3,.025:28.85,.01:32,.005:34.27},17:{.995:5.7,.99:6.41,.975:7.56,.95:8.67,.9:10.09,.5:16.34,.1:24.77,.05:27.59,.025:30.19,.01:33.41,.005:35.72},18:{.995:6.26,.99:7.01,.975:8.23,.95:9.39,.9:10.87,.5:17.34,.1:25.99,.05:28.87,.025:31.53,.01:34.81,.005:37.16},19:{.995:6.84,.99:7.63,.975:8.91,.95:10.12,.9:11.65,.5:18.34,.1:27.2,.05:30.14,.025:32.85,.01:36.19,.005:38.58},20:{.995:7.43,.99:8.26,.975:9.59,.95:10.85,.9:12.44,.5:19.34,.1:28.41,.05:31.41,.025:34.17,.01:37.57,.005:40},21:{.995:8.03,.99:8.9,.975:10.28,.95:11.59,.9:13.24,.5:20.34,.1:29.62,.05:32.67,.025:35.48,.01:38.93,.005:41.4},22:{.995:8.64,.99:9.54,.975:10.98,.95:12.34,.9:14.04,.5:21.34,.1:30.81,.05:33.92,.025:36.78,.01:40.29,.005:42.8},23:{.995:9.26,.99:10.2,.975:11.69,.95:13.09,.9:14.85,.5:22.34,.1:32.01,.05:35.17,.025:38.08,.01:41.64,.005:44.18},24:{.995:9.89,.99:10.86,.975:12.4,.95:13.85,.9:15.66,.5:23.34,.1:33.2,.05:36.42,.025:39.36,.01:42.98,.005:45.56},25:{.995:10.52,.99:11.52,.975:13.12,.95:14.61,.9:16.47,.5:24.34,.1:34.28,.05:37.65,.025:40.65,.01:44.31,.005:46.93},26:{.995:11.16,.99:12.2,.975:13.84,.95:15.38,.9:17.29,.5:25.34,.1:35.56,.05:38.89,.025:41.92,.01:45.64,.005:48.29},27:{.995:11.81,.99:12.88,.975:14.57,.95:16.15,.9:18.11,.5:26.34,.1:36.74,.05:40.11,.025:43.19,.01:46.96,.005:49.65},28:{.995:12.46,.99:13.57,.975:15.31,.95:16.93,.9:18.94,.5:27.34,.1:37.92,.05:41.34,.025:44.46,.01:48.28,.005:50.99},29:{.995:13.12,.99:14.26,.975:16.05,.95:17.71,.9:19.77,.5:28.34,.1:39.09,.05:42.56,.025:45.72,.01:49.59,.005:52.34},30:{.995:13.79,.99:14.95,.975:16.79,.95:18.49,.9:20.6,.5:29.34,.1:40.26,.05:43.77,.025:46.98,.01:50.89,.005:53.67},40:{.995:20.71,.99:22.16,.975:24.43,.95:26.51,.9:29.05,.5:39.34,.1:51.81,.05:55.76,.025:59.34,.01:63.69,.005:66.77},50:{.995:27.99,.99:29.71,.975:32.36,.95:34.76,.9:37.69,.5:49.33,.1:63.17,.05:67.5,.025:71.42,.01:76.15,.005:79.49},60:{.995:35.53,.99:37.48,.975:40.48,.95:43.19,.9:46.46,.5:59.33,.1:74.4,.05:79.08,.025:83.3,.01:88.38,.005:91.95},70:{.995:43.28,.99:45.44,.975:48.76,.95:51.74,.9:55.33,.5:69.33,.1:85.53,.05:90.53,.025:95.02,.01:100.42,.005:104.22},80:{.995:51.17,.99:53.54,.975:57.15,.95:60.39,.9:64.28,.5:79.33,.1:96.58,.05:101.88,.025:106.63,.01:112.33,.005:116.32},90:{.995:59.2,.99:61.75,.975:65.65,.95:69.13,.9:73.29,.5:89.33,.1:107.57,.05:113.14,.025:118.14,.01:124.12,.005:128.3},100:{.995:67.33,.99:70.06,.975:74.22,.95:77.93,.9:82.36,.5:99.33,.1:118.5,.05:124.34,.025:129.56,.01:135.81,.005:140.17}};var j=Math.sqrt(2*Math.PI),B={gaussian:function(t){return Math.exp(-.5*t*t)/j}},K={nrd:function(t){var r=D(t),n=m(t);return"number"==typeof n&&(r=Math.min(r,n/1.34)),1.06*r*Math.pow(t.length,-.2)}};function O(e,t,r){var a,o;if(void 0===t)a=B.gaussian;else if("string"==typeof t){if(!B[t])throw new Error('Unknown kernel "'+t+'"');a=B[t]}else a=t;if(void 0===r)o=K.nrd(e);else if("string"==typeof r){if(!K[r])throw new Error('Unknown bandwidth method "'+r+'"');o=K[r](e)}else o=r;return function(t){var r=0,n=0;for(r=0;r<e.length;r++)n+=a((t-e[r])/o);return n/o/e.length}}var U=Math.sqrt(2*Math.PI);function G(t){for(var r=t,n=t,e=1;e<15;e++)r+=n*=t*t/(2*e+1);return Math.round(1e4*(.5+r/U*Math.exp(-t*t/2)))/1e4}for(var H=[],L=0;L<=3.09;L+=.01)H.push(G(L));function W(t){var r=1/(1+.5*Math.abs(t)),n=r*Math.exp(-Math.pow(t,2)-1.26551223+1.00002368*r+.37409196*Math.pow(r,2)+.09678418*Math.pow(r,3)-.18628806*Math.pow(r,4)+.27886807*Math.pow(r,5)-1.13520398*Math.pow(r,6)+1.48851587*Math.pow(r,7)-.82215223*Math.pow(r,8)+.17087277*Math.pow(r,9));return 0<=t?1-n:n-1}function J(t){var r=8*(Math.PI-3)/(3*Math.PI*(4-Math.PI)),n=Math.sqrt(Math.sqrt(Math.pow(2/(Math.PI*r)+Math.log(1-t*t)/2,2)-Math.log(1-t*t)/r)-(2/(Math.PI*r)+Math.log(1-t*t)/2));return 0<=t?n:-n}function Q(t){if("number"==typeof t)return t<0?-1:0===t?0:1;throw new TypeError("not a number")}t.linearRegression=function(t){var r,n,e=t.length;if(1===e)n=t[r=0][1];else{for(var a,o,i,u=0,h=0,f=0,s=0,l=0;l<e;l++)u+=o=(a=t[l])[0],h+=i=a[1],f+=o*o,s+=o*i;n=h/e-(r=(e*s-u*h)/(e*f-u*u))*u/e}return{m:r,b:n}},t.linearRegressionLine=function(r){return function(t){return r.b+r.m*t}},t.standardDeviation=a,t.rSquared=function(t,r){if(t.length<2)return 1;for(var n,e=0,a=0;a<t.length;a++)e+=t[a][1];n=e/t.length;for(var o=0,i=0;i<t.length;i++)o+=Math.pow(n-t[i][1],2);for(var u=0,h=0;h<t.length;h++)u+=Math.pow(t[h][1]-r(t[h][0]),2);return 1-u/o},t.mode=function(t){return o(f(t))},t.modeFast=function(t){for(var r,n=new Map,e=0,a=0;a<t.length;a++){var o=n.get(t[a]);void 0===o?o=1:o++,e<o&&(r=t[a],e=o),n.set(t[a],o)}if(0===e)throw new Error("mode requires at last one data point");return r},t.modeSorted=o,t.min=u,t.max=h,t.extent=function(t){if(0===t.length)throw new Error("extent requires at least one data point");for(var r=t[0],n=t[0],e=1;e<t.length;e++)t[e]>n&&(n=t[e]),t[e]<r&&(r=t[e]);return[r,n]},t.minSorted=function(t){return t[0]},t.maxSorted=function(t){return t[t.length-1]},t.extentSorted=function(t){return[t[0],t[t.length-1]]},t.sum=r,t.sumSimple=function(t){for(var r=0,n=0;n<t.length;n++)r+=t[n];return r},t.product=function(t){for(var r=1,n=0;n<t.length;n++)r*=t[n];return r},t.quantile=s,t.quantileSorted=i,t.quantileRank=function(t,r){return M(f(t),r)},t.quantileRankSorted=M,t.interquartileRange=m,t.iqr=m,t.medianAbsoluteDeviation=b,t.mad=b,t.chunk=function(t,r){var n=[];if(r<1)throw new Error("chunk size must be a positive number");if(Math.floor(r)!==r)throw new Error("chunk size must be an integer");for(var e=0;e<t.length;e+=r)n.push(t.slice(e,e+r));return n},t.sampleWithReplacement=function(t,r,n){if(0===t.length)return[];n=n||Math.random;for(var e=t.length,a=[],o=0;o<r;o++){var i=Math.floor(n()*e);a.push(t[i])}return a},t.shuffle=E,t.shuffleInPlace=q,t.sample=function(t,r,n){return E(t,n).slice(0,r)},t.ckmeans=function(t,r){if(r>t.length)throw new Error("cannot generate more classes than there are data values");var n=f(t);if(1===y(n))return[n];var e=S(r,n.length),a=S(r,n.length);!function(t,r,n){for(var e,a=r[0].length,o=t[Math.floor(a/2)],i=[],u=[],h=0;h<a;++h)e=t[h]-o,0===h?(i.push(e),u.push(e*e)):(i.push(i[h-1]+e),u.push(u[h-1]+e*e)),r[0][h]=x(0,h,i,u),n[0][h]=0;for(var f=1;f<r.length;++f)P(f<r.length-1?f:a-1,a-1,f,r,n,i,u)}(n,e,a);for(var o=[],i=a[0].length-1,u=a.length-1;0<=u;u--){var h=a[u][i];o[u]=n.slice(h,i+1),0<u&&(i=h-1)}return o},t.uniqueCountSorted=y,t.sumNthPowerDeviations=n,t.equalIntervalBreaks=function(t,r){if(t.length<2)return t;for(var n=u(t),e=h(t),a=[n],o=(e-n)/r,i=1;i<r;i++)a.push(a[0]+o*i);return a.push(e),a},t.sampleCovariance=k,t.sampleCorrelation=function(t,r){return k(t,r)/D(t)/D(r)},t.sampleVariance=I,t.sampleStandardDeviation=D,t.sampleSkewness=function(t){if(t.length<3)throw new Error("sampleSkewness requires at least three data points");for(var r,n=g(t),e=0,a=0,o=0;o<t.length;o++)e+=(r=t[o]-n)*r,a+=r*r*r;var i=t.length-1,u=Math.sqrt(e/i),h=t.length;return h*a/((h-1)*(h-2)*Math.pow(u,3))},t.sampleKurtosis=function(t){var r=t.length;if(r<4)throw new Error("sampleKurtosis requires at least four data points");for(var n,e=g(t),a=0,o=0,i=0;i<r;i++)a+=(n=t[i]-e)*n,o+=n*n*n*n;return(r-1)/((r-2)*(r-3))*(r*(r+1)*o/(a*a)-3*(r-1))},t.permutationsHeap=function(t){for(var r=new Array(t.length),n=[t.slice()],e=0;e<t.length;e++)r[e]=0;for(e=0;e<t.length;)if(r[e]<e){var a=0;e%2!=0&&(a=r[e]);var o=t[a];t[a]=t[e],t[e]=o,n.push(t.slice()),r[e]++,e=0}else r[e]=0,e++;return n},t.combinations=function t(r,n){var e,a,o,i,u=[];for(e=0;e<r.length;e++)if(1===n)u.push([r[e]]);else for(o=t(r.slice(e+1,r.length),n-1),a=0;a<o.length;a++)(i=o[a]).unshift(r[e]),u.push(i);return u},t.combinationsReplacement=function t(r,n){for(var e=[],a=0;a<r.length;a++)if(1===n)e.push([r[a]]);else for(var o=t(r.slice(a,r.length),n-1),i=0;i<o.length;i++)e.push([r[a]].concat(o[i]));return e},t.addToMean=function(t,r,n){return t+(n-t)/(r+1)},t.combineMeans=C,t.combineVariances=function(t,r,n,e,a,o){var i=C(r,n,a,o);return(n*(t+Math.pow(r-i,2))+o*(e+Math.pow(a-i,2)))/(n+o)},t.geometricMean=function(t){if(0===t.length)throw new Error("geometricMean requires at least one data point");for(var r=1,n=0;n<t.length;n++){if(t[n]<=0)throw new Error("geometricMean requires only positive numbers as input");r*=t[n]}return Math.pow(r,1/t.length)},t.harmonicMean=function(t){if(0===t.length)throw new Error("harmonicMean requires at least one data point");for(var r=0,n=0;n<t.length;n++){if(t[n]<=0)throw new Error("harmonicMean requires only positive numbers as input");r+=1/t[n]}return t.length/r},t.average=g,t.mean=g,t.median=d,t.medianSorted=function(t){return i(t,.5)},t.subtractFromMean=function(t,r,n){return(t*r-n)/(r-1)},t.rootMeanSquare=T,t.rms=T,t.variance=e,t.tTest=function(t,r){return(g(t)-r)/(a(t)/Math.sqrt(t.length))},t.tTestTwoSample=function(t,r,n){var e=t.length,a=r.length;if(!e||!a)return null;n||(n=0);var o=g(t),i=g(r),u=I(t),h=I(r);if("number"==typeof o&&"number"==typeof i&&"number"==typeof u&&"number"==typeof h){var f=((e-1)*u+(a-1)*h)/(e+a-2);return(o-i-n)/Math.sqrt(f*(1/e+1/a))}},t.BayesianClassifier=_,t.bayesian=_,t.PerceptronModel=F,t.perceptron=F,t.epsilon=N,t.factorial=R,t.gamma=function t(r){if("number"==typeof(n=r)&&isFinite(n)&&Math.floor(n)===n)return r<=0?NaN:R(r-1);var n;if(--r<0)return Math.PI/(Math.sin(Math.PI*-r)*t(-r));var e=r+.25;return Math.pow(r/Math.E,r)*Math.sqrt(2*Math.PI*(r+1/6))*(1+1/144/Math.pow(e,2)-1/12960/Math.pow(e,3)-257/207360/Math.pow(e,4)-52/2612736/Math.pow(e,5)+5741173/9405849600/Math.pow(e,6)+37529/18811699200/Math.pow(e,7))},t.gammaln=function(t){if(t<=0)return 1/0;t--;for(var r=A[0],n=1;n<15;n++)r+=A[n]/(t+n);var e=5.2421875+t;return z+Math.log(r)-e+(t+.5)*Math.log(e)},t.bernoulliDistribution=function(t){if(t<0||1<t)throw new Error("bernoulliDistribution requires probability to be between 0 and 1 inclusive");return[1-t,t]},t.binomialDistribution=function(t,r){if(!(r<0||1<r||t<=0||t%1!=0)){for(var n=0,e=0,a=[],o=1;a[n]=o*Math.pow(r,n)*Math.pow(1-r,t-n),e+=a[n],o=o*(t-++n+1)/n,e<1-N;);return a}},t.poissonDistribution=function(t){if(!(t<=0)){for(var r=0,n=0,e=[],a=1;e[r]=Math.exp(-t)*Math.pow(t,r)/a,n+=e[r],a*=++r,n<1-N;);return e}},t.chiSquaredDistributionTable=V,t.chiSquaredGoodnessOfFit=function(t,r,n){for(var e,a,o=0,i=r(g(t)),u=[],h=[],f=0;f<t.length;f++)void 0===u[t[f]]&&(u[t[f]]=0),u[t[f]]++;for(f=0;f<u.length;f++)void 0===u[f]&&(u[f]=0);for(a in i)a in u&&(h[+a]=i[a]*t.length);for(a=h.length-1;0<=a;a--)h[a]<3&&(h[a-1]+=h[a],h.pop(),u[a-1]+=u[a],u.pop());for(a=0;a<u.length;a++)o+=Math.pow(u[a]-h[a],2)/h[a];return e=u.length-1-1,V[e][n]<o},t.kernelDensityEstimation=O,t.kde=O,t.zScore=function(t,r,n){return(t-r)/n},t.cumulativeStdNormalProbability=function(t){var r=Math.abs(t),n=Math.min(Math.round(100*r),H.length-1);return 0<=t?H[n]:+(1-H[n]).toFixed(4)},t.standardNormalTable=H,t.errorFunction=W,t.erf=W,t.inverseErrorFunction=J,t.probit=function(t){return 0===t?t=N:1<=t&&(t=1-N),Math.sqrt(2)*J(2*t-1)},t.permutationTest=function(t,r,n,e){if(void 0===e&&(e=1e4),void 0===n&&(n="two_side"),"two_side"!==n&&"greater"!==n&&"less"!==n)throw new Error("`alternative` must be either 'two_side', 'greater', or 'less'");for(var a=g(t)-g(r),o=new Array(e),i=t.concat(r),u=Math.floor(i.length/2),h=0;h<e;h++){q(i);var f=i.slice(0,u),s=i.slice(u,i.length),l=g(f)-g(s);o[h]=l}var c=0;if("two_side"===n)for(h=0;h<=e;h++)Math.abs(o[h])>=Math.abs(a)&&(c+=1);else if("greater"===n)for(h=0;h<=e;h++)o[h]>=a&&(c+=1);else for(h=0;h<=e;h++)o[h]<=a&&(c+=1);return c/e},t.bisect=function(t,r,n,e,a){if("function"!=typeof t)throw new TypeError("func must be a function");for(var o=0;o<e;o++){var i=(r+n)/2;if(0===t(i)||Math.abs((n-r)/2)<a)return i;Q(t(i))===Q(t(r))?r=i:n=i}throw new Error("maximum number of iterations exceeded")},t.quickselect=c,t.sign=Q,t.numericSort=f,Object.defineProperty(t,"__esModule",{value:!0})});
	//# sourceMappingURL=simple-statistics.min.js.map


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["G2_3"] = factory();
		else
			root["G2_3"] = factory();
	})(typeof self !== 'undefined' ? self : this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 380);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The util method based on the lodash.
	 * @author dxq613@gmail.com
	 * @see https://github.com/lodash/lodash
	 */
	var G = __webpack_require__(1);

	var CommonUtil = G.CommonUtil;

	var MAX_LEVEL = 5;

	function _mix(dist, obj) {
	  for (var k in obj) {
	    if (obj.hasOwnProperty(k) && k !== 'constructor' && obj[k] !== undefined) {
	      dist[k] = obj[k];
	    }
	  }
	}

	var Util = CommonUtil.assign({
	  cloneDeep: __webpack_require__(119),
	  filter: __webpack_require__(180),
	  flatten: __webpack_require__(87),
	  groupBy: __webpack_require__(208),
	  indexOf: __webpack_require__(212),
	  isDate: __webpack_require__(217),
	  isEmpty: __webpack_require__(219),
	  isEqualWith: __webpack_require__(220),
	  isFinite: __webpack_require__(221),
	  isNaN: __webpack_require__(222),
	  isNull: __webpack_require__(224),
	  isPlainObject: __webpack_require__(225),
	  lowerFirst: __webpack_require__(226),
	  map: __webpack_require__(233),
	  maxBy: __webpack_require__(235),
	  minBy: __webpack_require__(237),
	  pick: __webpack_require__(239),
	  reduce: __webpack_require__(248),
	  replace: __webpack_require__(250),
	  round: __webpack_require__(251),
	  union: __webpack_require__(253),
	  uniq: __webpack_require__(260),
	  upperCase: __webpack_require__(261),
	  snapEqual: function snapEqual(v1, v2) {
	    return Math.abs(v1 - v2) < 0.001;
	  },
	  fixedBase: function fixedBase(v, base) {
	    var str = base.toString();
	    var index = str.indexOf('.');
	    if (index === -1) {
	      return Math.round(v);
	    }
	    var length = str.substr(index + 1).length;
	    if (length > 20) {
	      length = 20;
	    }
	    return parseFloat(v.toFixed(length));
	  },
	  mix: function mix(dist, obj1, obj2, obj3) {
	    if (obj1) {
	      _mix(dist, obj1);
	    }

	    if (obj2) {
	      _mix(dist, obj2);
	    }

	    if (obj3) {
	      _mix(dist, obj3);
	    }
	    return dist;
	  },
	  inArray: function inArray(arr, value) {
	    return arr.indexOf(value) >= 0;
	  },

	  /**
	   * 封装事件，便于使用上下文this,和便于解除事件时使用
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  wrapBehavior: function wrapBehavior(obj, action) {
	    if (obj['_wrap_' + action]) {
	      return obj['_wrap_' + action];
	    }
	    var method = function method(e) {
	      obj[action](e);
	    };
	    obj['_wrap_' + action] = method;
	    return method;
	  },

	  /**
	   * 获取封装的事件
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  getWrapBehavior: function getWrapBehavior(obj, action) {
	    return obj['_wrap_' + action];
	  },

	  /**
	   * 将用户输入的 padding 转换成 [top, right, bottom, right] 的模式
	   * @param  {Number|Array} padding 输入的padding
	   * @return {Array} 四个padding 值
	   */
	  toAllPadding: function toAllPadding(padding) {
	    var top = 0;
	    var left = 0;
	    var right = 0;
	    var bottom = 0;

	    if (Util.isNumber(padding) || Util.isString(padding)) {
	      top = left = right = bottom = padding;
	    } else if (Util.isArray(padding)) {
	      top = padding[0];
	      right = !Util.isNil(padding[1]) ? padding[1] : padding[0];
	      bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];
	      left = !Util.isNil(padding[3]) ? padding[3] : right;
	    } else if (Util.isObject(padding)) {
	      top = padding.top || 0;
	      right = padding.right || 0;
	      bottom = padding.bottom || 0;
	      left = padding.left || 0;
	    }
	    return [top, right, bottom, left];
	  },

	  /**
	   * 替换字符串中的字段.
	   * @param {String} str 模版字符串
	   * @param {Object} o json data
	   * @return {String}     替换后的字符串
	   */
	  substitute: function substitute(str, o) {
	    if (!str || !o) {
	      return str;
	    }
	    return str.replace(/\\?\{([^{}]+)\}/g, function (match, name) {
	      if (match.charAt(0) === '\\') {
	        return match.slice(1);
	      }
	      return o[name] === undefined ? '' : o[name];
	    });
	  }
	}, CommonUtil);

	function deepMix(dst, src, level) {
	  level = level || 0;
	  for (var k in src) {
	    if (src.hasOwnProperty(k)) {
	      var value = src[k];
	      if (value !== null && Util.isPlainObject(value)) {
	        if (!Util.isPlainObject(dst[k])) {
	          dst[k] = {};
	        }
	        if (level < MAX_LEVEL) {
	          deepMix(dst[k], src[k], level + 1);
	        } else {
	          dst[k] = src[k];
	        }
	      } else if (Util.isArray(value)) {
	        dst[k] = [];
	        dst[k] = dst[k].concat(value);
	      } else if (value !== undefined) {
	        dst[k] = src[k];
	      }
	    }
	  }
	}

	Util.deepMix = function () {
	  var args = Util.toArray(arguments);
	  var rst = args[0];
	  for (var i = 1; i < args.length; i++) {
	    var source = args[i];
	    deepMix(rst, source);
	  }
	  return rst;
	};

	Util.Array = {
	  merge: function merge(dataArray) {
	    var rst = [];
	    for (var i = 0; i < dataArray.length; i++) {
	      rst = rst.concat(dataArray[i]);
	    }
	    return rst;
	  },
	  values: function values(data, name) {
	    var rst = [];
	    var tmpMap = {};
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (!Util.isArray(value)) {
	          value = [value];
	        }
	        Util.each(value, function (val) {
	          if (!tmpMap[val]) {
	            rst.push(val);
	            tmpMap[val] = true;
	          }
	        });
	      }
	    }
	    return rst;
	  },
	  getRange: function getRange(values) {
	    // 存在 NaN 时，min,max 判定会出问题
	    values = Util.filter(values, function (v) {
	      return !isNaN(v);
	    });
	    if (!values.length) {
	      // 如果没有数值则直接返回0
	      return {
	        min: 0,
	        max: 0
	      };
	    }
	    if (Util.isArray(values[0])) {
	      var tmp = [];
	      for (var i = 0; i < values.length; i++) {
	        tmp = tmp.concat(values[i]);
	      }
	      values = tmp;
	    }
	    var max = Math.max.apply(null, values);
	    var min = Math.min.apply(null, values);
	    return {
	      min: min,
	      max: max
	    };
	  },
	  firstValue: function firstValue(data, name) {
	    var rst = null;
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (Util.isArray(value)) {
	          rst = value[0];
	        } else {
	          rst = value;
	        }
	        break;
	      }
	    }
	    return rst;
	  },
	  group: function group(data, condition) {
	    if (!condition) {
	      return [data];
	    }
	    var groups = Util.Array.groupToMap(data, condition);
	    var array = [];
	    for (var i in groups) {
	      array.push(groups[i]);
	    }
	    return array;
	  },
	  groupToMap: function groupToMap(data, condition) {
	    if (!condition) {
	      return {
	        0: data
	      };
	    }
	    if (!Util.isFunction(condition)) {
	      var paramsCondition = Util.isArray(condition) ? condition : condition.replace(/\s+/g, '').split('*');
	      condition = function condition(row) {
	        var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序
	        for (var i = 0, l = paramsCondition.length; i < l; i++) {
	          unique += row[paramsCondition[i]] && row[paramsCondition[i]].toString();
	        }
	        return unique;
	      };
	    }
	    var groups = Util.groupBy(data, condition);
	    return groups;
	  },

	  remove: CommonUtil.remove
	};

	module.exports = Util;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function webpackUniversalModuleDefinition(root, factory) {
	  if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["G"] = factory();else root["G"] = factory();
	})(this, function () {
	  return (/******/function (modules) {
	      // webpackBootstrap
	      /******/ // The module cache
	      /******/var installedModules = {};
	      /******/
	      /******/ // The require function
	      /******/function __webpack_require__(moduleId) {
	        /******/
	        /******/ // Check if module is in cache
	        /******/if (installedModules[moduleId]) {
	          /******/return installedModules[moduleId].exports;
	          /******/
	        }
	        /******/ // Create a new module (and put it into the cache)
	        /******/var module = installedModules[moduleId] = {
	          /******/i: moduleId,
	          /******/l: false,
	          /******/exports: {}
	          /******/ };
	        /******/
	        /******/ // Execute the module function
	        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	        /******/
	        /******/ // Flag the module as loaded
	        /******/module.l = true;
	        /******/
	        /******/ // Return the exports of the module
	        /******/return module.exports;
	        /******/
	      }
	      /******/
	      /******/
	      /******/ // expose the modules object (__webpack_modules__)
	      /******/__webpack_require__.m = modules;
	      /******/
	      /******/ // expose the module cache
	      /******/__webpack_require__.c = installedModules;
	      /******/
	      /******/ // define getter function for harmony exports
	      /******/__webpack_require__.d = function (exports, name, getter) {
	        /******/if (!__webpack_require__.o(exports, name)) {
	          /******/Object.defineProperty(exports, name, {
	            /******/configurable: false,
	            /******/enumerable: true,
	            /******/get: getter
	            /******/ });
	          /******/
	        }
	        /******/
	      };
	      /******/
	      /******/ // getDefaultExport function for compatibility with non-harmony modules
	      /******/__webpack_require__.n = function (module) {
	        /******/var getter = module && module.__esModule ?
	        /******/function getDefault() {
	          return module['default'];
	        } :
	        /******/function getModuleExports() {
	          return module;
	        };
	        /******/__webpack_require__.d(getter, 'a', getter);
	        /******/return getter;
	        /******/
	      };
	      /******/
	      /******/ // Object.prototype.hasOwnProperty.call
	      /******/__webpack_require__.o = function (object, property) {
	        return Object.prototype.hasOwnProperty.call(object, property);
	      };
	      /******/
	      /******/ // __webpack_public_path__
	      /******/__webpack_require__.p = "";
	      /******/
	      /******/ // Load entry module and return exports
	      /******/return __webpack_require__(__webpack_require__.s = 113);
	      /******/
	    }(
	    /************************************************************************/
	    /******/[
	    /* 0 */
	    /***/function (module, exports, __webpack_require__) {

	      var CommonUtil = __webpack_require__(16);
	      var DomUtil = __webpack_require__(86);

	      var Util = {};

	      CommonUtil.merge(Util, CommonUtil, DomUtil, {
	        mixin: function mixin(c, mixins) {
	          var Param = c.CFG ? 'CFG' : 'ATTRS';
	          if (c && mixins) {
	            c._mixins = mixins;
	            c[Param] = c[Param] || {};
	            var temp = {};
	            Util.each(mixins, function (mixin) {
	              Util.augment(c, mixin);
	              var attrs = mixin[Param];
	              if (attrs) {
	                Util.merge(temp, attrs);
	              }
	            });
	            c[Param] = Util.merge(temp, c[Param]);
	          }
	        }
	      });

	      module.exports = Util;

	      /***/
	    },
	    /* 1 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Element = __webpack_require__(89);
	      var Inside = __webpack_require__(2);

	      var Shape = function Shape(cfg) {
	        Shape.superclass.constructor.call(this, cfg);
	      };

	      Shape.ATTRS = {};

	      Util.extend(Shape, Element);

	      Util.augment(Shape, {
	        isShape: true,
	        createPath: function createPath() {},
	        drawInner: function drawInner(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          self.createPath(context);
	          var originOpacity = context.globalAlpha;
	          if (self.hasFill()) {
	            var fillOpacity = attrs.fillOpacity;
	            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	              context.globalAlpha = fillOpacity;
	              context.fill();
	              context.globalAlpha = originOpacity;
	            } else {
	              context.fill();
	            }
	          }
	          if (self.hasStroke()) {
	            var lineWidth = self.__attrs.lineWidth;
	            if (lineWidth > 0) {
	              var strokeOpacity = attrs.strokeOpacity;
	              if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {
	                context.globalAlpha = strokeOpacity;
	              }
	              context.stroke();
	            }
	          }
	        },

	        /**
	         * 节点是否在图形中
	         * @param  {Number}  x x 坐标
	         * @param  {Number}  y y 坐标
	         * @return {Boolean}  是否在图形中
	         */
	        isPointInPath: function isPointInPath() {
	          return false;
	        },

	        /**
	         * 击中图形时是否进行包围盒判断
	         * @return {Boolean} [description]
	         */
	        isHitBox: function isHitBox() {
	          return true;
	        },

	        /**
	         * 节点是否能够被击中
	         * @param {Number} x x坐标
	         * @param {Number} y y坐标
	         * @return {Boolean} 是否在图形中
	         */
	        isHit: function isHit(x, y) {
	          var self = this;
	          var v = [x, y, 1];
	          self.invert(v); // canvas

	          if (self.isHitBox()) {
	            var box = self.getBBox();
	            if (box && !Inside.box(box.minX, box.maxX, box.minY, box.maxY, v[0], v[1])) {
	              return false;
	            }
	          }
	          var clip = self.__attrs.clip;
	          if (clip) {
	            if (clip.inside(x, y)) {
	              return self.isPointInPath(v[0], v[1]);
	            }
	          } else {
	            return self.isPointInPath(v[0], v[1]);
	          }
	          return false;
	        },

	        /**
	         * @protected
	         * 计算包围盒
	         * @return {Object} 包围盒
	         */
	        calculateBox: function calculateBox() {
	          return null;
	        },

	        // 获取拾取时线的宽度，需要考虑附加的线的宽度
	        getHitLineWidth: function getHitLineWidth() {
	          var attrs = this.__attrs;
	          // if (!attrs.stroke) {
	          //   return 0;
	          // }
	          var lineAppendWidth = attrs.lineAppendWidth || 0;
	          var lineWidth = attrs.lineWidth || 0;
	          return lineWidth + lineAppendWidth;
	        },

	        // 清除当前的矩阵
	        clearTotalMatrix: function clearTotalMatrix() {
	          this.__cfg.totalMatrix = null;
	          this.__cfg.region = null;
	        },
	        clearBBox: function clearBBox() {
	          this.__cfg.box = null;
	          this.__cfg.region = null;
	        },
	        getBBox: function getBBox() {
	          var box = this.__cfg.box;
	          // 延迟计算
	          if (!box) {
	            box = this.calculateBox();
	            if (box) {
	              box.x = box.minX;
	              box.y = box.minY;
	              box.width = box.maxX - box.minX;
	              box.height = box.maxY - box.minY;
	            }
	            this.__cfg.box = box;
	          }
	          return box;
	        }
	      });

	      module.exports = Shape;

	      /***/
	    },
	    /* 2 */
	    /***/function (module, exports, __webpack_require__) {

	      var Line = __webpack_require__(52);
	      var Quadratic = __webpack_require__(53);
	      var Cubic = __webpack_require__(31);
	      var Arc = __webpack_require__(54);

	      module.exports = {
	        line: function line(x1, y1, x2, y2, lineWidth, x, y) {
	          var box = Line.box(x1, y1, x2, y2, lineWidth);

	          if (!this.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	            return false;
	          }

	          var d = Line.pointDistance(x1, y1, x2, y2, x, y);
	          if (isNaN(d)) {
	            return false;
	          }
	          return d <= lineWidth / 2;
	        },
	        polyline: function polyline(points, lineWidth, x, y) {
	          var l = points.length - 1;
	          if (l < 1) {
	            return false;
	          }
	          for (var i = 0; i < l; i++) {
	            var x1 = points[i][0];
	            var y1 = points[i][1];
	            var x2 = points[i + 1][0];
	            var y2 = points[i + 1][1];

	            if (this.line(x1, y1, x2, y2, lineWidth, x, y)) {
	              return true;
	            }
	          }

	          return false;
	        },
	        cubicline: function cubicline(x1, y1, x2, y2, x3, y3, x4, y4, lineWidth, x, y) {
	          return Cubic.pointDistance(x1, y1, x2, y2, x3, y3, x4, y4, x, y) <= lineWidth / 2;
	        },
	        quadraticline: function quadraticline(x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	          return Quadratic.pointDistance(x1, y1, x2, y2, x3, y3, x, y) <= lineWidth / 2;
	        },
	        arcline: function arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y) {
	          return Arc.pointDistance(cx, cy, r, startAngle, endAngle, clockwise, x, y) <= lineWidth / 2;
	        },
	        rect: function rect(rx, ry, width, height, x, y) {
	          return rx <= x && x <= rx + width && ry <= y && y <= ry + height;
	        },
	        circle: function circle(cx, cy, r, x, y) {
	          return Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(r, 2);
	        },
	        box: function box(minX, maxX, minY, maxY, x, y) {
	          return minX <= x && x <= maxX && minY <= y && y <= maxY;
	        }
	      };

	      /***/
	    },
	    /* 3 */
	    /***/function (module, exports, __webpack_require__) {

	      var CommonUtil = __webpack_require__(16);
	      var mat3 = __webpack_require__(231);
	      var vec3 = __webpack_require__(232);
	      var vec2 = __webpack_require__(233);

	      vec2.angle = function (v1, v2) {
	        var theta = vec2.dot(v1, v2) / (vec2.length(v1) * vec2.length(v2));
	        return Math.acos(CommonUtil.clamp(theta, -1, 1));
	      };
	      /**
	       * 向量 v1 到 向量 v2 夹角的方向
	       * @param  {Array} v1 向量
	       * @param  {Array} v2 向量
	       * @return {Boolean} >= 0 顺时针 < 0 逆时针
	       */
	      vec2.direction = function (v1, v2) {
	        return v1[0] * v2[1] - v2[0] * v1[1];
	      };
	      vec2.angleTo = function (v1, v2, direct) {
	        var angle = vec2.angle(v1, v2);
	        var angleLargeThanPI = vec2.direction(v1, v2) >= 0;
	        if (direct) {
	          if (angleLargeThanPI) {
	            return Math.PI * 2 - angle;
	          }

	          return angle;
	        }

	        if (angleLargeThanPI) {
	          return angle;
	        }
	        return Math.PI * 2 - angle;
	      };
	      vec2.vertical = function (out, v, flag) {
	        if (flag) {
	          out[0] = v[1];
	          out[1] = -1 * v[0];
	        } else {
	          out[0] = -1 * v[1];
	          out[1] = v[0];
	        }

	        return out;
	      };

	      mat3.translate = function (out, a, v) {
	        var transMat = new Array(9);
	        mat3.fromTranslation(transMat, v);
	        return mat3.multiply(out, transMat, a);
	      };

	      mat3.rotate = function (out, a, rad) {
	        var rotateMat = new Array(9);
	        mat3.fromRotation(rotateMat, rad);
	        return mat3.multiply(out, rotateMat, a);
	      };

	      mat3.scale = function (out, a, v) {
	        var scaleMat = new Array(9);
	        mat3.fromScaling(scaleMat, v);
	        return mat3.multiply(out, scaleMat, a);
	      };

	      module.exports = {
	        mat3: mat3,
	        vec2: vec2,
	        vec3: vec3,
	        transform: function transform(m, ts) {
	          m = CommonUtil.clone(m);
	          CommonUtil.each(ts, function (t) {
	            switch (t[0]) {
	              case 't':
	                mat3.translate(m, m, [t[1], t[2]]);
	                break;
	              case 's':
	                mat3.scale(m, m, [t[1], t[2]]);
	                break;
	              case 'r':
	                mat3.rotate(m, m, t[1]);
	                break;
	              case 'm':
	                mat3.multiply(m, m, t[1]);
	                break;
	              default:
	                return false;
	            }
	          });
	          return m;
	        }
	      };

	      /***/
	    },
	    /* 4 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var freeGlobal = __webpack_require__(56);

	      /** Detect free variable `self`. */
	      var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	      /** Used as a reference to the global object. */
	      var root = freeGlobal || freeSelf || Function('return this')();

	      module.exports = root;

	      /***/
	    },
	    /* 5 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is object-like. A value is object-like if it's not `null`
	       * and has a `typeof` result of "object".
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	       * @example
	       *
	       * _.isObjectLike({});
	       * // => true
	       *
	       * _.isObjectLike([1, 2, 3]);
	       * // => true
	       *
	       * _.isObjectLike(_.noop);
	       * // => false
	       *
	       * _.isObjectLike(null);
	       * // => false
	       */
	      function isObjectLike(value) {
	        return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	      }

	      module.exports = isObjectLike;

	      /***/
	    },
	    /* 6 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is classified as an `Array` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	       * @example
	       *
	       * _.isArray([1, 2, 3]);
	       * // => true
	       *
	       * _.isArray(document.body.children);
	       * // => false
	       *
	       * _.isArray('abc');
	       * // => false
	       *
	       * _.isArray(_.noop);
	       * // => false
	       */
	      var isArray = Array.isArray;

	      module.exports = isArray;

	      /***/
	    },
	    /* 7 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          getRawTag = __webpack_require__(116),
	          objectToString = __webpack_require__(117);

	      /** `Object#toString` result references. */
	      var nullTag = '[object Null]',
	          undefinedTag = '[object Undefined]';

	      /** Built-in value references. */
	      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	      /**
	       * The base implementation of `getTag` without fallbacks for buggy environments.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the `toStringTag`.
	       */
	      function baseGetTag(value) {
	        if (value == null) {
	          return value === undefined ? undefinedTag : nullTag;
	        }
	        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	      }

	      module.exports = baseGetTag;

	      /***/
	    },
	    /* 8 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is the
	       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	       * @example
	       *
	       * _.isObject({});
	       * // => true
	       *
	       * _.isObject([1, 2, 3]);
	       * // => true
	       *
	       * _.isObject(_.noop);
	       * // => true
	       *
	       * _.isObject(null);
	       * // => false
	       */
	      function isObject(value) {
	        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	        return value != null && (type == 'object' || type == 'function');
	      }

	      module.exports = isObject;

	      /***/
	    },
	    /* 9 */
	    /***/function (module, exports, __webpack_require__) {

	      var isFunction = __webpack_require__(21),
	          isLength = __webpack_require__(61);

	      /**
	       * Checks if `value` is array-like. A value is considered array-like if it's
	       * not a function and has a `value.length` that's an integer greater than or
	       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	       * @example
	       *
	       * _.isArrayLike([1, 2, 3]);
	       * // => true
	       *
	       * _.isArrayLike(document.body.children);
	       * // => true
	       *
	       * _.isArrayLike('abc');
	       * // => true
	       *
	       * _.isArrayLike(_.noop);
	       * // => false
	       */
	      function isArrayLike(value) {
	        return value != null && isLength(value.length) && !isFunction(value);
	      }

	      module.exports = isArrayLike;

	      /***/
	    },
	    /* 10 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsNative = __webpack_require__(124),
	          getValue = __webpack_require__(127);

	      /**
	       * Gets the native function at `key` of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {string} key The key of the method to get.
	       * @returns {*} Returns the function if it's native, else `undefined`.
	       */
	      function getNative(object, key) {
	        var value = getValue(object, key);
	        return baseIsNative(value) ? value : undefined;
	      }

	      module.exports = getNative;

	      /***/
	    },
	    /* 11 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Built-in value references. */
	      var _Symbol = root.Symbol;

	      module.exports = _Symbol;

	      /***/
	    },
	    /* 12 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignValue = __webpack_require__(37),
	          baseAssignValue = __webpack_require__(38);

	      /**
	       * Copies properties of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy properties from.
	       * @param {Array} props The property identifiers to copy.
	       * @param {Object} [object={}] The object to copy properties to.
	       * @param {Function} [customizer] The function to customize copied values.
	       * @returns {Object} Returns `object`.
	       */
	      function copyObject(source, props, object, customizer) {
	        var isNew = !object;
	        object || (object = {});

	        var index = -1,
	            length = props.length;

	        while (++index < length) {
	          var key = props[index];

	          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	          if (newValue === undefined) {
	            newValue = source[key];
	          }
	          if (isNew) {
	            baseAssignValue(object, key, newValue);
	          } else {
	            assignValue(object, key, newValue);
	          }
	        }
	        return object;
	      }

	      module.exports = copyObject;

	      /***/
	    },
	    /* 13 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayLikeKeys = __webpack_require__(67),
	          baseKeys = __webpack_require__(58),
	          isArrayLike = __webpack_require__(9);

	      /**
	       * Creates an array of the own enumerable property names of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects. See the
	       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	       * for more details.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.keys(new Foo);
	       * // => ['a', 'b'] (iteration order is not guaranteed)
	       *
	       * _.keys('hi');
	       * // => ['0', '1']
	       */
	      function keys(object) {
	        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	      }

	      module.exports = keys;

	      /***/
	    },
	    /* 14 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(49);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "f", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(250);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "e", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(251);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"];
	      });

	      /***/
	    },
	    /* 15 */
	    /***/function (module, exports) {

	      var PI = Math.PI;
	      var sin = Math.sin;
	      var cos = Math.cos;
	      var atan2 = Math.atan2;
	      var DEFAULT_LENGTH = 10;
	      var DEFAULT_ANGLE = PI / 3;

	      function _addArrow(ctx, attrs, x1, y1, x2, y2) {
	        var leftX = void 0;
	        var leftY = void 0;
	        var rightX = void 0;
	        var rightY = void 0;
	        var offsetX = void 0;
	        var offsetY = void 0;
	        var angle = void 0;

	        if (!attrs.fill) {
	          // 闭合的不绘制箭头
	          var arrowLength = attrs.arrowLength || DEFAULT_LENGTH;
	          var arrowAngle = attrs.arrowAngle ? attrs.arrowAngle * PI / 180 : DEFAULT_ANGLE; // 转换为弧度

	          // Calculate angle
	          angle = atan2(y2 - y1, x2 - x1);
	          // Adjust angle correctly
	          angle -= PI;
	          // Calculate offset to place arrow at edge of path
	          offsetX = attrs.lineWidth * cos(angle);
	          offsetY = attrs.lineWidth * sin(angle);

	          // Calculate coordinates for left half of arrow
	          leftX = x2 + arrowLength * cos(angle + arrowAngle / 2);
	          leftY = y2 + arrowLength * sin(angle + arrowAngle / 2);
	          // Calculate coordinates for right half of arrow
	          rightX = x2 + arrowLength * cos(angle - arrowAngle / 2);
	          rightY = y2 + arrowLength * sin(angle - arrowAngle / 2);

	          // Draw left half of arrow
	          ctx.moveTo(leftX - offsetX, leftY - offsetY);
	          ctx.lineTo(x2 - offsetX, y2 - offsetY);
	          // Draw right half of arrow
	          ctx.lineTo(rightX - offsetX, rightY - offsetY);

	          // Visually connect arrow to path
	          ctx.moveTo(x2 - offsetX, y2 - offsetY);
	          ctx.lineTo(x2 + offsetX, y2 + offsetY);
	          // Move back to end of path
	          ctx.moveTo(x2, y2);
	        }
	      }

	      module.exports = {
	        addStartArrow: function addStartArrow(ctx, attrs, x1, y1, x2, y2) {
	          if (attrs.startArrow) {
	            _addArrow(ctx, attrs, x1, y1, x2, y2);
	          }
	        },
	        addEndArrow: function addEndArrow(ctx, attrs, x1, y1, x2, y2) {
	          if (attrs.endArrow) {
	            _addArrow(ctx, attrs, x1, y1, x2, y2);
	          }
	        }
	      };

	      /***/
	    },
	    /* 16 */
	    /***/function (module, exports, __webpack_require__) {

	      var PRECISION = 0.00001; // 常量，据的精度，小于这个精度认为是0
	      var RADIAN = Math.PI / 180;
	      var DEGREE = 180 / Math.PI;

	      module.exports = {
	        isFunction: __webpack_require__(21),
	        isObject: __webpack_require__(8),
	        isBoolean: __webpack_require__(118),
	        isNil: __webpack_require__(119),
	        isString: __webpack_require__(57),
	        isArray: __webpack_require__(6),
	        isNumber: __webpack_require__(120),
	        isEmpty: __webpack_require__(121), // isBlank
	        uniqueId: __webpack_require__(135),
	        clone: __webpack_require__(138),
	        assign: __webpack_require__(181), // simpleMix
	        merge: __webpack_require__(189), // mix
	        upperFirst: __webpack_require__(196), // ucfirst
	        remove: __webpack_require__(202),
	        each: __webpack_require__(210),
	        isEqual: __webpack_require__(215),
	        toArray: __webpack_require__(225),
	        extend: function extend(subclass, superclass, overrides, staticOverrides) {
	          // 如果只提供父类构造函数，则自动生成子类构造函数
	          if (!this.isFunction(superclass)) {
	            overrides = superclass;
	            superclass = subclass;
	            subclass = function subclass() {};
	          }

	          var create = Object.create ? function (proto, c) {
	            return Object.create(proto, {
	              constructor: {
	                value: c
	              }
	            });
	          } : function (proto, c) {
	            function F() {}

	            F.prototype = proto;
	            var o = new F();
	            o.constructor = c;
	            return o;
	          };

	          var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype
	          subclass.prototype = this.merge(superObj, subclass.prototype); // 指定子类的prototype
	          subclass.superclass = create(superclass.prototype, superclass);
	          this.merge(superObj, overrides);
	          this.merge(subclass, staticOverrides);
	          return subclass;
	        },
	        augment: function augment(c) {
	          var args = this.toArray(arguments);
	          for (var i = 1; i < args.length; i++) {
	            var obj = args[i];
	            if (this.isFunction(obj)) {
	              obj = obj.prototype;
	            }
	            this.merge(c.prototype, obj);
	          }
	        },

	        /**
	         * 判断两个数是否相等
	         * @param {Number} a 数
	         * @param {Number} b 数
	         * @return {Boolean} 是否相等
	         **/
	        isNumberEqual: function isNumberEqual(a, b) {
	          return Math.abs(a - b) < PRECISION;
	        },

	        /**
	         * 获取角度对应的弧度
	         * @param {Number} degree 角度
	         * @return {Number} 弧度
	         **/
	        toRadian: function toRadian(degree) {
	          return RADIAN * degree;
	        },

	        /**
	         * 获取弧度对应的角度
	         * @param {Number} radian 弧度
	         * @return {Number} 角度
	         **/
	        toDegree: function toDegree(radian) {
	          return DEGREE * radian;
	        },

	        /**
	         * 广义取模运算
	         * @param {Number} n 被取模的值
	         * @param {Number} m 模
	         * @return {Number} 返回n 被 m 取模的结果
	         */
	        mod: function mod(n, m) {
	          return (n % m + m) % m;
	        },

	        /**
	         * 把a夹在min，max中间, 低于min的返回min，高于max的返回max，否则返回自身
	         * @param {Number} a 数
	         * @param {Number} min 下限
	         * @param {Number} max 上限
	         * @return {Number} 返回结果值
	         **/
	        clamp: function clamp(a, min, max) {
	          if (a < min) {
	            return min;
	          } else if (a > max) {
	            return max;
	          }

	          return a;
	        }
	      };

	      /***/
	    },
	    /* 17 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /**
	       * Checks if `value` is likely a prototype object.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	       */
	      function isPrototype(value) {
	        var Ctor = value && value.constructor,
	            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	        return value === proto;
	      }

	      module.exports = isPrototype;

	      /***/
	    },
	    /* 18 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var root = __webpack_require__(4),
	            stubFalse = __webpack_require__(132);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Built-in value references. */
	        var Buffer = moduleExports ? root.Buffer : undefined;

	        /* Built-in method references for those with the same name as other `lodash` methods. */
	        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	        /**
	         * Checks if `value` is a buffer.
	         *
	         * @static
	         * @memberOf _
	         * @since 4.3.0
	         * @category Lang
	         * @param {*} value The value to check.
	         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	         * @example
	         *
	         * _.isBuffer(new Buffer(2));
	         * // => true
	         *
	         * _.isBuffer(new Uint8Array(2));
	         * // => false
	         */
	        var isBuffer = nativeIsBuffer || stubFalse;

	        module.exports = isBuffer;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 19 */
	    /***/function (module, exports) {

	      /**
	       * Performs a
	       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * comparison between two values to determine if they are equivalent.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       * var other = { 'a': 1 };
	       *
	       * _.eq(object, object);
	       * // => true
	       *
	       * _.eq(object, other);
	       * // => false
	       *
	       * _.eq('a', 'a');
	       * // => true
	       *
	       * _.eq('a', Object('a'));
	       * // => false
	       *
	       * _.eq(NaN, NaN);
	       * // => true
	       */
	      function eq(value, other) {
	        return value === other || value !== value && other !== other;
	      }

	      module.exports = eq;

	      /***/
	    },
	    /* 20 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["c"] = hue;
	      /* harmony export (immutable) */__webpack_exports__["b"] = gamma;
	      /* harmony export (immutable) */__webpack_exports__["a"] = nogamma;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(93);

	      function linear(a, d) {
	        return function (t) {
	          return a + t * d;
	        };
	      }

	      function exponential(a, b, y) {
	        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	          return Math.pow(a + t * b, y);
	        };
	      }

	      function hue(a, b) {
	        var d = b - a;
	        return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	      }

	      function gamma(y) {
	        return (y = +y) === 1 ? nogamma : function (a, b) {
	          return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	        };
	      }

	      function nogamma(a, b) {
	        var d = b - a;
	        return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	      }

	      /***/
	    },
	    /* 21 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObject = __webpack_require__(8);

	      /** `Object#toString` result references. */
	      var asyncTag = '[object AsyncFunction]',
	          funcTag = '[object Function]',
	          genTag = '[object GeneratorFunction]',
	          proxyTag = '[object Proxy]';

	      /**
	       * Checks if `value` is classified as a `Function` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	       * @example
	       *
	       * _.isFunction(_);
	       * // => true
	       *
	       * _.isFunction(/abc/);
	       * // => false
	       */
	      function isFunction(value) {
	        if (!isObject(value)) {
	          return false;
	        }
	        // The use of `Object#toString` avoids issues with the `typeof` operator
	        // in Safari 9 which returns 'object' for typed arrays and other constructors.
	        var tag = baseGetTag(value);
	        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	      }

	      module.exports = isFunction;

	      /***/
	    },
	    /* 22 */
	    /***/function (module, exports, __webpack_require__) {

	      var DataView = __webpack_require__(123),
	          Map = __webpack_require__(32),
	          Promise = __webpack_require__(128),
	          Set = __webpack_require__(129),
	          WeakMap = __webpack_require__(130),
	          baseGetTag = __webpack_require__(7),
	          toSource = __webpack_require__(60);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          objectTag = '[object Object]',
	          promiseTag = '[object Promise]',
	          setTag = '[object Set]',
	          weakMapTag = '[object WeakMap]';

	      var dataViewTag = '[object DataView]';

	      /** Used to detect maps, sets, and weakmaps. */
	      var dataViewCtorString = toSource(DataView),
	          mapCtorString = toSource(Map),
	          promiseCtorString = toSource(Promise),
	          setCtorString = toSource(Set),
	          weakMapCtorString = toSource(WeakMap);

	      /**
	       * Gets the `toStringTag` of `value`.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the `toStringTag`.
	       */
	      var getTag = baseGetTag;

	      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	        getTag = function getTag(value) {
	          var result = baseGetTag(value),
	              Ctor = result == objectTag ? value.constructor : undefined,
	              ctorString = Ctor ? toSource(Ctor) : '';

	          if (ctorString) {
	            switch (ctorString) {
	              case dataViewCtorString:
	                return dataViewTag;
	              case mapCtorString:
	                return mapTag;
	              case promiseCtorString:
	                return promiseTag;
	              case setCtorString:
	                return setTag;
	              case weakMapCtorString:
	                return weakMapTag;
	            }
	          }
	          return result;
	        };
	      }

	      module.exports = getTag;

	      /***/
	    },
	    /* 23 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsTypedArray = __webpack_require__(133),
	          baseUnary = __webpack_require__(62),
	          nodeUtil = __webpack_require__(134);

	      /* Node.js helper references. */
	      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	      /**
	       * Checks if `value` is classified as a typed array.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	       * @example
	       *
	       * _.isTypedArray(new Uint8Array);
	       * // => true
	       *
	       * _.isTypedArray([]);
	       * // => false
	       */
	      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	      module.exports = isTypedArray;

	      /***/
	    },
	    /* 24 */
	    /***/function (module, exports, __webpack_require__) {

	      var listCacheClear = __webpack_require__(140),
	          listCacheDelete = __webpack_require__(141),
	          listCacheGet = __webpack_require__(142),
	          listCacheHas = __webpack_require__(143),
	          listCacheSet = __webpack_require__(144);

	      /**
	       * Creates an list cache object.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function ListCache(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `ListCache`.
	      ListCache.prototype.clear = listCacheClear;
	      ListCache.prototype['delete'] = listCacheDelete;
	      ListCache.prototype.get = listCacheGet;
	      ListCache.prototype.has = listCacheHas;
	      ListCache.prototype.set = listCacheSet;

	      module.exports = ListCache;

	      /***/
	    },
	    /* 25 */
	    /***/function (module, exports, __webpack_require__) {

	      var eq = __webpack_require__(19);

	      /**
	       * Gets the index at which the `key` is found in `array` of key-value pairs.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} key The key to search for.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function assocIndexOf(array, key) {
	        var length = array.length;
	        while (length--) {
	          if (eq(array[length][0], key)) {
	            return length;
	          }
	        }
	        return -1;
	      }

	      module.exports = assocIndexOf;

	      /***/
	    },
	    /* 26 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10);

	      /* Built-in method references that are verified to be native. */
	      var nativeCreate = getNative(Object, 'create');

	      module.exports = nativeCreate;

	      /***/
	    },
	    /* 27 */
	    /***/function (module, exports, __webpack_require__) {

	      var isKeyable = __webpack_require__(158);

	      /**
	       * Gets the data for `map`.
	       *
	       * @private
	       * @param {Object} map The map to query.
	       * @param {string} key The reference key.
	       * @returns {*} Returns the map data.
	       */
	      function getMapData(map, key) {
	        var data = map.__data__;
	        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	      }

	      module.exports = getMapData;

	      /***/
	    },
	    /* 28 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayLikeKeys = __webpack_require__(67),
	          baseKeysIn = __webpack_require__(165),
	          isArrayLike = __webpack_require__(9);

	      /**
	       * Creates an array of the own and inherited enumerable property names of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.keysIn(new Foo);
	       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	       */
	      function keysIn(object) {
	        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	      }

	      module.exports = keysIn;

	      /***/
	    },
	    /* 29 */
	    /***/function (module, exports) {

	      /**
	       * Copies the values of `source` to `array`.
	       *
	       * @private
	       * @param {Array} source The array to copy values from.
	       * @param {Array} [array=[]] The array to copy values to.
	       * @returns {Array} Returns `array`.
	       */
	      function copyArray(source, array) {
	        var index = -1,
	            length = source.length;

	        array || (array = Array(length));
	        while (++index < length) {
	          array[index] = source[index];
	        }
	        return array;
	      }

	      module.exports = copyArray;

	      /***/
	    },
	    /* 30 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        return a = +a, b -= a, function (t) {
	          return a + b * t;
	        };
	      };

	      /***/
	    },
	    /* 31 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p3 + 3 * t * p2) + t * t * (t * p0 + 3 * onet * p1);
	      }

	      function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	      }

	      function cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, out) {
	        var t = void 0;
	        var interval = 0.005;
	        var d = Infinity;
	        var _t = void 0;
	        var v1 = void 0;
	        var d1 = void 0;
	        var d2 = void 0;
	        var v2 = void 0;
	        var prev = void 0;
	        var next = void 0;
	        var EPSILON = 0.0001;
	        var v0 = [x, y];

	        for (_t = 0; _t < 1; _t += 0.05) {
	          v1 = [cubicAt(x1, x2, x3, x4, _t), cubicAt(y1, y2, y3, y4, _t)];

	          d1 = vec2.squaredDistance(v0, v1);
	          if (d1 < d) {
	            t = _t;
	            d = d1;
	          }
	        }
	        d = Infinity;

	        for (var i = 0; i < 32; i++) {
	          if (interval < EPSILON) {
	            break;
	          }

	          prev = t - interval;
	          next = t + interval;

	          v1 = [cubicAt(x1, x2, x3, x4, prev), cubicAt(y1, y2, y3, y4, prev)];

	          d1 = vec2.squaredDistance(v0, v1);

	          if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	          } else {
	            v2 = [cubicAt(x1, x2, x3, x4, next), cubicAt(y1, y2, y3, y4, next)];

	            d2 = vec2.squaredDistance(v0, v2);

	            if (next <= 1 && d2 < d) {
	              t = next;
	              d = d2;
	            } else {
	              interval *= 0.5;
	            }
	          }
	        }

	        if (out) {
	          out.x = cubicAt(x1, x2, x3, x4, t);
	          out.y = cubicAt(y1, y2, y3, y4, t);
	        }

	        return Math.sqrt(d);
	      }

	      function cubicExtrema(p0, p1, p2, p3) {
	        var a = 3 * p0 - 9 * p1 + 9 * p2 - 3 * p3;
	        var b = 6 * p1 - 12 * p2 + 6 * p3;
	        var c = 3 * p2 - 3 * p3;
	        var extrema = [];
	        var t1 = void 0;
	        var t2 = void 0;
	        var discSqrt = void 0;

	        if (Util.isNumberEqual(a, 0)) {
	          if (!Util.isNumberEqual(b, 0)) {
	            t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	              extrema.push(t1);
	            }
	          }
	        } else {
	          var disc = b * b - 4 * a * c;
	          if (Util.isNumberEqual(disc, 0)) {
	            extrema.push(-b / (2 * a));
	          } else if (disc > 0) {
	            discSqrt = Math.sqrt(disc);
	            t1 = (-b + discSqrt) / (2 * a);
	            t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	              extrema.push(t1);
	            }
	            if (t2 >= 0 && t2 <= 1) {
	              extrema.push(t2);
	            }
	          }
	        }
	        return extrema;
	      }

	      function base3(t, p1, p2, p3, p4) {
	        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
	        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	        return t * t2 - 3 * p1 + 3 * p2;
	      }

	      function cubiclLen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	        if (Util.isNil(z)) {
	          z = 1;
	        }
	        z = z > 1 ? 1 : z < 0 ? 0 : z;
	        var z2 = z / 2;
	        var n = 12;
	        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
	        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
	        var sum = 0;
	        for (var i = 0; i < n; i++) {
	          var ct = z2 * Tvalues[i] + z2;
	          var xbase = base3(ct, x1, x2, x3, x4);
	          var ybase = base3(ct, y1, y2, y3, y4);
	          var comb = xbase * xbase + ybase * ybase;
	          sum += Cvalues[i] * Math.sqrt(comb);
	        }
	        return z2 * sum;
	      }

	      module.exports = {
	        at: cubicAt,
	        derivativeAt: cubicDerivativeAt,
	        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y) {
	          var rst = {};
	          cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, rst);
	          return rst;
	        },

	        pointDistance: cubicProjectPoint,
	        extrema: cubicExtrema,
	        len: cubiclLen
	      };

	      /***/
	    },
	    /* 32 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Map = getNative(root, 'Map');

	      module.exports = Map;

	      /***/
	    },
	    /* 33 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsArguments = __webpack_require__(131),
	          isObjectLike = __webpack_require__(5);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Built-in value references. */
	      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	      /**
	       * Checks if `value` is likely an `arguments` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	       *  else `false`.
	       * @example
	       *
	       * _.isArguments(function() { return arguments; }());
	       * // => true
	       *
	       * _.isArguments([1, 2, 3]);
	       * // => false
	       */
	      var isArguments = baseIsArguments(function () {
	        return arguments;
	      }()) ? baseIsArguments : function (value) {
	        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	      };

	      module.exports = isArguments;

	      /***/
	    },
	    /* 34 */
	    /***/function (module, exports) {

	      module.exports = function (module) {
	        if (!module.webpackPolyfill) {
	          module.deprecate = function () {};
	          module.paths = [];
	          // module.parent = undefined by default
	          if (!module.children) module.children = [];
	          Object.defineProperty(module, "loaded", {
	            enumerable: true,
	            get: function get() {
	              return module.l;
	            }
	          });
	          Object.defineProperty(module, "id", {
	            enumerable: true,
	            get: function get() {
	              return module.i;
	            }
	          });
	          module.webpackPolyfill = 1;
	        }
	        return module;
	      };

	      /***/
	    },
	    /* 35 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.map` for arrays without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns the new mapped array.
	       */
	      function arrayMap(array, iteratee) {
	        var index = -1,
	            length = array == null ? 0 : array.length,
	            result = Array(length);

	        while (++index < length) {
	          result[index] = iteratee(array[index], index, array);
	        }
	        return result;
	      }

	      module.exports = arrayMap;

	      /***/
	    },
	    /* 36 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24),
	          stackClear = __webpack_require__(145),
	          stackDelete = __webpack_require__(146),
	          stackGet = __webpack_require__(147),
	          stackHas = __webpack_require__(148),
	          stackSet = __webpack_require__(149);

	      /**
	       * Creates a stack cache object to store key-value pairs.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function Stack(entries) {
	        var data = this.__data__ = new ListCache(entries);
	        this.size = data.size;
	      }

	      // Add methods to `Stack`.
	      Stack.prototype.clear = stackClear;
	      Stack.prototype['delete'] = stackDelete;
	      Stack.prototype.get = stackGet;
	      Stack.prototype.has = stackHas;
	      Stack.prototype.set = stackSet;

	      module.exports = Stack;

	      /***/
	    },
	    /* 37 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseAssignValue = __webpack_require__(38),
	          eq = __webpack_require__(19);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Assigns `value` to `key` of `object` if the existing value is not equivalent
	       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * for equality comparisons.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function assignValue(object, key, value) {
	        var objValue = object[key];
	        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	          baseAssignValue(object, key, value);
	        }
	      }

	      module.exports = assignValue;

	      /***/
	    },
	    /* 38 */
	    /***/function (module, exports, __webpack_require__) {

	      var defineProperty = __webpack_require__(66);

	      /**
	       * The base implementation of `assignValue` and `assignMergeValue` without
	       * value checks.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function baseAssignValue(object, key, value) {
	        if (key == '__proto__' && defineProperty) {
	          defineProperty(object, key, {
	            'configurable': true,
	            'enumerable': true,
	            'value': value,
	            'writable': true
	          });
	        } else {
	          object[key] = value;
	        }
	      }

	      module.exports = baseAssignValue;

	      /***/
	    },
	    /* 39 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayFilter = __webpack_require__(168),
	          stubArray = __webpack_require__(70);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Built-in value references. */
	      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeGetSymbols = Object.getOwnPropertySymbols;

	      /**
	       * Creates an array of the own enumerable symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of symbols.
	       */
	      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	        if (object == null) {
	          return [];
	        }
	        object = Object(object);
	        return arrayFilter(nativeGetSymbols(object), function (symbol) {
	          return propertyIsEnumerable.call(object, symbol);
	        });
	      };

	      module.exports = getSymbols;

	      /***/
	    },
	    /* 40 */
	    /***/function (module, exports, __webpack_require__) {

	      var overArg = __webpack_require__(59);

	      /** Built-in value references. */
	      var getPrototype = overArg(Object.getPrototypeOf, Object);

	      module.exports = getPrototype;

	      /***/
	    },
	    /* 41 */
	    /***/function (module, exports, __webpack_require__) {

	      var Uint8Array = __webpack_require__(75);

	      /**
	       * Creates a clone of `arrayBuffer`.
	       *
	       * @private
	       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	       * @returns {ArrayBuffer} Returns the cloned array buffer.
	       */
	      function cloneArrayBuffer(arrayBuffer) {
	        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	        return result;
	      }

	      module.exports = cloneArrayBuffer;

	      /***/
	    },
	    /* 42 */
	    /***/function (module, exports) {

	      /**
	       * Converts `map` to its key-value pairs.
	       *
	       * @private
	       * @param {Object} map The map to convert.
	       * @returns {Array} Returns the key-value pairs.
	       */
	      function mapToArray(map) {
	        var index = -1,
	            result = Array(map.size);

	        map.forEach(function (value, key) {
	          result[++index] = [key, value];
	        });
	        return result;
	      }

	      module.exports = mapToArray;

	      /***/
	    },
	    /* 43 */
	    /***/function (module, exports) {

	      /**
	       * Converts `set` to an array of its values.
	       *
	       * @private
	       * @param {Object} set The set to convert.
	       * @returns {Array} Returns the values.
	       */
	      function setToArray(set) {
	        var index = -1,
	            result = Array(set.size);

	        set.forEach(function (value) {
	          result[++index] = value;
	        });
	        return result;
	      }

	      module.exports = setToArray;

	      /***/
	    },
	    /* 44 */
	    /***/function (module, exports) {

	      /**
	       * This method returns the first argument it receives.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Util
	       * @param {*} value Any value.
	       * @returns {*} Returns `value`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       *
	       * console.log(_.identity(object) === object);
	       * // => true
	       */
	      function identity(value) {
	        return value;
	      }

	      module.exports = identity;

	      /***/
	    },
	    /* 45 */
	    /***/function (module, exports) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      /**
	       * @class Common utilities
	       * @name glMatrix
	       */
	      var glMatrix = {};

	      // Configuration Constants
	      glMatrix.EPSILON = 0.000001;
	      glMatrix.ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
	      glMatrix.RANDOM = Math.random;
	      glMatrix.ENABLE_SIMD = false;

	      // Capability detection
	      glMatrix.SIMD_AVAILABLE = glMatrix.ARRAY_TYPE === Float32Array && 'SIMD' in this;
	      glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;

	      /**
	       * Sets the type of array used when creating new vectors and matrices
	       *
	       * @param {Type} type Array type, such as Float32Array or Array
	       */
	      glMatrix.setMatrixArrayType = function (type) {
	        glMatrix.ARRAY_TYPE = type;
	      };

	      var degree = Math.PI / 180;

	      /**
	      * Convert Degree To Radian
	      *
	      * @param {Number} Angle in Degrees
	      */
	      glMatrix.toRadian = function (a) {
	        return a * degree;
	      };

	      /**
	       * Tests whether or not the arguments have approximately the same value, within an absolute
	       * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less 
	       * than or equal to 1.0, and a relative tolerance is used for larger values)
	       * 
	       * @param {Number} a The first number to test.
	       * @param {Number} b The second number to test.
	       * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
	       */
	      glMatrix.equals = function (a, b) {
	        return Math.abs(a - b) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
	      };

	      module.exports = glMatrix;

	      /***/
	    },
	    /* 46 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var Util = __webpack_require__(16);
	      var SPACES = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029';
	      var PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');
	      var PATH_VALUES = new RegExp('(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');

	      // Parses given path string into an array of arrays of path segments
	      var parsePathString = function parsePathString(pathString) {
	        if (!pathString) {
	          return null;
	        }

	        if ((typeof pathString === 'undefined' ? 'undefined' : _typeof(pathString)) === _typeof([])) {
	          return pathString;
	        }
	        var paramCounts = {
	          a: 7,
	          c: 6,
	          o: 2,
	          h: 1,
	          l: 2,
	          m: 2,
	          r: 4,
	          q: 4,
	          s: 4,
	          t: 2,
	          v: 1,
	          u: 3,
	          z: 0
	        };
	        var data = [];

	        String(pathString).replace(PATH_COMMAND, function (a, b, c) {
	          var params = [];
	          var name = b.toLowerCase();
	          c.replace(PATH_VALUES, function (a, b) {
	            b && params.push(+b);
	          });
	          if (name === 'm' && params.length > 2) {
	            data.push([b].concat(params.splice(0, 2)));
	            name = 'l';
	            b = b === 'm' ? 'l' : 'L';
	          }
	          if (name === 'o' && params.length === 1) {
	            data.push([b, params[0]]);
	          }
	          if (name === 'r') {
	            data.push([b].concat(params));
	          } else {
	            while (params.length >= paramCounts[name]) {
	              data.push([b].concat(params.splice(0, paramCounts[name])));
	              if (!paramCounts[name]) {
	                break;
	              }
	            }
	          }
	        });

	        return data;
	      };

	      // http://schepers.cc/getting-to-the-point
	      var catmullRom2bezier = function catmullRom2bezier(crp, z) {
	        var d = [];
	        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
	          var p = [{
	            x: +crp[i - 2],
	            y: +crp[i - 1]
	          }, {
	            x: +crp[i],
	            y: +crp[i + 1]
	          }, {
	            x: +crp[i + 2],
	            y: +crp[i + 3]
	          }, {
	            x: +crp[i + 4],
	            y: +crp[i + 5]
	          }];
	          if (z) {
	            if (!i) {
	              p[0] = {
	                x: +crp[iLen - 2],
	                y: +crp[iLen - 1]
	              };
	            } else if (iLen - 4 === i) {
	              p[3] = {
	                x: +crp[0],
	                y: +crp[1]
	              };
	            } else if (iLen - 2 === i) {
	              p[2] = {
	                x: +crp[0],
	                y: +crp[1]
	              };
	              p[3] = {
	                x: +crp[2],
	                y: +crp[3]
	              };
	            }
	          } else {
	            if (iLen - 4 === i) {
	              p[3] = p[2];
	            } else if (!i) {
	              p[0] = {
	                x: +crp[i],
	                y: +crp[i + 1]
	              };
	            }
	          }
	          d.push(['C', (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);
	        }

	        return d;
	      };

	      var ellipsePath = function ellipsePath(x, y, rx, ry, a) {
	        var res = [];
	        if (a === null && ry === null) {
	          ry = rx;
	        }
	        x = +x;
	        y = +y;
	        rx = +rx;
	        ry = +ry;
	        if (a !== null) {
	          var rad = Math.PI / 180;
	          var x1 = x + rx * Math.cos(-ry * rad);
	          var x2 = x + rx * Math.cos(-a * rad);
	          var y1 = y + rx * Math.sin(-ry * rad);
	          var y2 = y + rx * Math.sin(-a * rad);
	          res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];
	        } else {
	          res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
	        }
	        return res;
	      };

	      var pathToAbsolute = function pathToAbsolute(pathArray) {
	        pathArray = parsePathString(pathArray);

	        if (!pathArray || !pathArray.length) {
	          return [['M', 0, 0]];
	        }
	        var res = [];
	        var x = 0;
	        var y = 0;
	        var mx = 0;
	        var my = 0;
	        var start = 0;
	        var pa0 = void 0;
	        var dots = void 0;
	        if (pathArray[0][0] === 'M') {
	          x = +pathArray[0][1];
	          y = +pathArray[0][2];
	          mx = x;
	          my = y;
	          start++;
	          res[0] = ['M', x, y];
	        }
	        var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';
	        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
	          res.push(r = []);
	          pa = pathArray[i];
	          pa0 = pa[0];
	          if (pa0 !== pa0.toUpperCase()) {
	            r[0] = pa0.toUpperCase();
	            switch (r[0]) {
	              case 'A':
	                r[1] = pa[1];
	                r[2] = pa[2];
	                r[3] = pa[3];
	                r[4] = pa[4];
	                r[5] = pa[5];
	                r[6] = +pa[6] + x;
	                r[7] = +pa[7] + y;
	                break;
	              case 'V':
	                r[1] = +pa[1] + y;
	                break;
	              case 'H':
	                r[1] = +pa[1] + x;
	                break;
	              case 'R':
	                dots = [x, y].concat(pa.slice(1));
	                for (var j = 2, jj = dots.length; j < jj; j++) {
	                  dots[j] = +dots[j] + x;
	                  dots[++j] = +dots[j] + y;
	                }
	                res.pop();
	                res = res.concat(catmullRom2bezier(dots, crz));
	                break;
	              case 'O':
	                res.pop();
	                dots = ellipsePath(x, y, pa[1], pa[2]);
	                dots.push(dots[0]);
	                res = res.concat(dots);
	                break;
	              case 'U':
	                res.pop();
	                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	                r = ['U'].concat(res[res.length - 1].slice(-2));
	                break;
	              case 'M':
	                mx = +pa[1] + x;
	                my = +pa[2] + y;
	                break; // for lint
	              default:
	                for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {
	                  r[_j] = +pa[_j] + (_j % 2 ? x : y);
	                }
	            }
	          } else if (pa0 === 'R') {
	            dots = [x, y].concat(pa.slice(1));
	            res.pop();
	            res = res.concat(catmullRom2bezier(dots, crz));
	            r = ['R'].concat(pa.slice(-2));
	          } else if (pa0 === 'O') {
	            res.pop();
	            dots = ellipsePath(x, y, pa[1], pa[2]);
	            dots.push(dots[0]);
	            res = res.concat(dots);
	          } else if (pa0 === 'U') {
	            res.pop();
	            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	            r = ['U'].concat(res[res.length - 1].slice(-2));
	          } else {
	            for (var k = 0, kk = pa.length; k < kk; k++) {
	              r[k] = pa[k];
	            }
	          }
	          pa0 = pa0.toUpperCase();
	          if (pa0 !== 'O') {
	            switch (r[0]) {
	              case 'Z':
	                x = +mx;
	                y = +my;
	                break;
	              case 'H':
	                x = r[1];
	                break;
	              case 'V':
	                y = r[1];
	                break;
	              case 'M':
	                mx = r[r.length - 2];
	                my = r[r.length - 1];
	                break; // for lint
	              default:
	                x = r[r.length - 2];
	                y = r[r.length - 1];
	            }
	          }
	        }

	        return res;
	      };

	      var l2c = function l2c(x1, y1, x2, y2) {
	        return [x1, y1, x2, y2, x2, y2];
	      };

	      var q2c = function q2c(x1, y1, ax, ay, x2, y2) {
	        var _13 = 1 / 3;
	        var _23 = 2 / 3;
	        return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
	      };

	      var a2c = function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
	        // for more information of where this math came from visit:
	        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
	        if (rx === ry) {
	          rx += 1;
	        }

	        var _120 = Math.PI * 120 / 180;
	        var rad = Math.PI / 180 * (+angle || 0);
	        var res = [];
	        var xy = void 0;
	        var f1 = void 0;
	        var f2 = void 0;
	        var cx = void 0;
	        var cy = void 0;
	        var rotate = function rotate(x, y, rad) {
	          var X = x * Math.cos(rad) - y * Math.sin(rad);
	          var Y = x * Math.sin(rad) + y * Math.cos(rad);
	          return {
	            x: X,
	            y: Y
	          };
	        };
	        if (!recursive) {
	          xy = rotate(x1, y1, -rad);
	          x1 = xy.x;
	          y1 = xy.y;
	          xy = rotate(x2, y2, -rad);
	          x2 = xy.x;
	          y2 = xy.y;
	          if (x1 === x2 && y1 === y2) {
	            // 若弧的起始点和终点重叠则错开一点
	            x2 += 1;
	            y2 += 1;
	          }
	          // const cos = Math.cos(Math.PI / 180 * angle);
	          // const sin = Math.sin(Math.PI / 180 * angle);
	          var x = (x1 - x2) / 2;
	          var y = (y1 - y2) / 2;
	          var h = x * x / (rx * rx) + y * y / (ry * ry);
	          if (h > 1) {
	            h = Math.sqrt(h);
	            rx = h * rx;
	            ry = h * ry;
	          }
	          var rx2 = rx * rx;
	          var ry2 = ry * ry;
	          var k = (large_arc_flag === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
	          cx = k * rx * y / ry + (x1 + x2) / 2;
	          cy = k * -ry * x / rx + (y1 + y2) / 2;
	          f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
	          f2 = Math.asin(((y2 - cy) / ry).toFixed(9));

	          f1 = x1 < cx ? Math.PI - f1 : f1;
	          f2 = x2 < cx ? Math.PI - f2 : f2;
	          f1 < 0 && (f1 = Math.PI * 2 + f1);
	          f2 < 0 && (f2 = Math.PI * 2 + f2);
	          if (sweep_flag && f1 > f2) {
	            f1 = f1 - Math.PI * 2;
	          }
	          if (!sweep_flag && f2 > f1) {
	            f2 = f2 - Math.PI * 2;
	          }
	        } else {
	          f1 = recursive[0];
	          f2 = recursive[1];
	          cx = recursive[2];
	          cy = recursive[3];
	        }
	        var df = f2 - f1;
	        if (Math.abs(df) > _120) {
	          var f2old = f2;
	          var x2old = x2;
	          var y2old = y2;
	          f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
	          x2 = cx + rx * Math.cos(f2);
	          y2 = cy + ry * Math.sin(f2);
	          res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
	        }
	        df = f2 - f1;
	        var c1 = Math.cos(f1);
	        var s1 = Math.sin(f1);
	        var c2 = Math.cos(f2);
	        var s2 = Math.sin(f2);
	        var t = Math.tan(df / 4);
	        var hx = 4 / 3 * rx * t;
	        var hy = 4 / 3 * ry * t;
	        var m1 = [x1, y1];
	        var m2 = [x1 + hx * s1, y1 - hy * c1];
	        var m3 = [x2 + hx * s2, y2 - hy * c2];
	        var m4 = [x2, y2];
	        m2[0] = 2 * m1[0] - m2[0];
	        m2[1] = 2 * m1[1] - m2[1];
	        if (recursive) {
	          return [m2, m3, m4].concat(res);
	        }
	        res = [m2, m3, m4].concat(res).join().split(',');
	        var newres = [];
	        for (var i = 0, ii = res.length; i < ii; i++) {
	          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
	        }
	        return newres;
	      };

	      var pathTocurve = function pathTocurve(path, path2) {
	        var p = pathToAbsolute(path);
	        var p2 = path2 && pathToAbsolute(path2);
	        var attrs = {
	          x: 0,
	          y: 0,
	          bx: 0,
	          by: 0,
	          X: 0,
	          Y: 0,
	          qx: null,
	          qy: null
	        };
	        var attrs2 = {
	          x: 0,
	          y: 0,
	          bx: 0,
	          by: 0,
	          X: 0,
	          Y: 0,
	          qx: null,
	          qy: null
	        };
	        var pcoms1 = []; // path commands of original path p
	        var pcoms2 = []; // path commands of original path p2
	        var pfirst = ''; // temporary holder for original path command
	        var pcom = ''; // holder for previous path command of original path
	        var ii = void 0;
	        var processPath = function processPath(path, d, pcom) {
	          var nx = void 0,
	              ny = void 0;
	          if (!path) {
	            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
	          }!(path[0] in {
	            T: 1,
	            Q: 1
	          }) && (d.qx = d.qy = null);
	          switch (path[0]) {
	            case 'M':
	              d.X = path[1];
	              d.Y = path[2];
	              break;
	            case 'A':
	              path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
	              break;
	            case 'S':
	              if (pcom === 'C' || pcom === 'S') {
	                // In "S" case we have to take into account, if the previous command is C/S.
	                nx = d.x * 2 - d.bx; // And reflect the previous
	                ny = d.y * 2 - d.by; // command's control point relative to the current point.
	              } else {
	                // or some else or nothing
	                nx = d.x;
	                ny = d.y;
	              }
	              path = ['C', nx, ny].concat(path.slice(1));
	              break;
	            case 'T':
	              if (pcom === 'Q' || pcom === 'T') {
	                // In "T" case we have to take into account, if the previous command is Q/T.
	                d.qx = d.x * 2 - d.qx; // And make a reflection similar
	                d.qy = d.y * 2 - d.qy; // to case "S".
	              } else {
	                // or something else or nothing
	                d.qx = d.x;
	                d.qy = d.y;
	              }
	              path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
	              break;
	            case 'Q':
	              d.qx = path[1];
	              d.qy = path[2];
	              path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
	              break;
	            case 'L':
	              path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));
	              break;
	            case 'H':
	              path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));
	              break;
	            case 'V':
	              path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));
	              break;
	            case 'Z':
	              path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));
	              break;
	            default:
	              break;
	          }
	          return path;
	        };
	        var fixArc = function fixArc(pp, i) {
	          if (pp[i].length > 7) {
	            pp[i].shift();
	            var pi = pp[i];
	            while (pi.length) {
	              pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved
	              p2 && (pcoms2[i] = 'A'); // the same as above
	              pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
	            }
	            pp.splice(i, 1);
	            ii = Math.max(p.length, p2 && p2.length || 0);
	          }
	        };
	        var fixM = function fixM(path1, path2, a1, a2, i) {
	          if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {
	            path2.splice(i, 0, ['M', a2.x, a2.y]);
	            a1.bx = 0;
	            a1.by = 0;
	            a1.x = path1[i][1];
	            a1.y = path1[i][2];
	            ii = Math.max(p.length, p2 && p2.length || 0);
	          }
	        };
	        ii = Math.max(p.length, p2 && p2.length || 0);
	        for (var i = 0; i < ii; i++) {

	          p[i] && (pfirst = p[i][0]); // save current path command

	          if (pfirst !== 'C') {
	            // C is not saved yet, because it may be result of conversion
	            pcoms1[i] = pfirst; // Save current path command
	            i && (pcom = pcoms1[i - 1]); // Get previous path command pcom
	          }
	          p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath

	          if (pcoms1[i] !== 'A' && pfirst === 'C') pcoms1[i] = 'C'; // A is the only command
	          // which may produce multiple C:s
	          // so we have to make sure that C is also C in original path

	          fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1

	          if (p2) {
	            // the same procedures is done to p2
	            p2[i] && (pfirst = p2[i][0]);
	            if (pfirst !== 'C') {
	              pcoms2[i] = pfirst;
	              i && (pcom = pcoms2[i - 1]);
	            }
	            p2[i] = processPath(p2[i], attrs2, pcom);

	            if (pcoms2[i] !== 'A' && pfirst === 'C') {
	              pcoms2[i] = 'C';
	            }

	            fixArc(p2, i);
	          }
	          fixM(p, p2, attrs, attrs2, i);
	          fixM(p2, p, attrs2, attrs, i);
	          var seg = p[i];
	          var seg2 = p2 && p2[i];
	          var seglen = seg.length;
	          var seg2len = p2 && seg2.length;
	          attrs.x = seg[seglen - 2];
	          attrs.y = seg[seglen - 1];
	          attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
	          attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
	          attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
	          attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
	          attrs2.x = p2 && seg2[seg2len - 2];
	          attrs2.y = p2 && seg2[seg2len - 1];
	        }

	        return p2 ? [p, p2] : p;
	      };

	      var p2s = /,?([a-z]),?/gi;
	      var parsePathArray = function parsePathArray(path) {
	        return path.join(',').replace(p2s, '$1');
	      };

	      var base3 = function base3(t, p1, p2, p3, p4) {
	        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
	        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	        return t * t2 - 3 * p1 + 3 * p2;
	      };

	      var bezlen = function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	        if (z === null) {
	          z = 1;
	        }
	        z = z > 1 ? 1 : z < 0 ? 0 : z;
	        var z2 = z / 2;
	        var n = 12;
	        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
	        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
	        var sum = 0;
	        for (var i = 0; i < n; i++) {
	          var ct = z2 * Tvalues[i] + z2;
	          var xbase = base3(ct, x1, x2, x3, x4);
	          var ybase = base3(ct, y1, y2, y3, y4);
	          var comb = xbase * xbase + ybase * ybase;
	          sum += Cvalues[i] * Math.sqrt(comb);
	        }
	        return z2 * sum;
	      };

	      var curveDim = function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {
	        var tvalues = [];
	        var bounds = [[], []];
	        var a = void 0;
	        var b = void 0;
	        var c = void 0;
	        var t = void 0;

	        for (var i = 0; i < 2; ++i) {
	          if (i === 0) {
	            b = 6 * x0 - 12 * x1 + 6 * x2;
	            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
	            c = 3 * x1 - 3 * x0;
	          } else {
	            b = 6 * y0 - 12 * y1 + 6 * y2;
	            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
	            c = 3 * y1 - 3 * y0;
	          }
	          if (Math.abs(a) < 1e-12) {
	            if (Math.abs(b) < 1e-12) {
	              continue;
	            }
	            t = -c / b;
	            if (t > 0 && t < 1) {
	              tvalues.push(t);
	            }
	            continue;
	          }
	          var b2ac = b * b - 4 * c * a;
	          var sqrtb2ac = Math.sqrt(b2ac);
	          if (b2ac < 0) {
	            continue;
	          }
	          var t1 = (-b + sqrtb2ac) / (2 * a);
	          if (t1 > 0 && t1 < 1) {
	            tvalues.push(t1);
	          }
	          var t2 = (-b - sqrtb2ac) / (2 * a);
	          if (t2 > 0 && t2 < 1) {
	            tvalues.push(t2);
	          }
	        }

	        var j = tvalues.length;
	        var jlen = j;
	        var mt = void 0;
	        while (j--) {
	          t = tvalues[j];
	          mt = 1 - t;
	          bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
	          bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
	        }

	        bounds[0][jlen] = x0;
	        bounds[1][jlen] = y0;
	        bounds[0][jlen + 1] = x3;
	        bounds[1][jlen + 1] = y3;
	        bounds[0].length = bounds[1].length = jlen + 2;

	        return {
	          min: {
	            x: Math.min.apply(0, bounds[0]),
	            y: Math.min.apply(0, bounds[1])
	          },
	          max: {
	            x: Math.max.apply(0, bounds[0]),
	            y: Math.max.apply(0, bounds[1])
	          }
	        };
	      };

	      var intersect = function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {
	        if (Math.max(x1, x2) < Math.min(x3, x4) || Math.min(x1, x2) > Math.max(x3, x4) || Math.max(y1, y2) < Math.min(y3, y4) || Math.min(y1, y2) > Math.max(y3, y4)) {
	          return;
	        }
	        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);
	        var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);
	        var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

	        if (!denominator) {
	          return;
	        }
	        var px = nx / denominator;
	        var py = ny / denominator;
	        var px2 = +px.toFixed(2);
	        var py2 = +py.toFixed(2);
	        if (px2 < +Math.min(x1, x2).toFixed(2) || px2 > +Math.max(x1, x2).toFixed(2) || px2 < +Math.min(x3, x4).toFixed(2) || px2 > +Math.max(x3, x4).toFixed(2) || py2 < +Math.min(y1, y2).toFixed(2) || py2 > +Math.max(y1, y2).toFixed(2) || py2 < +Math.min(y3, y4).toFixed(2) || py2 > +Math.max(y3, y4).toFixed(2)) {
	          return;
	        }
	        return {
	          x: px,
	          y: py
	        };
	      };

	      var isPointInsideBBox = function isPointInsideBBox(bbox, x, y) {
	        return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
	      };

	      var rectPath = function rectPath(x, y, w, h, r) {
	        if (r) {
	          return [['M', +x + +r, y], ['l', w - r * 2, 0], ['a', r, r, 0, 0, 1, r, r], ['l', 0, h - r * 2], ['a', r, r, 0, 0, 1, -r, r], ['l', r * 2 - w, 0], ['a', r, r, 0, 0, 1, -r, -r], ['l', 0, r * 2 - h], ['a', r, r, 0, 0, 1, r, -r], ['z']];
	        }
	        var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];
	        res.parsePathArray = parsePathArray;
	        return res;
	      };

	      var box = function box(x, y, width, height) {
	        if (x === null) {
	          x = y = width = height = 0;
	        }
	        if (y === null) {
	          y = x.y;
	          width = x.width;
	          height = x.height;
	          x = x.x;
	        }
	        return {
	          x: x,
	          y: y,
	          width: width,
	          w: width,
	          height: height,
	          h: height,
	          x2: x + width,
	          y2: y + height,
	          cx: x + width / 2,
	          cy: y + height / 2,
	          r1: Math.min(width, height) / 2,
	          r2: Math.max(width, height) / 2,
	          r0: Math.sqrt(width * width + height * height) / 2,
	          path: rectPath(x, y, width, height),
	          vb: [x, y, width, height].join(' ')
	        };
	      };

	      var isBBoxIntersect = function isBBoxIntersect(bbox1, bbox2) {
	        bbox1 = box(bbox1);
	        bbox2 = box(bbox2);
	        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
	      };

	      var bezierBBox = function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
	        if (!Util.isArray(p1x)) {
	          p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
	        }
	        var bbox = curveDim.apply(null, p1x);
	        return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);
	      };

	      var findDotsAtSegment = function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
	        var t1 = 1 - t;
	        var t13 = Math.pow(t1, 3);
	        var t12 = Math.pow(t1, 2);
	        var t2 = t * t;
	        var t3 = t2 * t;
	        var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;
	        var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
	        var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);
	        var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);
	        var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);
	        var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);
	        var ax = t1 * p1x + t * c1x;
	        var ay = t1 * p1y + t * c1y;
	        var cx = t1 * c2x + t * p2x;
	        var cy = t1 * c2y + t * p2y;
	        var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;
	        // (mx > nx || my < ny) && (alpha += 180);
	        return {
	          x: x,
	          y: y,
	          m: {
	            x: mx,
	            y: my
	          },
	          n: {
	            x: nx,
	            y: ny
	          },
	          start: {
	            x: ax,
	            y: ay
	          },
	          end: {
	            x: cx,
	            y: cy
	          },
	          alpha: alpha
	        };
	      };

	      var interHelper = function interHelper(bez1, bez2, justCount) {
	        var bbox1 = bezierBBox(bez1);
	        var bbox2 = bezierBBox(bez2);
	        if (!isBBoxIntersect(bbox1, bbox2)) {
	          return justCount ? 0 : [];
	        }
	        var l1 = bezlen.apply(0, bez1);
	        var l2 = bezlen.apply(0, bez2);
	        var n1 = ~~(l1 / 8);
	        var n2 = ~~(l2 / 8);
	        var dots1 = [];
	        var dots2 = [];
	        var xy = {};
	        var res = justCount ? 0 : [];
	        for (var i = 0; i < n1 + 1; i++) {
	          var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));
	          dots1.push({
	            x: d.x,
	            y: d.y,
	            t: i / n1
	          });
	        }
	        for (var _i = 0; _i < n2 + 1; _i++) {
	          var _d = findDotsAtSegment.apply(0, bez2.concat(_i / n2));
	          dots2.push({
	            x: _d.x,
	            y: _d.y,
	            t: _i / n2
	          });
	        }
	        for (var _i2 = 0; _i2 < n1; _i2++) {
	          for (var j = 0; j < n2; j++) {
	            var di = dots1[_i2];
	            var di1 = dots1[_i2 + 1];
	            var dj = dots2[j];
	            var dj1 = dots2[j + 1];
	            var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';
	            var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';
	            var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
	            if (is) {
	              if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {
	                continue;
	              }
	              xy[is.x.toFixed(4)] = is.y.toFixed(4);
	              var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);
	              var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
	              if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
	                if (justCount) {
	                  res++;
	                } else {
	                  res.push({
	                    x: is.x,
	                    y: is.y,
	                    t1: t1,
	                    t2: t2
	                  });
	                }
	              }
	            }
	          }
	        }
	        return res;
	      };

	      var interPathHelper = function interPathHelper(path1, path2, justCount) {
	        path1 = pathTocurve(path1);
	        path2 = pathTocurve(path2);
	        var x1 = void 0;
	        var y1 = void 0;
	        var x2 = void 0;
	        var y2 = void 0;
	        var x1m = void 0;
	        var y1m = void 0;
	        var x2m = void 0;
	        var y2m = void 0;
	        var bez1 = void 0;
	        var bez2 = void 0;
	        var res = justCount ? 0 : [];
	        for (var i = 0, ii = path1.length; i < ii; i++) {
	          var pi = path1[i];
	          if (pi[0] === 'M') {
	            x1 = x1m = pi[1];
	            y1 = y1m = pi[2];
	          } else {
	            if (pi[0] === 'C') {
	              bez1 = [x1, y1].concat(pi.slice(1));
	              x1 = bez1[6];
	              y1 = bez1[7];
	            } else {
	              bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
	              x1 = x1m;
	              y1 = y1m;
	            }
	            for (var j = 0, jj = path2.length; j < jj; j++) {
	              var pj = path2[j];
	              if (pj[0] === 'M') {
	                x2 = x2m = pj[1];
	                y2 = y2m = pj[2];
	              } else {
	                if (pj[0] === 'C') {
	                  bez2 = [x2, y2].concat(pj.slice(1));
	                  x2 = bez2[6];
	                  y2 = bez2[7];
	                } else {
	                  bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
	                  x2 = x2m;
	                  y2 = y2m;
	                }
	                var intr = interHelper(bez1, bez2, justCount);
	                if (justCount) {
	                  res += intr;
	                } else {
	                  for (var k = 0, kk = intr.length; k < kk; k++) {
	                    intr[k].segment1 = i;
	                    intr[k].segment2 = j;
	                    intr[k].bez1 = bez1;
	                    intr[k].bez2 = bez2;
	                  }
	                  res = res.concat(intr);
	                }
	              }
	            }
	          }
	        }
	        return res;
	      };

	      var pathIntersection = function pathIntersection(path1, path2) {
	        return interPathHelper(path1, path2);
	      };

	      module.exports = {
	        parsePathString: parsePathString,
	        parsePathArray: parsePathArray,
	        pathTocurve: pathTocurve,
	        pathToAbsolute: pathToAbsolute,
	        catmullRomToBezier: catmullRom2bezier,
	        rectPath: rectPath,
	        intersection: pathIntersection
	      };

	      /***/
	    },
	    /* 47 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["b"] = now;
	      /* harmony export (immutable) */__webpack_exports__["a"] = Timer;
	      /* harmony export (immutable) */__webpack_exports__["c"] = timer;
	      /* harmony export (immutable) */__webpack_exports__["d"] = timerFlush;
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var frame = 0,

	      // is an animation frame pending?
	      timeout = 0,

	      // is a timeout pending?
	      interval = 0,

	      // are any timers active?
	      pokeDelay = 1000,

	      // how frequently we check for clock skew
	      taskHead,
	          taskTail,
	          clockLast = 0,
	          clockNow = 0,
	          clockSkew = 0,
	          clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	          setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	        setTimeout(f, 17);
	      };

	      function now() {
	        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	      }

	      function clearNow() {
	        clockNow = 0;
	      }

	      function Timer() {
	        this._call = this._time = this._next = null;
	      }

	      Timer.prototype = timer.prototype = {
	        constructor: Timer,
	        restart: function restart(callback, delay, time) {
	          if (typeof callback !== "function") throw new TypeError("callback is not a function");
	          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	          if (!this._next && taskTail !== this) {
	            if (taskTail) taskTail._next = this;else taskHead = this;
	            taskTail = this;
	          }
	          this._call = callback;
	          this._time = time;
	          sleep();
	        },
	        stop: function stop() {
	          if (this._call) {
	            this._call = null;
	            this._time = Infinity;
	            sleep();
	          }
	        }
	      };

	      function timer(callback, delay, time) {
	        var t = new Timer();
	        t.restart(callback, delay, time);
	        return t;
	      }

	      function timerFlush() {
	        now(); // Get the current time, if not already set.
	        ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	        var t = taskHead,
	            e;
	        while (t) {
	          if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	          t = t._next;
	        }
	        --frame;
	      }

	      function wake() {
	        clockNow = (clockLast = clock.now()) + clockSkew;
	        frame = timeout = 0;
	        try {
	          timerFlush();
	        } finally {
	          frame = 0;
	          nap();
	          clockNow = 0;
	        }
	      }

	      function poke() {
	        var now = clock.now(),
	            delay = now - clockLast;
	        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	      }

	      function nap() {
	        var t0,
	            t1 = taskHead,
	            t2,
	            time = Infinity;
	        while (t1) {
	          if (t1._call) {
	            if (time > t1._time) time = t1._time;
	            t0 = t1, t1 = t1._next;
	          } else {
	            t2 = t1._next, t1._next = null;
	            t1 = t0 ? t0._next = t2 : taskHead = t2;
	          }
	        }
	        taskTail = t0;
	        sleep(time);
	      }

	      function sleep(time) {
	        if (frame) return; // Soonest alarm already set, or will be.
	        if (timeout) timeout = clearTimeout(timeout);
	        var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	        if (delay > 24) {
	          if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	          if (interval) interval = clearInterval(interval);
	        } else {
	          if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	          frame = 1, setFrame(wake);
	        }
	      }

	      /***/
	    },
	    /* 48 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(91);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(94);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(95);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(30);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(96);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(97);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(93);
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var t = typeof b === "undefined" ? "undefined" : _typeof(b),
	            c;
	        return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b) : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */] : t === "string" ? (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */] : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */] : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */] : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */] : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
	      };

	      /***/
	    },
	    /* 49 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = Color;
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
	        return _darker;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return _brighter;
	      });
	      /* harmony export (immutable) */__webpack_exports__["e"] = color;
	      /* harmony export (immutable) */__webpack_exports__["h"] = rgbConvert;
	      /* harmony export (immutable) */__webpack_exports__["g"] = rgb;
	      /* harmony export (immutable) */__webpack_exports__["b"] = Rgb;
	      /* unused harmony export hslConvert */
	      /* harmony export (immutable) */__webpack_exports__["f"] = hsl;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);

	      function Color() {}

	      var _darker = 0.7;

	      var _brighter = 1 / _darker;

	      var reI = "\\s*([+-]?\\d+)\\s*",
	          reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	          reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	          reHex3 = /^#([0-9a-f]{3})$/,
	          reHex6 = /^#([0-9a-f]{6})$/,
	          reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	          reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	          reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	          reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	          reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	          reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	      var named = {
	        aliceblue: 0xf0f8ff,
	        antiquewhite: 0xfaebd7,
	        aqua: 0x00ffff,
	        aquamarine: 0x7fffd4,
	        azure: 0xf0ffff,
	        beige: 0xf5f5dc,
	        bisque: 0xffe4c4,
	        black: 0x000000,
	        blanchedalmond: 0xffebcd,
	        blue: 0x0000ff,
	        blueviolet: 0x8a2be2,
	        brown: 0xa52a2a,
	        burlywood: 0xdeb887,
	        cadetblue: 0x5f9ea0,
	        chartreuse: 0x7fff00,
	        chocolate: 0xd2691e,
	        coral: 0xff7f50,
	        cornflowerblue: 0x6495ed,
	        cornsilk: 0xfff8dc,
	        crimson: 0xdc143c,
	        cyan: 0x00ffff,
	        darkblue: 0x00008b,
	        darkcyan: 0x008b8b,
	        darkgoldenrod: 0xb8860b,
	        darkgray: 0xa9a9a9,
	        darkgreen: 0x006400,
	        darkgrey: 0xa9a9a9,
	        darkkhaki: 0xbdb76b,
	        darkmagenta: 0x8b008b,
	        darkolivegreen: 0x556b2f,
	        darkorange: 0xff8c00,
	        darkorchid: 0x9932cc,
	        darkred: 0x8b0000,
	        darksalmon: 0xe9967a,
	        darkseagreen: 0x8fbc8f,
	        darkslateblue: 0x483d8b,
	        darkslategray: 0x2f4f4f,
	        darkslategrey: 0x2f4f4f,
	        darkturquoise: 0x00ced1,
	        darkviolet: 0x9400d3,
	        deeppink: 0xff1493,
	        deepskyblue: 0x00bfff,
	        dimgray: 0x696969,
	        dimgrey: 0x696969,
	        dodgerblue: 0x1e90ff,
	        firebrick: 0xb22222,
	        floralwhite: 0xfffaf0,
	        forestgreen: 0x228b22,
	        fuchsia: 0xff00ff,
	        gainsboro: 0xdcdcdc,
	        ghostwhite: 0xf8f8ff,
	        gold: 0xffd700,
	        goldenrod: 0xdaa520,
	        gray: 0x808080,
	        green: 0x008000,
	        greenyellow: 0xadff2f,
	        grey: 0x808080,
	        honeydew: 0xf0fff0,
	        hotpink: 0xff69b4,
	        indianred: 0xcd5c5c,
	        indigo: 0x4b0082,
	        ivory: 0xfffff0,
	        khaki: 0xf0e68c,
	        lavender: 0xe6e6fa,
	        lavenderblush: 0xfff0f5,
	        lawngreen: 0x7cfc00,
	        lemonchiffon: 0xfffacd,
	        lightblue: 0xadd8e6,
	        lightcoral: 0xf08080,
	        lightcyan: 0xe0ffff,
	        lightgoldenrodyellow: 0xfafad2,
	        lightgray: 0xd3d3d3,
	        lightgreen: 0x90ee90,
	        lightgrey: 0xd3d3d3,
	        lightpink: 0xffb6c1,
	        lightsalmon: 0xffa07a,
	        lightseagreen: 0x20b2aa,
	        lightskyblue: 0x87cefa,
	        lightslategray: 0x778899,
	        lightslategrey: 0x778899,
	        lightsteelblue: 0xb0c4de,
	        lightyellow: 0xffffe0,
	        lime: 0x00ff00,
	        limegreen: 0x32cd32,
	        linen: 0xfaf0e6,
	        magenta: 0xff00ff,
	        maroon: 0x800000,
	        mediumaquamarine: 0x66cdaa,
	        mediumblue: 0x0000cd,
	        mediumorchid: 0xba55d3,
	        mediumpurple: 0x9370db,
	        mediumseagreen: 0x3cb371,
	        mediumslateblue: 0x7b68ee,
	        mediumspringgreen: 0x00fa9a,
	        mediumturquoise: 0x48d1cc,
	        mediumvioletred: 0xc71585,
	        midnightblue: 0x191970,
	        mintcream: 0xf5fffa,
	        mistyrose: 0xffe4e1,
	        moccasin: 0xffe4b5,
	        navajowhite: 0xffdead,
	        navy: 0x000080,
	        oldlace: 0xfdf5e6,
	        olive: 0x808000,
	        olivedrab: 0x6b8e23,
	        orange: 0xffa500,
	        orangered: 0xff4500,
	        orchid: 0xda70d6,
	        palegoldenrod: 0xeee8aa,
	        palegreen: 0x98fb98,
	        paleturquoise: 0xafeeee,
	        palevioletred: 0xdb7093,
	        papayawhip: 0xffefd5,
	        peachpuff: 0xffdab9,
	        peru: 0xcd853f,
	        pink: 0xffc0cb,
	        plum: 0xdda0dd,
	        powderblue: 0xb0e0e6,
	        purple: 0x800080,
	        rebeccapurple: 0x663399,
	        red: 0xff0000,
	        rosybrown: 0xbc8f8f,
	        royalblue: 0x4169e1,
	        saddlebrown: 0x8b4513,
	        salmon: 0xfa8072,
	        sandybrown: 0xf4a460,
	        seagreen: 0x2e8b57,
	        seashell: 0xfff5ee,
	        sienna: 0xa0522d,
	        silver: 0xc0c0c0,
	        skyblue: 0x87ceeb,
	        slateblue: 0x6a5acd,
	        slategray: 0x708090,
	        slategrey: 0x708090,
	        snow: 0xfffafa,
	        springgreen: 0x00ff7f,
	        steelblue: 0x4682b4,
	        tan: 0xd2b48c,
	        teal: 0x008080,
	        thistle: 0xd8bfd8,
	        tomato: 0xff6347,
	        turquoise: 0x40e0d0,
	        violet: 0xee82ee,
	        wheat: 0xf5deb3,
	        white: 0xffffff,
	        whitesmoke: 0xf5f5f5,
	        yellow: 0xffff00,
	        yellowgreen: 0x9acd32
	      };

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
	        displayable: function displayable() {
	          return this.rgb().displayable();
	        },
	        toString: function toString() {
	          return this.rgb() + "";
	        }
	      });

	      function color(format) {
	        var m;
	        format = (format + "").trim().toLowerCase();
	        return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	        ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	        : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	      }

	      function rgbn(n) {
	        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	      }

	      function rgba(r, g, b, a) {
	        if (a <= 0) r = g = b = NaN;
	        return new Rgb(r, g, b, a);
	      }

	      function rgbConvert(o) {
	        if (!(o instanceof Color)) o = color(o);
	        if (!o) return new Rgb();
	        o = o.rgb();
	        return new Rgb(o.r, o.g, o.b, o.opacity);
	      }

	      function rgb(r, g, b, opacity) {
	        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	      }

	      function Rgb(r, g, b, opacity) {
	        this.r = +r;
	        this.g = +g;
	        this.b = +b;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	        brighter: function brighter(k) {
	          k = k == null ? _brighter : Math.pow(_brighter, k);
	          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? _darker : Math.pow(_darker, k);
	          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	        },
	        rgb: function rgb() {
	          return this;
	        },
	        displayable: function displayable() {
	          return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
	        },
	        toString: function toString() {
	          var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	          return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	        }
	      }));

	      function hsla(h, s, l, a) {
	        if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	        return new Hsl(h, s, l, a);
	      }

	      function hslConvert(o) {
	        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	        if (!(o instanceof Color)) o = color(o);
	        if (!o) return new Hsl();
	        if (o instanceof Hsl) return o;
	        o = o.rgb();
	        var r = o.r / 255,
	            g = o.g / 255,
	            b = o.b / 255,
	            min = Math.min(r, g, b),
	            max = Math.max(r, g, b),
	            h = NaN,
	            s = max - min,
	            l = (max + min) / 2;
	        if (s) {
	          if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	          s /= l < 0.5 ? max + min : 2 - max - min;
	          h *= 60;
	        } else {
	          s = l > 0 && l < 1 ? 0 : h;
	        }
	        return new Hsl(h, s, l, o.opacity);
	      }

	      function hsl(h, s, l, opacity) {
	        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	      }

	      function Hsl(h, s, l, opacity) {
	        this.h = +h;
	        this.s = +s;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	        brighter: function brighter(k) {
	          k = k == null ? _brighter : Math.pow(_brighter, k);
	          return new Hsl(this.h, this.s, this.l * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? _darker : Math.pow(_darker, k);
	          return new Hsl(this.h, this.s, this.l * k, this.opacity);
	        },
	        rgb: function rgb() {
	          var h = this.h % 360 + (this.h < 0) * 360,
	              s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	              l = this.l,
	              m2 = l + (l < 0.5 ? l : 1 - l) * s,
	              m1 = 2 * l - m2;
	          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	        },
	        displayable: function displayable() {
	          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	        }
	      }));

	      /* From FvD 13.37, CSS Color Module Level 3 */
	      function hsl2rgb(h, m1, m2) {
	        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	      }

	      /***/
	    },
	    /* 50 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["b"] = extend;
	      /* harmony default export */__webpack_exports__["a"] = function (constructor, factory, prototype) {
	        constructor.prototype = factory.prototype = prototype;
	        prototype.constructor = constructor;
	      };

	      function extend(parent, definition) {
	        var prototype = Object.create(parent.prototype);
	        for (var key in definition) {
	          prototype[key] = definition[key];
	        }return prototype;
	      }

	      /***/
	    },
	    /* 51 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = basis;
	      function basis(t1, v0, v1, v2, v3) {
	        var t2 = t1 * t1,
	            t3 = t2 * t1;
	        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
	      }

	      /* harmony default export */__webpack_exports__["b"] = function (values) {
	        var n = values.length - 1;
	        return function (t) {
	          var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	              v1 = values[i],
	              v2 = values[i + 1],
	              v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	              v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	          return basis((t - i / n) * n, v0, v1, v2, v3);
	        };
	      };

	      /***/
	    },
	    /* 52 */
	    /***/function (module, exports, __webpack_require__) {

	      var vec2 = __webpack_require__(3).vec2;

	      module.exports = {
	        at: function at(p1, p2, t) {
	          return (p2 - p1) * t + p1;
	        },
	        pointDistance: function pointDistance(x1, y1, x2, y2, x, y) {
	          var d = [x2 - x1, y2 - y1];
	          if (vec2.exactEquals(d, [0, 0])) {
	            return NaN;
	          }

	          var u = [-d[1], d[0]];
	          vec2.normalize(u, u);
	          var a = [x - x1, y - y1];
	          return Math.abs(vec2.dot(a, u));
	        },
	        box: function box(x1, y1, x2, y2, lineWidth) {
	          var halfWidth = lineWidth / 2;
	          var minX = Math.min(x1, x2);
	          var maxX = Math.max(x1, x2);
	          var minY = Math.min(y1, y2);
	          var maxY = Math.max(y1, y2);

	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        len: function len(x1, y1, x2, y2) {
	          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	        }
	      };

	      /***/
	    },
	    /* 53 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	      }

	      function quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, out) {
	        var t = void 0;
	        var interval = 0.005;
	        var d = Infinity;
	        var d1 = void 0;
	        var v1 = void 0;
	        var v2 = void 0;
	        var _t = void 0;
	        var d2 = void 0;
	        var i = void 0;
	        var EPSILON = 0.0001;
	        var v0 = [x, y];

	        for (_t = 0; _t < 1; _t += 0.05) {
	          v1 = [quadraticAt(x1, x2, x3, _t), quadraticAt(y1, y2, y3, _t)];

	          d1 = vec2.squaredDistance(v0, v1);
	          if (d1 < d) {
	            t = _t;
	            d = d1;
	          }
	        }
	        d = Infinity;

	        for (i = 0; i < 32; i++) {
	          if (interval < EPSILON) {
	            break;
	          }

	          var prev = t - interval;
	          var next = t + interval;

	          v1 = [quadraticAt(x1, x2, x3, prev), quadraticAt(y1, y2, y3, prev)];

	          d1 = vec2.squaredDistance(v0, v1);

	          if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	          } else {
	            v2 = [quadraticAt(x1, x2, x3, next), quadraticAt(y1, y2, y3, next)];

	            d2 = vec2.squaredDistance(v0, v2);

	            if (next <= 1 && d2 < d) {
	              t = next;
	              d = d2;
	            } else {
	              interval *= 0.5;
	            }
	          }
	        }

	        if (out) {
	          out.x = quadraticAt(x1, x2, x3, t);
	          out.y = quadraticAt(y1, y2, y3, t);
	        }

	        return Math.sqrt(d);
	      }

	      function quadraticExtrema(p0, p1, p2) {
	        var a = p0 + p2 - 2 * p1;
	        if (Util.isNumberEqual(a, 0)) {
	          return [0.5];
	        }
	        var rst = (p0 - p1) / a;
	        if (rst <= 1 && rst >= 0) {
	          return [rst];
	        }
	        return [];
	      }

	      module.exports = {
	        at: quadraticAt,
	        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x, y) {
	          var rst = {};
	          quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, rst);
	          return rst;
	        },

	        pointDistance: quadraticProjectPoint,
	        extrema: quadraticExtrema
	      };

	      /***/
	    },
	    /* 54 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function circlePoint(cx, cy, r, angle) {
	        return {
	          x: Math.cos(angle) * r + cx,
	          y: Math.sin(angle) * r + cy
	        };
	      }

	      function angleNearTo(angle, min, max, out) {
	        var v1 = void 0;
	        var v2 = void 0;
	        if (out) {
	          if (angle < min) {
	            v1 = min - angle;
	            v2 = Math.PI * 2 - max + angle;
	          } else if (angle > max) {
	            v1 = Math.PI * 2 - angle + min;
	            v2 = angle - max;
	          }
	        } else {
	          v1 = angle - min;
	          v2 = max - angle;
	        }

	        return v1 > v2 ? max : min;
	      }

	      function nearAngle(angle, startAngle, endAngle, clockwise) {
	        var plus = 0;
	        if (endAngle - startAngle >= Math.PI * 2) {
	          plus = Math.PI * 2;
	        }
	        startAngle = Util.mod(startAngle, Math.PI * 2);
	        endAngle = Util.mod(endAngle, Math.PI * 2) + plus;
	        angle = Util.mod(angle, Math.PI * 2);
	        if (clockwise) {
	          if (startAngle >= endAngle) {
	            if (angle > endAngle && angle < startAngle) {
	              return angle;
	            }
	            return angleNearTo(angle, endAngle, startAngle, true);
	          }
	          if (angle < startAngle || angle > endAngle) {
	            return angle;
	          }
	          return angleNearTo(angle, startAngle, endAngle);
	        }
	        if (startAngle <= endAngle) {
	          if (startAngle < angle && angle < endAngle) {
	            return angle;
	          }
	          return angleNearTo(angle, startAngle, endAngle, true);
	        }
	        if (angle > startAngle || angle < endAngle) {
	          return angle;
	        }
	        return angleNearTo(angle, endAngle, startAngle);
	      }

	      function arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, out) {
	        var v = [x, y];
	        var v0 = [cx, cy];
	        var v1 = [1, 0];
	        var subv = vec2.subtract([], v, v0);
	        var angle = vec2.angleTo(v1, subv);

	        angle = nearAngle(angle, startAngle, endAngle, clockwise);
	        var vpoint = [r * Math.cos(angle) + cx, r * Math.sin(angle) + cy];
	        if (out) {
	          out.x = vpoint[0];
	          out.y = vpoint[1];
	        }
	        var d = vec2.distance(vpoint, v);
	        return d;
	      }

	      function arcBox(cx, cy, r, startAngle, endAngle, clockwise) {
	        var angleRight = 0;
	        var angleBottom = Math.PI / 2;
	        var angleLeft = Math.PI;
	        var angleTop = Math.PI * 3 / 2;
	        var points = [];
	        var angle = nearAngle(angleRight, startAngle, endAngle, clockwise);
	        if (angle === angleRight) {
	          points.push(circlePoint(cx, cy, r, angleRight));
	        }

	        angle = nearAngle(angleBottom, startAngle, endAngle, clockwise);
	        if (angle === angleBottom) {
	          points.push(circlePoint(cx, cy, r, angleBottom));
	        }

	        angle = nearAngle(angleLeft, startAngle, endAngle, clockwise);
	        if (angle === angleLeft) {
	          points.push(circlePoint(cx, cy, r, angleLeft));
	        }

	        angle = nearAngle(angleTop, startAngle, endAngle, clockwise);
	        if (angle === angleTop) {
	          points.push(circlePoint(cx, cy, r, angleTop));
	        }

	        points.push(circlePoint(cx, cy, r, startAngle));
	        points.push(circlePoint(cx, cy, r, endAngle));
	        var minX = Infinity;
	        var maxX = -Infinity;
	        var minY = Infinity;
	        var maxY = -Infinity;
	        Util.each(points, function (point) {
	          if (minX > point.x) {
	            minX = point.x;
	          }
	          if (maxX < point.x) {
	            maxX = point.x;
	          }
	          if (minY > point.y) {
	            minY = point.y;
	          }
	          if (maxY < point.y) {
	            maxY = point.y;
	          }
	        });

	        return {
	          minX: minX,
	          minY: minY,
	          maxX: maxX,
	          maxY: maxY
	        };
	      }

	      module.exports = {
	        nearAngle: nearAngle,
	        projectPoint: function projectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y) {
	          var rst = {};
	          arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, rst);
	          return rst;
	        },

	        pointDistance: arcProjectPoint,
	        box: arcBox
	      };

	      /***/
	    },
	    /* 55 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Rect = function Rect(cfg) {
	        Rect.superclass.constructor.call(this, cfg);
	      };

	      Rect.ATTRS = {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0,
	        radius: 0,
	        lineWidth: 1
	      };

	      Util.extend(Rect, Shape);

	      Util.augment(Rect, {
	        canFill: true,
	        canStroke: true,
	        type: 'rect',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            radius: 0
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var lineWidth = this.getHitLineWidth();

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: x - halfWidth,
	            minY: y - halfWidth,
	            maxX: x + width + halfWidth,
	            maxY: y + height + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var context = this.get('context');

	          if (!context) return false;
	          this.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var rx = attrs.x;
	          var ry = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var radius = attrs.radius;
	          var lineWidth = this.getHitLineWidth();

	          if (radius === 0) {
	            var halfWidth = lineWidth / 2;
	            return Inside.line(rx - halfWidth, ry, rx + width + halfWidth, ry, lineWidth, x, y) || Inside.line(rx + width, ry - halfWidth, rx + width, ry + height + halfWidth, lineWidth, x, y) || Inside.line(rx + width + halfWidth, ry + height, rx - halfWidth, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height + halfWidth, rx, ry - halfWidth, lineWidth, x, y);
	          }

	          return Inside.line(rx + radius, ry, rx + width - radius, ry, lineWidth, x, y) || Inside.line(rx + width, ry + radius, rx + width, ry + height - radius, lineWidth, x, y) || Inside.line(rx + width - radius, ry + height, rx + radius, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height - radius, rx, ry + radius, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + radius, radius, 1.5 * Math.PI, 2 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + height - radius, radius, 0, 0.5 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + height - radius, radius, 0.5 * Math.PI, Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + radius, radius, Math.PI, 1.5 * Math.PI, false, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var radius = attrs.radius;
	          context = context || self.get('context');

	          context.beginPath();
	          if (radius === 0) {
	            // 改成原生的rect方法
	            context.rect(x, y, width, height);
	          } else {
	            context.moveTo(x + radius, y);
	            context.lineTo(x + width - radius, y);
	            context.arc(x + width - radius, y + radius, radius, -Math.PI / 2, 0, false);
	            context.lineTo(x + width, y + height - radius);
	            context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2, false);
	            context.lineTo(x + radius, y + height);
	            context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI, false);
	            context.lineTo(x, y + radius);
	            context.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 3 / 2, false);
	            context.closePath();
	          }
	        }
	      });

	      module.exports = Rect;

	      /***/
	    },
	    /* 56 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (global) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        /** Detect free variable `global` from Node.js. */
	        var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	        module.exports = freeGlobal;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(115));

	      /***/
	    },
	    /* 57 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isArray = __webpack_require__(6),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var stringTag = '[object String]';

	      /**
	       * Checks if `value` is classified as a `String` primitive or object.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	       * @example
	       *
	       * _.isString('abc');
	       * // => true
	       *
	       * _.isString(1);
	       * // => false
	       */
	      function isString(value) {
	        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
	      }

	      module.exports = isString;

	      /***/
	    },
	    /* 58 */
	    /***/function (module, exports, __webpack_require__) {

	      var isPrototype = __webpack_require__(17),
	          nativeKeys = __webpack_require__(122);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function baseKeys(object) {
	        if (!isPrototype(object)) {
	          return nativeKeys(object);
	        }
	        var result = [];
	        for (var key in Object(object)) {
	          if (hasOwnProperty.call(object, key) && key != 'constructor') {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = baseKeys;

	      /***/
	    },
	    /* 59 */
	    /***/function (module, exports) {

	      /**
	       * Creates a unary function that invokes `func` with its argument transformed.
	       *
	       * @private
	       * @param {Function} func The function to wrap.
	       * @param {Function} transform The argument transform.
	       * @returns {Function} Returns the new function.
	       */
	      function overArg(func, transform) {
	        return function (arg) {
	          return func(transform(arg));
	        };
	      }

	      module.exports = overArg;

	      /***/
	    },
	    /* 60 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /**
	       * Converts `func` to its source code.
	       *
	       * @private
	       * @param {Function} func The function to convert.
	       * @returns {string} Returns the source code.
	       */
	      function toSource(func) {
	        if (func != null) {
	          try {
	            return funcToString.call(func);
	          } catch (e) {}
	          try {
	            return func + '';
	          } catch (e) {}
	        }
	        return '';
	      }

	      module.exports = toSource;

	      /***/
	    },
	    /* 61 */
	    /***/function (module, exports) {

	      /** Used as references for various `Number` constants. */
	      var MAX_SAFE_INTEGER = 9007199254740991;

	      /**
	       * Checks if `value` is a valid array-like length.
	       *
	       * **Note:** This method is loosely based on
	       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	       * @example
	       *
	       * _.isLength(3);
	       * // => true
	       *
	       * _.isLength(Number.MIN_VALUE);
	       * // => false
	       *
	       * _.isLength(Infinity);
	       * // => false
	       *
	       * _.isLength('3');
	       * // => false
	       */
	      function isLength(value) {
	        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	      }

	      module.exports = isLength;

	      /***/
	    },
	    /* 62 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.unary` without support for storing metadata.
	       *
	       * @private
	       * @param {Function} func The function to cap arguments for.
	       * @returns {Function} Returns the new capped function.
	       */
	      function baseUnary(func) {
	        return function (value) {
	          return func(value);
	        };
	      }

	      module.exports = baseUnary;

	      /***/
	    },
	    /* 63 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseToString = __webpack_require__(136);

	      /**
	       * Converts `value` to a string. An empty string is returned for `null`
	       * and `undefined` values. The sign of `-0` is preserved.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {string} Returns the converted string.
	       * @example
	       *
	       * _.toString(null);
	       * // => ''
	       *
	       * _.toString(-0);
	       * // => '-0'
	       *
	       * _.toString([1, 2, 3]);
	       * // => '1,2,3'
	       */
	      function toString(value) {
	        return value == null ? '' : baseToString(value);
	      }

	      module.exports = toString;

	      /***/
	    },
	    /* 64 */
	    /***/function (module, exports, __webpack_require__) {

	      var mapCacheClear = __webpack_require__(150),
	          mapCacheDelete = __webpack_require__(157),
	          mapCacheGet = __webpack_require__(159),
	          mapCacheHas = __webpack_require__(160),
	          mapCacheSet = __webpack_require__(161);

	      /**
	       * Creates a map cache object to store key-value pairs.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function MapCache(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `MapCache`.
	      MapCache.prototype.clear = mapCacheClear;
	      MapCache.prototype['delete'] = mapCacheDelete;
	      MapCache.prototype.get = mapCacheGet;
	      MapCache.prototype.has = mapCacheHas;
	      MapCache.prototype.set = mapCacheSet;

	      module.exports = MapCache;

	      /***/
	    },
	    /* 65 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.forEach` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns `array`.
	       */
	      function arrayEach(array, iteratee) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        while (++index < length) {
	          if (iteratee(array[index], index, array) === false) {
	            break;
	          }
	        }
	        return array;
	      }

	      module.exports = arrayEach;

	      /***/
	    },
	    /* 66 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10);

	      var defineProperty = function () {
	        try {
	          var func = getNative(Object, 'defineProperty');
	          func({}, '', {});
	          return func;
	        } catch (e) {}
	      }();

	      module.exports = defineProperty;

	      /***/
	    },
	    /* 67 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseTimes = __webpack_require__(163),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isIndex = __webpack_require__(68),
	          isTypedArray = __webpack_require__(23);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Creates an array of the enumerable property names of the array-like `value`.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @param {boolean} inherited Specify returning inherited property names.
	       * @returns {Array} Returns the array of property names.
	       */
	      function arrayLikeKeys(value, inherited) {
	        var isArr = isArray(value),
	            isArg = !isArr && isArguments(value),
	            isBuff = !isArr && !isArg && isBuffer(value),
	            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	            skipIndexes = isArr || isArg || isBuff || isType,
	            result = skipIndexes ? baseTimes(value.length, String) : [],
	            length = result.length;

	        for (var key in value) {
	          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	          // Safari 9 has enumerable `arguments.length` in strict mode.
	          key == 'length' ||
	          // Node.js 0.10 has enumerable non-index properties on buffers.
	          isBuff && (key == 'offset' || key == 'parent') ||
	          // PhantomJS 2 has enumerable non-index properties on typed arrays.
	          isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	          // Skip index properties.
	          isIndex(key, length)))) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = arrayLikeKeys;

	      /***/
	    },
	    /* 68 */
	    /***/function (module, exports) {

	      /** Used as references for various `Number` constants. */
	      var MAX_SAFE_INTEGER = 9007199254740991;

	      /** Used to detect unsigned integer values. */
	      var reIsUint = /^(?:0|[1-9]\d*)$/;

	      /**
	       * Checks if `value` is a valid array-like index.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	       */
	      function isIndex(value, length) {
	        length = length == null ? MAX_SAFE_INTEGER : length;
	        return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	      }

	      module.exports = isIndex;

	      /***/
	    },
	    /* 69 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var root = __webpack_require__(4);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Built-in value references. */
	        var Buffer = moduleExports ? root.Buffer : undefined,
	            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	        /**
	         * Creates a clone of  `buffer`.
	         *
	         * @private
	         * @param {Buffer} buffer The buffer to clone.
	         * @param {boolean} [isDeep] Specify a deep clone.
	         * @returns {Buffer} Returns the cloned buffer.
	         */
	        function cloneBuffer(buffer, isDeep) {
	          if (isDeep) {
	            return buffer.slice();
	          }
	          var length = buffer.length,
	              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	          buffer.copy(result);
	          return result;
	        }

	        module.exports = cloneBuffer;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 70 */
	    /***/function (module, exports) {

	      /**
	       * This method returns a new empty array.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.13.0
	       * @category Util
	       * @returns {Array} Returns the new empty array.
	       * @example
	       *
	       * var arrays = _.times(2, _.stubArray);
	       *
	       * console.log(arrays);
	       * // => [[], []]
	       *
	       * console.log(arrays[0] === arrays[1]);
	       * // => false
	       */
	      function stubArray() {
	        return [];
	      }

	      module.exports = stubArray;

	      /***/
	    },
	    /* 71 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayPush = __webpack_require__(72),
	          getPrototype = __webpack_require__(40),
	          getSymbols = __webpack_require__(39),
	          stubArray = __webpack_require__(70);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeGetSymbols = Object.getOwnPropertySymbols;

	      /**
	       * Creates an array of the own and inherited enumerable symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of symbols.
	       */
	      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
	        var result = [];
	        while (object) {
	          arrayPush(result, getSymbols(object));
	          object = getPrototype(object);
	        }
	        return result;
	      };

	      module.exports = getSymbolsIn;

	      /***/
	    },
	    /* 72 */
	    /***/function (module, exports) {

	      /**
	       * Appends the elements of `values` to `array`.
	       *
	       * @private
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to append.
	       * @returns {Array} Returns `array`.
	       */
	      function arrayPush(array, values) {
	        var index = -1,
	            length = values.length,
	            offset = array.length;

	        while (++index < length) {
	          array[offset + index] = values[index];
	        }
	        return array;
	      }

	      module.exports = arrayPush;

	      /***/
	    },
	    /* 73 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetAllKeys = __webpack_require__(74),
	          getSymbols = __webpack_require__(39),
	          keys = __webpack_require__(13);

	      /**
	       * Creates an array of own enumerable property names and symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function getAllKeys(object) {
	        return baseGetAllKeys(object, keys, getSymbols);
	      }

	      module.exports = getAllKeys;

	      /***/
	    },
	    /* 74 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayPush = __webpack_require__(72),
	          isArray = __webpack_require__(6);

	      /**
	       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	       * symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {Function} keysFunc The function to get the keys of `object`.
	       * @param {Function} symbolsFunc The function to get the symbols of `object`.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	        var result = keysFunc(object);
	        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	      }

	      module.exports = baseGetAllKeys;

	      /***/
	    },
	    /* 75 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Built-in value references. */
	      var Uint8Array = root.Uint8Array;

	      module.exports = Uint8Array;

	      /***/
	    },
	    /* 76 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.reduce` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @param {*} [accumulator] The initial value.
	       * @param {boolean} [initAccum] Specify using the first element of `array` as
	       *  the initial value.
	       * @returns {*} Returns the accumulated value.
	       */
	      function arrayReduce(array, iteratee, accumulator, initAccum) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        if (initAccum && length) {
	          accumulator = array[++index];
	        }
	        while (++index < length) {
	          accumulator = iteratee(accumulator, array[index], index, array);
	        }
	        return accumulator;
	      }

	      module.exports = arrayReduce;

	      /***/
	    },
	    /* 77 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41);

	      /**
	       * Creates a clone of `typedArray`.
	       *
	       * @private
	       * @param {Object} typedArray The typed array to clone.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned typed array.
	       */
	      function cloneTypedArray(typedArray, isDeep) {
	        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	      }

	      module.exports = cloneTypedArray;

	      /***/
	    },
	    /* 78 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseCreate = __webpack_require__(180),
	          getPrototype = __webpack_require__(40),
	          isPrototype = __webpack_require__(17);

	      /**
	       * Initializes an object clone.
	       *
	       * @private
	       * @param {Object} object The object to clone.
	       * @returns {Object} Returns the initialized clone.
	       */
	      function initCloneObject(object) {
	        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	      }

	      module.exports = initCloneObject;

	      /***/
	    },
	    /* 79 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseRest = __webpack_require__(80),
	          isIterateeCall = __webpack_require__(188);

	      /**
	       * Creates a function like `_.assign`.
	       *
	       * @private
	       * @param {Function} assigner The function to assign values.
	       * @returns {Function} Returns the new assigner function.
	       */
	      function createAssigner(assigner) {
	        return baseRest(function (object, sources) {
	          var index = -1,
	              length = sources.length,
	              customizer = length > 1 ? sources[length - 1] : undefined,
	              guard = length > 2 ? sources[2] : undefined;

	          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

	          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	            customizer = length < 3 ? undefined : customizer;
	            length = 1;
	          }
	          object = Object(object);
	          while (++index < length) {
	            var source = sources[index];
	            if (source) {
	              assigner(object, source, index, customizer);
	            }
	          }
	          return object;
	        });
	      }

	      module.exports = createAssigner;

	      /***/
	    },
	    /* 80 */
	    /***/function (module, exports, __webpack_require__) {

	      var identity = __webpack_require__(44),
	          overRest = __webpack_require__(182),
	          setToString = __webpack_require__(184);

	      /**
	       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	       *
	       * @private
	       * @param {Function} func The function to apply a rest parameter to.
	       * @param {number} [start=func.length-1] The start position of the rest parameter.
	       * @returns {Function} Returns the new function.
	       */
	      function baseRest(func, start) {
	        return setToString(overRest(func, start, identity), func + '');
	      }

	      module.exports = baseRest;

	      /***/
	    },
	    /* 81 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseAssignValue = __webpack_require__(38),
	          eq = __webpack_require__(19);

	      /**
	       * This function is like `assignValue` except that it doesn't assign
	       * `undefined` values.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function assignMergeValue(object, key, value) {
	        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
	          baseAssignValue(object, key, value);
	        }
	      }

	      module.exports = assignMergeValue;

	      /***/
	    },
	    /* 82 */
	    /***/function (module, exports, __webpack_require__) {

	      var createBaseFor = __webpack_require__(191);

	      /**
	       * The base implementation of `baseForOwn` which iterates over `object`
	       * properties returned by `keysFunc` and invokes `iteratee` for each property.
	       * Iteratee functions may exit iteration early by explicitly returning `false`.
	       *
	       * @private
	       * @param {Object} object The object to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @param {Function} keysFunc The function to get the keys of `object`.
	       * @returns {Object} Returns `object`.
	       */
	      var baseFor = createBaseFor();

	      module.exports = baseFor;

	      /***/
	    },
	    /* 83 */
	    /***/function (module, exports) {

	      /** Used to compose unicode character classes. */
	      var rsAstralRange = '\\ud800-\\udfff',
	          rsComboMarksRange = '\\u0300-\\u036f',
	          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	          rsComboSymbolsRange = '\\u20d0-\\u20ff',
	          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	          rsVarRange = '\\ufe0e\\ufe0f';

	      /** Used to compose unicode capture groups. */
	      var rsZWJ = '\\u200d';

	      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

	      /**
	       * Checks if `string` contains Unicode symbols.
	       *
	       * @private
	       * @param {string} string The string to inspect.
	       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	       */
	      function hasUnicode(string) {
	        return reHasUnicode.test(string);
	      }

	      module.exports = hasUnicode;

	      /***/
	    },
	    /* 84 */
	    /***/function (module, exports, __webpack_require__) {

	      var asciiToArray = __webpack_require__(200),
	          hasUnicode = __webpack_require__(83),
	          unicodeToArray = __webpack_require__(201);

	      /**
	       * Converts `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function stringToArray(string) {
	        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
	      }

	      module.exports = stringToArray;

	      /***/
	    },
	    /* 85 */
	    /***/function (module, exports, __webpack_require__) {

	      var SetCache = __webpack_require__(218),
	          arraySome = __webpack_require__(221),
	          cacheHas = __webpack_require__(222);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1,
	          COMPARE_UNORDERED_FLAG = 2;

	      /**
	       * A specialized version of `baseIsEqualDeep` for arrays with support for
	       * partial deep comparisons.
	       *
	       * @private
	       * @param {Array} array The array to compare.
	       * @param {Array} other The other array to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `array` and `other` objects.
	       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	       */
	      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	            arrLength = array.length,
	            othLength = other.length;

	        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	          return false;
	        }
	        // Assume cyclic values are equal.
	        var stacked = stack.get(array);
	        if (stacked && stack.get(other)) {
	          return stacked == other;
	        }
	        var index = -1,
	            result = true,
	            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

	        stack.set(array, other);
	        stack.set(other, array);

	        // Ignore non-index properties.
	        while (++index < arrLength) {
	          var arrValue = array[index],
	              othValue = other[index];

	          if (customizer) {
	            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	          }
	          if (compared !== undefined) {
	            if (compared) {
	              continue;
	            }
	            result = false;
	            break;
	          }
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (seen) {
	            if (!arraySome(other, function (othValue, othIndex) {
	              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                return seen.push(othIndex);
	              }
	            })) {
	              result = false;
	              break;
	            }
	          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	            result = false;
	            break;
	          }
	        }
	        stack['delete'](array);
	        stack['delete'](other);
	        return result;
	      }

	      module.exports = equalArrays;

	      /***/
	    },
	    /* 86 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(16);

	      var TABLE = document.createElement('table');
	      var TABLE_TR = document.createElement('tr');
	      var FRAGMENT_REG = /^\s*<(\w+|!)[^>]*>/;
	      var CONTAINERS = {
	        tr: document.createElement('tbody'),
	        tbody: TABLE,
	        thead: TABLE,
	        tfoot: TABLE,
	        td: TABLE_TR,
	        th: TABLE_TR,
	        '*': document.createElement('div')
	      };

	      module.exports = {
	        getBoundingClientRect: function getBoundingClientRect(node, defaultValue) {
	          if (node && node.getBoundingClientRect) {
	            var rect = node.getBoundingClientRect();
	            var top = document.documentElement.clientTop;
	            var left = document.documentElement.clientLeft;
	            return {
	              top: rect.top - top,
	              bottom: rect.bottom - top,
	              left: rect.left - left,
	              right: rect.right - left
	            };
	          }
	          return defaultValue || null;
	        },

	        /**
	         * 获取样式
	         * @param  {Object} dom DOM节点
	         * @param  {String} name 样式名
	         * @param  {Any} defaultValue 默认值
	         * @return {String} 属性值
	         */
	        getStyle: function getStyle(dom, name, defaultValue) {
	          try {
	            if (window.getComputedStyle) {
	              return window.getComputedStyle(dom, null)[name];
	            }
	            return dom.currentStyle[name];
	          } catch (e) {
	            if (!Util.isNil(defaultValue)) {
	              return defaultValue;
	            }
	            return null;
	          }
	        },
	        modifyCSS: function modifyCSS(dom, css) {
	          if (dom) {
	            for (var key in css) {
	              if (css.hasOwnProperty(key)) {
	                dom.style[key] = css[key];
	              }
	            }
	          }
	          return dom;
	        },

	        /**
	         * 创建DOM 节点
	         * @param  {String} str Dom 字符串
	         * @return {HTMLElement}  DOM 节点
	         */
	        createDom: function createDom(str) {
	          var name = FRAGMENT_REG.test(str) && RegExp.$1;
	          if (!(name in CONTAINERS)) {
	            name = '*';
	          }
	          var container = CONTAINERS[name];
	          str = str.replace(/(^\s*)|(\s*$)/g, '');
	          container.innerHTML = '' + str;
	          var dom = container.childNodes[0];
	          container.removeChild(dom);
	          return dom;
	        },
	        getRatio: function getRatio() {
	          return window.devicePixelRatio ? window.devicePixelRatio : 2;
	        },

	        /**
	         * 获取宽度
	         * @param  {HTMLElement} el  dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 宽度
	         */
	        getWidth: function getWidth(el, defaultValue) {
	          var width = this.getStyle(el, 'width', defaultValue);
	          if (width === 'auto') {
	            width = el.offsetWidth;
	          }
	          return parseFloat(width);
	        },

	        /**
	         * 获取高度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 高度
	         */
	        getHeight: function getHeight(el, defaultValue) {
	          var height = this.getStyle(el, 'height', defaultValue);
	          if (height === 'auto') {
	            height = el.offsetHeight;
	          }
	          return parseFloat(height);
	        },

	        /**
	         * 获取外层高度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 高度
	         */
	        getOuterHeight: function getOuterHeight(el, defaultValue) {
	          var height = this.getHeight(el, defaultValue);
	          var bTop = parseFloat(this.getStyle(el, 'borderTopWidth')) || 0;
	          var pTop = parseFloat(this.getStyle(el, 'paddingTop')) || 0;
	          var pBottom = parseFloat(this.getStyle(el, 'paddingBottom')) || 0;
	          var bBottom = parseFloat(this.getStyle(el, 'borderBottomWidth')) || 0;
	          return height + bTop + bBottom + pTop + pBottom;
	        },

	        /**
	         * 获取外层宽度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 宽度
	         */
	        getOuterWidth: function getOuterWidth(el, defaultValue) {
	          var width = this.getWidth(el, defaultValue);
	          var bLeft = parseFloat(this.getStyle(el, 'borderLeftWidth')) || 0;
	          var pLeft = parseFloat(this.getStyle(el, 'paddingLeft')) || 0;
	          var pRight = parseFloat(this.getStyle(el, 'paddingRight')) || 0;
	          var bRight = parseFloat(this.getStyle(el, 'borderRightWidth')) || 0;
	          return width + bLeft + bRight + pLeft + pRight;
	        },

	        /**
	         * 添加事件监听器
	         * @param  {Object} target DOM对象
	         * @param  {String} eventType 事件名
	         * @param  {Funtion} callback 回调函数
	         * @return {Object} 返回对象
	         */
	        addEventListener: function addEventListener(target, eventType, callback) {
	          if (target) {
	            if (target.addEventListener) {
	              target.addEventListener(eventType, callback, false);
	              return {
	                remove: function remove() {
	                  target.removeEventListener(eventType, callback, false);
	                }
	              };
	            } else if (target.attachEvent) {
	              target.attachEvent('on' + eventType, callback);
	              return {
	                remove: function remove() {
	                  target.detachEvent('on' + eventType, callback);
	                }
	              };
	            }
	          }
	        },
	        requestAnimationFrame: function requestAnimationFrame(fn) {
	          var method = window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {
	            return setTimeout(fn, 16);
	          };

	          return method(fn);
	        }
	      };

	      /***/
	    },
	    /* 87 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var Event = function Event(type, event, bubbles, cancelable) {
	        this.type = type; // 事件类型
	        this.target = null; // 目标
	        this.currentTarget = null; // 当前目标
	        this.bubbles = bubbles; // 冒泡
	        this.cancelable = cancelable; // 是否能够阻止
	        this.timeStamp = new Date().getTime(); // 时间戳
	        this.defaultPrevented = false; // 阻止默认
	        this.propagationStopped = false; // 阻止冒泡
	        this.removed = false; // 是否被移除
	        this.event = event; // 触发的原生事件
	      };

	      Util.augment(Event, {
	        preventDefault: function preventDefault() {
	          this.defaultPrevented = this.cancelable && true;
	        },
	        stopPropagation: function stopPropagation() {
	          this.propagationStopped = true;
	        },
	        remove: function remove() {
	          this.remove = true;
	        },
	        clone: function clone() {
	          return Util.clone(this);
	        },
	        toString: function toString() {
	          return '[Event (type=' + this.type + ')]';
	        }
	      });

	      module.exports = Event;

	      /***/
	    },
	    /* 88 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Element = __webpack_require__(89);
	      var Shape = __webpack_require__(263);
	      var SHAPE_MAP = {}; // 缓存图形类型
	      var INDEX = '_INDEX';

	      function find(children, x, y) {
	        var rst = void 0;
	        for (var i = children.length - 1; i >= 0; i--) {
	          var child = children[i];
	          if (child.__cfg.visible && child.__cfg.capture) {
	            if (child.isGroup) {
	              rst = child.getShape(x, y);
	            } else if (child.isHit(x, y)) {
	              rst = child;
	            }
	          }
	          if (rst) {
	            break;
	          }
	        }
	        return rst;
	      }

	      function getComparer(compare) {
	        return function (left, right) {
	          var result = compare(left, right);
	          return result === 0 ? left[INDEX] - right[INDEX] : result;
	        };
	      }

	      var Group = function Group(cfg) {
	        Group.superclass.constructor.call(this, cfg);
	        this.set('children', []);

	        this._beforeRenderUI();
	        this._renderUI();
	        this._bindUI();
	      };

	      function initClassCfgs(c) {
	        if (c.__cfg || c === Group) {
	          return;
	        }
	        var superCon = c.superclass.constructor;
	        if (superCon && !superCon.__cfg) {
	          initClassCfgs(superCon);
	        }
	        c.__cfg = {};

	        Util.merge(c.__cfg, superCon.__cfg);
	        Util.merge(c.__cfg, c.CFG);
	      }

	      Util.extend(Group, Element);

	      Util.augment(Group, {
	        isGroup: true,
	        canFill: true,
	        canStroke: true,
	        getDefaultCfg: function getDefaultCfg() {
	          initClassCfgs(this.constructor);
	          return Util.merge({}, this.constructor.__cfg);
	        },
	        _beforeRenderUI: function _beforeRenderUI() {},
	        _renderUI: function _renderUI() {},
	        _bindUI: function _bindUI() {},
	        addShape: function addShape(type, cfg) {
	          var canvas = this.get('canvas');
	          cfg = cfg || {};
	          var shapeType = SHAPE_MAP[type];
	          if (!shapeType) {
	            shapeType = Util.upperFirst(type);
	            SHAPE_MAP[type] = shapeType;
	          }
	          if (cfg.attrs) {
	            var attrs = cfg.attrs;
	            if (type === 'text') {
	              // 临时解决
	              var topFontFamily = canvas.get('fontFamily');
	              if (topFontFamily) {
	                attrs.fontFamily = attrs.fontFamily ? attrs.fontFamily : topFontFamily;
	              }
	            }
	          }
	          cfg.canvas = canvas;
	          cfg.type = type;
	          var rst = new Shape[shapeType](cfg);
	          this.add(rst);
	          return rst;
	        },

	        /** 添加图组
	         * @param  {Function|Object|undefined} param 图组类
	         * @param  {Object} cfg 配置项
	         * @return {Object} rst 图组
	         */
	        addGroup: function addGroup(param, cfg) {
	          var canvas = this.get('canvas');
	          var rst = void 0;
	          cfg = Util.merge({}, cfg);
	          if (Util.isFunction(param)) {
	            if (cfg) {
	              cfg.canvas = canvas;
	              cfg.parent = this;
	              rst = new param(cfg);
	            } else {
	              rst = new param({
	                canvas: canvas,
	                parent: this
	              });
	            }
	            this.add(rst);
	          } else if (Util.isObject(param)) {
	            param.canvas = canvas;
	            rst = new Group(param);
	            this.add(rst);
	          } else if (param === undefined) {
	            rst = new Group();
	            this.add(rst);
	          } else {
	            return false;
	          }
	          return rst;
	        },

	        /** 绘制背景
	         * @param  {Array} padding 内边距
	         * @param  {Attrs} attrs 图形属性
	         * @param  {Shape} backShape 背景图形
	         * @return {Object} 背景层对象
	         */
	        renderBack: function renderBack(padding, attrs) {
	          var backShape = this.get('backShape');
	          var innerBox = this.getBBox();
	          // const parent = this.get('parent'); // getParent
	          Util.merge(attrs, {
	            x: innerBox.minX - padding[3],
	            y: innerBox.minY - padding[0],
	            width: innerBox.width + padding[1] + padding[3],
	            height: innerBox.height + padding[0] + padding[2]
	          });
	          if (backShape) {
	            backShape.attr(attrs);
	          } else {
	            backShape = this.addShape('rect', {
	              zIndex: -1,
	              attrs: attrs
	            });
	          }
	          this.set('backShape', backShape);
	          this.sort();
	          return backShape;
	        },
	        removeChild: function removeChild(item, destroy) {
	          if (arguments.length >= 2) {
	            if (this.contain(item)) {
	              item.remove(destroy);
	            }
	          } else {
	            if (arguments.length === 1) {
	              if (Util.isBoolean(item)) {
	                destroy = item;
	              } else {
	                if (this.contain(item)) {
	                  item.remove(true);
	                }
	                return this;
	              }
	            }
	            if (arguments.length === 0) {
	              destroy = true;
	            }

	            Group.superclass.remove.call(this, destroy);
	          }
	          return this;
	        },

	        /**
	         * 向组中添加shape或者group
	         * @param {Object} items 图形或者分组
	         * @return {Object} group 本尊
	         */
	        add: function add(items) {
	          var self = this;
	          var children = self.get('children');
	          if (Util.isArray(items)) {
	            Util.each(items, function (item) {
	              var parent = item.get('parent');
	              if (parent) {
	                parent.removeChild(item, false);
	              }
	              self.__setEvn(item);
	            });
	            children.push.apply(children, items);
	          } else {
	            var item = items;
	            var parent = item.get('parent');
	            if (parent) {
	              parent.removeChild(item, false);
	            }
	            self.__setEvn(item);
	            children.push(item);
	          }
	          return self;
	        },
	        contain: function contain(item) {
	          var children = this.get('children');
	          return children.indexOf(item) > -1;
	        },
	        getChildByIndex: function getChildByIndex(index) {
	          var children = this.get('children');
	          return children[index];
	        },
	        getFirst: function getFirst() {
	          return this.getChildByIndex(0);
	        },
	        getLast: function getLast() {
	          var lastIndex = this.get('children').length - 1;
	          return this.getChildByIndex(lastIndex);
	        },
	        __setEvn: function __setEvn(item) {
	          var self = this;
	          item.__cfg.parent = self;
	          item.__cfg.context = self.__cfg.context;
	          item.__cfg.canvas = self.__cfg.canvas;
	          var clip = item.__attrs.clip;
	          if (clip) {
	            clip.setSilent('parent', self);
	            clip.setSilent('context', self.get('context'));
	          }
	          var children = item.__cfg.children;
	          if (children) {
	            Util.each(children, function (child) {
	              item.__setEvn(child);
	            });
	          }
	        },
	        getBBox: function getBBox() {
	          var self = this;
	          var minX = Infinity;
	          var maxX = -Infinity;
	          var minY = Infinity;
	          var maxY = -Infinity;
	          var children = self.get('children');
	          Util.each(children, function (child) {
	            if (child.get('visible')) {
	              var _box = child.getBBox();
	              if (!_box) {
	                return true;
	              }

	              var leftTop = [_box.minX, _box.minY, 1];
	              var leftBottom = [_box.minX, _box.maxY, 1];
	              var rightTop = [_box.maxX, _box.minY, 1];
	              var rightBottom = [_box.maxX, _box.maxY, 1];

	              child.apply(leftTop);
	              child.apply(leftBottom);
	              child.apply(rightTop);
	              child.apply(rightBottom);

	              var boxMinX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
	              var boxMaxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
	              var boxMinY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);
	              var boxMaxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);

	              if (boxMinX < minX) {
	                minX = boxMinX;
	              }

	              if (boxMaxX > maxX) {
	                maxX = boxMaxX;
	              }

	              if (boxMinY < minY) {
	                minY = boxMinY;
	              }

	              if (boxMaxY > maxY) {
	                maxY = boxMaxY;
	              }
	            }
	          });
	          var box = {
	            minX: minX,
	            minY: minY,
	            maxX: maxX,
	            maxY: maxY
	          };
	          box.x = box.minX;
	          box.y = box.minY;
	          box.width = box.maxX - box.minX;
	          box.height = box.maxY - box.minY;
	          return box;
	        },
	        drawInner: function drawInner(context) {
	          var children = this.get('children');
	          for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            child.draw(context);
	          }
	          return this;
	        },
	        getCount: function getCount() {
	          return this.get('children').length;
	        },
	        sort: function sort() {
	          var children = this.get('children');
	          // 稳定排序
	          Util.each(children, function (child, index) {
	            child[INDEX] = index;
	            return child;
	          });

	          children.sort(getComparer(function (obj1, obj2) {
	            return obj1.get('zIndex') - obj2.get('zIndex');
	          }));

	          return this;
	        },
	        find: function find(id) {
	          return this.findBy(function (item) {
	            return item.get('id') === id;
	          });
	        },

	        /**
	         * 根据查找函数查找分组或者图形
	         * @param  {Function} fn 匹配函数
	         * @return {Canvas.Base} 分组或者图形
	         */
	        findBy: function findBy(fn) {
	          var children = this.get('children');
	          var rst = null;

	          Util.each(children, function (item) {
	            if (fn(item)) {
	              rst = item;
	            } else if (item.findBy) {
	              rst = item.findBy(fn);
	            }
	            if (rst) {
	              return false;
	            }
	          });
	          return rst;
	        },
	        findAllBy: function findAllBy(fn) {
	          var children = this.get('children');
	          var rst = [];
	          var childRst = [];
	          Util.each(children, function (item) {
	            if (fn(item)) {
	              rst.push(item);
	            }
	            if (item.findAllBy) {
	              childRst = item.findAllBy(fn);
	              rst = rst.concat(childRst);
	            }
	          });
	          return rst;
	        },

	        /**
	         * 根据x，y轴坐标获取对应的图形
	         * @param  {Number} x x坐标
	         * @param  {Number} y y坐标
	         * @return {Object}  最上面的图形
	         */
	        getShape: function getShape(x, y) {
	          var self = this;
	          var clip = self.__attrs.clip;
	          var children = self.__cfg.children;
	          var rst = void 0;
	          if (clip) {
	            if (clip.inside(x, y)) {
	              rst = find(children, x, y);
	            }
	          } else {
	            rst = find(children, x, y);
	          }
	          return rst;
	        },
	        clearTotalMatrix: function clearTotalMatrix() {
	          var m = this.get('totalMatrix');
	          if (m) {
	            this.setSilent('totalMatrix', null);
	            var children = this.__cfg.children;
	            for (var i = 0; i < children.length; i++) {
	              var child = children[i];
	              child.clearTotalMatrix();
	            }
	          }
	        },
	        clear: function clear() {
	          var children = this.get('children');

	          while (children.length !== 0) {
	            children[children.length - 1].remove();
	          }
	          return this;
	        },
	        destroy: function destroy() {
	          if (this.get('destroyed')) {
	            return;
	          }
	          this.clear();
	          Group.superclass.destroy.call(this);
	        }
	      });

	      module.exports = Group;

	      /***/
	    },
	    /* 89 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Attribute = __webpack_require__(229);
	      var Transform = __webpack_require__(230);
	      var Animate = __webpack_require__(234);
	      var Format = __webpack_require__(98);
	      var EventEmitter = __webpack_require__(262);

	      var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash', 'lineDashOffset'];

	      var Element = function Element(cfg) {
	        this.__cfg = {
	          zIndex: 0,
	          capture: true,
	          visible: true,
	          destroyed: false
	        }; // 配置存放地

	        Util.assign(this.__cfg, this.getDefaultCfg(), cfg); // Element.CFG不合并，提升性能 合并默认配置，用户配置->继承默认配置->Element默认配置
	        this.initAttrs(this.__cfg.attrs); // 初始化绘图属性
	        this.initTransform(); // 初始化变换
	        this.init(); // 类型初始化
	      };

	      Element.CFG = {
	        /**
	         * 唯一标示
	         * @type {Number}
	         */
	        id: null,
	        /**
	         * Z轴的层叠关系，Z值越大离用户越近
	         * @type {Number}
	         */
	        zIndex: 0,
	        /**
	         * Canvas对象
	         * @type: {Object}
	         */
	        canvas: null,
	        /**
	         * 父元素指针
	         * @type {Object}
	         */
	        parent: null,
	        /**
	         * 用来设置当前对象是否能被捕捉
	         * true 能
	         * false 不能
	         * 对象默认是都可以被捕捉的, 当capture为false时，group.getShape(x, y)方法无法获得该元素
	         * 通过将不必要捕捉的元素的该属性设置成false, 来提高捕捉性能
	         * @type {Boolean}
	         **/
	        capture: true,
	        /**
	         * 画布的上下文
	         * @type {Object}
	         */
	        context: null,
	        /**
	         * 是否显示
	         * @type {Boolean}
	         */
	        visible: true,
	        /**
	         * 是否被销毁
	         * @type: {Boolean}
	         */
	        destroyed: false
	      };

	      Util.augment(Element, Attribute, Transform, EventEmitter, Animate, {
	        init: function init() {
	          this.setSilent('animable', true);
	          this.setSilent('animating', false); // 初始时不处于动画状态
	          var attrs = this.__attrs;
	          if (attrs && attrs.rotate) {
	            this.rotateAtStart(attrs.rotate);
	          }
	        },
	        getParent: function getParent() {
	          return this.get('parent');
	        },

	        /**
	         * 获取默认的配置信息
	         * @protected
	         * @return {Object} 默认的属性
	         */
	        getDefaultCfg: function getDefaultCfg() {
	          return {};
	        },
	        set: function set(name, value) {
	          var m = '__set' + Util.upperFirst(name);

	          if (this[m]) {
	            value = this[m](value);
	          }
	          this.__cfg[name] = value;
	          return this;
	        },
	        setSilent: function setSilent(name, value) {
	          this.__cfg[name] = value;
	        },
	        get: function get(name) {
	          return this.__cfg[name];
	        },
	        draw: function draw(context) {
	          if (this.get('destroyed')) {
	            return;
	          }
	          if (this.get('visible')) {
	            this.setContext(context);
	            this.drawInner(context);
	            this.restoreContext(context);
	          }
	        },
	        setContext: function setContext(context) {
	          var clip = this.__attrs.clip;
	          context.save();
	          if (clip) {
	            // context.save();
	            clip.resetTransform(context);
	            clip.createPath(context);
	            context.clip();
	            // context.restore();
	          }
	          this.resetContext(context);
	          this.resetTransform(context);
	        },
	        restoreContext: function restoreContext(context) {
	          context.restore();
	        },
	        resetContext: function resetContext(context) {
	          var elAttrs = this.__attrs;
	          // var canvas = this.get('canvas');
	          if (!this.isGroup) {
	            // canvas.registShape(this); // 快速拾取方案暂时不执行
	            for (var k in elAttrs) {
	              if (SHAPE_ATTRS.indexOf(k) > -1) {
	                // 非canvas属性不附加
	                var v = elAttrs[k];
	                if (k === 'fillStyle') {
	                  v = Format.parseStyle(v, this);
	                }
	                if (k === 'strokeStyle') {
	                  v = Format.parseStyle(v, this);
	                }
	                if (k === 'lineDash' && context.setLineDash) {
	                  if (Util.isArray(v)) {
	                    context.setLineDash(v);
	                  } else if (Util.isString(v)) {
	                    context.setLineDash(v.split(' '));
	                  }
	                } else {
	                  context[k] = v;
	                }
	              }
	            }
	          }
	        },
	        drawInner: function drawInner() /* context */{},
	        show: function show() {
	          this.set('visible', true);
	          return this;
	        },
	        hide: function hide() {
	          this.set('visible', false);
	          return this;
	        },
	        remove: function remove(destroy) {
	          if (destroy === undefined) {
	            destroy = true;
	          }

	          if (this.get('parent')) {
	            var parent = this.get('parent');
	            var children = parent.get('children');
	            Util.remove(children, this);
	          }

	          if (destroy) {
	            this.destroy();
	          }

	          return this;
	        },
	        destroy: function destroy() {
	          var destroyed = this.get('destroyed');
	          if (destroyed) {
	            return;
	          }
	          // 如果正在执行动画，清理动画
	          if (this.get('animating')) {
	            var timer = this.get('animateTimer');
	            timer && timer.stop();
	          }
	          this.__cfg = {};
	          this.__attrs = null;
	          this.removeEvent(); // 移除所有的事件
	          this.set('destroyed', true);
	        },
	        __setZIndex: function __setZIndex(zIndex) {
	          this.__cfg.zIndex = zIndex;

	          if (!Util.isNil(this.get('parent'))) {
	            this.get('parent').sort();
	          }
	          return zIndex;
	        },
	        __setAttrs: function __setAttrs(attrs) {
	          this.attr(attrs);
	          return attrs;
	        },
	        setZIndex: function setZIndex(zIndex) {
	          this.__cfg.zIndex = zIndex;
	          return zIndex;
	        },
	        clone: function clone() {
	          return Util.clone(this);
	        },
	        getBBox: function getBBox() {
	          return {
	            minX: 0,
	            maxX: 0,
	            minY: 0,
	            maxY: 0
	          };
	        }
	      });

	      module.exports = Element;

	      /***/
	    },
	    /* 90 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return deg2rad;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return rad2deg;
	      });
	      var deg2rad = Math.PI / 180;
	      var rad2deg = 180 / Math.PI;

	      /***/
	    },
	    /* 91 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return rgbBasis;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return rgbBasisClosed;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(51);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(92);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(20);

	      /* harmony default export */__webpack_exports__["a"] = function rgbGamma(y) {
	        var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

	        function rgb(start, end) {
	          var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
	              g = color(start.g, end.g),
	              b = color(start.b, end.b),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.r = r(t);
	            start.g = g(t);
	            start.b = b(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        }

	        rgb.gamma = rgbGamma;

	        return rgb;
	      }(1);

	      function rgbSpline(spline) {
	        return function (colors) {
	          var n = colors.length,
	              r = new Array(n),
	              g = new Array(n),
	              b = new Array(n),
	              i,
	              color;
	          for (i = 0; i < n; ++i) {
	            color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
	            r[i] = color.r || 0;
	            g[i] = color.g || 0;
	            b[i] = color.b || 0;
	          }
	          r = spline(r);
	          g = spline(g);
	          b = spline(b);
	          color.opacity = 1;
	          return function (t) {
	            color.r = r(t);
	            color.g = g(t);
	            color.b = b(t);
	            return color + "";
	          };
	        };
	      }

	      var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
	      var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);

	      /***/
	    },
	    /* 92 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(51);

	      /* harmony default export */__webpack_exports__["a"] = function (values) {
	        var n = values.length;
	        return function (t) {
	          var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	              v0 = values[(i + n - 1) % n],
	              v1 = values[i % n],
	              v2 = values[(i + 1) % n],
	              v3 = values[(i + 2) % n];
	          return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
	        };
	      };

	      /***/
	    },
	    /* 93 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (x) {
	        return function () {
	          return x;
	        };
	      };

	      /***/
	    },
	    /* 94 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var nb = b ? b.length : 0,
	            na = a ? Math.min(nb, a.length) : 0,
	            x = new Array(na),
	            c = new Array(nb),
	            i;

	        for (i = 0; i < na; ++i) {
	          x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
	        }for (; i < nb; ++i) {
	          c[i] = b[i];
	        }return function (t) {
	          for (i = 0; i < na; ++i) {
	            c[i] = x[i](t);
	          }return c;
	        };
	      };

	      /***/
	    },
	    /* 95 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        var d = new Date();
	        return a = +a, b -= a, function (t) {
	          return d.setTime(a + b * t), d;
	        };
	      };

	      /***/
	    },
	    /* 96 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var i = {},
	            c = {},
	            k;

	        if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
	        if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

	        for (k in b) {
	          if (k in a) {
	            i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
	          } else {
	            c[k] = b[k];
	          }
	        }

	        return function (t) {
	          for (k in i) {
	            c[k] = i[k](t);
	          }return c;
	        };
	      };

	      /***/
	    },
	    /* 97 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(30);

	      var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	          reB = new RegExp(reA.source, "g");

	      function zero(b) {
	        return function () {
	          return b;
	        };
	      }

	      function one(b) {
	        return function (t) {
	          return b(t) + "";
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var bi = reA.lastIndex = reB.lastIndex = 0,

	        // scan index for next number in b
	        am,

	        // current match in a
	        bm,

	        // current match in b
	        bs,

	        // string preceding current number in b, if any
	        i = -1,

	        // index in s
	        s = [],

	        // string constants and placeholders
	        q = []; // number interpolators

	        // Coerce inputs to strings.
	        a = a + "", b = b + "";

	        // Interpolate pairs of numbers in a & b.
	        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	          if ((bs = bm.index) > bi) {
	            // a string precedes the next number in b
	            bs = b.slice(bi, bs);
	            if (s[i]) s[i] += bs; // coalesce with previous string
	            else s[++i] = bs;
	          }
	          if ((am = am[0]) === (bm = bm[0])) {
	            // numbers in a & b match
	            if (s[i]) s[i] += bm; // coalesce with previous string
	            else s[++i] = bm;
	          } else {
	            // interpolate non-matching numbers
	            s[++i] = null;
	            q.push({ i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm) });
	          }
	          bi = reB.lastIndex;
	        }

	        // Add remains of b.
	        if (bi < b.length) {
	          bs = b.slice(bi);
	          if (s[i]) s[i] += bs; // coalesce with previous string
	          else s[++i] = bs;
	        }

	        // Special optimization for only a single match.
	        // Otherwise, interpolate each of the numbers and rejoin the string.
	        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	          for (var i = 0, o; i < b; ++i) {
	            s[(o = q[i]).i] = o.x(t);
	          }return s.join("");
	        });
	      };

	      /***/
	    },
	    /* 98 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;
	      var regexDot = /[^\s\,]+/ig;
	      var regexLG = /^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i;
	      var regexRG = /^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i;
	      var regexPR = /^p\s*\(\s*([axyn])\s*\)\s*(.*)/i;
	      var regexColorStop = /[\d.]+:(#[^\s]+|[^\)]+\))/ig;
	      var numColorCache = {};

	      function addStop(steps, gradient) {
	        var arr = steps.match(regexColorStop);
	        Util.each(arr, function (item) {
	          item = item.split(':');
	          gradient.addColorStop(item[0], item[1]);
	        });
	      }

	      function parseLineGradient(color, self) {
	        var arr = regexLG.exec(color);
	        var angle = Util.mod(Util.toRadian(parseFloat(arr[1])), Math.PI * 2);
	        var steps = arr[2];
	        var box = self.getBBox();
	        var start = void 0;
	        var end = void 0;

	        if (angle >= 0 && angle < 0.5 * Math.PI) {
	          start = {
	            x: box.minX,
	            y: box.minY
	          };
	          end = {
	            x: box.maxX,
	            y: box.maxY
	          };
	        } else if (0.5 * Math.PI <= angle && angle < Math.PI) {
	          start = {
	            x: box.maxX,
	            y: box.minY
	          };
	          end = {
	            x: box.minX,
	            y: box.maxY
	          };
	        } else if (Math.PI <= angle && angle < 1.5 * Math.PI) {
	          start = {
	            x: box.maxX,
	            y: box.maxY
	          };
	          end = {
	            x: box.minX,
	            y: box.minY
	          };
	        } else {
	          start = {
	            x: box.minX,
	            y: box.maxY
	          };
	          end = {
	            x: box.maxX,
	            y: box.minY
	          };
	        }

	        var tanTheta = Math.tan(angle);
	        var tanTheta2 = tanTheta * tanTheta;

	        var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;
	        var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;
	        var context = self.get('context');
	        var gradient = context.createLinearGradient(start.x, start.y, x, y);
	        addStop(steps, gradient);
	        return gradient;
	      }

	      function parseRadialGradient(color, self) {
	        var arr = regexRG.exec(color);
	        var fx = parseFloat(arr[1]);
	        var fy = parseFloat(arr[2]);
	        var fr = parseFloat(arr[3]);
	        var steps = arr[4];
	        var box = self.getBBox();
	        var context = self.get('context');
	        var width = box.maxX - box.minX;
	        var height = box.maxY - box.minY;
	        var r = Math.sqrt(width * width + height * height) / 2;
	        var gradient = context.createRadialGradient(box.minX + width * fx, box.minY + height * fy, fr * r, box.minX + width / 2, box.minY + height / 2, r);
	        addStop(steps, gradient);
	        return gradient;
	      }

	      function parsePattern(color, self) {
	        if (self.get('patternSource') && self.get('patternSource') === color) {
	          return self.get('pattern');
	        }
	        var pattern = void 0;
	        var img = void 0;
	        var arr = regexPR.exec(color);
	        var repeat = arr[1];
	        var source = arr[2];

	        // Function to be called when pattern loads
	        function onload() {
	          // Create pattern
	          var context = self.get('context');
	          pattern = context.createPattern(img, repeat);
	          self.setSilent('pattern', pattern); // be a cache
	          self.setSilent('patternSource', color);
	        }

	        switch (repeat) {
	          case 'a':
	            repeat = 'repeat';
	            break;
	          case 'x':
	            repeat = 'repeat-x';
	            break;
	          case 'y':
	            repeat = 'repeat-y';
	            break;
	          case 'n':
	            repeat = 'no-repeat';
	            break;
	          default:
	            repeat = 'no-repeat';
	        }

	        img = new Image();
	        // If source URL is not a data URL
	        if (!source.match(/^data:/i)) {
	          // Set crossOrigin for this image
	          img.crossOrigin = 'Anonymous';
	        }
	        img.src = source;

	        if (img.complete) {
	          onload();
	        } else {
	          img.onload = onload;
	          // Fix onload() bug in IE9
	          img.src = img.src;
	        }

	        return pattern;
	      }

	      module.exports = {
	        parsePath: function parsePath(path) {
	          path = path || [];
	          if (Util.isArray(path)) {
	            return path;
	          }

	          if (Util.isString(path)) {
	            path = path.match(regexTags);
	            Util.each(path, function (item, index) {
	              item = item.match(regexDot);
	              if (item[0].length > 1) {
	                var tag = item[0].charAt(0);
	                item.splice(1, 0, item[0].substr(1));
	                item[0] = tag;
	              }
	              Util.each(item, function (sub, i) {
	                if (!isNaN(sub)) {
	                  item[i] = +sub;
	                }
	              });
	              path[index] = item;
	            });
	            return path;
	          }
	        },
	        parseStyle: function parseStyle(color, self) {
	          if (Util.isString(color)) {
	            if (color[1] === '(' || color[2] === '(') {
	              if (color[0] === 'l') {
	                // regexLG.test(color)
	                return parseLineGradient(color, self);
	              } else if (color[0] === 'r') {
	                // regexRG.test(color)
	                return parseRadialGradient(color, self);
	              } else if (color[0] === 'p') {
	                // regexPR.test(color)
	                return parsePattern(color, self);
	              }
	            }
	            return color;
	          }
	        },
	        numberToColor: function numberToColor(num) {
	          // 增加缓存
	          var color = numColorCache[num];
	          if (!color) {
	            var str = num.toString(16);
	            for (var i = str.length; i < 6; i++) {
	              str = '0' + str;
	            }
	            color = '#' + str;
	            numColorCache[num] = color;
	          }
	          return color;
	        }
	      };

	      /***/
	    },
	    /* 99 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Circle = function Circle(cfg) {
	        Circle.superclass.constructor.call(this, cfg);
	      };

	      Circle.ATTRS = {
	        x: 0,
	        y: 0,
	        r: 0,
	        lineWidth: 1
	      };

	      Util.extend(Circle, Shape);

	      Util.augment(Circle, {
	        canFill: true,
	        canStroke: true,
	        type: 'circle',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2 + r;
	          return {
	            minX: cx - halfWidth,
	            minY: cy - halfWidth,
	            maxX: cx + halfWidth,
	            maxY: cy + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();
	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;

	          return Inside.circle(cx, cy, r, x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          var lineWidth = this.getHitLineWidth();

	          return Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          context = context || self.get('context');

	          context.beginPath();
	          context.arc(cx, cy, r, 0, Math.PI * 2, false);
	        }
	      });

	      module.exports = Circle;

	      /***/
	    },
	    /* 100 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var mat3 = __webpack_require__(3).mat3;
	      var vec3 = __webpack_require__(3).vec3;

	      var Ellipse = function Ellipse(cfg) {
	        Ellipse.superclass.constructor.call(this, cfg);
	      };

	      Ellipse.ATTRS = {
	        x: 0,
	        y: 0,
	        rx: 1,
	        ry: 1,
	        lineWidth: 1
	      };

	      Util.extend(Ellipse, Shape);

	      Util.augment(Ellipse, {
	        canFill: true,
	        canStroke: true,
	        type: 'ellipse',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;
	          var lineWidth = this.getHitLineWidth();
	          var halfXWidth = rx + lineWidth / 2;
	          var halfYWidth = ry + lineWidth / 2;

	          return {
	            minX: cx - halfXWidth,
	            minY: cy - halfYWidth,
	            maxX: cx + halfXWidth,
	            maxY: cy + halfYWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();

	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;

	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;

	          var p = [x, y, 1];
	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          var inm = mat3.invert([], m);
	          vec3.transformMat3(p, p, inm);

	          return Inside.circle(0, 0, r, p[0], p[1]);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;
	          var lineWidth = this.getHitLineWidth();

	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;
	          var p = [x, y, 1];
	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          var inm = mat3.invert([], m);
	          vec3.transformMat3(p, p, inm);

	          return Inside.arcline(0, 0, r, 0, Math.PI * 2, false, lineWidth, p[0], p[1]);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;

	          context = context || self.get('context');
	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;

	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          context.beginPath();
	          context.save();
	          context.transform(m[0], m[1], m[3], m[4], m[6], m[7]);
	          context.arc(0, 0, r, 0, Math.PI * 2);
	          context.restore();
	          context.closePath();
	        }
	      });

	      module.exports = Ellipse;

	      /***/
	    },
	    /* 101 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var PathSegment = __webpack_require__(102);
	      var Format = __webpack_require__(98);
	      var Arrow = __webpack_require__(15);
	      var PathUtil = __webpack_require__(46);
	      var CubicMath = __webpack_require__(31);

	      var Path = function Path(cfg) {
	        Path.superclass.constructor.call(this, cfg);
	      };

	      Path.ATTRS = {
	        path: null,
	        lineWidth: 1,
	        curve: null, // 曲线path
	        tCache: null,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Path, Shape);

	      Util.augment(Path, {
	        canFill: true,
	        canStroke: true,
	        type: 'path',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        __afterSetAttrPath: function __afterSetAttrPath(path) {
	          var self = this;
	          if (Util.isNil(path)) {
	            self.setSilent('segments', null);
	            self.setSilent('box', undefined);
	            return;
	          }
	          var pathArray = Format.parsePath(path);
	          var preSegment = void 0;
	          var segments = [];

	          if (!Util.isArray(pathArray) || pathArray.length === 0 || pathArray[0][0] !== 'M' && pathArray[0][0] !== 'm') {
	            return;
	          }
	          var count = pathArray.length;
	          for (var i = 0; i < pathArray.length; i++) {
	            var item = pathArray[i];
	            preSegment = new PathSegment(item, preSegment, i === count - 1);
	            segments.push(preSegment);
	          }
	          self.setSilent('segments', segments);
	          self.set('tCache', null);
	          this.setSilent('box', null);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll(objs) {
	          if (objs.path) {
	            this.__afterSetAttrPath(objs.path);
	          }
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var segments = self.get('segments');

	          if (!segments) {
	            return null;
	          }
	          var lineWidth = this.getHitLineWidth();
	          var minX = Infinity;
	          var maxX = -Infinity;
	          var minY = Infinity;
	          var maxY = -Infinity;
	          Util.each(segments, function (segment) {
	            segment.getBBox(lineWidth);
	            var box = segment.box;
	            if (box) {
	              if (box.minX < minX) {
	                minX = box.minX;
	              }

	              if (box.maxX > maxX) {
	                maxX = box.maxX;
	              }

	              if (box.minY < minY) {
	                minY = box.minY;
	              }

	              if (box.maxY > maxY) {
	                maxY = box.maxY;
	              }
	            }
	          });
	          return {
	            minX: minX,
	            minY: minY,
	            maxX: maxX,
	            maxY: maxY
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var self = this;
	          var context = self.get('context');
	          if (!context) return undefined;
	          self.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var segments = self.get('segments');
	          if (!Util.isEmpty(segments)) {
	            var lineWidth = self.getHitLineWidth();
	            for (var i = 0, l = segments.length; i < l; i++) {
	              if (segments[i].isInside(x, y, lineWidth)) {
	                return true;
	              }
	            }
	          }

	          return false;
	        },
	        __setTcache: function __setTcache() {
	          var totalLength = 0;
	          var tempLength = 0;
	          var tCache = [];
	          var segmentT = void 0;
	          var segmentL = void 0;
	          var segmentN = void 0;
	          var l = void 0;
	          var curve = this.curve;

	          if (!curve) {
	            return;
	          }

	          Util.each(curve, function (segment, i) {
	            segmentN = curve[i + 1];
	            l = segment.length;
	            if (segmentN) {
	              totalLength += CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	            }
	          });

	          Util.each(curve, function (segment, i) {
	            segmentN = curve[i + 1];
	            l = segment.length;
	            if (segmentN) {
	              segmentT = [];
	              segmentT[0] = tempLength / totalLength;
	              segmentL = CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	              tempLength += segmentL;
	              segmentT[1] = tempLength / totalLength;
	              tCache.push(segmentT);
	            }
	          });

	          this.tCache = tCache;
	        },
	        __calculateCurve: function __calculateCurve() {
	          var self = this;
	          var attrs = self.__attrs;
	          var path = attrs.path;
	          this.curve = PathUtil.pathTocurve(path);
	        },
	        getPoint: function getPoint(t) {
	          var tCache = this.tCache;
	          var subt = void 0;
	          var index = void 0;

	          if (!tCache) {
	            this.__calculateCurve();
	            this.__setTcache();
	            tCache = this.tCache;
	          }

	          var curve = this.curve;

	          if (!tCache) {
	            if (curve) {
	              return {
	                x: curve[0][1],
	                y: curve[0][2]
	              };
	            }
	            return null;
	          }
	          Util.each(tCache, function (v, i) {
	            if (t >= v[0] && t <= v[1]) {
	              subt = (t - v[0]) / (v[1] - v[0]);
	              index = i;
	            }
	          });
	          var seg = curve[index];
	          if (Util.isNil(seg) || Util.isNil(index)) {
	            return null;
	          }
	          var l = seg.length;
	          var nextSeg = curve[index + 1];
	          return {
	            x: CubicMath.at(seg[l - 2], nextSeg[1], nextSeg[3], nextSeg[5], 1 - subt),
	            y: CubicMath.at(seg[l - 1], nextSeg[2], nextSeg[4], nextSeg[6], 1 - subt)
	          };
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var segments = self.get('segments');

	          if (!Util.isArray(segments)) return;

	          context = context || self.get('context');

	          context.beginPath();

	          var path = attrs.path;
	          var startPoint = void 0;
	          var endPoint = void 0;
	          var closed = false;
	          if (path[path.length - 1] === 'z' || path[path.length - 1] === 'Z' || attrs.fill) {
	            // 闭合路径不绘制箭头
	            closed = true;
	          }

	          var segmentsLen = segments.length;
	          if (segmentsLen > 1 && !closed) {
	            startPoint = segments[0].endPoint;
	            endPoint = segments[1].endPoint;
	            Arrow.addStartArrow(context, attrs, endPoint.x, endPoint.y, startPoint.x, startPoint.y);
	          }

	          for (var i = 0, l = segmentsLen; i < l; i++) {
	            segments[i].draw(context);
	          }

	          if (segmentsLen > 1 && !closed) {
	            startPoint = segments[segmentsLen - 2].endPoint;
	            endPoint = segments[segmentsLen - 1].endPoint;
	            Arrow.addEndArrow(context, attrs, startPoint.x, startPoint.y, endPoint.x, endPoint.y);
	          }
	        }
	      });

	      module.exports = Path;

	      /***/
	    },
	    /* 102 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Inside = __webpack_require__(2);
	      var Cubic = __webpack_require__(31);
	      var Quadratic = __webpack_require__(53);
	      var Ellipse = __webpack_require__(264);
	      var vec3 = __webpack_require__(3).vec3;
	      var mat3 = __webpack_require__(3).mat3;

	      var ARR_CMD = ['m', 'l', 'c', 'a', 'q', 'h', 'v', 't', 's', 'z'];

	      function toAbsolute(x, y, curPoint) {
	        // 获取绝对坐标
	        return {
	          x: curPoint.x + x,
	          y: curPoint.y + y
	        };
	      }

	      function toSymmetry(point, center) {
	        // 点对称
	        return {
	          x: center.x + (center.x - point.x),
	          y: center.y + (center.y - point.y)
	        };
	      }

	      function vMag(v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	      }

	      function vRatio(u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	      }

	      function vAngle(u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	      }

	      function getArcParams(point1, point2, fa, fs, rx, ry, psiDeg) {
	        var psi = Util.mod(Util.toRadian(psiDeg), Math.PI * 2);
	        var x1 = point1.x;
	        var y1 = point1.y;
	        var x2 = point2.x;
	        var y2 = point2.y;
	        var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;
	        var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;
	        var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

	        if (lambda > 1) {
	          rx *= Math.sqrt(lambda);
	          ry *= Math.sqrt(lambda);
	        }

	        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp)));

	        if (fa === fs) {
	          f *= -1;
	        }
	        if (isNaN(f)) {
	          f = 0;
	        }

	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;

	        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;

	        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	        var dTheta = vAngle(u, v);

	        if (vRatio(u, v) <= -1) {
	          dTheta = Math.PI;
	        }
	        if (vRatio(u, v) >= 1) {
	          dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	          dTheta = dTheta - 2 * Math.PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	          dTheta = dTheta + 2 * Math.PI;
	        }
	        return [point1, cx, cy, rx, ry, theta, dTheta, psi, fs];
	      }

	      var PathSegment = function PathSegment(item, preSegment, isLast) {
	        this.preSegment = preSegment;
	        this.isLast = isLast;
	        this.init(item, preSegment);
	      };

	      Util.augment(PathSegment, {
	        init: function init(item, preSegment) {
	          var command = item[0];
	          preSegment = preSegment || {
	            endPoint: {
	              x: 0,
	              y: 0
	            }
	          };
	          var relative = ARR_CMD.indexOf(command) >= 0; // /[a-z]/.test(command);
	          var cmd = relative ? command.toUpperCase() : command;
	          var p = item;
	          var point1 = void 0;
	          var point2 = void 0;
	          var point3 = void 0;
	          var point = void 0;
	          var preEndPoint = preSegment.endPoint;

	          var p1 = p[1];
	          var p2 = p[2];
	          switch (cmd) {
	            default:
	              break;
	            case 'M':
	              if (relative) {
	                point = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              this.command = 'M';
	              this.params = [preEndPoint, point];
	              this.subStart = point;
	              this.endPoint = point;
	              break;
	            case 'L':
	              if (relative) {
	                point = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'H':
	              if (relative) {
	                point = toAbsolute(p1, 0, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: preEndPoint.y
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'V':
	              if (relative) {
	                point = toAbsolute(0, p1, preEndPoint);
	              } else {
	                point = {
	                  x: preEndPoint.x,
	                  y: p1
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'Q':
	              if (relative) {
	                point1 = toAbsolute(p1, p2, preEndPoint);
	                point2 = toAbsolute(p[3], p[4], preEndPoint);
	              } else {
	                point1 = {
	                  x: p1,
	                  y: p2
	                };
	                point2 = {
	                  x: p[3],
	                  y: p[4]
	                };
	              }
	              this.command = 'Q';
	              this.params = [preEndPoint, point1, point2];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point2;
	              this.endTangent = function () {
	                return [point2.x - point1.x, point2.y - point1.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	              };
	              break;
	            case 'T':
	              if (relative) {
	                point2 = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point2 = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              if (preSegment.command === 'Q') {
	                point1 = toSymmetry(preSegment.params[1], preEndPoint);
	                this.command = 'Q';
	                this.params = [preEndPoint, point1, point2];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point2;
	                this.endTangent = function () {
	                  return [point2.x - point1.x, point2.y - point1.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	                };
	              } else {
	                this.command = 'TL';
	                this.params = [preEndPoint, point2];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point2;
	                this.endTangent = function () {
	                  return [point2.x - preEndPoint.x, point2.y - preEndPoint.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point2.x, preEndPoint.y - point2.y];
	                };
	              }

	              break;
	            case 'C':
	              if (relative) {
	                point1 = toAbsolute(p1, p2, preEndPoint);
	                point2 = toAbsolute(p[3], p[4], preEndPoint);
	                point3 = toAbsolute(p[5], p[6], preEndPoint);
	              } else {
	                point1 = {
	                  x: p1,
	                  y: p2
	                };
	                point2 = {
	                  x: p[3],
	                  y: p[4]
	                };
	                point3 = {
	                  x: p[5],
	                  y: p[6]
	                };
	              }
	              this.command = 'C';
	              this.params = [preEndPoint, point1, point2, point3];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point3;
	              this.endTangent = function () {
	                return [point3.x - point2.x, point3.y - point2.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	              };
	              break;
	            case 'S':
	              if (relative) {
	                point2 = toAbsolute(p1, p2, preEndPoint);
	                point3 = toAbsolute(p[3], p[4], preEndPoint);
	              } else {
	                point2 = {
	                  x: p1,
	                  y: p2
	                };
	                point3 = {
	                  x: p[3],
	                  y: p[4]
	                };
	              }
	              if (preSegment.command === 'C') {
	                point1 = toSymmetry(preSegment.params[2], preEndPoint);
	                this.command = 'C';
	                this.params = [preEndPoint, point1, point2, point3];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point3;
	                this.endTangent = function () {
	                  return [point3.x - point2.x, point3.y - point2.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	                };
	              } else {
	                this.command = 'SQ';
	                this.params = [preEndPoint, point2, point3];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point3;
	                this.endTangent = function () {
	                  return [point3.x - point2.x, point3.y - point2.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point2.x, preEndPoint.y - point2.y];
	                };
	              }
	              break;
	            case 'A':
	              {
	                var rx = p1;
	                var ry = p2;
	                var psi = p[3];
	                var fa = p[4];
	                var fs = p[5];
	                if (relative) {
	                  point = toAbsolute(p[6], p[7], preEndPoint);
	                } else {
	                  point = {
	                    x: p[6],
	                    y: p[7]
	                  };
	                }

	                this.command = 'A';
	                this.params = getArcParams(preEndPoint, point, fa, fs, rx, ry, psi);
	                this.subStart = preSegment.subStart;
	                this.endPoint = point;
	                break;
	              }
	            case 'Z':
	              {
	                this.command = 'Z';
	                this.params = [preEndPoint, preSegment.subStart];
	                this.subStart = preSegment.subStart;
	                this.endPoint = preSegment.subStart;
	              }
	          }
	        },
	        isInside: function isInside(x, y, lineWidth) {
	          var self = this;
	          var command = self.command;
	          var params = self.params;
	          var box = self.box;
	          if (box) {
	            if (!Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	              return false;
	            }
	          }
	          switch (command) {
	            default:
	              break;
	            case 'M':
	              return false;
	            case 'TL':
	            case 'L':
	            case 'Z':
	              return Inside.line(params[0].x, params[0].y, params[1].x, params[1].y, lineWidth, x, y);
	            case 'SQ':
	            case 'Q':
	              return Inside.quadraticline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, lineWidth, x, y);
	            case 'C':
	              {
	                return Inside.cubicline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, params[3].x, params[3].y, lineWidth, x, y);
	              }
	            case 'A':
	              {
	                var p = params;
	                var cx = p[1];
	                var cy = p[2];
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];

	                var r = rx > ry ? rx : ry;
	                var scaleX = rx > ry ? 1 : rx / ry;
	                var scaleY = rx > ry ? ry / rx : 1;

	                p = [x, y, 1];
	                var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	                mat3.translate(m, m, [-cx, -cy]);
	                mat3.rotate(m, m, -psi);
	                mat3.scale(m, m, [1 / scaleX, 1 / scaleY]);
	                vec3.transformMat3(p, p, m);
	                return Inside.arcline(0, 0, r, theta, theta + dTheta, 1 - fs, lineWidth, p[0], p[1]);
	              }
	          }
	          return false;
	        },
	        draw: function draw(context) {
	          var command = this.command;
	          var params = this.params;
	          var point1 = void 0;
	          var point2 = void 0;
	          var point3 = void 0;

	          switch (command) {
	            default:
	              break;
	            case 'M':
	              context.moveTo(params[1].x, params[1].y);
	              break;
	            case 'TL':
	            case 'L':
	              context.lineTo(params[1].x, params[1].y);
	              break;
	            case 'SQ':
	            case 'Q':
	              point1 = params[1];
	              point2 = params[2];
	              context.quadraticCurveTo(point1.x, point1.y, point2.x, point2.y);
	              break;
	            case 'C':
	              point1 = params[1];
	              point2 = params[2];
	              point3 = params[3];
	              context.bezierCurveTo(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y);
	              break;
	            case 'A':
	              {
	                var p = params;
	                var p1 = p[1];
	                var p2 = p[2];
	                var cx = p1;
	                var cy = p2;
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];

	                var r = rx > ry ? rx : ry;
	                var scaleX = rx > ry ? 1 : rx / ry;
	                var scaleY = rx > ry ? ry / rx : 1;

	                context.translate(cx, cy);
	                context.rotate(psi);
	                context.scale(scaleX, scaleY);
	                context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                context.scale(1 / scaleX, 1 / scaleY);
	                context.rotate(-psi);
	                context.translate(-cx, -cy);
	                break;
	              }
	            case 'Z':
	              context.closePath();
	              break;
	          }
	        },
	        getBBox: function getBBox(lineWidth) {
	          var halfWidth = lineWidth / 2;
	          var params = this.params;
	          var yDims = void 0;
	          var xDims = void 0;
	          var i = void 0;
	          var l = void 0;

	          switch (this.command) {
	            default:
	            case 'M':
	            case 'Z':
	              break;
	            case 'TL':
	            case 'L':
	              this.box = {
	                minX: Math.min(params[0].x, params[1].x) - halfWidth,
	                maxX: Math.max(params[0].x, params[1].x) + halfWidth,
	                minY: Math.min(params[0].y, params[1].y) - halfWidth,
	                maxY: Math.max(params[0].y, params[1].y) + halfWidth
	              };
	              break;
	            case 'SQ':
	            case 'Q':
	              xDims = Quadratic.extrema(params[0].x, params[1].x, params[2].x);
	              for (i = 0, l = xDims.length; i < l; i++) {
	                xDims[i] = Quadratic.at(params[0].x, params[1].x, params[2].x, xDims[i]);
	              }
	              xDims.push(params[0].x, params[2].x);
	              yDims = Quadratic.extrema(params[0].y, params[1].y, params[2].y);
	              for (i = 0, l = yDims.length; i < l; i++) {
	                yDims[i] = Quadratic.at(params[0].y, params[1].y, params[2].y, yDims);
	              }
	              yDims.push(params[0].y, params[2].y);
	              this.box = {
	                minX: Math.min.apply(Math, xDims) - halfWidth,
	                maxX: Math.max.apply(Math, xDims) + halfWidth,
	                minY: Math.min.apply(Math, yDims) - halfWidth,
	                maxY: Math.max.apply(Math, yDims) + halfWidth
	              };
	              break;
	            case 'C':
	              xDims = Cubic.extrema(params[0].x, params[1].x, params[2].x, params[3].x);
	              for (i = 0, l = xDims.length; i < l; i++) {
	                xDims[i] = Cubic.at(params[0].x, params[1].x, params[2].x, params[3].x, xDims[i]);
	              }
	              yDims = Cubic.extrema(params[0].y, params[1].y, params[2].y, params[3].y);
	              for (i = 0, l = yDims.length; i < l; i++) {
	                yDims[i] = Cubic.at(params[0].y, params[1].y, params[2].y, params[3].y, yDims[i]);
	              }
	              xDims.push(params[0].x, params[3].x);
	              yDims.push(params[0].y, params[3].y);
	              this.box = {
	                minX: Math.min.apply(Math, xDims) - halfWidth,
	                maxX: Math.max.apply(Math, xDims) + halfWidth,
	                minY: Math.min.apply(Math, yDims) - halfWidth,
	                maxY: Math.max.apply(Math, yDims) + halfWidth
	              };
	              break;
	            case 'A':
	              {
	                // todo 待优化
	                var p = params;
	                var cx = p[1];
	                var cy = p[2];
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];
	                var start = theta;
	                var end = theta + dTheta;

	                var xDim = Ellipse.xExtrema(psi, rx, ry);
	                var minX = Infinity;
	                var maxX = -Infinity;
	                var xs = [start, end];
	                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	                  var xAngle = xDim + i;
	                  if (fs === 1) {
	                    if (start < xAngle && xAngle < end) {
	                      xs.push(xAngle);
	                    }
	                  } else {
	                    if (end < xAngle && xAngle < start) {
	                      xs.push(xAngle);
	                    }
	                  }
	                }

	                for (i = 0, l = xs.length; i < l; i++) {
	                  var x = Ellipse.xAt(psi, rx, ry, cx, xs[i]);
	                  if (x < minX) {
	                    minX = x;
	                  }
	                  if (x > maxX) {
	                    maxX = x;
	                  }
	                }

	                var yDim = Ellipse.yExtrema(psi, rx, ry);
	                var minY = Infinity;
	                var maxY = -Infinity;
	                var ys = [start, end];
	                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	                  var yAngle = yDim + i;
	                  if (fs === 1) {
	                    if (start < yAngle && yAngle < end) {
	                      ys.push(yAngle);
	                    }
	                  } else {
	                    if (end < yAngle && yAngle < start) {
	                      ys.push(yAngle);
	                    }
	                  }
	                }

	                for (i = 0, l = ys.length; i < l; i++) {
	                  var y = Ellipse.yAt(psi, rx, ry, cy, ys[i]);
	                  if (y < minY) {
	                    minY = y;
	                  }
	                  if (y > maxY) {
	                    maxY = y;
	                  }
	                }
	                this.box = {
	                  minX: minX - halfWidth,
	                  maxX: maxX + halfWidth,
	                  minY: minY - halfWidth,
	                  maxY: maxY + halfWidth
	                };
	                break;
	              }
	          }
	        }
	      });

	      module.exports = PathSegment;

	      /***/
	    },
	    /* 103 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var CText = function CText(cfg) {
	        CText.superclass.constructor.call(this, cfg);
	      };

	      CText.ATTRS = {
	        x: 0,
	        y: 0,
	        text: null,
	        fontSize: 12,
	        fontFamily: 'sans-serif',
	        fontStyle: 'normal',
	        fontWeight: 'normal',
	        fontVariant: 'normal',
	        textAlign: 'start',
	        textBaseline: 'bottom',
	        lineHeight: null,
	        textArr: null
	      };

	      Util.extend(CText, Shape);

	      Util.augment(CText, {
	        canFill: true,
	        canStroke: true,
	        type: 'text',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            lineCount: 1,
	            fontSize: 12,
	            fontFamily: 'sans-serif',
	            fontStyle: 'normal',
	            fontWeight: 'normal',
	            fontVariant: 'normal',
	            textAlign: 'start',
	            textBaseline: 'bottom'
	          };
	        },
	        initTransform: function initTransform() {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	          var fontSize = this.__attrs.fontSize;
	          if (fontSize && +fontSize < 12) {
	            // 小于 12 像素的文本进行 scale 处理
	            this.transform([['t', -1 * this.__attrs.x, -1 * this.__attrs.y], ['s', +fontSize / 12, +fontSize / 12], ['t', this.__attrs.x, this.__attrs.y]]);
	          }
	        },
	        __assembleFont: function __assembleFont() {
	          // var self = this;
	          var attrs = this.__attrs;
	          var fontSize = attrs.fontSize;
	          var fontFamily = attrs.fontFamily;
	          var fontWeight = attrs.fontWeight;
	          var fontStyle = attrs.fontStyle; // self.attr('fontStyle');
	          var fontVariant = attrs.fontVariant; // self.attr('fontVariant');
	          // self.attr('font', [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' '));
	          attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');
	        },
	        __afterSetAttrFontSize: function __afterSetAttrFontSize() {
	          /* this.attr({
	            height: this.__getTextHeight()
	          }); */
	          this.__assembleFont();
	        },
	        __afterSetAttrFontFamily: function __afterSetAttrFontFamily() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontWeight: function __afterSetAttrFontWeight() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontStyle: function __afterSetAttrFontStyle() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontVariant: function __afterSetAttrFontVariant() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFont: function __afterSetAttrFont() {
	          // this.attr('width', this.measureText());
	        },
	        __afterSetAttrText: function __afterSetAttrText() {
	          var attrs = this.__attrs;
	          var text = attrs.text;
	          var textArr = void 0;
	          if (Util.isString(text) && text.indexOf('\n') !== -1) {
	            textArr = text.split('\n');
	            var lineCount = textArr.length;
	            attrs.lineCount = lineCount;
	            attrs.textArr = textArr;
	          }
	          // attrs.height = this.__getTextHeight();
	          // attrs.width = this.measureText();
	        },
	        __getTextHeight: function __getTextHeight() {
	          var attrs = this.__attrs;
	          var lineCount = attrs.lineCount;
	          var fontSize = attrs.fontSize * 1;
	          if (lineCount > 1) {
	            var spaceingY = this.__getSpaceingY();
	            return fontSize * lineCount + spaceingY * (lineCount - 1);
	          }
	          return fontSize;
	        },

	        // 计算浪费，效率低，待优化
	        __afterSetAttrAll: function __afterSetAttrAll(objs) {
	          var self = this;
	          if ('fontSize' in objs || 'fontWeight' in objs || 'fontStyle' in objs || 'fontVariant' in objs || 'fontFamily' in objs) {
	            self.__assembleFont();
	          }

	          if ('text' in objs) {
	            self.__afterSetAttrText(objs.text);
	          }
	        },
	        isHitBox: function isHitBox() {
	          return false;
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = self.measureText(); // attrs.width
	          if (!width) {
	            // 如果width不存在，四点共其实点
	            return {
	              minX: x,
	              minY: y,
	              maxX: x,
	              maxY: y
	            };
	          }
	          var height = self.__getTextHeight(); // attrs.height
	          var textAlign = attrs.textAlign;
	          var textBaseline = attrs.textBaseline;
	          var lineWidth = self.getHitLineWidth();
	          var point = {
	            x: x,
	            y: y - height
	          };

	          if (textAlign) {
	            if (textAlign === 'end' || textAlign === 'right') {
	              point.x -= width;
	            } else if (textAlign === 'center') {
	              point.x -= width / 2;
	            }
	          }

	          if (textBaseline) {
	            if (textBaseline === 'top') {
	              point.y += height;
	            } else if (textBaseline === 'middle') {
	              point.y += height / 2;
	            }
	          }

	          this.set('startPoint', point);
	          var halfWidth = lineWidth / 2;
	          return {
	            minX: point.x - halfWidth,
	            minY: point.y - halfWidth,
	            maxX: point.x + width + halfWidth,
	            maxY: point.y + height + halfWidth
	          };
	        },
	        __getSpaceingY: function __getSpaceingY() {
	          var attrs = this.__attrs;
	          var lineHeight = attrs.lineHeight;
	          var fontSize = attrs.fontSize * 1;
	          return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var box = self.getBBox();
	          if (self.hasFill() || self.hasStroke()) {
	            return Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y);
	          }
	        },
	        drawInner: function drawInner(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var text = attrs.text;
	          if (!text) {
	            return;
	          }
	          var textArr = attrs.textArr;
	          var fontSize = attrs.fontSize * 1;
	          var spaceingY = self.__getSpaceingY();
	          var x = attrs.x;
	          var y = attrs.y;
	          var textBaseline = attrs.textBaseline;
	          var height = void 0;
	          if (textArr) {
	            var box = self.getBBox();
	            height = box.maxY - box.minY;
	          }
	          var subY = void 0;

	          context.beginPath();
	          if (self.hasFill()) {
	            var fillOpacity = attrs.fillOpacity;
	            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	              context.globalAlpha = fillOpacity;
	            }
	            if (textArr) {
	              Util.each(textArr, function (subText, index) {
	                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	                if (textBaseline === 'top') subY += height - fontSize;
	                context.fillText(subText, x, subY);
	              });
	            } else {
	              context.fillText(text, x, y);
	            }
	          }

	          if (self.hasStroke()) {
	            if (textArr) {
	              Util.each(textArr, function (subText, index) {
	                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	                if (textBaseline === 'top') subY += height - fontSize;
	                context.strokeText(subText, x, subY);
	              });
	            } else {
	              context.strokeText(text, x, y);
	            }
	          }
	        },
	        measureText: function measureText() {
	          var self = this;
	          var attrs = self.__attrs;
	          var text = attrs.text;
	          var font = attrs.font;
	          var textArr = attrs.textArr;
	          var measureWidth = void 0;
	          var width = 0;

	          if (Util.isNil(text)) return undefined;
	          var context = document.createElement('canvas').getContext('2d');
	          context.save();
	          context.font = font;
	          if (textArr) {
	            Util.each(textArr, function (subText) {
	              measureWidth = context.measureText(subText).width;
	              if (width < measureWidth) {
	                width = measureWidth;
	              }
	              context.restore();
	            });
	          } else {
	            width = context.measureText(text).width;
	            context.restore();
	          }
	          return width;
	        }
	      });

	      module.exports = CText;

	      /***/
	    },
	    /* 104 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var LineMath = __webpack_require__(52);

	      var Line = function Line(cfg) {
	        Line.superclass.constructor.call(this, cfg);
	      };

	      Line.ATTRS = {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Line, Shape);

	      Util.augment(Line, {
	        canStroke: true,
	        type: 'line',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          var lineWidth = this.getHitLineWidth();
	          return LineMath.box(x1, y1, x2, y2, lineWidth);
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          var lineWidth = this.getHitLineWidth();

	          if (this.hasStroke()) {
	            return Inside.line(x1, y1, x2, y2, lineWidth, x, y);
	          }

	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
	          context.moveTo(x1, y1);
	          context.lineTo(x2, y2);
	          Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: LineMath.at(attrs.x1, attrs.x2, t),
	            y: LineMath.at(attrs.y1, attrs.y2, t)
	          };
	        }
	      });

	      module.exports = Line;

	      /***/
	    },
	    /* 105 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var CImage = function CImage(cfg) {
	        CImage.superclass.constructor.call(this, cfg);
	      };

	      CImage.ATTRS = {
	        x: 0,
	        y: 0,
	        img: undefined,
	        width: 0,
	        height: 0,
	        sx: null,
	        sy: null,
	        swidth: null,
	        sheight: null
	      };

	      Util.extend(CImage, Shape);

	      Util.augment(CImage, {
	        type: 'image',
	        __afterSetAttrImg: function __afterSetAttrImg(img) {
	          this.__setAttrImg(img);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll(params) {
	          if (params.img) {
	            this.__setAttrImg(params.img);
	          }
	        },
	        isHitBox: function isHitBox() {
	          return false;
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;

	          return {
	            minX: x,
	            minY: y,
	            maxX: x + width,
	            maxY: y + height
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          if (this.get('toDraw') || !attrs.img) {
	            return false;
	          }
	          var rx = attrs.x;
	          var ry = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          return Inside.rect(rx, ry, width, height, x, y);
	        },
	        __setLoading: function __setLoading(loading) {
	          var canvas = this.get('canvas');
	          if (loading === false && this.get('toDraw') === true) {
	            this.__cfg.loading = false;
	            canvas.draw();
	          }
	          return loading;
	        },
	        __setAttrImg: function __setAttrImg(img) {
	          var self = this;
	          var attrs = self.__attrs;
	          if (Util.isString(img)) {
	            var image = new Image();
	            image.onload = function () {
	              if (self.get('destroyed')) return false;
	              self.attr('imgSrc', img);
	              self.attr('img', image);
	              var callback = self.get('callback');
	              if (callback) {
	                callback.call(self);
	              }
	              self.set('loading', false);
	            };
	            image.src = img;
	            self.set('loading', true);
	          } else if (img instanceof Image) {
	            if (!attrs.width) {
	              self.attr('width', img.width);
	            }

	            if (!attrs.height) {
	              self.attr('height', img.height);
	            }
	            return img;
	          } else if (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
	            if (!attrs.width) {
	              self.attr('width', Number(img.getAttribute('width')));
	            }

	            if (!attrs.height) {
	              self.attr('height', Number(img.getAttribute('height')));
	            }
	            return img;
	          } else if (img instanceof ImageData) {
	            if (!attrs.width) {
	              self.attr('width', img.width);
	            }

	            if (!attrs.height) {
	              self.attr('height', img.height);
	            }
	            return img;
	          } else {
	            return null;
	          }
	        },
	        drawInner: function drawInner(context) {
	          if (this.get('loading')) {
	            this.set('toDraw', true);
	            return;
	          }
	          this.__drawImage(context);
	        },
	        __drawImage: function __drawImage(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var img = attrs.img;
	          var width = attrs.width;
	          var height = attrs.height;
	          var sx = attrs.sx;
	          var sy = attrs.sy;
	          var swidth = attrs.swidth;
	          var sheight = attrs.sheight;
	          this.set('toDraw', false);

	          if (img instanceof Image || img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
	            if (Util.isNil(sx) || Util.isNil(sy) || Util.isNil(swidth) || Util.isNil(sheight)) {
	              context.drawImage(img, x, y, width, height);
	              return;
	            }
	            if (!Util.isNil(sx) && !Util.isNil(sy) && !Util.isNil(swidth) && !Util.isNil(sheight)) {
	              context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
	              return;
	            }
	          } else if (img instanceof ImageData) {
	            context.putImageData(img, x, y, sx || 0, sy || 0, swidth || width, sheight || height);
	            return;
	          }
	          return;
	        }
	      });

	      module.exports = CImage;

	      /***/
	    },
	    /* 106 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Polygon = function Polygon(cfg) {
	        Polygon.superclass.constructor.call(this, cfg);
	      };

	      Polygon.ATTRS = {
	        points: null,
	        lineWidth: 1
	      };

	      Util.extend(Polygon, Shape);

	      Util.augment(Polygon, {
	        canFill: true,
	        canStroke: true,
	        type: 'polygon',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var lineWidth = this.getHitLineWidth();
	          if (!points || points.length === 0) {
	            return null;
	          }
	          var minX = Infinity;
	          var minY = Infinity;
	          var maxX = -Infinity;
	          var maxY = -Infinity;

	          Util.each(points, function (point) {
	            var x = point[0];
	            var y = point[1];
	            if (x < minX) {
	              minX = x;
	            }
	            if (x > maxX) {
	              maxX = x;
	            }

	            if (y < minY) {
	              minY = y;
	            }

	            if (y > maxY) {
	              maxY = y;
	            }
	          });

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var self = this;
	          var context = self.get('context');
	          self.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          if (points.length < 2) {
	            return false;
	          }
	          var lineWidth = this.getHitLineWidth();
	          var outPoints = points.slice(0);
	          if (points.length >= 3) {
	            outPoints.push(points[0]);
	          }

	          return Inside.polyline(outPoints, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          if (points.length < 2) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();
	          Util.each(points, function (point, index) {
	            if (index === 0) {
	              context.moveTo(point[0], point[1]);
	            } else {
	              context.lineTo(point[0], point[1]);
	            }
	          });
	          context.closePath();
	        }
	      });

	      module.exports = Polygon;

	      /***/
	    },
	    /* 107 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var LineMath = __webpack_require__(52);

	      var Polyline = function Polyline(cfg) {
	        Polyline.superclass.constructor.call(this, cfg);
	      };

	      Polyline.ATTRS = {
	        points: null,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false,
	        tCache: null
	      };

	      Util.extend(Polyline, Shape);

	      Util.augment(Polyline, {
	        canStroke: true,
	        type: 'polyline',
	        tCache: null, // 缓存各点的t
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var lineWidth = this.getHitLineWidth();
	          var points = attrs.points;
	          if (!points || points.length === 0) {
	            return null;
	          }
	          var minX = Infinity;
	          var minY = Infinity;
	          var maxX = -Infinity;
	          var maxY = -Infinity;

	          Util.each(points, function (point) {
	            var x = point[0];
	            var y = point[1];
	            if (x < minX) {
	              minX = x;
	            }
	            if (x > maxX) {
	              maxX = x;
	            }

	            if (y < minY) {
	              minY = y;
	            }

	            if (y > maxY) {
	              maxY = y;
	            }
	          });

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        __setTcache: function __setTcache() {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var totalLength = 0;
	          var tempLength = 0;
	          var tCache = [];
	          var segmentT = void 0;
	          var segmentL = void 0;
	          if (!points || points.length === 0) {
	            return;
	          }

	          Util.each(points, function (p, i) {
	            if (points[i + 1]) {
	              totalLength += LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	            }
	          });
	          if (totalLength <= 0) {
	            return;
	          }
	          Util.each(points, function (p, i) {
	            if (points[i + 1]) {
	              segmentT = [];
	              segmentT[0] = tempLength / totalLength;
	              segmentL = LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	              tempLength += segmentL;
	              segmentT[1] = tempLength / totalLength;
	              tCache.push(segmentT);
	            }
	          });
	          this.tCache = tCache;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          if (self.hasStroke()) {
	            var points = attrs.points;
	            if (points.length < 2) {
	              return false;
	            }
	            var lineWidth = attrs.lineWidth;
	            return Inside.polyline(points, lineWidth, x, y);
	          }
	          return false;
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var l = void 0;
	          var i = void 0;

	          if (points.length < 2) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, points[1][0], points[1][1], points[0][0], points[0][1]);
	          context.moveTo(points[0][0], points[0][1]);
	          for (i = 1, l = points.length - 1; i < l; i++) {
	            context.lineTo(points[i][0], points[i][1]);
	          }
	          context.lineTo(points[l][0], points[l][1]);
	          Arrow.addEndArrow(context, attrs, points[l - 1][0], points[l - 1][1], points[l][0], points[l][1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          var points = attrs.points;
	          var tCache = this.tCache;
	          var subt = void 0;
	          var index = void 0;
	          if (!tCache) {
	            this.__setTcache();
	            tCache = this.tCache;
	          }
	          Util.each(tCache, function (v, i) {
	            if (t >= v[0] && t <= v[1]) {
	              subt = (t - v[0]) / (v[1] - v[0]);
	              index = i;
	            }
	          });
	          return {
	            x: LineMath.at(points[index][0], points[index + 1][0], subt),
	            y: LineMath.at(points[index][1], points[index + 1][1], subt)
	          };
	        }
	      });

	      module.exports = Polyline;

	      /***/
	    },
	    /* 108 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var ArcMath = __webpack_require__(54);
	      var Arrow = __webpack_require__(15);

	      function _getArcX(x, radius, angle) {
	        return x + radius * Math.cos(angle);
	      }
	      function _getArcY(y, radius, angle) {
	        return y + radius * Math.sin(angle);
	      }

	      var Arc = function Arc(cfg) {
	        Arc.superclass.constructor.call(this, cfg);
	      };

	      Arc.ATTRS = {
	        x: 0,
	        y: 0,
	        r: 0,
	        startAngle: 0,
	        endAngle: 0,
	        clockwise: false,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Arc, Shape);

	      Util.augment(Arc, {
	        canStroke: true,
	        type: 'arc',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            x: 0,
	            y: 0,
	            r: 0,
	            startAngle: 0,
	            endAngle: 0,
	            clockwise: false,
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x = attrs.x,
	              y = attrs.y,
	              r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2;
	          var box = ArcMath.box(x, y, r, startAngle, endAngle, clockwise);
	          box.minX -= halfWidth;
	          box.minY -= halfWidth;
	          box.maxX += halfWidth;
	          box.maxY += halfWidth;
	          return box;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var lineWidth = this.getHitLineWidth();
	          if (this.hasStroke()) {
	            return Inside.arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y);
	          }
	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x,
	              y = attrs.y,
	              r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var diff = void 0;
	          var x1 = void 0;
	          var y1 = void 0;
	          var x2 = void 0;
	          var y2 = void 0;

	          context = context || self.get('context');
	          context.beginPath();

	          if (attrs.startArrow) {
	            diff = Math.PI / 180;
	            if (clockwise) {
	              diff *= -1;
	            }

	            // Calculate coordinates for start arrow
	            x1 = _getArcX(x, r, startAngle + diff);
	            y1 = _getArcY(y, r, startAngle + diff);
	            x2 = _getArcX(x, r, startAngle);
	            y2 = _getArcY(y, r, startAngle);
	            Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
	          }
	          context.arc(x, y, r, startAngle, endAngle, clockwise);

	          if (attrs.endArrow) {
	            diff = Math.PI / 180;
	            if (clockwise) {
	              diff *= -1;
	            }

	            // Calculate coordinates for start arrow
	            x1 = _getArcX(x, r, endAngle + diff);
	            y1 = _getArcY(y, r, endAngle + diff);
	            x2 = _getArcX(x, r, endAngle);
	            y2 = _getArcY(y, r, endAngle);
	            Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
	          }
	        }
	      });

	      module.exports = Arc;

	      /***/
	    },
	    /* 109 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var ArcMath = __webpack_require__(54);
	      var vec2 = __webpack_require__(3).vec2;

	      var Fan = function Fan(cfg) {
	        Fan.superclass.constructor.call(this, cfg);
	      };

	      Fan.ATTRS = {
	        x: 0,
	        y: 0,
	        rs: 0,
	        re: 0,
	        startAngle: 0,
	        endAngle: 0,
	        clockwise: false,
	        lineWidth: 1
	      };

	      Util.extend(Fan, Shape);

	      Util.augment(Fan, {
	        canFill: true,
	        canStroke: true,
	        type: 'fan',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            clockwise: false,
	            lineWidth: 1,
	            rs: 0,
	            re: 0
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var lineWidth = this.getHitLineWidth();

	          var boxs = ArcMath.box(cx, cy, rs, startAngle, endAngle, clockwise);
	          var boxe = ArcMath.box(cx, cy, re, startAngle, endAngle, clockwise);
	          var minX = Math.min(boxs.minX, boxe.minX);
	          var minY = Math.min(boxs.minY, boxe.minY);
	          var maxX = Math.max(boxs.maxX, boxe.maxX);
	          var maxY = Math.max(boxs.maxY, boxe.maxY);

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();

	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }
	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var v1 = [1, 0];
	          var subv = [x - cx, y - cy];
	          var angle = vec2.angleTo(v1, subv);

	          var angle1 = ArcMath.nearAngle(angle, startAngle, endAngle, clockwise);

	          if (Util.isNumberEqual(angle, angle1)) {
	            var ls = vec2.squaredLength(subv);
	            if (rs * rs <= ls && ls <= re * re) {
	              return true;
	            }
	          }
	          return false;
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var lineWidth = this.getHitLineWidth();

	          var ssp = {
	            x: Math.cos(startAngle) * rs + cx,
	            y: Math.sin(startAngle) * rs + cy
	          };
	          var sep = {
	            x: Math.cos(startAngle) * re + cx,
	            y: Math.sin(startAngle) * re + cy
	          };
	          var esp = {
	            x: Math.cos(endAngle) * rs + cx,
	            y: Math.sin(endAngle) * rs + cy
	          };
	          var eep = {
	            x: Math.cos(endAngle) * re + cx,
	            y: Math.sin(endAngle) * re + cy
	          };

	          if (Inside.line(ssp.x, ssp.y, sep.x, sep.y, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.line(esp.x, esp.y, eep.x, eep.y, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.arcline(cx, cy, rs, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.arcline(cx, cy, re, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	            return true;
	          }

	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;

	          var ssp = {
	            x: Math.cos(startAngle) * rs + cx,
	            y: Math.sin(startAngle) * rs + cy
	          };
	          var sep = {
	            x: Math.cos(startAngle) * re + cx,
	            y: Math.sin(startAngle) * re + cy
	          };
	          var esp = {
	            x: Math.cos(endAngle) * rs + cx,
	            y: Math.sin(endAngle) * rs + cy
	          };

	          context = context || self.get('context');
	          context.beginPath();
	          context.moveTo(ssp.x, ssp.y);
	          context.lineTo(sep.x, sep.y);
	          context.arc(cx, cy, re, startAngle, endAngle, clockwise);
	          context.lineTo(esp.x, esp.y);
	          context.arc(cx, cy, rs, endAngle, startAngle, !clockwise);
	          context.closePath();
	        }
	      });

	      module.exports = Fan;

	      /***/
	    },
	    /* 110 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var CubicMath = __webpack_require__(31);

	      var Cubic = function Cubic(cfg) {
	        Cubic.superclass.constructor.call(this, cfg);
	      };

	      Cubic.ATTRS = {
	        p1: null, // 起始点
	        p2: null, // 第一个控制点
	        p3: null, // 第二个控制点
	        p4: null, // 终点
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Cubic, Shape);

	      Util.augment(Cubic, {
	        canStroke: true,
	        type: 'cubic',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          var lineWidth = this.getHitLineWidth();
	          var i = void 0;
	          var l = void 0;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
	            return null;
	          }
	          var halfWidth = lineWidth / 2;

	          var xDim = CubicMath.extrema(p1[0], p2[0], p3[0], p4[0]);
	          for (i = 0, l = xDim.length; i < l; i++) {
	            xDim[i] = CubicMath.at(p1[0], p2[0], p3[0], p4[0], xDim[i]);
	          }
	          var yDim = CubicMath.extrema(p1[1], p2[1], p3[1], p4[1]);
	          for (i = 0, l = yDim.length; i < l; i++) {
	            yDim[i] = CubicMath.at(p1[1], p2[1], p3[1], p4[1], yDim[i]);
	          }
	          xDim.push(p1[0], p4[0]);
	          yDim.push(p1[1], p4[1]);

	          return {
	            minX: Math.min.apply(Math, xDim) - halfWidth,
	            maxX: Math.max.apply(Math, xDim) + halfWidth,
	            minY: Math.min.apply(Math, yDim) - halfWidth,
	            maxY: Math.max.apply(Math, yDim) + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          var lineWidth = this.getHitLineWidth();
	          return Inside.cubicline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], p4[0], p4[1], lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          context = context || self.get('context');
	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
	            return;
	          }

	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
	          context.moveTo(p1[0], p1[1]);
	          context.bezierCurveTo(p2[0], p2[1], p3[0], p3[1], p4[0], p4[1]);
	          Arrow.addEndArrow(context, attrs, p3[0], p3[1], p4[0], p4[1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: CubicMath.at(attrs.p4[0], attrs.p3[0], attrs.p2[0], attrs.p1[0], t),
	            y: CubicMath.at(attrs.p4[1], attrs.p3[1], attrs.p2[1], attrs.p1[1], t)
	          };
	        }
	      });

	      module.exports = Cubic;

	      /***/
	    },
	    /* 111 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var QuadraticMath = __webpack_require__(53);

	      var Quadratic = function Quadratic(cfg) {
	        Quadratic.superclass.constructor.call(this, cfg);
	      };

	      Quadratic.ATTRS = {
	        p1: null, // 起始点
	        p2: null, // 控制点
	        p3: null, // 结束点
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Quadratic, Shape);

	      Util.augment(Quadratic, {
	        canStroke: true,
	        type: 'quadratic',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          var lineWidth = this.getHitLineWidth();
	          var i = void 0;
	          var l = void 0;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
	            return null;
	          }
	          var halfWidth = lineWidth / 2;
	          var xDims = QuadraticMath.extrema(p1[0], p2[0], p3[0]);
	          for (i = 0, l = xDims.length; i < l; i++) {
	            xDims[i] = QuadraticMath.at(p1[0], p2[0], p3[0], xDims[i]);
	          }
	          xDims.push(p1[0], p3[0]);
	          var yDims = QuadraticMath.extrema(p1[1], p2[1], p3[1]);
	          for (i = 0, l = yDims.length; i < l; i++) {
	            yDims[i] = QuadraticMath.at(p1[1], p2[1], p3[1], yDims[i]);
	          }
	          yDims.push(p1[1], p3[1]);

	          return {
	            minX: Math.min.apply(Math, xDims) - halfWidth,
	            maxX: Math.max.apply(Math, xDims) + halfWidth,
	            minY: Math.min.apply(Math, yDims) - halfWidth,
	            maxY: Math.max.apply(Math, yDims) + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          var lineWidth = this.getHitLineWidth();

	          return Inside.quadraticline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
	          context.moveTo(p1[0], p1[1]);
	          context.quadraticCurveTo(p2[0], p2[1], p3[0], p3[1]);
	          Arrow.addEndArrow(context, attrs, p2[0], p2[1], p3[0], p3[1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: QuadraticMath.at(attrs.p1[0], attrs.p2[0], attrs.p3[0], t),
	            y: QuadraticMath.at(attrs.p1[1], attrs.p2[1], attrs.p3[1], t)
	          };
	        }
	      });

	      module.exports = Quadratic;

	      /***/
	    },
	    /* 112 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Marker = function Marker(cfg) {
	        Marker.superclass.constructor.call(this, cfg);
	      };

	      Marker.Symbols = {
	        // 圆
	        circle: function circle(x, y, r, ctx) {
	          ctx.arc(x, y, r, 0, Math.PI * 2, false);
	        },

	        // 正方形
	        square: function square(x, y, r, ctx) {
	          ctx.moveTo(x - r, y - r);
	          ctx.lineTo(x + r, y - r);
	          ctx.lineTo(x + r, y + r);
	          ctx.lineTo(x - r, y + r);
	          ctx.closePath();
	        },

	        // 菱形
	        diamond: function diamond(x, y, r, ctx) {
	          ctx.moveTo(x - r, y);
	          ctx.lineTo(x, y - r);
	          ctx.lineTo(x + r, y);
	          ctx.lineTo(x, y + r);
	          ctx.closePath();
	        },

	        // 三角形
	        triangle: function triangle(x, y, r, ctx) {
	          var diffY = r * Math.sin(1 / 3 * Math.PI);
	          ctx.moveTo(x - r, y + diffY);
	          ctx.lineTo(x, y - diffY);
	          ctx.lineTo(x + r, y + diffY);
	          ctx.closePath();
	        },

	        // 倒三角形
	        'triangle-down': function triangleDown(x, y, r, ctx) {
	          var diffY = r * Math.sin(1 / 3 * Math.PI);
	          ctx.moveTo(x - r, y - diffY);
	          ctx.lineTo(x + r, y - diffY);
	          ctx.lineTo(x, y + diffY);
	          ctx.closePath();
	        }
	      };

	      Marker.ATTRS = {
	        path: null,
	        lineWidth: 1
	      };

	      Util.extend(Marker, Shape);

	      Util.augment(Marker, {
	        type: 'marker',
	        canFill: true,
	        canStroke: true,
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            x: 0,
	            y: 0,
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.radius;
	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2 + r;
	          return {
	            minX: cx - halfWidth,
	            minY: cy - halfWidth,
	            maxX: cx + halfWidth,
	            maxY: cy + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.radius;
	          var lineWidth = this.getHitLineWidth();
	          return Inside.circle(cx, cy, r + lineWidth / 2, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var r = attrs.radius;
	          var symbol = attrs.symbol || 'circle';
	          var method = void 0;
	          if (Util.isFunction(symbol)) {
	            method = symbol;
	          } else {
	            method = Marker.Symbols[symbol];
	          }
	          context.beginPath();
	          method(x, y, r, context, this);
	        }
	      });

	      module.exports = Marker;

	      /***/
	    },
	    /* 113 */
	    /***/function (module, exports, __webpack_require__) {

	      module.exports = {
	        Canvas: __webpack_require__(114),
	        Group: __webpack_require__(88),
	        Shape: __webpack_require__(1),
	        Rect: __webpack_require__(55),
	        Circle: __webpack_require__(99),
	        Ellipse: __webpack_require__(100),
	        Path: __webpack_require__(101),
	        Text: __webpack_require__(103),
	        Line: __webpack_require__(104),
	        Image: __webpack_require__(105),
	        Polygon: __webpack_require__(106),
	        Polyline: __webpack_require__(107),
	        Arc: __webpack_require__(108),
	        Fan: __webpack_require__(109),
	        Cubic: __webpack_require__(110),
	        Quadratic: __webpack_require__(111),
	        Marker: __webpack_require__(112),
	        PathUtil: __webpack_require__(46),
	        PathSegment: __webpack_require__(102),
	        MatrixUtil: __webpack_require__(3),
	        CommonUtil: __webpack_require__(16),
	        DomUtil: __webpack_require__(86),
	        Event: __webpack_require__(87),
	        version: '2.0.7-beta.3'
	      };

	      /***/
	    },
	    /* 114 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Event = __webpack_require__(87);
	      var Group = __webpack_require__(88);

	      var Canvas = function Canvas(cfg) {
	        Canvas.superclass.constructor.call(this, cfg);
	      };

	      Canvas.CFG = {
	        eventEnable: true,
	        /**
	         * 像素宽度
	         * @type {Number}
	         */
	        width: null,
	        /**
	         * 像素高度
	         * @type {Number}
	         */
	        height: null,
	        /**
	         * 画布宽度
	         * @type {Number}
	         */
	        widthCanvas: null,
	        /**
	         * 画布高度
	         * @type {Number}
	         */
	        heightCanvas: null,
	        /**
	         * CSS宽
	         * @type {String}
	         */
	        widthStyle: null,
	        /**
	         * CSS高
	         * @type {String}
	         */
	        heightStyle: null,
	        /**
	         * 容器DOM
	         * @type {Object}
	         */
	        containerDOM: null,
	        /**
	         * 当前Canvas的DOM
	         * @type {Object}
	         */
	        canvasDOM: null,
	        /**
	         * 屏幕像素比
	         * @type {Number}
	         */
	        pixelRatio: null
	      };

	      Util.extend(Canvas, Group);

	      Util.augment(Canvas, {
	        init: function init() {
	          Canvas.superclass.init.call(this);
	          this._setGlobalParam();
	          this._setDOM();
	          this._setInitSize();
	          this._setCanvas();
	          this._scale();
	          if (this.get('eventEnable')) {
	            this._registEvents();
	          }
	        },
	        getEmitter: function getEmitter(element, event) {
	          if (element) {
	            if (Util.isEmpty(element._getEvents())) {
	              var parent = element.get('parent');
	              if (parent && !event.propagationStopped) {
	                return this.getEmitter(parent, event);
	              }
	            } else {
	              return element;
	            }
	          }
	        },
	        _getEventObj: function _getEventObj(type, e, point, target) {
	          var event = new Event(type, e, true, true);
	          event.x = point.x;
	          event.y = point.y;
	          event.clientX = e.clientX;
	          event.clientY = e.clientY;
	          event.currentTarget = target;
	          event.target = target;
	          return event;
	        },
	        _triggerEvent: function _triggerEvent(type, e) {
	          var point = this.getPointByClient(e.clientX, e.clientY);
	          var shape = this.getShape(point.x, point.y);
	          var emitObj = void 0;
	          if (type === 'mousemove') {
	            var canvasmousemove = this._getEventObj('mousemove', e, point, this);
	            this.emit('mousemove', canvasmousemove);

	            var preShape = this.get('preShape');
	            if (preShape && preShape !== shape) {
	              var mouseleave = this._getEventObj('mouseleave', e, point, preShape);
	              emitObj = this.getEmitter(preShape, e);
	              emitObj && emitObj.emit('mouseleave', mouseleave);
	            }

	            if (shape) {
	              var mousemove = this._getEventObj('mousemove', e, point, shape);
	              emitObj = this.getEmitter(shape, e);
	              emitObj && emitObj.emit('mousemove', mousemove);

	              if (preShape !== shape) {
	                var mouseenter = this._getEventObj('mouseenter', e, point, shape);
	                emitObj && emitObj.emit('mouseenter', mouseenter, e);
	              }
	            }

	            this.set('preShape', shape);
	          } else {
	            var event = this._getEventObj(type, e, point, shape || this);
	            emitObj = this.getEmitter(shape, e);
	            if (emitObj && emitObj !== this) {
	              emitObj.emit(type, event);
	            }
	            this.emit(type, event);
	          }

	          var el = this.get('el');
	          if (shape && !shape.get('destroyed')) {
	            el.style.cursor = shape.attr('cursor') || 'default';
	          }
	        },
	        _registEvents: function _registEvents() {
	          var self = this;
	          var el = self.get('el');

	          el.addEventListener('mouseout', function (e) {
	            self._triggerEvent('mouseleave', e);
	          }, false);

	          el.addEventListener('mouseover', function (e) {
	            self._triggerEvent('mouseenter', e);
	          }, false);

	          el.addEventListener('mousemove', function (e) {
	            self._triggerEvent('mousemove', e);
	          }, false);

	          el.addEventListener('mousedown', function (e) {
	            self._triggerEvent('mousedown', e);
	          }, false);

	          el.addEventListener('mouseup', function (e) {
	            self._triggerEvent('mouseup', e);
	          }, false);

	          el.addEventListener('click', function (e) {
	            self._triggerEvent('click', e);
	          }, false);

	          el.addEventListener('dblclick', function (e) {
	            self._triggerEvent('dblclick', e);
	          }, false);

	          el.addEventListener('touchstart', function (e) {
	            if (!Util.isEmpty(e.touches)) {
	              self._triggerEvent('touchstart', e.touches[0]);
	            }
	          }, false);

	          el.addEventListener('touchmove', function (e) {
	            if (!Util.isEmpty(e.touches)) {
	              self._triggerEvent('touchmove', e.touches[0]);
	            }
	          }, false);

	          el.addEventListener('touchend', function (e) {
	            if (!Util.isEmpty(e.changedTouches)) {
	              self._triggerEvent('touchend', e.changedTouches[0]);
	            }
	          }, false);
	        },
	        _scale: function _scale() {
	          var pixelRatio = this.get('pixelRatio');
	          this.scale(pixelRatio, pixelRatio);
	        },
	        _setCanvas: function _setCanvas() {
	          var canvasDOM = this.get('canvasDOM');
	          this.set('el', canvasDOM);
	          this.set('context', canvasDOM.getContext('2d'));
	          this.set('canvas', this);
	        },
	        _setGlobalParam: function _setGlobalParam() {
	          var pixelRatio = this.get('pixelRatio');
	          if (!pixelRatio) {
	            this.set('pixelRatio', Util.getRatio());
	          }
	          return;
	        },
	        _setDOM: function _setDOM() {
	          this._setContainer();
	          this._setLayer();
	        },
	        _setContainer: function _setContainer() {
	          var containerId = this.get('containerId');
	          var containerDOM = this.get('containerDOM');
	          if (!containerDOM) {
	            containerDOM = document.getElementById(containerId);
	            this.set('containerDOM', containerDOM);
	          }
	          Util.modifyCSS(containerDOM, {
	            position: 'relative'
	          });
	        },
	        _setLayer: function _setLayer() {
	          var containerDOM = this.get('containerDOM');
	          var canvasId = Util.uniqueId('canvas_');
	          if (containerDOM) {
	            var canvasDOM = Util.createDom('<canvas id="' + canvasId + '"></canvas>');
	            containerDOM.appendChild(canvasDOM);
	            this.set('canvasDOM', canvasDOM);
	          }
	        },
	        _setInitSize: function _setInitSize() {
	          this.changeSize(this.get('width'), this.get('height'));
	        },
	        _reSize: function _reSize() {
	          var canvasDOM = this.get('canvasDOM');
	          var widthCanvas = this.get('widthCanvas');
	          var heightCanvas = this.get('heightCanvas');
	          var widthStyle = this.get('widthStyle');
	          var heightStyle = this.get('heightStyle');

	          canvasDOM.style.width = widthStyle;
	          canvasDOM.style.height = heightStyle;
	          canvasDOM.setAttribute('width', widthCanvas);
	          canvasDOM.setAttribute('height', heightCanvas);
	        },
	        getWidth: function getWidth() {
	          var pixelRatio = this.get('pixelRatio');
	          var width = this.get('width');
	          return width * pixelRatio;
	        },
	        getHeight: function getHeight() {
	          var pixelRatio = this.get('pixelRatio');
	          var height = this.get('height');
	          return height * pixelRatio;
	        },
	        changeSize: function changeSize(width, height) {
	          var pixelRatio = this.get('pixelRatio');
	          var widthCanvas = width * pixelRatio;
	          var heightCanvas = height * pixelRatio;

	          this.set('widthCanvas', widthCanvas);
	          this.set('heightCanvas', heightCanvas);
	          this.set('widthStyle', width + 'px');
	          this.set('heightStyle', height + 'px');
	          this.set('width', width);
	          this.set('height', height);
	          this._reSize();
	        },

	        /**
	         * 将窗口坐标转变成 canvas 坐标
	         * @param  {Number} clientX 窗口x坐标
	         * @param  {Number} clientY 窗口y坐标
	         * @return {Object} canvas坐标
	         */
	        getPointByClient: function getPointByClient(clientX, clientY) {
	          var el = this.get('el');
	          var bbox = el.getBoundingClientRect();
	          var width = bbox.right - bbox.left;
	          var height = bbox.bottom - bbox.top;
	          return {
	            x: (clientX - bbox.left) * (el.width / width),
	            y: (clientY - bbox.top) * (el.height / height)
	          };
	        },
	        getClientByPoint: function getClientByPoint(x, y) {
	          var el = this.get('el');
	          var bbox = el.getBoundingClientRect();
	          var width = bbox.right - bbox.left;
	          var height = bbox.bottom - bbox.top;
	          return {
	            clientX: x / (el.width / width) + bbox.left,
	            clientY: y / (el.height / height) + bbox.top
	          };
	        },
	        beforeDraw: function beforeDraw() {
	          var context = this.get('context');
	          var el = this.get('el');
	          context && context.clearRect(0, 0, el.width, el.height);
	        },
	        _beginDraw: function _beginDraw() {
	          this.setSilent('toDraw', true);
	        },
	        _endDraw: function _endDraw() {
	          this.setSilent('toDraw', false);
	        },
	        draw: function draw() {
	          var self = this;
	          function drawInner() {
	            self.setSilent('animateHandler', Util.requestAnimationFrame(function () {
	              self.setSilent('animateHandler', undefined);
	              if (self.get('toDraw')) {
	                drawInner();
	              }
	            }));
	            self.beforeDraw();
	            try {
	              var context = self.get('context');
	              Canvas.superclass.draw.call(self, context);
	              // self._drawCanvas();
	            } catch (ev) {
	              // 绘制时异常，中断重绘
	              console.warn('error in draw canvas, detail as:');
	              console.warn(ev);
	              self._endDraw();
	            }
	            self._endDraw();
	          }

	          if (self.get('destroyed')) {
	            return;
	          }
	          if (self.get('animateHandler')) {
	            this._beginDraw();
	          } else {
	            drawInner();
	          }
	        },
	        destroy: function destroy() {
	          var containerDOM = this.get('containerDOM');
	          var canvasDOM = this.get('canvasDOM');
	          if (canvasDOM && containerDOM) {
	            containerDOM.removeChild(canvasDOM);
	          }
	          Canvas.superclass.destroy.call(this);
	        }
	      });

	      module.exports = Canvas;

	      /***/
	    },
	    /* 115 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var g;

	      // This works in non-strict mode
	      g = function () {
	        return this;
	      }();

	      try {
	        // This works if eval is allowed (see CSP)
	        g = g || Function("return this")() || (1, eval)("this");
	      } catch (e) {
	        // This works if the window reference is available
	        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	      }

	      // g can still be undefined, but nothing to do about it...
	      // We return undefined, instead of nothing here, so it's
	      // easier to handle this case. if(!global) { ...}

	      module.exports = g;

	      /***/
	    },
	    /* 116 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Used to resolve the
	       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	       * of values.
	       */
	      var nativeObjectToString = objectProto.toString;

	      /** Built-in value references. */
	      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	      /**
	       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the raw `toStringTag`.
	       */
	      function getRawTag(value) {
	        var isOwn = hasOwnProperty.call(value, symToStringTag),
	            tag = value[symToStringTag];

	        try {
	          value[symToStringTag] = undefined;
	          var unmasked = true;
	        } catch (e) {}

	        var result = nativeObjectToString.call(value);
	        if (unmasked) {
	          if (isOwn) {
	            value[symToStringTag] = tag;
	          } else {
	            delete value[symToStringTag];
	          }
	        }
	        return result;
	      }

	      module.exports = getRawTag;

	      /***/
	    },
	    /* 117 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /**
	       * Used to resolve the
	       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	       * of values.
	       */
	      var nativeObjectToString = objectProto.toString;

	      /**
	       * Converts `value` to a string using `Object.prototype.toString`.
	       *
	       * @private
	       * @param {*} value The value to convert.
	       * @returns {string} Returns the converted string.
	       */
	      function objectToString(value) {
	        return nativeObjectToString.call(value);
	      }

	      module.exports = objectToString;

	      /***/
	    },
	    /* 118 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]';

	      /**
	       * Checks if `value` is classified as a boolean primitive or object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	       * @example
	       *
	       * _.isBoolean(false);
	       * // => true
	       *
	       * _.isBoolean(null);
	       * // => false
	       */
	      function isBoolean(value) {
	        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
	      }

	      module.exports = isBoolean;

	      /***/
	    },
	    /* 119 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is `null` or `undefined`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	       * @example
	       *
	       * _.isNil(null);
	       * // => true
	       *
	       * _.isNil(void 0);
	       * // => true
	       *
	       * _.isNil(NaN);
	       * // => false
	       */
	      function isNil(value) {
	        return value == null;
	      }

	      module.exports = isNil;

	      /***/
	    },
	    /* 120 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var numberTag = '[object Number]';

	      /**
	       * Checks if `value` is classified as a `Number` primitive or object.
	       *
	       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	       * classified as numbers, use the `_.isFinite` method.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	       * @example
	       *
	       * _.isNumber(3);
	       * // => true
	       *
	       * _.isNumber(Number.MIN_VALUE);
	       * // => true
	       *
	       * _.isNumber(Infinity);
	       * // => true
	       *
	       * _.isNumber('3');
	       * // => false
	       */
	      function isNumber(value) {
	        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
	      }

	      module.exports = isNumber;

	      /***/
	    },
	    /* 121 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseKeys = __webpack_require__(58),
	          getTag = __webpack_require__(22),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isArrayLike = __webpack_require__(9),
	          isBuffer = __webpack_require__(18),
	          isPrototype = __webpack_require__(17),
	          isTypedArray = __webpack_require__(23);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          setTag = '[object Set]';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Checks if `value` is an empty object, collection, map, or set.
	       *
	       * Objects are considered empty if they have no own enumerable string keyed
	       * properties.
	       *
	       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	       * jQuery-like collections are considered empty if they have a `length` of `0`.
	       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	       * @example
	       *
	       * _.isEmpty(null);
	       * // => true
	       *
	       * _.isEmpty(true);
	       * // => true
	       *
	       * _.isEmpty(1);
	       * // => true
	       *
	       * _.isEmpty([1, 2, 3]);
	       * // => false
	       *
	       * _.isEmpty({ 'a': 1 });
	       * // => false
	       */
	      function isEmpty(value) {
	        if (value == null) {
	          return true;
	        }
	        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	          return !value.length;
	        }
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	        if (isPrototype(value)) {
	          return !baseKeys(value).length;
	        }
	        for (var key in value) {
	          if (hasOwnProperty.call(value, key)) {
	            return false;
	          }
	        }
	        return true;
	      }

	      module.exports = isEmpty;

	      /***/
	    },
	    /* 122 */
	    /***/function (module, exports, __webpack_require__) {

	      var overArg = __webpack_require__(59);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeKeys = overArg(Object.keys, Object);

	      module.exports = nativeKeys;

	      /***/
	    },
	    /* 123 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var DataView = getNative(root, 'DataView');

	      module.exports = DataView;

	      /***/
	    },
	    /* 124 */
	    /***/function (module, exports, __webpack_require__) {

	      var isFunction = __webpack_require__(21),
	          isMasked = __webpack_require__(125),
	          isObject = __webpack_require__(8),
	          toSource = __webpack_require__(60);

	      /**
	       * Used to match `RegExp`
	       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	       */
	      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	      /** Used to detect host constructors (Safari). */
	      var reIsHostCtor = /^\[object .+?Constructor\]$/;

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype,
	          objectProto = Object.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Used to detect if a method is native. */
	      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	      /**
	       * The base implementation of `_.isNative` without bad shim checks.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a native function,
	       *  else `false`.
	       */
	      function baseIsNative(value) {
	        if (!isObject(value) || isMasked(value)) {
	          return false;
	        }
	        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	        return pattern.test(toSource(value));
	      }

	      module.exports = baseIsNative;

	      /***/
	    },
	    /* 125 */
	    /***/function (module, exports, __webpack_require__) {

	      var coreJsData = __webpack_require__(126);

	      /** Used to detect methods masquerading as native. */
	      var maskSrcKey = function () {
	        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	        return uid ? 'Symbol(src)_1.' + uid : '';
	      }();

	      /**
	       * Checks if `func` has its source masked.
	       *
	       * @private
	       * @param {Function} func The function to check.
	       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	       */
	      function isMasked(func) {
	        return !!maskSrcKey && maskSrcKey in func;
	      }

	      module.exports = isMasked;

	      /***/
	    },
	    /* 126 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Used to detect overreaching core-js shims. */
	      var coreJsData = root['__core-js_shared__'];

	      module.exports = coreJsData;

	      /***/
	    },
	    /* 127 */
	    /***/function (module, exports) {

	      /**
	       * Gets the value at `key` of `object`.
	       *
	       * @private
	       * @param {Object} [object] The object to query.
	       * @param {string} key The key of the property to get.
	       * @returns {*} Returns the property value.
	       */
	      function getValue(object, key) {
	        return object == null ? undefined : object[key];
	      }

	      module.exports = getValue;

	      /***/
	    },
	    /* 128 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Promise = getNative(root, 'Promise');

	      module.exports = Promise;

	      /***/
	    },
	    /* 129 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Set = getNative(root, 'Set');

	      module.exports = Set;

	      /***/
	    },
	    /* 130 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var WeakMap = getNative(root, 'WeakMap');

	      module.exports = WeakMap;

	      /***/
	    },
	    /* 131 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]';

	      /**
	       * The base implementation of `_.isArguments`.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	       */
	      function baseIsArguments(value) {
	        return isObjectLike(value) && baseGetTag(value) == argsTag;
	      }

	      module.exports = baseIsArguments;

	      /***/
	    },
	    /* 132 */
	    /***/function (module, exports) {

	      /**
	       * This method returns `false`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.13.0
	       * @category Util
	       * @returns {boolean} Returns `false`.
	       * @example
	       *
	       * _.times(2, _.stubFalse);
	       * // => [false, false]
	       */
	      function stubFalse() {
	        return false;
	      }

	      module.exports = stubFalse;

	      /***/
	    },
	    /* 133 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isLength = __webpack_require__(61),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          funcTag = '[object Function]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          objectTag = '[object Object]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          weakMapTag = '[object WeakMap]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /** Used to identify `toStringTag` values of typed arrays. */
	      var typedArrayTags = {};
	      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	      /**
	       * The base implementation of `_.isTypedArray` without Node.js optimizations.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	       */
	      function baseIsTypedArray(value) {
	        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	      }

	      module.exports = baseIsTypedArray;

	      /***/
	    },
	    /* 134 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var freeGlobal = __webpack_require__(56);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Detect free variable `process` from Node.js. */
	        var freeProcess = moduleExports && freeGlobal.process;

	        /** Used to access faster Node.js helpers. */
	        var nodeUtil = function () {
	          try {
	            return freeProcess && freeProcess.binding && freeProcess.binding('util');
	          } catch (e) {}
	        }();

	        module.exports = nodeUtil;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 135 */
	    /***/function (module, exports, __webpack_require__) {

	      var toString = __webpack_require__(63);

	      /** Used to generate unique IDs. */
	      var idCounter = 0;

	      /**
	       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Util
	       * @param {string} [prefix=''] The value to prefix the ID with.
	       * @returns {string} Returns the unique ID.
	       * @example
	       *
	       * _.uniqueId('contact_');
	       * // => 'contact_104'
	       *
	       * _.uniqueId();
	       * // => '105'
	       */
	      function uniqueId(prefix) {
	        var id = ++idCounter;
	        return toString(prefix) + id;
	      }

	      module.exports = uniqueId;

	      /***/
	    },
	    /* 136 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          arrayMap = __webpack_require__(35),
	          isArray = __webpack_require__(6),
	          isSymbol = __webpack_require__(137);

	      /** Used as references for various `Number` constants. */
	      var INFINITY = 1 / 0;

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolToString = symbolProto ? symbolProto.toString : undefined;

	      /**
	       * The base implementation of `_.toString` which doesn't convert nullish
	       * values to empty strings.
	       *
	       * @private
	       * @param {*} value The value to process.
	       * @returns {string} Returns the string.
	       */
	      function baseToString(value) {
	        // Exit early for strings to avoid a performance hit in some environments.
	        if (typeof value == 'string') {
	          return value;
	        }
	        if (isArray(value)) {
	          // Recursively convert values (susceptible to call stack limits).
	          return arrayMap(value, baseToString) + '';
	        }
	        if (isSymbol(value)) {
	          return symbolToString ? symbolToString.call(value) : '';
	        }
	        var result = value + '';
	        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	      }

	      module.exports = baseToString;

	      /***/
	    },
	    /* 137 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var symbolTag = '[object Symbol]';

	      /**
	       * Checks if `value` is classified as a `Symbol` primitive or object.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	       * @example
	       *
	       * _.isSymbol(Symbol.iterator);
	       * // => true
	       *
	       * _.isSymbol('abc');
	       * // => false
	       */
	      function isSymbol(value) {
	        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	      }

	      module.exports = isSymbol;

	      /***/
	    },
	    /* 138 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseClone = __webpack_require__(139);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_SYMBOLS_FLAG = 4;

	      /**
	       * Creates a shallow clone of `value`.
	       *
	       * **Note:** This method is loosely based on the
	       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	       * and supports cloning arrays, array buffers, booleans, date objects, maps,
	       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	       * arrays. The own enumerable properties of `arguments` objects are cloned
	       * as plain objects. An empty object is returned for uncloneable values such
	       * as error objects, functions, DOM nodes, and WeakMaps.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to clone.
	       * @returns {*} Returns the cloned value.
	       * @see _.cloneDeep
	       * @example
	       *
	       * var objects = [{ 'a': 1 }, { 'b': 2 }];
	       *
	       * var shallow = _.clone(objects);
	       * console.log(shallow[0] === objects[0]);
	       * // => true
	       */
	      function clone(value) {
	        return baseClone(value, CLONE_SYMBOLS_FLAG);
	      }

	      module.exports = clone;

	      /***/
	    },
	    /* 139 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          arrayEach = __webpack_require__(65),
	          assignValue = __webpack_require__(37),
	          baseAssign = __webpack_require__(162),
	          baseAssignIn = __webpack_require__(164),
	          cloneBuffer = __webpack_require__(69),
	          copyArray = __webpack_require__(29),
	          copySymbols = __webpack_require__(167),
	          copySymbolsIn = __webpack_require__(169),
	          getAllKeys = __webpack_require__(73),
	          getAllKeysIn = __webpack_require__(170),
	          getTag = __webpack_require__(22),
	          initCloneArray = __webpack_require__(171),
	          initCloneByTag = __webpack_require__(172),
	          initCloneObject = __webpack_require__(78),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isObject = __webpack_require__(8),
	          keys = __webpack_require__(13);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1,
	          CLONE_FLAT_FLAG = 2,
	          CLONE_SYMBOLS_FLAG = 4;

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          funcTag = '[object Function]',
	          genTag = '[object GeneratorFunction]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          objectTag = '[object Object]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]',
	          weakMapTag = '[object WeakMap]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /** Used to identify `toStringTag` values supported by `_.clone`. */
	      var cloneableTags = {};
	      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	      /**
	       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	       * traversed objects.
	       *
	       * @private
	       * @param {*} value The value to clone.
	       * @param {boolean} bitmask The bitmask flags.
	       *  1 - Deep clone
	       *  2 - Flatten inherited properties
	       *  4 - Clone symbols
	       * @param {Function} [customizer] The function to customize cloning.
	       * @param {string} [key] The key of `value`.
	       * @param {Object} [object] The parent object of `value`.
	       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	       * @returns {*} Returns the cloned value.
	       */
	      function baseClone(value, bitmask, customizer, key, object, stack) {
	        var result,
	            isDeep = bitmask & CLONE_DEEP_FLAG,
	            isFlat = bitmask & CLONE_FLAT_FLAG,
	            isFull = bitmask & CLONE_SYMBOLS_FLAG;

	        if (customizer) {
	          result = object ? customizer(value, key, object, stack) : customizer(value);
	        }
	        if (result !== undefined) {
	          return result;
	        }
	        if (!isObject(value)) {
	          return value;
	        }
	        var isArr = isArray(value);
	        if (isArr) {
	          result = initCloneArray(value);
	          if (!isDeep) {
	            return copyArray(value, result);
	          }
	        } else {
	          var tag = getTag(value),
	              isFunc = tag == funcTag || tag == genTag;

	          if (isBuffer(value)) {
	            return cloneBuffer(value, isDeep);
	          }
	          if (tag == objectTag || tag == argsTag || isFunc && !object) {
	            result = isFlat || isFunc ? {} : initCloneObject(value);
	            if (!isDeep) {
	              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	            }
	          } else {
	            if (!cloneableTags[tag]) {
	              return object ? value : {};
	            }
	            result = initCloneByTag(value, tag, baseClone, isDeep);
	          }
	        }
	        // Check for circular references and return its corresponding clone.
	        stack || (stack = new Stack());
	        var stacked = stack.get(value);
	        if (stacked) {
	          return stacked;
	        }
	        stack.set(value, result);

	        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

	        var props = isArr ? undefined : keysFunc(value);
	        arrayEach(props || value, function (subValue, key) {
	          if (props) {
	            key = subValue;
	            subValue = value[key];
	          }
	          // Recursively populate clone (susceptible to call stack limits).
	          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	        return result;
	      }

	      module.exports = baseClone;

	      /***/
	    },
	    /* 140 */
	    /***/function (module, exports) {

	      /**
	       * Removes all key-value entries from the list cache.
	       *
	       * @private
	       * @name clear
	       * @memberOf ListCache
	       */
	      function listCacheClear() {
	        this.__data__ = [];
	        this.size = 0;
	      }

	      module.exports = listCacheClear;

	      /***/
	    },
	    /* 141 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /** Used for built-in method references. */
	      var arrayProto = Array.prototype;

	      /** Built-in value references. */
	      var splice = arrayProto.splice;

	      /**
	       * Removes `key` and its value from the list cache.
	       *
	       * @private
	       * @name delete
	       * @memberOf ListCache
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function listCacheDelete(key) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        if (index < 0) {
	          return false;
	        }
	        var lastIndex = data.length - 1;
	        if (index == lastIndex) {
	          data.pop();
	        } else {
	          splice.call(data, index, 1);
	        }
	        --this.size;
	        return true;
	      }

	      module.exports = listCacheDelete;

	      /***/
	    },
	    /* 142 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Gets the list cache value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf ListCache
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function listCacheGet(key) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        return index < 0 ? undefined : data[index][1];
	      }

	      module.exports = listCacheGet;

	      /***/
	    },
	    /* 143 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Checks if a list cache value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf ListCache
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function listCacheHas(key) {
	        return assocIndexOf(this.__data__, key) > -1;
	      }

	      module.exports = listCacheHas;

	      /***/
	    },
	    /* 144 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Sets the list cache `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf ListCache
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the list cache instance.
	       */
	      function listCacheSet(key, value) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        if (index < 0) {
	          ++this.size;
	          data.push([key, value]);
	        } else {
	          data[index][1] = value;
	        }
	        return this;
	      }

	      module.exports = listCacheSet;

	      /***/
	    },
	    /* 145 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24);

	      /**
	       * Removes all key-value entries from the stack.
	       *
	       * @private
	       * @name clear
	       * @memberOf Stack
	       */
	      function stackClear() {
	        this.__data__ = new ListCache();
	        this.size = 0;
	      }

	      module.exports = stackClear;

	      /***/
	    },
	    /* 146 */
	    /***/function (module, exports) {

	      /**
	       * Removes `key` and its value from the stack.
	       *
	       * @private
	       * @name delete
	       * @memberOf Stack
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function stackDelete(key) {
	        var data = this.__data__,
	            result = data['delete'](key);

	        this.size = data.size;
	        return result;
	      }

	      module.exports = stackDelete;

	      /***/
	    },
	    /* 147 */
	    /***/function (module, exports) {

	      /**
	       * Gets the stack value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf Stack
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function stackGet(key) {
	        return this.__data__.get(key);
	      }

	      module.exports = stackGet;

	      /***/
	    },
	    /* 148 */
	    /***/function (module, exports) {

	      /**
	       * Checks if a stack value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf Stack
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function stackHas(key) {
	        return this.__data__.has(key);
	      }

	      module.exports = stackHas;

	      /***/
	    },
	    /* 149 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24),
	          Map = __webpack_require__(32),
	          MapCache = __webpack_require__(64);

	      /** Used as the size to enable large array optimizations. */
	      var LARGE_ARRAY_SIZE = 200;

	      /**
	       * Sets the stack `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf Stack
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the stack cache instance.
	       */
	      function stackSet(key, value) {
	        var data = this.__data__;
	        if (data instanceof ListCache) {
	          var pairs = data.__data__;
	          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	            pairs.push([key, value]);
	            this.size = ++data.size;
	            return this;
	          }
	          data = this.__data__ = new MapCache(pairs);
	        }
	        data.set(key, value);
	        this.size = data.size;
	        return this;
	      }

	      module.exports = stackSet;

	      /***/
	    },
	    /* 150 */
	    /***/function (module, exports, __webpack_require__) {

	      var Hash = __webpack_require__(151),
	          ListCache = __webpack_require__(24),
	          Map = __webpack_require__(32);

	      /**
	       * Removes all key-value entries from the map.
	       *
	       * @private
	       * @name clear
	       * @memberOf MapCache
	       */
	      function mapCacheClear() {
	        this.size = 0;
	        this.__data__ = {
	          'hash': new Hash(),
	          'map': new (Map || ListCache)(),
	          'string': new Hash()
	        };
	      }

	      module.exports = mapCacheClear;

	      /***/
	    },
	    /* 151 */
	    /***/function (module, exports, __webpack_require__) {

	      var hashClear = __webpack_require__(152),
	          hashDelete = __webpack_require__(153),
	          hashGet = __webpack_require__(154),
	          hashHas = __webpack_require__(155),
	          hashSet = __webpack_require__(156);

	      /**
	       * Creates a hash object.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function Hash(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `Hash`.
	      Hash.prototype.clear = hashClear;
	      Hash.prototype['delete'] = hashDelete;
	      Hash.prototype.get = hashGet;
	      Hash.prototype.has = hashHas;
	      Hash.prototype.set = hashSet;

	      module.exports = Hash;

	      /***/
	    },
	    /* 152 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /**
	       * Removes all key-value entries from the hash.
	       *
	       * @private
	       * @name clear
	       * @memberOf Hash
	       */
	      function hashClear() {
	        this.__data__ = nativeCreate ? nativeCreate(null) : {};
	        this.size = 0;
	      }

	      module.exports = hashClear;

	      /***/
	    },
	    /* 153 */
	    /***/function (module, exports) {

	      /**
	       * Removes `key` and its value from the hash.
	       *
	       * @private
	       * @name delete
	       * @memberOf Hash
	       * @param {Object} hash The hash to modify.
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function hashDelete(key) {
	        var result = this.has(key) && delete this.__data__[key];
	        this.size -= result ? 1 : 0;
	        return result;
	      }

	      module.exports = hashDelete;

	      /***/
	    },
	    /* 154 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Gets the hash value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf Hash
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function hashGet(key) {
	        var data = this.__data__;
	        if (nativeCreate) {
	          var result = data[key];
	          return result === HASH_UNDEFINED ? undefined : result;
	        }
	        return hasOwnProperty.call(data, key) ? data[key] : undefined;
	      }

	      module.exports = hashGet;

	      /***/
	    },
	    /* 155 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Checks if a hash value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf Hash
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function hashHas(key) {
	        var data = this.__data__;
	        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	      }

	      module.exports = hashHas;

	      /***/
	    },
	    /* 156 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /**
	       * Sets the hash `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf Hash
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the hash instance.
	       */
	      function hashSet(key, value) {
	        var data = this.__data__;
	        this.size += this.has(key) ? 0 : 1;
	        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	        return this;
	      }

	      module.exports = hashSet;

	      /***/
	    },
	    /* 157 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Removes `key` and its value from the map.
	       *
	       * @private
	       * @name delete
	       * @memberOf MapCache
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function mapCacheDelete(key) {
	        var result = getMapData(this, key)['delete'](key);
	        this.size -= result ? 1 : 0;
	        return result;
	      }

	      module.exports = mapCacheDelete;

	      /***/
	    },
	    /* 158 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is suitable for use as unique object key.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	       */
	      function isKeyable(value) {
	        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	      }

	      module.exports = isKeyable;

	      /***/
	    },
	    /* 159 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Gets the map value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf MapCache
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function mapCacheGet(key) {
	        return getMapData(this, key).get(key);
	      }

	      module.exports = mapCacheGet;

	      /***/
	    },
	    /* 160 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Checks if a map value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf MapCache
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function mapCacheHas(key) {
	        return getMapData(this, key).has(key);
	      }

	      module.exports = mapCacheHas;

	      /***/
	    },
	    /* 161 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Sets the map `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf MapCache
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the map cache instance.
	       */
	      function mapCacheSet(key, value) {
	        var data = getMapData(this, key),
	            size = data.size;

	        data.set(key, value);
	        this.size += data.size == size ? 0 : 1;
	        return this;
	      }

	      module.exports = mapCacheSet;

	      /***/
	    },
	    /* 162 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keys = __webpack_require__(13);

	      /**
	       * The base implementation of `_.assign` without support for multiple sources
	       * or `customizer` functions.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @returns {Object} Returns `object`.
	       */
	      function baseAssign(object, source) {
	        return object && copyObject(source, keys(source), object);
	      }

	      module.exports = baseAssign;

	      /***/
	    },
	    /* 163 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.times` without support for iteratee shorthands
	       * or max array length checks.
	       *
	       * @private
	       * @param {number} n The number of times to invoke `iteratee`.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns the array of results.
	       */
	      function baseTimes(n, iteratee) {
	        var index = -1,
	            result = Array(n);

	        while (++index < n) {
	          result[index] = iteratee(index);
	        }
	        return result;
	      }

	      module.exports = baseTimes;

	      /***/
	    },
	    /* 164 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keysIn = __webpack_require__(28);

	      /**
	       * The base implementation of `_.assignIn` without support for multiple sources
	       * or `customizer` functions.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @returns {Object} Returns `object`.
	       */
	      function baseAssignIn(object, source) {
	        return object && copyObject(source, keysIn(source), object);
	      }

	      module.exports = baseAssignIn;

	      /***/
	    },
	    /* 165 */
	    /***/function (module, exports, __webpack_require__) {

	      var isObject = __webpack_require__(8),
	          isPrototype = __webpack_require__(17),
	          nativeKeysIn = __webpack_require__(166);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function baseKeysIn(object) {
	        if (!isObject(object)) {
	          return nativeKeysIn(object);
	        }
	        var isProto = isPrototype(object),
	            result = [];

	        for (var key in object) {
	          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = baseKeysIn;

	      /***/
	    },
	    /* 166 */
	    /***/function (module, exports) {

	      /**
	       * This function is like
	       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	       * except that it includes inherited enumerable properties.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function nativeKeysIn(object) {
	        var result = [];
	        if (object != null) {
	          for (var key in Object(object)) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = nativeKeysIn;

	      /***/
	    },
	    /* 167 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          getSymbols = __webpack_require__(39);

	      /**
	       * Copies own symbols of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy symbols from.
	       * @param {Object} [object={}] The object to copy symbols to.
	       * @returns {Object} Returns `object`.
	       */
	      function copySymbols(source, object) {
	        return copyObject(source, getSymbols(source), object);
	      }

	      module.exports = copySymbols;

	      /***/
	    },
	    /* 168 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.filter` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} predicate The function invoked per iteration.
	       * @returns {Array} Returns the new filtered array.
	       */
	      function arrayFilter(array, predicate) {
	        var index = -1,
	            length = array == null ? 0 : array.length,
	            resIndex = 0,
	            result = [];

	        while (++index < length) {
	          var value = array[index];
	          if (predicate(value, index, array)) {
	            result[resIndex++] = value;
	          }
	        }
	        return result;
	      }

	      module.exports = arrayFilter;

	      /***/
	    },
	    /* 169 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          getSymbolsIn = __webpack_require__(71);

	      /**
	       * Copies own and inherited symbols of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy symbols from.
	       * @param {Object} [object={}] The object to copy symbols to.
	       * @returns {Object} Returns `object`.
	       */
	      function copySymbolsIn(source, object) {
	        return copyObject(source, getSymbolsIn(source), object);
	      }

	      module.exports = copySymbolsIn;

	      /***/
	    },
	    /* 170 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetAllKeys = __webpack_require__(74),
	          getSymbolsIn = __webpack_require__(71),
	          keysIn = __webpack_require__(28);

	      /**
	       * Creates an array of own and inherited enumerable property names and
	       * symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function getAllKeysIn(object) {
	        return baseGetAllKeys(object, keysIn, getSymbolsIn);
	      }

	      module.exports = getAllKeysIn;

	      /***/
	    },
	    /* 171 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Initializes an array clone.
	       *
	       * @private
	       * @param {Array} array The array to clone.
	       * @returns {Array} Returns the initialized clone.
	       */
	      function initCloneArray(array) {
	        var length = array.length,
	            result = array.constructor(length);

	        // Add properties assigned by `RegExp#exec`.
	        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	          result.index = array.index;
	          result.input = array.input;
	        }
	        return result;
	      }

	      module.exports = initCloneArray;

	      /***/
	    },
	    /* 172 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41),
	          cloneDataView = __webpack_require__(173),
	          cloneMap = __webpack_require__(174),
	          cloneRegExp = __webpack_require__(176),
	          cloneSet = __webpack_require__(177),
	          cloneSymbol = __webpack_require__(179),
	          cloneTypedArray = __webpack_require__(77);

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /**
	       * Initializes an object clone based on its `toStringTag`.
	       *
	       * **Note:** This function only supports cloning values with tags of
	       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	       *
	       * @private
	       * @param {Object} object The object to clone.
	       * @param {string} tag The `toStringTag` of the object to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the initialized clone.
	       */
	      function initCloneByTag(object, tag, cloneFunc, isDeep) {
	        var Ctor = object.constructor;
	        switch (tag) {
	          case arrayBufferTag:
	            return cloneArrayBuffer(object);

	          case boolTag:
	          case dateTag:
	            return new Ctor(+object);

	          case dataViewTag:
	            return cloneDataView(object, isDeep);

	          case float32Tag:case float64Tag:
	          case int8Tag:case int16Tag:case int32Tag:
	          case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	            return cloneTypedArray(object, isDeep);

	          case mapTag:
	            return cloneMap(object, isDeep, cloneFunc);

	          case numberTag:
	          case stringTag:
	            return new Ctor(object);

	          case regexpTag:
	            return cloneRegExp(object);

	          case setTag:
	            return cloneSet(object, isDeep, cloneFunc);

	          case symbolTag:
	            return cloneSymbol(object);
	        }
	      }

	      module.exports = initCloneByTag;

	      /***/
	    },
	    /* 173 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41);

	      /**
	       * Creates a clone of `dataView`.
	       *
	       * @private
	       * @param {Object} dataView The data view to clone.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned data view.
	       */
	      function cloneDataView(dataView, isDeep) {
	        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	      }

	      module.exports = cloneDataView;

	      /***/
	    },
	    /* 174 */
	    /***/function (module, exports, __webpack_require__) {

	      var addMapEntry = __webpack_require__(175),
	          arrayReduce = __webpack_require__(76),
	          mapToArray = __webpack_require__(42);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1;

	      /**
	       * Creates a clone of `map`.
	       *
	       * @private
	       * @param {Object} map The map to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned map.
	       */
	      function cloneMap(map, isDeep, cloneFunc) {
	        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	        return arrayReduce(array, addMapEntry, new map.constructor());
	      }

	      module.exports = cloneMap;

	      /***/
	    },
	    /* 175 */
	    /***/function (module, exports) {

	      /**
	       * Adds the key-value `pair` to `map`.
	       *
	       * @private
	       * @param {Object} map The map to modify.
	       * @param {Array} pair The key-value pair to add.
	       * @returns {Object} Returns `map`.
	       */
	      function addMapEntry(map, pair) {
	        // Don't return `map.set` because it's not chainable in IE 11.
	        map.set(pair[0], pair[1]);
	        return map;
	      }

	      module.exports = addMapEntry;

	      /***/
	    },
	    /* 176 */
	    /***/function (module, exports) {

	      /** Used to match `RegExp` flags from their coerced string values. */
	      var reFlags = /\w*$/;

	      /**
	       * Creates a clone of `regexp`.
	       *
	       * @private
	       * @param {Object} regexp The regexp to clone.
	       * @returns {Object} Returns the cloned regexp.
	       */
	      function cloneRegExp(regexp) {
	        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	        result.lastIndex = regexp.lastIndex;
	        return result;
	      }

	      module.exports = cloneRegExp;

	      /***/
	    },
	    /* 177 */
	    /***/function (module, exports, __webpack_require__) {

	      var addSetEntry = __webpack_require__(178),
	          arrayReduce = __webpack_require__(76),
	          setToArray = __webpack_require__(43);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1;

	      /**
	       * Creates a clone of `set`.
	       *
	       * @private
	       * @param {Object} set The set to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned set.
	       */
	      function cloneSet(set, isDeep, cloneFunc) {
	        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	        return arrayReduce(array, addSetEntry, new set.constructor());
	      }

	      module.exports = cloneSet;

	      /***/
	    },
	    /* 178 */
	    /***/function (module, exports) {

	      /**
	       * Adds `value` to `set`.
	       *
	       * @private
	       * @param {Object} set The set to modify.
	       * @param {*} value The value to add.
	       * @returns {Object} Returns `set`.
	       */
	      function addSetEntry(set, value) {
	        // Don't return `set.add` because it's not chainable in IE 11.
	        set.add(value);
	        return set;
	      }

	      module.exports = addSetEntry;

	      /***/
	    },
	    /* 179 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11);

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	      /**
	       * Creates a clone of the `symbol` object.
	       *
	       * @private
	       * @param {Object} symbol The symbol object to clone.
	       * @returns {Object} Returns the cloned symbol object.
	       */
	      function cloneSymbol(symbol) {
	        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	      }

	      module.exports = cloneSymbol;

	      /***/
	    },
	    /* 180 */
	    /***/function (module, exports, __webpack_require__) {

	      var isObject = __webpack_require__(8);

	      /** Built-in value references. */
	      var objectCreate = Object.create;

	      /**
	       * The base implementation of `_.create` without support for assigning
	       * properties to the created object.
	       *
	       * @private
	       * @param {Object} proto The object to inherit from.
	       * @returns {Object} Returns the new object.
	       */
	      var baseCreate = function () {
	        function object() {}
	        return function (proto) {
	          if (!isObject(proto)) {
	            return {};
	          }
	          if (objectCreate) {
	            return objectCreate(proto);
	          }
	          object.prototype = proto;
	          var result = new object();
	          object.prototype = undefined;
	          return result;
	        };
	      }();

	      module.exports = baseCreate;

	      /***/
	    },
	    /* 181 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignValue = __webpack_require__(37),
	          copyObject = __webpack_require__(12),
	          createAssigner = __webpack_require__(79),
	          isArrayLike = __webpack_require__(9),
	          isPrototype = __webpack_require__(17),
	          keys = __webpack_require__(13);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Assigns own enumerable string keyed properties of source objects to the
	       * destination object. Source objects are applied from left to right.
	       * Subsequent sources overwrite property assignments of previous sources.
	       *
	       * **Note:** This method mutates `object` and is loosely based on
	       * [`Object.assign`](https://mdn.io/Object/assign).
	       *
	       * @static
	       * @memberOf _
	       * @since 0.10.0
	       * @category Object
	       * @param {Object} object The destination object.
	       * @param {...Object} [sources] The source objects.
	       * @returns {Object} Returns `object`.
	       * @see _.assignIn
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       * }
	       *
	       * function Bar() {
	       *   this.c = 3;
	       * }
	       *
	       * Foo.prototype.b = 2;
	       * Bar.prototype.d = 4;
	       *
	       * _.assign({ 'a': 0 }, new Foo, new Bar);
	       * // => { 'a': 1, 'c': 3 }
	       */
	      var assign = createAssigner(function (object, source) {
	        if (isPrototype(source) || isArrayLike(source)) {
	          copyObject(source, keys(source), object);
	          return;
	        }
	        for (var key in source) {
	          if (hasOwnProperty.call(source, key)) {
	            assignValue(object, key, source[key]);
	          }
	        }
	      });

	      module.exports = assign;

	      /***/
	    },
	    /* 182 */
	    /***/function (module, exports, __webpack_require__) {

	      var apply = __webpack_require__(183);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeMax = Math.max;

	      /**
	       * A specialized version of `baseRest` which transforms the rest array.
	       *
	       * @private
	       * @param {Function} func The function to apply a rest parameter to.
	       * @param {number} [start=func.length-1] The start position of the rest parameter.
	       * @param {Function} transform The rest array transform.
	       * @returns {Function} Returns the new function.
	       */
	      function overRest(func, start, transform) {
	        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	        return function () {
	          var args = arguments,
	              index = -1,
	              length = nativeMax(args.length - start, 0),
	              array = Array(length);

	          while (++index < length) {
	            array[index] = args[start + index];
	          }
	          index = -1;
	          var otherArgs = Array(start + 1);
	          while (++index < start) {
	            otherArgs[index] = args[index];
	          }
	          otherArgs[start] = transform(array);
	          return apply(func, this, otherArgs);
	        };
	      }

	      module.exports = overRest;

	      /***/
	    },
	    /* 183 */
	    /***/function (module, exports) {

	      /**
	       * A faster alternative to `Function#apply`, this function invokes `func`
	       * with the `this` binding of `thisArg` and the arguments of `args`.
	       *
	       * @private
	       * @param {Function} func The function to invoke.
	       * @param {*} thisArg The `this` binding of `func`.
	       * @param {Array} args The arguments to invoke `func` with.
	       * @returns {*} Returns the result of `func`.
	       */
	      function apply(func, thisArg, args) {
	        switch (args.length) {
	          case 0:
	            return func.call(thisArg);
	          case 1:
	            return func.call(thisArg, args[0]);
	          case 2:
	            return func.call(thisArg, args[0], args[1]);
	          case 3:
	            return func.call(thisArg, args[0], args[1], args[2]);
	        }
	        return func.apply(thisArg, args);
	      }

	      module.exports = apply;

	      /***/
	    },
	    /* 184 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseSetToString = __webpack_require__(185),
	          shortOut = __webpack_require__(187);

	      /**
	       * Sets the `toString` method of `func` to return `string`.
	       *
	       * @private
	       * @param {Function} func The function to modify.
	       * @param {Function} string The `toString` result.
	       * @returns {Function} Returns `func`.
	       */
	      var setToString = shortOut(baseSetToString);

	      module.exports = setToString;

	      /***/
	    },
	    /* 185 */
	    /***/function (module, exports, __webpack_require__) {

	      var constant = __webpack_require__(186),
	          defineProperty = __webpack_require__(66),
	          identity = __webpack_require__(44);

	      /**
	       * The base implementation of `setToString` without support for hot loop shorting.
	       *
	       * @private
	       * @param {Function} func The function to modify.
	       * @param {Function} string The `toString` result.
	       * @returns {Function} Returns `func`.
	       */
	      var baseSetToString = !defineProperty ? identity : function (func, string) {
	        return defineProperty(func, 'toString', {
	          'configurable': true,
	          'enumerable': false,
	          'value': constant(string),
	          'writable': true
	        });
	      };

	      module.exports = baseSetToString;

	      /***/
	    },
	    /* 186 */
	    /***/function (module, exports) {

	      /**
	       * Creates a function that returns `value`.
	       *
	       * @static
	       * @memberOf _
	       * @since 2.4.0
	       * @category Util
	       * @param {*} value The value to return from the new function.
	       * @returns {Function} Returns the new constant function.
	       * @example
	       *
	       * var objects = _.times(2, _.constant({ 'a': 1 }));
	       *
	       * console.log(objects);
	       * // => [{ 'a': 1 }, { 'a': 1 }]
	       *
	       * console.log(objects[0] === objects[1]);
	       * // => true
	       */
	      function constant(value) {
	        return function () {
	          return value;
	        };
	      }

	      module.exports = constant;

	      /***/
	    },
	    /* 187 */
	    /***/function (module, exports) {

	      /** Used to detect hot functions by number of calls within a span of milliseconds. */
	      var HOT_COUNT = 800,
	          HOT_SPAN = 16;

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeNow = Date.now;

	      /**
	       * Creates a function that'll short out and invoke `identity` instead
	       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	       * milliseconds.
	       *
	       * @private
	       * @param {Function} func The function to restrict.
	       * @returns {Function} Returns the new shortable function.
	       */
	      function shortOut(func) {
	        var count = 0,
	            lastCalled = 0;

	        return function () {
	          var stamp = nativeNow(),
	              remaining = HOT_SPAN - (stamp - lastCalled);

	          lastCalled = stamp;
	          if (remaining > 0) {
	            if (++count >= HOT_COUNT) {
	              return arguments[0];
	            }
	          } else {
	            count = 0;
	          }
	          return func.apply(undefined, arguments);
	        };
	      }

	      module.exports = shortOut;

	      /***/
	    },
	    /* 188 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var eq = __webpack_require__(19),
	          isArrayLike = __webpack_require__(9),
	          isIndex = __webpack_require__(68),
	          isObject = __webpack_require__(8);

	      /**
	       * Checks if the given arguments are from an iteratee call.
	       *
	       * @private
	       * @param {*} value The potential iteratee value argument.
	       * @param {*} index The potential iteratee index or key argument.
	       * @param {*} object The potential iteratee object argument.
	       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	       *  else `false`.
	       */
	      function isIterateeCall(value, index, object) {
	        if (!isObject(object)) {
	          return false;
	        }
	        var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	          return eq(object[index], value);
	        }
	        return false;
	      }

	      module.exports = isIterateeCall;

	      /***/
	    },
	    /* 189 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseMerge = __webpack_require__(190),
	          createAssigner = __webpack_require__(79);

	      /**
	       * This method is like `_.assign` except that it recursively merges own and
	       * inherited enumerable string keyed properties of source objects into the
	       * destination object. Source properties that resolve to `undefined` are
	       * skipped if a destination value exists. Array and plain object properties
	       * are merged recursively. Other objects and value types are overridden by
	       * assignment. Source objects are applied from left to right. Subsequent
	       * sources overwrite property assignments of previous sources.
	       *
	       * **Note:** This method mutates `object`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.5.0
	       * @category Object
	       * @param {Object} object The destination object.
	       * @param {...Object} [sources] The source objects.
	       * @returns {Object} Returns `object`.
	       * @example
	       *
	       * var object = {
	       *   'a': [{ 'b': 2 }, { 'd': 4 }]
	       * };
	       *
	       * var other = {
	       *   'a': [{ 'c': 3 }, { 'e': 5 }]
	       * };
	       *
	       * _.merge(object, other);
	       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	       */
	      var merge = createAssigner(function (object, source, srcIndex) {
	        baseMerge(object, source, srcIndex);
	      });

	      module.exports = merge;

	      /***/
	    },
	    /* 190 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          assignMergeValue = __webpack_require__(81),
	          baseFor = __webpack_require__(82),
	          baseMergeDeep = __webpack_require__(192),
	          isObject = __webpack_require__(8),
	          keysIn = __webpack_require__(28);

	      /**
	       * The base implementation of `_.merge` without support for multiple sources.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @param {number} srcIndex The index of `source`.
	       * @param {Function} [customizer] The function to customize merged values.
	       * @param {Object} [stack] Tracks traversed source values and their merged
	       *  counterparts.
	       */
	      function baseMerge(object, source, srcIndex, customizer, stack) {
	        if (object === source) {
	          return;
	        }
	        baseFor(source, function (srcValue, key) {
	          if (isObject(srcValue)) {
	            stack || (stack = new Stack());
	            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	          } else {
	            var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

	            if (newValue === undefined) {
	              newValue = srcValue;
	            }
	            assignMergeValue(object, key, newValue);
	          }
	        }, keysIn);
	      }

	      module.exports = baseMerge;

	      /***/
	    },
	    /* 191 */
	    /***/function (module, exports) {

	      /**
	       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	       *
	       * @private
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {Function} Returns the new base function.
	       */
	      function createBaseFor(fromRight) {
	        return function (object, iteratee, keysFunc) {
	          var index = -1,
	              iterable = Object(object),
	              props = keysFunc(object),
	              length = props.length;

	          while (length--) {
	            var key = props[fromRight ? length : ++index];
	            if (iteratee(iterable[key], key, iterable) === false) {
	              break;
	            }
	          }
	          return object;
	        };
	      }

	      module.exports = createBaseFor;

	      /***/
	    },
	    /* 192 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignMergeValue = __webpack_require__(81),
	          cloneBuffer = __webpack_require__(69),
	          cloneTypedArray = __webpack_require__(77),
	          copyArray = __webpack_require__(29),
	          initCloneObject = __webpack_require__(78),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isArrayLikeObject = __webpack_require__(193),
	          isBuffer = __webpack_require__(18),
	          isFunction = __webpack_require__(21),
	          isObject = __webpack_require__(8),
	          isPlainObject = __webpack_require__(194),
	          isTypedArray = __webpack_require__(23),
	          toPlainObject = __webpack_require__(195);

	      /**
	       * A specialized version of `baseMerge` for arrays and objects which performs
	       * deep merges and tracks traversed objects enabling objects with circular
	       * references to be merged.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @param {string} key The key of the value to merge.
	       * @param {number} srcIndex The index of `source`.
	       * @param {Function} mergeFunc The function to merge values.
	       * @param {Function} [customizer] The function to customize assigned values.
	       * @param {Object} [stack] Tracks traversed source values and their merged
	       *  counterparts.
	       */
	      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	        var objValue = object[key],
	            srcValue = source[key],
	            stacked = stack.get(srcValue);

	        if (stacked) {
	          assignMergeValue(object, key, stacked);
	          return;
	        }
	        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

	        var isCommon = newValue === undefined;

	        if (isCommon) {
	          var isArr = isArray(srcValue),
	              isBuff = !isArr && isBuffer(srcValue),
	              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	          newValue = srcValue;
	          if (isArr || isBuff || isTyped) {
	            if (isArray(objValue)) {
	              newValue = objValue;
	            } else if (isArrayLikeObject(objValue)) {
	              newValue = copyArray(objValue);
	            } else if (isBuff) {
	              isCommon = false;
	              newValue = cloneBuffer(srcValue, true);
	            } else if (isTyped) {
	              isCommon = false;
	              newValue = cloneTypedArray(srcValue, true);
	            } else {
	              newValue = [];
	            }
	          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	            newValue = objValue;
	            if (isArguments(objValue)) {
	              newValue = toPlainObject(objValue);
	            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
	              newValue = initCloneObject(srcValue);
	            }
	          } else {
	            isCommon = false;
	          }
	        }
	        if (isCommon) {
	          // Recursively merge objects and arrays (susceptible to call stack limits).
	          stack.set(srcValue, newValue);
	          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	          stack['delete'](srcValue);
	        }
	        assignMergeValue(object, key, newValue);
	      }

	      module.exports = baseMergeDeep;

	      /***/
	    },
	    /* 193 */
	    /***/function (module, exports, __webpack_require__) {

	      var isArrayLike = __webpack_require__(9),
	          isObjectLike = __webpack_require__(5);

	      /**
	       * This method is like `_.isArrayLike` except that it also checks if `value`
	       * is an object.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an array-like object,
	       *  else `false`.
	       * @example
	       *
	       * _.isArrayLikeObject([1, 2, 3]);
	       * // => true
	       *
	       * _.isArrayLikeObject(document.body.children);
	       * // => true
	       *
	       * _.isArrayLikeObject('abc');
	       * // => false
	       *
	       * _.isArrayLikeObject(_.noop);
	       * // => false
	       */
	      function isArrayLikeObject(value) {
	        return isObjectLike(value) && isArrayLike(value);
	      }

	      module.exports = isArrayLikeObject;

	      /***/
	    },
	    /* 194 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          getPrototype = __webpack_require__(40),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var objectTag = '[object Object]';

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype,
	          objectProto = Object.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Used to infer the `Object` constructor. */
	      var objectCtorString = funcToString.call(Object);

	      /**
	       * Checks if `value` is a plain object, that is, an object created by the
	       * `Object` constructor or one with a `[[Prototype]]` of `null`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.8.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       * }
	       *
	       * _.isPlainObject(new Foo);
	       * // => false
	       *
	       * _.isPlainObject([1, 2, 3]);
	       * // => false
	       *
	       * _.isPlainObject({ 'x': 0, 'y': 0 });
	       * // => true
	       *
	       * _.isPlainObject(Object.create(null));
	       * // => true
	       */
	      function isPlainObject(value) {
	        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	          return false;
	        }
	        var proto = getPrototype(value);
	        if (proto === null) {
	          return true;
	        }
	        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	      }

	      module.exports = isPlainObject;

	      /***/
	    },
	    /* 195 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keysIn = __webpack_require__(28);

	      /**
	       * Converts `value` to a plain object flattening inherited enumerable string
	       * keyed properties of `value` to own properties of the plain object.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {Object} Returns the converted plain object.
	       * @example
	       *
	       * function Foo() {
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.assign({ 'a': 1 }, new Foo);
	       * // => { 'a': 1, 'b': 2 }
	       *
	       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	       * // => { 'a': 1, 'b': 2, 'c': 3 }
	       */
	      function toPlainObject(value) {
	        return copyObject(value, keysIn(value));
	      }

	      module.exports = toPlainObject;

	      /***/
	    },
	    /* 196 */
	    /***/function (module, exports, __webpack_require__) {

	      var createCaseFirst = __webpack_require__(197);

	      /**
	       * Converts the first character of `string` to upper case.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category String
	       * @param {string} [string=''] The string to convert.
	       * @returns {string} Returns the converted string.
	       * @example
	       *
	       * _.upperFirst('fred');
	       * // => 'Fred'
	       *
	       * _.upperFirst('FRED');
	       * // => 'FRED'
	       */
	      var upperFirst = createCaseFirst('toUpperCase');

	      module.exports = upperFirst;

	      /***/
	    },
	    /* 197 */
	    /***/function (module, exports, __webpack_require__) {

	      var castSlice = __webpack_require__(198),
	          hasUnicode = __webpack_require__(83),
	          stringToArray = __webpack_require__(84),
	          toString = __webpack_require__(63);

	      /**
	       * Creates a function like `_.lowerFirst`.
	       *
	       * @private
	       * @param {string} methodName The name of the `String` case method to use.
	       * @returns {Function} Returns the new case function.
	       */
	      function createCaseFirst(methodName) {
	        return function (string) {
	          string = toString(string);

	          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

	          var chr = strSymbols ? strSymbols[0] : string.charAt(0);

	          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

	          return chr[methodName]() + trailing;
	        };
	      }

	      module.exports = createCaseFirst;

	      /***/
	    },
	    /* 198 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseSlice = __webpack_require__(199);

	      /**
	       * Casts `array` to a slice if it's needed.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {number} start The start position.
	       * @param {number} [end=array.length] The end position.
	       * @returns {Array} Returns the cast slice.
	       */
	      function castSlice(array, start, end) {
	        var length = array.length;
	        end = end === undefined ? length : end;
	        return !start && end >= length ? array : baseSlice(array, start, end);
	      }

	      module.exports = castSlice;

	      /***/
	    },
	    /* 199 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.slice` without an iteratee call guard.
	       *
	       * @private
	       * @param {Array} array The array to slice.
	       * @param {number} [start=0] The start position.
	       * @param {number} [end=array.length] The end position.
	       * @returns {Array} Returns the slice of `array`.
	       */
	      function baseSlice(array, start, end) {
	        var index = -1,
	            length = array.length;

	        if (start < 0) {
	          start = -start > length ? 0 : length + start;
	        }
	        end = end > length ? length : end;
	        if (end < 0) {
	          end += length;
	        }
	        length = start > end ? 0 : end - start >>> 0;
	        start >>>= 0;

	        var result = Array(length);
	        while (++index < length) {
	          result[index] = array[index + start];
	        }
	        return result;
	      }

	      module.exports = baseSlice;

	      /***/
	    },
	    /* 200 */
	    /***/function (module, exports) {

	      /**
	       * Converts an ASCII `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function asciiToArray(string) {
	        return string.split('');
	      }

	      module.exports = asciiToArray;

	      /***/
	    },
	    /* 201 */
	    /***/function (module, exports) {

	      /** Used to compose unicode character classes. */
	      var rsAstralRange = '\\ud800-\\udfff',
	          rsComboMarksRange = '\\u0300-\\u036f',
	          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	          rsComboSymbolsRange = '\\u20d0-\\u20ff',
	          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	          rsVarRange = '\\ufe0e\\ufe0f';

	      /** Used to compose unicode capture groups. */
	      var rsAstral = '[' + rsAstralRange + ']',
	          rsCombo = '[' + rsComboRange + ']',
	          rsFitz = '\\ud83c[\\udffb-\\udfff]',
	          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	          rsNonAstral = '[^' + rsAstralRange + ']',
	          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	          rsZWJ = '\\u200d';

	      /** Used to compose unicode regexes. */
	      var reOptMod = rsModifier + '?',
	          rsOptVar = '[' + rsVarRange + ']?',
	          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	          rsSeq = rsOptVar + reOptMod + rsOptJoin,
	          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	      /**
	       * Converts a Unicode `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function unicodeToArray(string) {
	        return string.match(reUnicode) || [];
	      }

	      module.exports = unicodeToArray;

	      /***/
	    },
	    /* 202 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseRest = __webpack_require__(80),
	          pullAll = __webpack_require__(203);

	      /**
	       * Removes all given values from `array` using
	       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * for equality comparisons.
	       *
	       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	       * to remove elements from an array by predicate.
	       *
	       * @static
	       * @memberOf _
	       * @since 2.0.0
	       * @category Array
	       * @param {Array} array The array to modify.
	       * @param {...*} [values] The values to remove.
	       * @returns {Array} Returns `array`.
	       * @example
	       *
	       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	       *
	       * _.pull(array, 'a', 'c');
	       * console.log(array);
	       * // => ['b', 'b']
	       */
	      var pull = baseRest(pullAll);

	      module.exports = pull;

	      /***/
	    },
	    /* 203 */
	    /***/function (module, exports, __webpack_require__) {

	      var basePullAll = __webpack_require__(204);

	      /**
	       * This method is like `_.pull` except that it accepts an array of values to remove.
	       *
	       * **Note:** Unlike `_.difference`, this method mutates `array`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Array
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to remove.
	       * @returns {Array} Returns `array`.
	       * @example
	       *
	       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	       *
	       * _.pullAll(array, ['a', 'c']);
	       * console.log(array);
	       * // => ['b', 'b']
	       */
	      function pullAll(array, values) {
	        return array && array.length && values && values.length ? basePullAll(array, values) : array;
	      }

	      module.exports = pullAll;

	      /***/
	    },
	    /* 204 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayMap = __webpack_require__(35),
	          baseIndexOf = __webpack_require__(205),
	          baseIndexOfWith = __webpack_require__(209),
	          baseUnary = __webpack_require__(62),
	          copyArray = __webpack_require__(29);

	      /** Used for built-in method references. */
	      var arrayProto = Array.prototype;

	      /** Built-in value references. */
	      var splice = arrayProto.splice;

	      /**
	       * The base implementation of `_.pullAllBy` without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to remove.
	       * @param {Function} [iteratee] The iteratee invoked per element.
	       * @param {Function} [comparator] The comparator invoked per element.
	       * @returns {Array} Returns `array`.
	       */
	      function basePullAll(array, values, iteratee, comparator) {
	        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	            index = -1,
	            length = values.length,
	            seen = array;

	        if (array === values) {
	          values = copyArray(values);
	        }
	        if (iteratee) {
	          seen = arrayMap(array, baseUnary(iteratee));
	        }
	        while (++index < length) {
	          var fromIndex = 0,
	              value = values[index],
	              computed = iteratee ? iteratee(value) : value;

	          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	            if (seen !== array) {
	              splice.call(seen, fromIndex, 1);
	            }
	            splice.call(array, fromIndex, 1);
	          }
	        }
	        return array;
	      }

	      module.exports = basePullAll;

	      /***/
	    },
	    /* 205 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseFindIndex = __webpack_require__(206),
	          baseIsNaN = __webpack_require__(207),
	          strictIndexOf = __webpack_require__(208);

	      /**
	       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseIndexOf(array, value, fromIndex) {
	        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	      }

	      module.exports = baseIndexOf;

	      /***/
	    },
	    /* 206 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.findIndex` and `_.findLastIndex` without
	       * support for iteratee shorthands.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {Function} predicate The function invoked per iteration.
	       * @param {number} fromIndex The index to search from.
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseFindIndex(array, predicate, fromIndex, fromRight) {
	        var length = array.length,
	            index = fromIndex + (fromRight ? 1 : -1);

	        while (fromRight ? index-- : ++index < length) {
	          if (predicate(array[index], index, array)) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = baseFindIndex;

	      /***/
	    },
	    /* 207 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.isNaN` without support for number objects.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	       */
	      function baseIsNaN(value) {
	        return value !== value;
	      }

	      module.exports = baseIsNaN;

	      /***/
	    },
	    /* 208 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.indexOf` which performs strict equality
	       * comparisons of values, i.e. `===`.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function strictIndexOf(array, value, fromIndex) {
	        var index = fromIndex - 1,
	            length = array.length;

	        while (++index < length) {
	          if (array[index] === value) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = strictIndexOf;

	      /***/
	    },
	    /* 209 */
	    /***/function (module, exports) {

	      /**
	       * This function is like `baseIndexOf` except that it accepts a comparator.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @param {Function} comparator The comparator invoked per element.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseIndexOfWith(array, value, fromIndex, comparator) {
	        var index = fromIndex - 1,
	            length = array.length;

	        while (++index < length) {
	          if (comparator(array[index], value)) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = baseIndexOfWith;

	      /***/
	    },
	    /* 210 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayEach = __webpack_require__(65),
	          baseEach = __webpack_require__(211),
	          castFunction = __webpack_require__(214),
	          isArray = __webpack_require__(6);

	      /**
	       * Iterates over elements of `collection` and invokes `iteratee` for each element.
	       * The iteratee is invoked with three arguments: (value, index|key, collection).
	       * Iteratee functions may exit iteration early by explicitly returning `false`.
	       *
	       * **Note:** As with other "Collections" methods, objects with a "length"
	       * property are iterated like arrays. To avoid this behavior use `_.forIn`
	       * or `_.forOwn` for object iteration.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @alias each
	       * @category Collection
	       * @param {Array|Object} collection The collection to iterate over.
	       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	       * @returns {Array|Object} Returns `collection`.
	       * @see _.forEachRight
	       * @example
	       *
	       * _.forEach([1, 2], function(value) {
	       *   console.log(value);
	       * });
	       * // => Logs `1` then `2`.
	       *
	       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	       *   console.log(key);
	       * });
	       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	       */
	      function forEach(collection, iteratee) {
	        var func = isArray(collection) ? arrayEach : baseEach;
	        return func(collection, castFunction(iteratee));
	      }

	      module.exports = forEach;

	      /***/
	    },
	    /* 211 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseForOwn = __webpack_require__(212),
	          createBaseEach = __webpack_require__(213);

	      /**
	       * The base implementation of `_.forEach` without support for iteratee shorthands.
	       *
	       * @private
	       * @param {Array|Object} collection The collection to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array|Object} Returns `collection`.
	       */
	      var baseEach = createBaseEach(baseForOwn);

	      module.exports = baseEach;

	      /***/
	    },
	    /* 212 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseFor = __webpack_require__(82),
	          keys = __webpack_require__(13);

	      /**
	       * The base implementation of `_.forOwn` without support for iteratee shorthands.
	       *
	       * @private
	       * @param {Object} object The object to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Object} Returns `object`.
	       */
	      function baseForOwn(object, iteratee) {
	        return object && baseFor(object, iteratee, keys);
	      }

	      module.exports = baseForOwn;

	      /***/
	    },
	    /* 213 */
	    /***/function (module, exports, __webpack_require__) {

	      var isArrayLike = __webpack_require__(9);

	      /**
	       * Creates a `baseEach` or `baseEachRight` function.
	       *
	       * @private
	       * @param {Function} eachFunc The function to iterate over a collection.
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {Function} Returns the new base function.
	       */
	      function createBaseEach(eachFunc, fromRight) {
	        return function (collection, iteratee) {
	          if (collection == null) {
	            return collection;
	          }
	          if (!isArrayLike(collection)) {
	            return eachFunc(collection, iteratee);
	          }
	          var length = collection.length,
	              index = fromRight ? length : -1,
	              iterable = Object(collection);

	          while (fromRight ? index-- : ++index < length) {
	            if (iteratee(iterable[index], index, iterable) === false) {
	              break;
	            }
	          }
	          return collection;
	        };
	      }

	      module.exports = createBaseEach;

	      /***/
	    },
	    /* 214 */
	    /***/function (module, exports, __webpack_require__) {

	      var identity = __webpack_require__(44);

	      /**
	       * Casts `value` to `identity` if it's not a function.
	       *
	       * @private
	       * @param {*} value The value to inspect.
	       * @returns {Function} Returns cast function.
	       */
	      function castFunction(value) {
	        return typeof value == 'function' ? value : identity;
	      }

	      module.exports = castFunction;

	      /***/
	    },
	    /* 215 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsEqual = __webpack_require__(216);

	      /**
	       * Performs a deep comparison between two values to determine if they are
	       * equivalent.
	       *
	       * **Note:** This method supports comparing arrays, array buffers, booleans,
	       * date objects, error objects, maps, numbers, `Object` objects, regexes,
	       * sets, strings, symbols, and typed arrays. `Object` objects are compared
	       * by their own, not inherited, enumerable properties. Functions and DOM
	       * nodes are compared by strict equality, i.e. `===`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       * var other = { 'a': 1 };
	       *
	       * _.isEqual(object, other);
	       * // => true
	       *
	       * object === other;
	       * // => false
	       */
	      function isEqual(value, other) {
	        return baseIsEqual(value, other);
	      }

	      module.exports = isEqual;

	      /***/
	    },
	    /* 216 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsEqualDeep = __webpack_require__(217),
	          isObjectLike = __webpack_require__(5);

	      /**
	       * The base implementation of `_.isEqual` which supports partial comparisons
	       * and tracks traversed objects.
	       *
	       * @private
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @param {boolean} bitmask The bitmask flags.
	       *  1 - Unordered comparison
	       *  2 - Partial comparison
	       * @param {Function} [customizer] The function to customize comparisons.
	       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       */
	      function baseIsEqual(value, other, bitmask, customizer, stack) {
	        if (value === other) {
	          return true;
	        }
	        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	          return value !== value && other !== other;
	        }
	        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	      }

	      module.exports = baseIsEqual;

	      /***/
	    },
	    /* 217 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          equalArrays = __webpack_require__(85),
	          equalByTag = __webpack_require__(223),
	          equalObjects = __webpack_require__(224),
	          getTag = __webpack_require__(22),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isTypedArray = __webpack_require__(23);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1;

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          objectTag = '[object Object]';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * A specialized version of `baseIsEqual` for arrays and objects which performs
	       * deep comparisons and tracks traversed objects enabling objects with circular
	       * references to be compared.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	        var objIsArr = isArray(object),
	            othIsArr = isArray(other),
	            objTag = objIsArr ? arrayTag : getTag(object),
	            othTag = othIsArr ? arrayTag : getTag(other);

	        objTag = objTag == argsTag ? objectTag : objTag;
	        othTag = othTag == argsTag ? objectTag : othTag;

	        var objIsObj = objTag == objectTag,
	            othIsObj = othTag == objectTag,
	            isSameTag = objTag == othTag;

	        if (isSameTag && isBuffer(object)) {
	          if (!isBuffer(other)) {
	            return false;
	          }
	          objIsArr = true;
	          objIsObj = false;
	        }
	        if (isSameTag && !objIsObj) {
	          stack || (stack = new Stack());
	          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	        }
	        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	          if (objIsWrapped || othIsWrapped) {
	            var objUnwrapped = objIsWrapped ? object.value() : object,
	                othUnwrapped = othIsWrapped ? other.value() : other;

	            stack || (stack = new Stack());
	            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	          }
	        }
	        if (!isSameTag) {
	          return false;
	        }
	        stack || (stack = new Stack());
	        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	      }

	      module.exports = baseIsEqualDeep;

	      /***/
	    },
	    /* 218 */
	    /***/function (module, exports, __webpack_require__) {

	      var MapCache = __webpack_require__(64),
	          setCacheAdd = __webpack_require__(219),
	          setCacheHas = __webpack_require__(220);

	      /**
	       *
	       * Creates an array cache object to store unique values.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [values] The values to cache.
	       */
	      function SetCache(values) {
	        var index = -1,
	            length = values == null ? 0 : values.length;

	        this.__data__ = new MapCache();
	        while (++index < length) {
	          this.add(values[index]);
	        }
	      }

	      // Add methods to `SetCache`.
	      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	      SetCache.prototype.has = setCacheHas;

	      module.exports = SetCache;

	      /***/
	    },
	    /* 219 */
	    /***/function (module, exports) {

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /**
	       * Adds `value` to the array cache.
	       *
	       * @private
	       * @name add
	       * @memberOf SetCache
	       * @alias push
	       * @param {*} value The value to cache.
	       * @returns {Object} Returns the cache instance.
	       */
	      function setCacheAdd(value) {
	        this.__data__.set(value, HASH_UNDEFINED);
	        return this;
	      }

	      module.exports = setCacheAdd;

	      /***/
	    },
	    /* 220 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is in the array cache.
	       *
	       * @private
	       * @name has
	       * @memberOf SetCache
	       * @param {*} value The value to search for.
	       * @returns {number} Returns `true` if `value` is found, else `false`.
	       */
	      function setCacheHas(value) {
	        return this.__data__.has(value);
	      }

	      module.exports = setCacheHas;

	      /***/
	    },
	    /* 221 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.some` for arrays without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} predicate The function invoked per iteration.
	       * @returns {boolean} Returns `true` if any element passes the predicate check,
	       *  else `false`.
	       */
	      function arraySome(array, predicate) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        while (++index < length) {
	          if (predicate(array[index], index, array)) {
	            return true;
	          }
	        }
	        return false;
	      }

	      module.exports = arraySome;

	      /***/
	    },
	    /* 222 */
	    /***/function (module, exports) {

	      /**
	       * Checks if a `cache` value for `key` exists.
	       *
	       * @private
	       * @param {Object} cache The cache to query.
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function cacheHas(cache, key) {
	        return cache.has(key);
	      }

	      module.exports = cacheHas;

	      /***/
	    },
	    /* 223 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          Uint8Array = __webpack_require__(75),
	          eq = __webpack_require__(19),
	          equalArrays = __webpack_require__(85),
	          mapToArray = __webpack_require__(42),
	          setToArray = __webpack_require__(43);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1,
	          COMPARE_UNORDERED_FLAG = 2;

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]';

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	      /**
	       * A specialized version of `baseIsEqualDeep` for comparing objects of
	       * the same `toStringTag`.
	       *
	       * **Note:** This function only supports comparing values with tags of
	       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {string} tag The `toStringTag` of the objects to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	        switch (tag) {
	          case dataViewTag:
	            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	              return false;
	            }
	            object = object.buffer;
	            other = other.buffer;

	          case arrayBufferTag:
	            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	              return false;
	            }
	            return true;

	          case boolTag:
	          case dateTag:
	          case numberTag:
	            // Coerce booleans to `1` or `0` and dates to milliseconds.
	            // Invalid dates are coerced to `NaN`.
	            return eq(+object, +other);

	          case errorTag:
	            return object.name == other.name && object.message == other.message;

	          case regexpTag:
	          case stringTag:
	            // Coerce regexes to strings and treat strings, primitives and objects,
	            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	            // for more details.
	            return object == other + '';

	          case mapTag:
	            var convert = mapToArray;

	          case setTag:
	            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	            convert || (convert = setToArray);

	            if (object.size != other.size && !isPartial) {
	              return false;
	            }
	            // Assume cyclic values are equal.
	            var stacked = stack.get(object);
	            if (stacked) {
	              return stacked == other;
	            }
	            bitmask |= COMPARE_UNORDERED_FLAG;

	            // Recursively compare objects (susceptible to call stack limits).
	            stack.set(object, other);
	            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	            stack['delete'](object);
	            return result;

	          case symbolTag:
	            if (symbolValueOf) {
	              return symbolValueOf.call(object) == symbolValueOf.call(other);
	            }
	        }
	        return false;
	      }

	      module.exports = equalByTag;

	      /***/
	    },
	    /* 224 */
	    /***/function (module, exports, __webpack_require__) {

	      var getAllKeys = __webpack_require__(73);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1;

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * A specialized version of `baseIsEqualDeep` for objects with support for
	       * partial deep comparisons.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	            objProps = getAllKeys(object),
	            objLength = objProps.length,
	            othProps = getAllKeys(other),
	            othLength = othProps.length;

	        if (objLength != othLength && !isPartial) {
	          return false;
	        }
	        var index = objLength;
	        while (index--) {
	          var key = objProps[index];
	          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	            return false;
	          }
	        }
	        // Assume cyclic values are equal.
	        var stacked = stack.get(object);
	        if (stacked && stack.get(other)) {
	          return stacked == other;
	        }
	        var result = true;
	        stack.set(object, other);
	        stack.set(other, object);

	        var skipCtor = isPartial;
	        while (++index < objLength) {
	          key = objProps[index];
	          var objValue = object[key],
	              othValue = other[key];

	          if (customizer) {
	            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	          }
	          // Recursively compare objects (susceptible to call stack limits).
	          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	            result = false;
	            break;
	          }
	          skipCtor || (skipCtor = key == 'constructor');
	        }
	        if (result && !skipCtor) {
	          var objCtor = object.constructor,
	              othCtor = other.constructor;

	          // Non `Object` object instances with different constructors are not equal.
	          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	            result = false;
	          }
	        }
	        stack['delete'](object);
	        stack['delete'](other);
	        return result;
	      }

	      module.exports = equalObjects;

	      /***/
	    },
	    /* 225 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          copyArray = __webpack_require__(29),
	          getTag = __webpack_require__(22),
	          isArrayLike = __webpack_require__(9),
	          isString = __webpack_require__(57),
	          iteratorToArray = __webpack_require__(226),
	          mapToArray = __webpack_require__(42),
	          setToArray = __webpack_require__(43),
	          stringToArray = __webpack_require__(84),
	          values = __webpack_require__(227);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          setTag = '[object Set]';

	      /** Built-in value references. */
	      var symIterator = _Symbol ? _Symbol.iterator : undefined;

	      /**
	       * Converts `value` to an array.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {Array} Returns the converted array.
	       * @example
	       *
	       * _.toArray({ 'a': 1, 'b': 2 });
	       * // => [1, 2]
	       *
	       * _.toArray('abc');
	       * // => ['a', 'b', 'c']
	       *
	       * _.toArray(1);
	       * // => []
	       *
	       * _.toArray(null);
	       * // => []
	       */
	      function toArray(value) {
	        if (!value) {
	          return [];
	        }
	        if (isArrayLike(value)) {
	          return isString(value) ? stringToArray(value) : copyArray(value);
	        }
	        if (symIterator && value[symIterator]) {
	          return iteratorToArray(value[symIterator]());
	        }
	        var tag = getTag(value),
	            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

	        return func(value);
	      }

	      module.exports = toArray;

	      /***/
	    },
	    /* 226 */
	    /***/function (module, exports) {

	      /**
	       * Converts `iterator` to an array.
	       *
	       * @private
	       * @param {Object} iterator The iterator to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function iteratorToArray(iterator) {
	        var data,
	            result = [];

	        while (!(data = iterator.next()).done) {
	          result.push(data.value);
	        }
	        return result;
	      }

	      module.exports = iteratorToArray;

	      /***/
	    },
	    /* 227 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseValues = __webpack_require__(228),
	          keys = __webpack_require__(13);

	      /**
	       * Creates an array of the own enumerable string keyed property values of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property values.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.values(new Foo);
	       * // => [1, 2] (iteration order is not guaranteed)
	       *
	       * _.values('hi');
	       * // => ['h', 'i']
	       */
	      function values(object) {
	        return object == null ? [] : baseValues(object, keys(object));
	      }

	      module.exports = values;

	      /***/
	    },
	    /* 228 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayMap = __webpack_require__(35);

	      /**
	       * The base implementation of `_.values` and `_.valuesIn` which creates an
	       * array of `object` property values corresponding to the property names
	       * of `props`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {Array} props The property names to get values for.
	       * @returns {Object} Returns the array of property values.
	       */
	      function baseValues(object, props) {
	        return arrayMap(props, function (key) {
	          return object[key];
	        });
	      }

	      module.exports = baseValues;

	      /***/
	    },
	    /* 229 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var ALIAS_ATTRS = ['strokeStyle', 'fillStyle', 'globalAlpha'];
	      var CLIP_SHAPES = ['circle', 'ellipse', 'fan', 'polygon', 'rect', 'path'];
	      var CAPITALIZED_ATTRS_MAP = {
	        r: 'R',
	        opacity: 'Opacity',
	        lineWidth: 'LineWidth',
	        clip: 'Clip',
	        stroke: 'Stroke',
	        fill: 'Fill',
	        strokeOpacity: 'Stroke',
	        fillOpacity: 'Fill',
	        x: 'X',
	        y: 'Y',
	        rx: 'Rx',
	        ry: 'Ry',
	        re: 'Re',
	        rs: 'Rs',
	        width: 'Width',
	        height: 'Height',
	        img: 'Img',
	        x1: 'X1',
	        x2: 'X2',
	        y1: 'Y1',
	        y2: 'Y2',
	        points: 'Points',
	        p1: 'P1',
	        p2: 'P2',
	        p3: 'P3',
	        p4: 'P4',
	        text: 'Text',
	        radius: 'Radius',
	        textAlign: 'TextAlign',
	        textBaseline: 'TextBaseline',
	        font: 'Font',
	        fontSize: 'FontSize',
	        fontStyle: 'FontStyle',
	        fontVariant: 'FontVariant',
	        fontWeight: 'FontWeight',
	        fontFamily: 'FontFamily',
	        clockwise: 'Clockwise',
	        startAngle: 'StartAngle',
	        endAngle: 'EndAngle',
	        path: 'Path'
	      };
	      var ALIAS_ATTRS_MAP = {
	        stroke: 'strokeStyle',
	        fill: 'fillStyle',
	        opacity: 'globalAlpha'
	      };

	      module.exports = {
	        canFill: false,
	        canStroke: false,
	        initAttrs: function initAttrs(attrs) {
	          this.__attrs = {
	            opacity: 1,
	            fillOpacity: 1,
	            strokeOpacity: 1
	          };
	          this.attr(Util.assign(this.getDefaultAttrs(), attrs));
	          return this;
	        },
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {};
	        },

	        /**
	         * 设置或者设置属性，有以下 4 种情形：
	         *   - name 不存在, 则返回属性集合
	         *   - name 为字符串，value 为空，获取属性值
	         *   - name 为字符串，value 不为空，设置属性值，返回 this
	         *   - name 为键值对，value 为空，设置属性值
	         *
	         * @param  {String | Object} name  属性名
	         * @param  {*} value 属性值
	         * @return {*} 属性值
	         */
	        attr: function attr(name, value) {
	          var self = this;
	          if (arguments.length === 0) {
	            return self.__attrs;
	          }

	          if (Util.isObject(name)) {
	            for (var k in name) {
	              if (ALIAS_ATTRS.indexOf(k) === -1) {
	                var v = name[k];
	                self._setAttr(k, v);
	              }
	            }
	            if (self.__afterSetAttrAll) {
	              self.__afterSetAttrAll(name);
	            }
	            // self.setSilent('box', null);
	            self.clearBBox();
	            return self;
	          }
	          if (arguments.length === 2) {
	            if (self._setAttr(name, value) !== false) {
	              var m = '__afterSetAttr' + CAPITALIZED_ATTRS_MAP[name];
	              if (self[m]) {
	                self[m](value);
	              }
	            }
	            // self.setSilent('box', null);
	            self.clearBBox();
	            return self;
	          }
	          return self._getAttr(name);
	        },
	        clearBBox: function clearBBox() {
	          this.setSilent('box', null);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll() {},

	        // 属性获取触发函数
	        _getAttr: function _getAttr(name) {
	          return this.__attrs[name];
	        },

	        // 属性设置触发函数
	        _setAttr: function _setAttr(name, value) {
	          var self = this;
	          if (name === 'clip') {
	            self.__setAttrClip(value);
	            self.__attrs.clip = value;
	          } else if (name === 'transform') {
	            self.__setAttrTrans(value);
	          } else {
	            self.__attrs[name] = value;
	            var alias = ALIAS_ATTRS_MAP[name];
	            if (alias) {
	              self.__attrs[alias] = value;
	            }
	          }
	          return self;
	        },
	        hasFill: function hasFill() {
	          return this.canFill && this.__attrs.fillStyle;
	        },
	        hasStroke: function hasStroke() {
	          return this.canStroke && this.__attrs.strokeStyle;
	        },

	        // 设置透明度
	        __setAttrOpacity: function __setAttrOpacity(v) {
	          this.__attrs.globalAlpha = v;
	          return v;
	        },
	        __setAttrClip: function __setAttrClip(clip) {
	          var self = this;
	          if (clip && CLIP_SHAPES.indexOf(clip.type) > -1) {
	            if (clip.get('canvas') === null) {
	              clip = Util.clone(clip);
	            }
	            clip.set('parent', self.get('parent'));
	            clip.set('context', self.get('context'));
	            clip.inside = function (x, y) {
	              var v = [x, y, 1];
	              clip.invert(v, self.get('canvas')); // 已经在外面转换
	              return clip.__isPointInFill(v[0], v[1]);
	            };
	            return clip;
	          }
	          return null;
	        },
	        __setAttrTrans: function __setAttrTrans(value) {
	          return this.transform(value);
	        }
	      };

	      /***/
	    },
	    /* 230 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var mat3 = __webpack_require__(3).mat3;
	      var vec3 = __webpack_require__(3).vec3;

	      // 是否未改变
	      function isUnchanged(m) {
	        return m[0] === 1 && m[1] === 0 && m[3] === 0 && m[4] === 1 && m[6] === 0 && m[7] === 0;
	      }

	      // 是否仅仅是scale
	      function isScale(m) {
	        return m[1] === 0 && m[3] === 0 && m[6] === 0 && m[7] === 0;
	      }

	      function multiple(m1, m2) {
	        if (!isUnchanged(m2)) {
	          if (isScale(m2)) {
	            m1[0] *= m2[0];
	            m1[4] *= m2[4];
	          } else {
	            mat3.multiply(m1, m1, m2);
	          }
	        }
	      }

	      module.exports = {
	        initTransform: function initTransform() {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	        },
	        translate: function translate(tx, ty) {
	          var matrix = this.attr('matrix');
	          mat3.translate(matrix, matrix, [tx, ty]);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },
	        rotate: function rotate(radian) {
	          var matrix = this.attr('matrix');
	          mat3.rotate(matrix, matrix, radian);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },
	        scale: function scale(s1, s2) {
	          var matrix = this.attr('matrix');
	          mat3.scale(matrix, matrix, [s1, s2]);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },

	        /**
	         * 绕起始点旋转
	         * @param  {Number} rotate 0～360
	         */
	        rotateAtStart: function rotateAtStart(rotate) {
	          var x = this.attr('x');
	          var y = this.attr('y');
	          if (Math.abs(rotate) > Math.PI * 2) {
	            rotate = rotate / 180 * Math.PI;
	          }
	          this.transform([['t', -x, -y], ['r', rotate], ['t', x, y]]);
	        },

	        /**
	         * 移动的到位置
	         * @param  {Number} x 移动到x
	         * @param  {Number} y 移动到y
	         */
	        move: function move(x, y) {
	          var cx = this.get('x') || 0; // 当前的x
	          var cy = this.get('y') || 0; // 当前的y
	          this.translate(x - cx, y - cy);
	          this.set('x', x);
	          this.set('y', y);
	        },
	        transform: function transform(ts) {
	          var self = this;
	          var matrix = self.attr('matrix');

	          Util.each(ts, function (t) {
	            switch (t[0]) {
	              case 't':
	                self.translate(t[1], t[2]);
	                break;
	              case 's':
	                self.scale(t[1], t[2]);
	                break;
	              case 'r':
	                self.rotate(t[1]);
	                break;
	              case 'm':
	                self.attr('matrix', mat3.multiply([], matrix, t[1]));
	                self.clearTotalMatrix();
	                break;
	              default:
	                break;
	            }
	          });
	          return self;
	        },
	        setTransform: function setTransform(ts) {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	          return this.transform(ts);
	        },
	        getMatrix: function getMatrix() {
	          return this.attr('matrix');
	        },
	        setMatrix: function setMatrix(m) {
	          this.attr('matrix', m);
	          this.clearTotalMatrix();
	          return this;
	        },
	        apply: function apply(v, root) {
	          var m = void 0;
	          if (root) {
	            m = this._getMatrixByRoot(root);
	          } else {
	            m = this.attr('matrix');
	          }
	          vec3.transformMat3(v, v, m);
	          return this;
	        },

	        // 获取到达指定根节点的矩阵
	        _getMatrixByRoot: function _getMatrixByRoot(root) {
	          var self = this;
	          root = root || self;
	          var parent = self;
	          var parents = [];

	          while (parent !== root) {
	            parents.unshift(parent);
	            parent = parent.get('parent');
	          }
	          parents.unshift(parent);

	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          Util.each(parents, function (child) {
	            mat3.multiply(m, child.attr('matrix'), m);
	          });
	          return m;
	        },

	        /**
	         * 应用到当前元素上的总的矩阵
	         * @return {Matrix} 矩阵
	         */
	        getTotalMatrix: function getTotalMatrix() {
	          var m = this.__cfg.totalMatrix;
	          if (!m) {
	            m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	            var parent = this.__cfg.parent;
	            if (parent) {
	              var pm = parent.getTotalMatrix();
	              multiple(m, pm);
	            }

	            multiple(m, this.attr('matrix'));
	            this.__cfg.totalMatrix = m;
	          }
	          return m;
	        },

	        // 清除当前的矩阵
	        clearTotalMatrix: function clearTotalMatrix() {
	          // this.__cfg.totalMatrix = null;
	        },
	        invert: function invert(v) {
	          var m = this.getTotalMatrix();
	          // 单精屏幕下大多数矩阵没变化
	          if (isScale(m)) {
	            v[0] /= m[0];
	            v[1] /= m[4];
	          } else {
	            var inm = mat3.invert([], m);
	            if (inm) {
	              vec3.transformMat3(v, v, inm);
	            }
	          }
	          return this;
	        },
	        resetTransform: function resetTransform(context) {
	          var mo = this.attr('matrix');
	          // 不改变时
	          if (!isUnchanged(mo)) {
	            context.transform(mo[0], mo[1], mo[3], mo[4], mo[6], mo[7]);
	          }
	        }
	      };

	      /***/
	    },
	    /* 231 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 3x3 Matrix
	       * @name mat3
	       */
	      var mat3 = {};

	      /**
	       * Creates a new identity mat3
	       *
	       * @returns {mat3} a new 3x3 matrix
	       */
	      mat3.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Copies the upper-left 3x3 values into the given mat3.
	       *
	       * @param {mat3} out the receiving 3x3 matrix
	       * @param {mat4} a   the source 4x4 matrix
	       * @returns {mat3} out
	       */
	      mat3.fromMat4 = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[4];
	        out[4] = a[5];
	        out[5] = a[6];
	        out[6] = a[8];
	        out[7] = a[9];
	        out[8] = a[10];
	        return out;
	      };

	      /**
	       * Creates a new mat3 initialized with values from an existing matrix
	       *
	       * @param {mat3} a matrix to clone
	       * @returns {mat3} a new 3x3 matrix
	       */
	      mat3.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4];
	        out[5] = a[5];
	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Copy the values from one mat3 to another
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4];
	        out[5] = a[5];
	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Create a new mat3 with the given values
	       *
	       * @param {Number} m00 Component in column 0, row 0 position (index 0)
	       * @param {Number} m01 Component in column 0, row 1 position (index 1)
	       * @param {Number} m02 Component in column 0, row 2 position (index 2)
	       * @param {Number} m10 Component in column 1, row 0 position (index 3)
	       * @param {Number} m11 Component in column 1, row 1 position (index 4)
	       * @param {Number} m12 Component in column 1, row 2 position (index 5)
	       * @param {Number} m20 Component in column 2, row 0 position (index 6)
	       * @param {Number} m21 Component in column 2, row 1 position (index 7)
	       * @param {Number} m22 Component in column 2, row 2 position (index 8)
	       * @returns {mat3} A new mat3
	       */
	      mat3.fromValues = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = m00;
	        out[1] = m01;
	        out[2] = m02;
	        out[3] = m10;
	        out[4] = m11;
	        out[5] = m12;
	        out[6] = m20;
	        out[7] = m21;
	        out[8] = m22;
	        return out;
	      };

	      /**
	       * Set the components of a mat3 to the given values
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {Number} m00 Component in column 0, row 0 position (index 0)
	       * @param {Number} m01 Component in column 0, row 1 position (index 1)
	       * @param {Number} m02 Component in column 0, row 2 position (index 2)
	       * @param {Number} m10 Component in column 1, row 0 position (index 3)
	       * @param {Number} m11 Component in column 1, row 1 position (index 4)
	       * @param {Number} m12 Component in column 1, row 2 position (index 5)
	       * @param {Number} m20 Component in column 2, row 0 position (index 6)
	       * @param {Number} m21 Component in column 2, row 1 position (index 7)
	       * @param {Number} m22 Component in column 2, row 2 position (index 8)
	       * @returns {mat3} out
	       */
	      mat3.set = function (out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	        out[0] = m00;
	        out[1] = m01;
	        out[2] = m02;
	        out[3] = m10;
	        out[4] = m11;
	        out[5] = m12;
	        out[6] = m20;
	        out[7] = m21;
	        out[8] = m22;
	        return out;
	      };

	      /**
	       * Set a mat3 to the identity matrix
	       *
	       * @param {mat3} out the receiving matrix
	       * @returns {mat3} out
	       */
	      mat3.identity = function (out) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Transpose the values of a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.transpose = function (out, a) {
	        // If we are transposing ourselves we can skip a few steps but have to cache some values
	        if (out === a) {
	          var a01 = a[1],
	              a02 = a[2],
	              a12 = a[5];
	          out[1] = a[3];
	          out[2] = a[6];
	          out[3] = a01;
	          out[5] = a[7];
	          out[6] = a02;
	          out[7] = a12;
	        } else {
	          out[0] = a[0];
	          out[1] = a[3];
	          out[2] = a[6];
	          out[3] = a[1];
	          out[4] = a[4];
	          out[5] = a[7];
	          out[6] = a[2];
	          out[7] = a[5];
	          out[8] = a[8];
	        }

	        return out;
	      };

	      /**
	       * Inverts a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.invert = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            b01 = a22 * a11 - a12 * a21,
	            b11 = -a22 * a10 + a12 * a20,
	            b21 = a21 * a10 - a11 * a20,


	        // Calculate the determinant
	        det = a00 * b01 + a01 * b11 + a02 * b21;

	        if (!det) {
	          return null;
	        }
	        det = 1.0 / det;

	        out[0] = b01 * det;
	        out[1] = (-a22 * a01 + a02 * a21) * det;
	        out[2] = (a12 * a01 - a02 * a11) * det;
	        out[3] = b11 * det;
	        out[4] = (a22 * a00 - a02 * a20) * det;
	        out[5] = (-a12 * a00 + a02 * a10) * det;
	        out[6] = b21 * det;
	        out[7] = (-a21 * a00 + a01 * a20) * det;
	        out[8] = (a11 * a00 - a01 * a10) * det;
	        return out;
	      };

	      /**
	       * Calculates the adjugate of a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.adjoint = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8];

	        out[0] = a11 * a22 - a12 * a21;
	        out[1] = a02 * a21 - a01 * a22;
	        out[2] = a01 * a12 - a02 * a11;
	        out[3] = a12 * a20 - a10 * a22;
	        out[4] = a00 * a22 - a02 * a20;
	        out[5] = a02 * a10 - a00 * a12;
	        out[6] = a10 * a21 - a11 * a20;
	        out[7] = a01 * a20 - a00 * a21;
	        out[8] = a00 * a11 - a01 * a10;
	        return out;
	      };

	      /**
	       * Calculates the determinant of a mat3
	       *
	       * @param {mat3} a the source matrix
	       * @returns {Number} determinant of a
	       */
	      mat3.determinant = function (a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8];

	        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	      };

	      /**
	       * Multiplies two mat3's
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.multiply = function (out, a, b) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            b00 = b[0],
	            b01 = b[1],
	            b02 = b[2],
	            b10 = b[3],
	            b11 = b[4],
	            b12 = b[5],
	            b20 = b[6],
	            b21 = b[7],
	            b22 = b[8];

	        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	        out[2] = b00 * a02 + b01 * a12 + b02 * a22;

	        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	        out[5] = b10 * a02 + b11 * a12 + b12 * a22;

	        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	        return out;
	      };

	      /**
	       * Alias for {@link mat3.multiply}
	       * @function
	       */
	      mat3.mul = mat3.multiply;

	      /**
	       * Translate a mat3 by the given vector
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to translate
	       * @param {vec2} v vector to translate by
	       * @returns {mat3} out
	       */
	      mat3.translate = function (out, a, v) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            x = v[0],
	            y = v[1];

	        out[0] = a00;
	        out[1] = a01;
	        out[2] = a02;

	        out[3] = a10;
	        out[4] = a11;
	        out[5] = a12;

	        out[6] = x * a00 + y * a10 + a20;
	        out[7] = x * a01 + y * a11 + a21;
	        out[8] = x * a02 + y * a12 + a22;
	        return out;
	      };

	      /**
	       * Rotates a mat3 by the given angle
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to rotate
	       * @param {Number} rad the angle to rotate the matrix by
	       * @returns {mat3} out
	       */
	      mat3.rotate = function (out, a, rad) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            s = Math.sin(rad),
	            c = Math.cos(rad);

	        out[0] = c * a00 + s * a10;
	        out[1] = c * a01 + s * a11;
	        out[2] = c * a02 + s * a12;

	        out[3] = c * a10 - s * a00;
	        out[4] = c * a11 - s * a01;
	        out[5] = c * a12 - s * a02;

	        out[6] = a20;
	        out[7] = a21;
	        out[8] = a22;
	        return out;
	      };

	      /**
	       * Scales the mat3 by the dimensions in the given vec2
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to rotate
	       * @param {vec2} v the vec2 to scale the matrix by
	       * @returns {mat3} out
	       **/
	      mat3.scale = function (out, a, v) {
	        var x = v[0],
	            y = v[1];

	        out[0] = x * a[0];
	        out[1] = x * a[1];
	        out[2] = x * a[2];

	        out[3] = y * a[3];
	        out[4] = y * a[4];
	        out[5] = y * a[5];

	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Creates a matrix from a vector translation
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.translate(dest, dest, vec);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {vec2} v Translation vector
	       * @returns {mat3} out
	       */
	      mat3.fromTranslation = function (out, v) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = v[0];
	        out[7] = v[1];
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Creates a matrix from a given angle
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.rotate(dest, dest, rad);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {Number} rad the angle to rotate the matrix by
	       * @returns {mat3} out
	       */
	      mat3.fromRotation = function (out, rad) {
	        var s = Math.sin(rad),
	            c = Math.cos(rad);

	        out[0] = c;
	        out[1] = s;
	        out[2] = 0;

	        out[3] = -s;
	        out[4] = c;
	        out[5] = 0;

	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Creates a matrix from a vector scaling
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.scale(dest, dest, vec);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {vec2} v Scaling vector
	       * @returns {mat3} out
	       */
	      mat3.fromScaling = function (out, v) {
	        out[0] = v[0];
	        out[1] = 0;
	        out[2] = 0;

	        out[3] = 0;
	        out[4] = v[1];
	        out[5] = 0;

	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Copies the values from a mat2d into a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat2d} a the matrix to copy
	       * @returns {mat3} out
	       **/
	      mat3.fromMat2d = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = 0;

	        out[3] = a[2];
	        out[4] = a[3];
	        out[5] = 0;

	        out[6] = a[4];
	        out[7] = a[5];
	        out[8] = 1;
	        return out;
	      };

	      /**
	      * Calculates a 3x3 matrix from the given quaternion
	      *
	      * @param {mat3} out mat3 receiving operation result
	      * @param {quat} q Quaternion to create matrix from
	      *
	      * @returns {mat3} out
	      */
	      mat3.fromQuat = function (out, q) {
	        var x = q[0],
	            y = q[1],
	            z = q[2],
	            w = q[3],
	            x2 = x + x,
	            y2 = y + y,
	            z2 = z + z,
	            xx = x * x2,
	            yx = y * x2,
	            yy = y * y2,
	            zx = z * x2,
	            zy = z * y2,
	            zz = z * z2,
	            wx = w * x2,
	            wy = w * y2,
	            wz = w * z2;

	        out[0] = 1 - yy - zz;
	        out[3] = yx - wz;
	        out[6] = zx + wy;

	        out[1] = yx + wz;
	        out[4] = 1 - xx - zz;
	        out[7] = zy - wx;

	        out[2] = zx - wy;
	        out[5] = zy + wx;
	        out[8] = 1 - xx - yy;

	        return out;
	      };

	      /**
	      * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	      *
	      * @param {mat3} out mat3 receiving operation result
	      * @param {mat4} a Mat4 to derive the normal matrix from
	      *
	      * @returns {mat3} out
	      */
	      mat3.normalFromMat4 = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a03 = a[3],
	            a10 = a[4],
	            a11 = a[5],
	            a12 = a[6],
	            a13 = a[7],
	            a20 = a[8],
	            a21 = a[9],
	            a22 = a[10],
	            a23 = a[11],
	            a30 = a[12],
	            a31 = a[13],
	            a32 = a[14],
	            a33 = a[15],
	            b00 = a00 * a11 - a01 * a10,
	            b01 = a00 * a12 - a02 * a10,
	            b02 = a00 * a13 - a03 * a10,
	            b03 = a01 * a12 - a02 * a11,
	            b04 = a01 * a13 - a03 * a11,
	            b05 = a02 * a13 - a03 * a12,
	            b06 = a20 * a31 - a21 * a30,
	            b07 = a20 * a32 - a22 * a30,
	            b08 = a20 * a33 - a23 * a30,
	            b09 = a21 * a32 - a22 * a31,
	            b10 = a21 * a33 - a23 * a31,
	            b11 = a22 * a33 - a23 * a32,


	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	        if (!det) {
	          return null;
	        }
	        det = 1.0 / det;

	        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

	        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

	        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

	        return out;
	      };

	      /**
	       * Returns a string representation of a mat3
	       *
	       * @param {mat3} mat matrix to represent as a string
	       * @returns {String} string representation of the matrix
	       */
	      mat3.str = function (a) {
	        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	      };

	      /**
	       * Returns Frobenius norm of a mat3
	       *
	       * @param {mat3} a the matrix to calculate Frobenius norm of
	       * @returns {Number} Frobenius norm
	       */
	      mat3.frob = function (a) {
	        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
	      };

	      /**
	       * Adds two mat3's
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        out[2] = a[2] + b[2];
	        out[3] = a[3] + b[3];
	        out[4] = a[4] + b[4];
	        out[5] = a[5] + b[5];
	        out[6] = a[6] + b[6];
	        out[7] = a[7] + b[7];
	        out[8] = a[8] + b[8];
	        return out;
	      };

	      /**
	       * Subtracts matrix b from matrix a
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        out[2] = a[2] - b[2];
	        out[3] = a[3] - b[3];
	        out[4] = a[4] - b[4];
	        out[5] = a[5] - b[5];
	        out[6] = a[6] - b[6];
	        out[7] = a[7] - b[7];
	        out[8] = a[8] - b[8];
	        return out;
	      };

	      /**
	       * Alias for {@link mat3.subtract}
	       * @function
	       */
	      mat3.sub = mat3.subtract;

	      /**
	       * Multiply each element of the matrix by a scalar.
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to scale
	       * @param {Number} b amount to scale the matrix's elements by
	       * @returns {mat3} out
	       */
	      mat3.multiplyScalar = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        out[2] = a[2] * b;
	        out[3] = a[3] * b;
	        out[4] = a[4] * b;
	        out[5] = a[5] * b;
	        out[6] = a[6] * b;
	        out[7] = a[7] * b;
	        out[8] = a[8] * b;
	        return out;
	      };

	      /**
	       * Adds two mat3's after multiplying each element of the second operand by a scalar value.
	       *
	       * @param {mat3} out the receiving vector
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @param {Number} scale the amount to scale b's elements by before adding
	       * @returns {mat3} out
	       */
	      mat3.multiplyScalarAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        out[2] = a[2] + b[2] * scale;
	        out[3] = a[3] + b[3] * scale;
	        out[4] = a[4] + b[4] * scale;
	        out[5] = a[5] + b[5] * scale;
	        out[6] = a[6] + b[6] * scale;
	        out[7] = a[7] + b[7] * scale;
	        out[8] = a[8] + b[8] * scale;
	        return out;
	      };

	      /*
	       * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	       *
	       * @param {mat3} a The first matrix.
	       * @param {mat3} b The second matrix.
	       * @returns {Boolean} True if the matrices are equal, false otherwise.
	       */
	      mat3.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
	      };

	      /**
	       * Returns whether or not the matrices have approximately the same elements in the same position.
	       *
	       * @param {mat3} a The first matrix.
	       * @param {mat3} b The second matrix.
	       * @returns {Boolean} True if the matrices are equal, false otherwise.
	       */
	      mat3.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1],
	            a2 = a[2],
	            a3 = a[3],
	            a4 = a[4],
	            a5 = a[5],
	            a6 = a[6],
	            a7 = a[7],
	            a8 = a[8];
	        var b0 = b[0],
	            b1 = b[1],
	            b2 = b[2],
	            b3 = b[3],
	            b4 = b[4],
	            b5 = b[5],
	            b6 = a[6],
	            b7 = b[7],
	            b8 = b[8];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
	      };

	      module.exports = mat3;

	      /***/
	    },
	    /* 232 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 3 Dimensional Vector
	       * @name vec3
	       */
	      var vec3 = {};

	      /**
	       * Creates a new, empty vec3
	       *
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = 0;
	        out[1] = 0;
	        out[2] = 0;
	        return out;
	      };

	      /**
	       * Creates a new vec3 initialized with values from an existing vector
	       *
	       * @param {vec3} a vector to clone
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        return out;
	      };

	      /**
	       * Creates a new vec3 initialized with the given values
	       *
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @param {Number} z Z component
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.fromValues = function (x, y, z) {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = x;
	        out[1] = y;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Copy the values from one vec3 to another
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the source vector
	       * @returns {vec3} out
	       */
	      vec3.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        return out;
	      };

	      /**
	       * Set the components of a vec3 to the given values
	       *
	       * @param {vec3} out the receiving vector
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @param {Number} z Z component
	       * @returns {vec3} out
	       */
	      vec3.set = function (out, x, y, z) {
	        out[0] = x;
	        out[1] = y;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Adds two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        out[2] = a[2] + b[2];
	        return out;
	      };

	      /**
	       * Subtracts vector b from vector a
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        out[2] = a[2] - b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.subtract}
	       * @function
	       */
	      vec3.sub = vec3.subtract;

	      /**
	       * Multiplies two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.multiply = function (out, a, b) {
	        out[0] = a[0] * b[0];
	        out[1] = a[1] * b[1];
	        out[2] = a[2] * b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.multiply}
	       * @function
	       */
	      vec3.mul = vec3.multiply;

	      /**
	       * Divides two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.divide = function (out, a, b) {
	        out[0] = a[0] / b[0];
	        out[1] = a[1] / b[1];
	        out[2] = a[2] / b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.divide}
	       * @function
	       */
	      vec3.div = vec3.divide;

	      /**
	       * Math.ceil the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to ceil
	       * @returns {vec3} out
	       */
	      vec3.ceil = function (out, a) {
	        out[0] = Math.ceil(a[0]);
	        out[1] = Math.ceil(a[1]);
	        out[2] = Math.ceil(a[2]);
	        return out;
	      };

	      /**
	       * Math.floor the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to floor
	       * @returns {vec3} out
	       */
	      vec3.floor = function (out, a) {
	        out[0] = Math.floor(a[0]);
	        out[1] = Math.floor(a[1]);
	        out[2] = Math.floor(a[2]);
	        return out;
	      };

	      /**
	       * Returns the minimum of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.min = function (out, a, b) {
	        out[0] = Math.min(a[0], b[0]);
	        out[1] = Math.min(a[1], b[1]);
	        out[2] = Math.min(a[2], b[2]);
	        return out;
	      };

	      /**
	       * Returns the maximum of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.max = function (out, a, b) {
	        out[0] = Math.max(a[0], b[0]);
	        out[1] = Math.max(a[1], b[1]);
	        out[2] = Math.max(a[2], b[2]);
	        return out;
	      };

	      /**
	       * Math.round the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to round
	       * @returns {vec3} out
	       */
	      vec3.round = function (out, a) {
	        out[0] = Math.round(a[0]);
	        out[1] = Math.round(a[1]);
	        out[2] = Math.round(a[2]);
	        return out;
	      };

	      /**
	       * Scales a vec3 by a scalar number
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to scale
	       * @param {Number} b amount to scale the vector by
	       * @returns {vec3} out
	       */
	      vec3.scale = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        out[2] = a[2] * b;
	        return out;
	      };

	      /**
	       * Adds two vec3's after scaling the second operand by a scalar value
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {Number} scale the amount to scale b by before adding
	       * @returns {vec3} out
	       */
	      vec3.scaleAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        out[2] = a[2] + b[2] * scale;
	        return out;
	      };

	      /**
	       * Calculates the euclidian distance between two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} distance between a and b
	       */
	      vec3.distance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1],
	            z = b[2] - a[2];
	        return Math.sqrt(x * x + y * y + z * z);
	      };

	      /**
	       * Alias for {@link vec3.distance}
	       * @function
	       */
	      vec3.dist = vec3.distance;

	      /**
	       * Calculates the squared euclidian distance between two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} squared distance between a and b
	       */
	      vec3.squaredDistance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1],
	            z = b[2] - a[2];
	        return x * x + y * y + z * z;
	      };

	      /**
	       * Alias for {@link vec3.squaredDistance}
	       * @function
	       */
	      vec3.sqrDist = vec3.squaredDistance;

	      /**
	       * Calculates the length of a vec3
	       *
	       * @param {vec3} a vector to calculate length of
	       * @returns {Number} length of a
	       */
	      vec3.length = function (a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        return Math.sqrt(x * x + y * y + z * z);
	      };

	      /**
	       * Alias for {@link vec3.length}
	       * @function
	       */
	      vec3.len = vec3.length;

	      /**
	       * Calculates the squared length of a vec3
	       *
	       * @param {vec3} a vector to calculate squared length of
	       * @returns {Number} squared length of a
	       */
	      vec3.squaredLength = function (a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        return x * x + y * y + z * z;
	      };

	      /**
	       * Alias for {@link vec3.squaredLength}
	       * @function
	       */
	      vec3.sqrLen = vec3.squaredLength;

	      /**
	       * Negates the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to negate
	       * @returns {vec3} out
	       */
	      vec3.negate = function (out, a) {
	        out[0] = -a[0];
	        out[1] = -a[1];
	        out[2] = -a[2];
	        return out;
	      };

	      /**
	       * Returns the inverse of the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to invert
	       * @returns {vec3} out
	       */
	      vec3.inverse = function (out, a) {
	        out[0] = 1.0 / a[0];
	        out[1] = 1.0 / a[1];
	        out[2] = 1.0 / a[2];
	        return out;
	      };

	      /**
	       * Normalize a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to normalize
	       * @returns {vec3} out
	       */
	      vec3.normalize = function (out, a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        var len = x * x + y * y + z * z;
	        if (len > 0) {
	          //TODO: evaluate use of glm_invsqrt here?
	          len = 1 / Math.sqrt(len);
	          out[0] = a[0] * len;
	          out[1] = a[1] * len;
	          out[2] = a[2] * len;
	        }
	        return out;
	      };

	      /**
	       * Calculates the dot product of two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} dot product of a and b
	       */
	      vec3.dot = function (a, b) {
	        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	      };

	      /**
	       * Computes the cross product of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.cross = function (out, a, b) {
	        var ax = a[0],
	            ay = a[1],
	            az = a[2],
	            bx = b[0],
	            by = b[1],
	            bz = b[2];

	        out[0] = ay * bz - az * by;
	        out[1] = az * bx - ax * bz;
	        out[2] = ax * by - ay * bx;
	        return out;
	      };

	      /**
	       * Performs a linear interpolation between two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.lerp = function (out, a, b, t) {
	        var ax = a[0],
	            ay = a[1],
	            az = a[2];
	        out[0] = ax + t * (b[0] - ax);
	        out[1] = ay + t * (b[1] - ay);
	        out[2] = az + t * (b[2] - az);
	        return out;
	      };

	      /**
	       * Performs a hermite interpolation with two control points
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {vec3} c the third operand
	       * @param {vec3} d the fourth operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.hermite = function (out, a, b, c, d, t) {
	        var factorTimes2 = t * t,
	            factor1 = factorTimes2 * (2 * t - 3) + 1,
	            factor2 = factorTimes2 * (t - 2) + t,
	            factor3 = factorTimes2 * (t - 1),
	            factor4 = factorTimes2 * (3 - 2 * t);

	        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

	        return out;
	      };

	      /**
	       * Performs a bezier interpolation with two control points
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {vec3} c the third operand
	       * @param {vec3} d the fourth operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.bezier = function (out, a, b, c, d, t) {
	        var inverseFactor = 1 - t,
	            inverseFactorTimesTwo = inverseFactor * inverseFactor,
	            factorTimes2 = t * t,
	            factor1 = inverseFactorTimesTwo * inverseFactor,
	            factor2 = 3 * t * inverseFactorTimesTwo,
	            factor3 = 3 * factorTimes2 * inverseFactor,
	            factor4 = factorTimes2 * t;

	        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

	        return out;
	      };

	      /**
	       * Generates a random vector with the given scale
	       *
	       * @param {vec3} out the receiving vector
	       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	       * @returns {vec3} out
	       */
	      vec3.random = function (out, scale) {
	        scale = scale || 1.0;

	        var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	        var z = glMatrix.RANDOM() * 2.0 - 1.0;
	        var zScale = Math.sqrt(1.0 - z * z) * scale;

	        out[0] = Math.cos(r) * zScale;
	        out[1] = Math.sin(r) * zScale;
	        out[2] = z * scale;
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a mat4.
	       * 4th vector component is implicitly '1'
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {mat4} m matrix to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformMat4 = function (out, a, m) {
	        var x = a[0],
	            y = a[1],
	            z = a[2],
	            w = m[3] * x + m[7] * y + m[11] * z + m[15];
	        w = w || 1.0;
	        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a mat3.
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {mat4} m the 3x3 matrix to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformMat3 = function (out, a, m) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        out[0] = x * m[0] + y * m[3] + z * m[6];
	        out[1] = x * m[1] + y * m[4] + z * m[7];
	        out[2] = x * m[2] + y * m[5] + z * m[8];
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a quat
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {quat} q quaternion to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformQuat = function (out, a, q) {
	        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

	        var x = a[0],
	            y = a[1],
	            z = a[2],
	            qx = q[0],
	            qy = q[1],
	            qz = q[2],
	            qw = q[3],


	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	            iy = qw * y + qz * x - qx * z,
	            iz = qw * z + qx * y - qy * x,
	            iw = -qx * x - qy * y - qz * z;

	        // calculate result * inverse quat
	        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the x-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateX = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[0];
	        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
	        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the y-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateY = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
	        r[1] = p[1];
	        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the z-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateZ = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
	        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
	        r[2] = p[2];

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Perform some operation over an array of vec3s.
	       *
	       * @param {Array} a the array of vectors to iterate over
	       * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	       * @param {Number} offset Number of elements to skip at the beginning of the array
	       * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	       * @param {Function} fn Function to call for each vector in the array
	       * @param {Object} [arg] additional argument to pass to fn
	       * @returns {Array} a
	       * @function
	       */
	      vec3.forEach = function () {
	        var vec = vec3.create();

	        return function (a, stride, offset, count, fn, arg) {
	          var i, l;
	          if (!stride) {
	            stride = 3;
	          }

	          if (!offset) {
	            offset = 0;
	          }

	          if (count) {
	            l = Math.min(count * stride + offset, a.length);
	          } else {
	            l = a.length;
	          }

	          for (i = offset; i < l; i += stride) {
	            vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
	            fn(vec, vec, arg);
	            a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
	          }

	          return a;
	        };
	      }();

	      /**
	       * Get the angle between two 3D vectors
	       * @param {vec3} a The first operand
	       * @param {vec3} b The second operand
	       * @returns {Number} The angle in radians
	       */
	      vec3.angle = function (a, b) {

	        var tempA = vec3.fromValues(a[0], a[1], a[2]);
	        var tempB = vec3.fromValues(b[0], b[1], b[2]);

	        vec3.normalize(tempA, tempA);
	        vec3.normalize(tempB, tempB);

	        var cosine = vec3.dot(tempA, tempB);

	        if (cosine > 1.0) {
	          return 0;
	        } else {
	          return Math.acos(cosine);
	        }
	      };

	      /**
	       * Returns a string representation of a vector
	       *
	       * @param {vec3} vec vector to represent as a string
	       * @returns {String} string representation of the vector
	       */
	      vec3.str = function (a) {
	        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	      };

	      /**
	       * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
	       *
	       * @param {vec3} a The first vector.
	       * @param {vec3} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec3.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
	      };

	      /**
	       * Returns whether or not the vectors have approximately the same elements in the same position.
	       *
	       * @param {vec3} a The first vector.
	       * @param {vec3} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec3.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1],
	            a2 = a[2];
	        var b0 = b[0],
	            b1 = b[1],
	            b2 = b[2];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
	      };

	      module.exports = vec3;

	      /***/
	    },
	    /* 233 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 2 Dimensional Vector
	       * @name vec2
	       */
	      var vec2 = {};

	      /**
	       * Creates a new, empty vec2
	       *
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = 0;
	        out[1] = 0;
	        return out;
	      };

	      /**
	       * Creates a new vec2 initialized with values from an existing vector
	       *
	       * @param {vec2} a vector to clone
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = a[0];
	        out[1] = a[1];
	        return out;
	      };

	      /**
	       * Creates a new vec2 initialized with the given values
	       *
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.fromValues = function (x, y) {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = x;
	        out[1] = y;
	        return out;
	      };

	      /**
	       * Copy the values from one vec2 to another
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the source vector
	       * @returns {vec2} out
	       */
	      vec2.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        return out;
	      };

	      /**
	       * Set the components of a vec2 to the given values
	       *
	       * @param {vec2} out the receiving vector
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @returns {vec2} out
	       */
	      vec2.set = function (out, x, y) {
	        out[0] = x;
	        out[1] = y;
	        return out;
	      };

	      /**
	       * Adds two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        return out;
	      };

	      /**
	       * Subtracts vector b from vector a
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.subtract}
	       * @function
	       */
	      vec2.sub = vec2.subtract;

	      /**
	       * Multiplies two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.multiply = function (out, a, b) {
	        out[0] = a[0] * b[0];
	        out[1] = a[1] * b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.multiply}
	       * @function
	       */
	      vec2.mul = vec2.multiply;

	      /**
	       * Divides two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.divide = function (out, a, b) {
	        out[0] = a[0] / b[0];
	        out[1] = a[1] / b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.divide}
	       * @function
	       */
	      vec2.div = vec2.divide;

	      /**
	       * Math.ceil the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to ceil
	       * @returns {vec2} out
	       */
	      vec2.ceil = function (out, a) {
	        out[0] = Math.ceil(a[0]);
	        out[1] = Math.ceil(a[1]);
	        return out;
	      };

	      /**
	       * Math.floor the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to floor
	       * @returns {vec2} out
	       */
	      vec2.floor = function (out, a) {
	        out[0] = Math.floor(a[0]);
	        out[1] = Math.floor(a[1]);
	        return out;
	      };

	      /**
	       * Returns the minimum of two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.min = function (out, a, b) {
	        out[0] = Math.min(a[0], b[0]);
	        out[1] = Math.min(a[1], b[1]);
	        return out;
	      };

	      /**
	       * Returns the maximum of two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.max = function (out, a, b) {
	        out[0] = Math.max(a[0], b[0]);
	        out[1] = Math.max(a[1], b[1]);
	        return out;
	      };

	      /**
	       * Math.round the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to round
	       * @returns {vec2} out
	       */
	      vec2.round = function (out, a) {
	        out[0] = Math.round(a[0]);
	        out[1] = Math.round(a[1]);
	        return out;
	      };

	      /**
	       * Scales a vec2 by a scalar number
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to scale
	       * @param {Number} b amount to scale the vector by
	       * @returns {vec2} out
	       */
	      vec2.scale = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        return out;
	      };

	      /**
	       * Adds two vec2's after scaling the second operand by a scalar value
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @param {Number} scale the amount to scale b by before adding
	       * @returns {vec2} out
	       */
	      vec2.scaleAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        return out;
	      };

	      /**
	       * Calculates the euclidian distance between two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} distance between a and b
	       */
	      vec2.distance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1];
	        return Math.sqrt(x * x + y * y);
	      };

	      /**
	       * Alias for {@link vec2.distance}
	       * @function
	       */
	      vec2.dist = vec2.distance;

	      /**
	       * Calculates the squared euclidian distance between two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} squared distance between a and b
	       */
	      vec2.squaredDistance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1];
	        return x * x + y * y;
	      };

	      /**
	       * Alias for {@link vec2.squaredDistance}
	       * @function
	       */
	      vec2.sqrDist = vec2.squaredDistance;

	      /**
	       * Calculates the length of a vec2
	       *
	       * @param {vec2} a vector to calculate length of
	       * @returns {Number} length of a
	       */
	      vec2.length = function (a) {
	        var x = a[0],
	            y = a[1];
	        return Math.sqrt(x * x + y * y);
	      };

	      /**
	       * Alias for {@link vec2.length}
	       * @function
	       */
	      vec2.len = vec2.length;

	      /**
	       * Calculates the squared length of a vec2
	       *
	       * @param {vec2} a vector to calculate squared length of
	       * @returns {Number} squared length of a
	       */
	      vec2.squaredLength = function (a) {
	        var x = a[0],
	            y = a[1];
	        return x * x + y * y;
	      };

	      /**
	       * Alias for {@link vec2.squaredLength}
	       * @function
	       */
	      vec2.sqrLen = vec2.squaredLength;

	      /**
	       * Negates the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to negate
	       * @returns {vec2} out
	       */
	      vec2.negate = function (out, a) {
	        out[0] = -a[0];
	        out[1] = -a[1];
	        return out;
	      };

	      /**
	       * Returns the inverse of the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to invert
	       * @returns {vec2} out
	       */
	      vec2.inverse = function (out, a) {
	        out[0] = 1.0 / a[0];
	        out[1] = 1.0 / a[1];
	        return out;
	      };

	      /**
	       * Normalize a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to normalize
	       * @returns {vec2} out
	       */
	      vec2.normalize = function (out, a) {
	        var x = a[0],
	            y = a[1];
	        var len = x * x + y * y;
	        if (len > 0) {
	          //TODO: evaluate use of glm_invsqrt here?
	          len = 1 / Math.sqrt(len);
	          out[0] = a[0] * len;
	          out[1] = a[1] * len;
	        }
	        return out;
	      };

	      /**
	       * Calculates the dot product of two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} dot product of a and b
	       */
	      vec2.dot = function (a, b) {
	        return a[0] * b[0] + a[1] * b[1];
	      };

	      /**
	       * Computes the cross product of two vec2's
	       * Note that the cross product must by definition produce a 3D vector
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec3} out
	       */
	      vec2.cross = function (out, a, b) {
	        var z = a[0] * b[1] - a[1] * b[0];
	        out[0] = out[1] = 0;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Performs a linear interpolation between two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec2} out
	       */
	      vec2.lerp = function (out, a, b, t) {
	        var ax = a[0],
	            ay = a[1];
	        out[0] = ax + t * (b[0] - ax);
	        out[1] = ay + t * (b[1] - ay);
	        return out;
	      };

	      /**
	       * Generates a random vector with the given scale
	       *
	       * @param {vec2} out the receiving vector
	       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	       * @returns {vec2} out
	       */
	      vec2.random = function (out, scale) {
	        scale = scale || 1.0;
	        var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	        out[0] = Math.cos(r) * scale;
	        out[1] = Math.sin(r) * scale;
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat2} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat2 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[2] * y;
	        out[1] = m[1] * x + m[3] * y;
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat2d
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat2d} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat2d = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[2] * y + m[4];
	        out[1] = m[1] * x + m[3] * y + m[5];
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat3
	       * 3rd vector component is implicitly '1'
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat3} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat3 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[3] * y + m[6];
	        out[1] = m[1] * x + m[4] * y + m[7];
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat4
	       * 3rd vector component is implicitly '0'
	       * 4th vector component is implicitly '1'
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat4} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat4 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[4] * y + m[12];
	        out[1] = m[1] * x + m[5] * y + m[13];
	        return out;
	      };

	      /**
	       * Perform some operation over an array of vec2s.
	       *
	       * @param {Array} a the array of vectors to iterate over
	       * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	       * @param {Number} offset Number of elements to skip at the beginning of the array
	       * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	       * @param {Function} fn Function to call for each vector in the array
	       * @param {Object} [arg] additional argument to pass to fn
	       * @returns {Array} a
	       * @function
	       */
	      vec2.forEach = function () {
	        var vec = vec2.create();

	        return function (a, stride, offset, count, fn, arg) {
	          var i, l;
	          if (!stride) {
	            stride = 2;
	          }

	          if (!offset) {
	            offset = 0;
	          }

	          if (count) {
	            l = Math.min(count * stride + offset, a.length);
	          } else {
	            l = a.length;
	          }

	          for (i = offset; i < l; i += stride) {
	            vec[0] = a[i];vec[1] = a[i + 1];
	            fn(vec, vec, arg);
	            a[i] = vec[0];a[i + 1] = vec[1];
	          }

	          return a;
	        };
	      }();

	      /**
	       * Returns a string representation of a vector
	       *
	       * @param {vec2} vec vector to represent as a string
	       * @returns {String} string representation of the vector
	       */
	      vec2.str = function (a) {
	        return 'vec2(' + a[0] + ', ' + a[1] + ')';
	      };

	      /**
	       * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
	       *
	       * @param {vec2} a The first vector.
	       * @param {vec2} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec2.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1];
	      };

	      /**
	       * Returns whether or not the vectors have approximately the same elements in the same position.
	       *
	       * @param {vec2} a The first vector.
	       * @param {vec2} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec2.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1];
	        var b0 = b[0],
	            b1 = b[1];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
	      };

	      module.exports = vec2;

	      /***/
	    },
	    /* 234 */
	    /***/function (module, exports, __webpack_require__) {

	      var MatrixUtil = __webpack_require__(3);
	      var PathUtil = __webpack_require__(46);
	      var Util = __webpack_require__(0);
	      var d3Ease = __webpack_require__(235);
	      var d3Timer = __webpack_require__(246);

	      var _require = __webpack_require__(249),
	          interpolate = _require.interpolate,
	          interpolateArray = _require.interpolateArray; // 目前整体动画只需要数值和数组的差值计算


	      var ReservedProps = {
	        delay: 'delay'
	      };
	      module.exports = {
	        stopAnimate: function stopAnimate() {
	          var self = this;
	          var canvas = self.get('canvas');
	          if (self.get('destroyed')) {
	            return;
	          }
	          if (self.get('animating')) {
	            var clip = self.attr('clip');
	            // 如果 clip 在执行动画
	            if (clip && clip.get('animating')) {
	              clip.stopAnimate();
	            }
	            var timer = self.get('animateTimer');
	            if (timer) {
	              timer.stop();
	              self.setSilent('animateTimer', null);
	            }
	            var animateCfg = self.get('animateCfg');
	            if (animateCfg) {
	              self.attr(animateCfg.toAttrs);
	              if (animateCfg.toM) {
	                self.setMatrix(animateCfg.toM);
	              }
	              if (animateCfg.callback) {
	                animateCfg.callback();
	              }
	              self.setSilent('animateCfg', null);
	            }
	            self.setSilent('animating', false); // 动画停止
	            canvas.draw();
	          }
	        },

	        /**
	         * 执行动画
	         * @param  {Object}   toProps  动画最终状态
	         * @param  {Number}   duration 动画执行时间
	         * @param  {String}   easing   动画缓动效果
	         * @param  {Function} callback 动画执行后的回调
	         * @param  {Number}   delay    动画延迟时间
	         */
	        animate: function animate(toProps, duration, easing, callback) {
	          var delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

	          var self = this;
	          var canvas = self.get('canvas');
	          var formatProps = getFormatProps(toProps);
	          var toAttrs = formatProps.attrs;
	          var toM = formatProps.M;
	          var fromAttrs = getfromAttrs(toAttrs);
	          var fromM = Util.clone(self.getMatrix());
	          var repeat = toProps.repeat;
	          var timer = self.get('animateTimer');
	          timer && timer.stop();
	          // 可能不设置 easing
	          if (Util.isNumber(callback)) {
	            delay = callback;
	            callback = null;
	          }
	          if (Util.isFunction(easing)) {
	            callback = easing;
	            easing = 'easeLinear';
	          } else {
	            easing = easing ? easing : 'easeLinear';
	          }

	          self.setSilent('animating', true); // 处于动画状态
	          self.setSilent('animateCfg', {
	            toAttrs: toAttrs,
	            toM: toM,
	            callback: callback
	          });

	          // 执行动画
	          timer = d3Timer.timer(function (elapsed) {
	            if (repeat) {
	              excuteRepeat(elapsed);
	            } else {
	              excuteOnce(elapsed);
	            }
	          }, delay);

	          self.setSilent('animateTimer', timer);

	          function excuteRepeat(elapsed) {
	            var ratio = elapsed % duration / duration;
	            ratio = d3Ease[easing](ratio);
	            update(ratio);
	          }

	          function excuteOnce(elapsed) {
	            var ratio = elapsed / duration;
	            if (ratio < 1) {
	              ratio = d3Ease[easing](ratio);
	              update(ratio);
	            } else {
	              update(1); // 保证最后一帧的绘制
	              callback && callback();
	              self.setSilent('animating', false); // 动画停止
	              self.setSilent('animateCfg', null);
	              self.setSilent('animateTimer', null);
	              timer.stop();
	            }
	          }

	          function update(ratio) {
	            var cProps = {}; // 此刻属性
	            if (self.get('destroyed')) {
	              return;
	            }
	            var interf = void 0; //  差值函数

	            for (var k in toAttrs) {
	              if (!Util.isEqual(fromAttrs[k], toAttrs[k])) {
	                if (k === 'path') {
	                  var toPath = PathUtil.parsePathString(toAttrs[k]); // 终点状态
	                  var fromPath = PathUtil.parsePathString(fromAttrs[k]); // 起始状态
	                  cProps[k] = [];
	                  for (var i = 0; i < toPath.length; i++) {
	                    var toPathPoint = toPath[i];
	                    var fromPathPoint = fromPath[i];
	                    var cPathPoint = [];
	                    for (var j = 0; j < toPathPoint.length; j++) {
	                      if (Util.isNumber(toPathPoint[j]) && fromPathPoint) {
	                        interf = interpolate(fromPathPoint[j], toPathPoint[j]);
	                        cPathPoint.push(interf(ratio));
	                      } else {
	                        cPathPoint.push(toPathPoint[j]);
	                      }
	                    }
	                    cProps[k].push(cPathPoint);
	                  }
	                } else {
	                  interf = interpolate(fromAttrs[k], toAttrs[k]);
	                  cProps[k] = interf(ratio);
	                }
	              }
	            }
	            if (toM) {
	              var mf = interpolateArray(fromM, toM);
	              var cM = mf(ratio);
	              self.setMatrix(cM);
	            }
	            self.attr(cProps);
	            canvas.draw();
	          }

	          function getFormatProps(props) {
	            var rst = {
	              M: null,
	              attrs: {}
	            };
	            for (var k in props) {
	              if (k === 'transform') {
	                rst.M = MatrixUtil.transform(self.getMatrix(), props[k]);
	              } else if (k === 'matrix') {
	                rst.M = props[k];
	              } else if (!ReservedProps[k]) {
	                rst.attrs[k] = props[k];
	              }
	            }
	            return rst;
	          }

	          function getfromAttrs(toAttrs) {
	            var rst = {};
	            for (var k in toAttrs) {
	              rst[k] = self.attr(k);
	            }
	            return rst;
	          }
	        }
	      };

	      /***/
	    },
	    /* 235 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(236);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeLinear", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_linear__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(237);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuad", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(238);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubic", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(239);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePoly", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(240);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSin", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(241);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExp", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(242);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircle", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(243);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounce", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(244);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBack", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(245);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElastic", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["b"];
	      });

	      /***/
	    },
	    /* 236 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = linear;
	      function linear(t) {
	        return +t;
	      }

	      /***/
	    },
	    /* 237 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = quadIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = quadOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = quadInOut;
	      function quadIn(t) {
	        return t * t;
	      }

	      function quadOut(t) {
	        return t * (2 - t);
	      }

	      function quadInOut(t) {
	        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	      }

	      /***/
	    },
	    /* 238 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = cubicIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = cubicOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = cubicInOut;
	      function cubicIn(t) {
	        return t * t * t;
	      }

	      function cubicOut(t) {
	        return --t * t * t + 1;
	      }

	      function cubicInOut(t) {
	        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	      }

	      /***/
	    },
	    /* 239 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return polyIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return polyOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return polyInOut;
	      });
	      var exponent = 3;

	      var polyIn = function custom(e) {
	        e = +e;

	        function polyIn(t) {
	          return Math.pow(t, e);
	        }

	        polyIn.exponent = custom;

	        return polyIn;
	      }(exponent);

	      var polyOut = function custom(e) {
	        e = +e;

	        function polyOut(t) {
	          return 1 - Math.pow(1 - t, e);
	        }

	        polyOut.exponent = custom;

	        return polyOut;
	      }(exponent);

	      var polyInOut = function custom(e) {
	        e = +e;

	        function polyInOut(t) {
	          return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	        }

	        polyInOut.exponent = custom;

	        return polyInOut;
	      }(exponent);

	      /***/
	    },
	    /* 240 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = sinIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = sinOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = sinInOut;
	      var pi = Math.PI,
	          halfPi = pi / 2;

	      function sinIn(t) {
	        return 1 - Math.cos(t * halfPi);
	      }

	      function sinOut(t) {
	        return Math.sin(t * halfPi);
	      }

	      function sinInOut(t) {
	        return (1 - Math.cos(pi * t)) / 2;
	      }

	      /***/
	    },
	    /* 241 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = expIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = expOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = expInOut;
	      function expIn(t) {
	        return Math.pow(2, 10 * t - 10);
	      }

	      function expOut(t) {
	        return 1 - Math.pow(2, -10 * t);
	      }

	      function expInOut(t) {
	        return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	      }

	      /***/
	    },
	    /* 242 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = circleIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = circleOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = circleInOut;
	      function circleIn(t) {
	        return 1 - Math.sqrt(1 - t * t);
	      }

	      function circleOut(t) {
	        return Math.sqrt(1 - --t * t);
	      }

	      function circleInOut(t) {
	        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	      }

	      /***/
	    },
	    /* 243 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = bounceIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = bounceOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = bounceInOut;
	      var b1 = 4 / 11,
	          b2 = 6 / 11,
	          b3 = 8 / 11,
	          b4 = 3 / 4,
	          b5 = 9 / 11,
	          b6 = 10 / 11,
	          b7 = 15 / 16,
	          b8 = 21 / 22,
	          b9 = 63 / 64,
	          b0 = 1 / b1 / b1;

	      function bounceIn(t) {
	        return 1 - bounceOut(1 - t);
	      }

	      function bounceOut(t) {
	        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	      }

	      function bounceInOut(t) {
	        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	      }

	      /***/
	    },
	    /* 244 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return backIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return backOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return backInOut;
	      });
	      var overshoot = 1.70158;

	      var backIn = function custom(s) {
	        s = +s;

	        function backIn(t) {
	          return t * t * ((s + 1) * t - s);
	        }

	        backIn.overshoot = custom;

	        return backIn;
	      }(overshoot);

	      var backOut = function custom(s) {
	        s = +s;

	        function backOut(t) {
	          return --t * t * ((s + 1) * t + s) + 1;
	        }

	        backOut.overshoot = custom;

	        return backOut;
	      }(overshoot);

	      var backInOut = function custom(s) {
	        s = +s;

	        function backInOut(t) {
	          return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	        }

	        backInOut.overshoot = custom;

	        return backInOut;
	      }(overshoot);

	      /***/
	    },
	    /* 245 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return elasticIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return elasticOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return elasticInOut;
	      });
	      var tau = 2 * Math.PI,
	          amplitude = 1,
	          period = 0.3;

	      var elasticIn = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticIn(t) {
	          return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	        }

	        elasticIn.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticIn.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticIn;
	      }(amplitude, period);

	      var elasticOut = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticOut(t) {
	          return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	        }

	        elasticOut.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticOut.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticOut;
	      }(amplitude, period);

	      var elasticInOut = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticInOut(t) {
	          return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	        }

	        elasticInOut.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticInOut.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticInOut;
	      }(amplitude, period);

	      /***/
	    },
	    /* 246 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(47);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "now", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timer", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timerFlush", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["d"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(247);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timeout", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(248);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interval", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_interval__["a"];
	      });

	      /***/
	    },
	    /* 247 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

	      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
	        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */]();
	        delay = delay == null ? 0 : +delay;
	        t.restart(function (elapsed) {
	          t.stop();
	          callback(elapsed + delay);
	        }, delay, time);
	        return t;
	      };

	      /***/
	    },
	    /* 248 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

	      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
	        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */](),
	            total = delay;
	        if (delay == null) return t.restart(callback, delay, time), t;
	        delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
	        t.restart(function tick(elapsed) {
	          elapsed += total;
	          t.restart(tick, total += delay, time);
	          callback(elapsed);
	        }, delay, time);
	        return t;
	      };

	      /***/
	    },
	    /* 249 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(48);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolate", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_value__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(94);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateArray", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_array__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(51);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasis", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_basis__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(92);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasisClosed", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(95);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateDate", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_date__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(30);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateNumber", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(96);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateObject", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_object__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(252);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRound", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_round__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(97);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateString", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(253);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformCss", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformSvg", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(256);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateZoom", function () {
	        return __WEBPACK_IMPORTED_MODULE_10__src_zoom__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(91);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgb", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasis", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasisClosed", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["c"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(257);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHsl", function () {
	        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHslLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(258);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateLab", function () {
	        return __WEBPACK_IMPORTED_MODULE_13__src_lab__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(259);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHcl", function () {
	        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHclLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(260);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelix", function () {
	        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelixLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(261);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "quantize", function () {
	        return __WEBPACK_IMPORTED_MODULE_16__src_quantize__["a"];
	      });

	      /***/
	    },
	    /* 250 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = lab;
	      /* unused harmony export Lab */
	      /* harmony export (immutable) */__webpack_exports__["b"] = hcl;
	      /* unused harmony export Hcl */
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(90);

	      var Kn = 18,
	          Xn = 0.950470,

	      // D65 standard referent
	      Yn = 1,
	          Zn = 1.088830,
	          t0 = 4 / 29,
	          t1 = 6 / 29,
	          t2 = 3 * t1 * t1,
	          t3 = t1 * t1 * t1;

	      function labConvert(o) {
	        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	        if (o instanceof Hcl) {
	          var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
	          return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	        }
	        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	        var b = rgb2xyz(o.r),
	            a = rgb2xyz(o.g),
	            l = rgb2xyz(o.b),
	            x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	            y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	            z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	      }

	      function lab(l, a, b, opacity) {
	        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	      }

	      function Lab(l, a, b, opacity) {
	        this.l = +l;
	        this.a = +a;
	        this.b = +b;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	        },
	        darker: function darker(k) {
	          return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	        },
	        rgb: function rgb() {
	          var y = (this.l + 16) / 116,
	              x = isNaN(this.a) ? y : y + this.a / 500,
	              z = isNaN(this.b) ? y : y - this.b / 200;
	          y = Yn * lab2xyz(y);
	          x = Xn * lab2xyz(x);
	          z = Zn * lab2xyz(z);
	          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	          xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
	        }
	      }));

	      function xyz2lab(t) {
	        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	      }

	      function lab2xyz(t) {
	        return t > t1 ? t * t * t : t2 * (t - t0);
	      }

	      function xyz2rgb(x) {
	        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	      }

	      function rgb2xyz(x) {
	        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	      }

	      function hclConvert(o) {
	        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	        if (!(o instanceof Lab)) o = labConvert(o);
	        var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
	        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	      }

	      function hcl(h, c, l, opacity) {
	        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	      }

	      function Hcl(h, c, l, opacity) {
	        this.h = +h;
	        this.c = +c;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	        },
	        darker: function darker(k) {
	          return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	        },
	        rgb: function rgb() {
	          return labConvert(this).rgb();
	        }
	      }));

	      /***/
	    },
	    /* 251 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = cubehelix;
	      /* unused harmony export Cubehelix */
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(90);

	      var A = -0.14861,
	          B = +1.78277,
	          C = -0.29227,
	          D = -0.90649,
	          E = +1.97294,
	          ED = E * D,
	          EB = E * B,
	          BC_DA = B * C - D * A;

	      function cubehelixConvert(o) {
	        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	        var r = o.r / 255,
	            g = o.g / 255,
	            b = o.b / 255,
	            l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	            bl = b - l,
	            k = (E * (g - l) - C * bl) / D,
	            s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),

	        // NaN if l=0 or l=1
	        h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
	        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	      }

	      function cubehelix(h, s, l, opacity) {
	        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	      }

	      function Cubehelix(h, s, l, opacity) {
	        this.h = +h;
	        this.s = +s;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
	          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
	          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	        },
	        rgb: function rgb() {
	          var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
	              l = +this.l,
	              a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	              cosh = Math.cos(h),
	              sinh = Math.sin(h);
	          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
	        }
	      }));

	      /***/
	    },
	    /* 252 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        return a = +a, b -= a, function (t) {
	          return Math.round(a + b * t);
	        };
	      };

	      /***/
	    },
	    /* 253 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return interpolateTransformCss;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return interpolateTransformSvg;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(30);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(254);

	      function interpolateTransform(parse, pxComma, pxParen, degParen) {

	        function pop(s) {
	          return s.length ? s.pop() + " " : "";
	        }

	        function translate(xa, ya, xb, yb, s, q) {
	          if (xa !== xb || ya !== yb) {
	            var i = s.push("translate(", null, pxComma, null, pxParen);
	            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	          } else if (xb || yb) {
	            s.push("translate(" + xb + pxComma + yb + pxParen);
	          }
	        }

	        function rotate(a, b, s, q) {
	          if (a !== b) {
	            if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
	            q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	          } else if (b) {
	            s.push(pop(s) + "rotate(" + b + degParen);
	          }
	        }

	        function skewX(a, b, s, q) {
	          if (a !== b) {
	            q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	          } else if (b) {
	            s.push(pop(s) + "skewX(" + b + degParen);
	          }
	        }

	        function scale(xa, ya, xb, yb, s, q) {
	          if (xa !== xb || ya !== yb) {
	            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	          } else if (xb !== 1 || yb !== 1) {
	            s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	          }
	        }

	        return function (a, b) {
	          var s = [],

	          // string constants and placeholders
	          q = []; // number interpolators
	          a = parse(a), b = parse(b);
	          translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	          rotate(a.rotate, b.rotate, s, q);
	          skewX(a.skewX, b.skewX, s, q);
	          scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	          a = b = null; // gc
	          return function (t) {
	            var i = -1,
	                n = q.length,
	                o;
	            while (++i < n) {
	              s[(o = q[i]).i] = o.x(t);
	            }return s.join("");
	          };
	        };
	      }

	      var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
	      var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");

	      /***/
	    },
	    /* 254 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = parseCss;
	      /* harmony export (immutable) */__webpack_exports__["b"] = parseSvg;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(255);

	      var cssNode, cssRoot, cssView, svgNode;

	      function parseCss(value) {
	        if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	        cssNode.style.transform = value;
	        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	        cssRoot.removeChild(cssNode);
	        value = value.slice(7, -1).split(",");
	        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	      }

	      function parseSvg(value) {
	        if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	        svgNode.setAttribute("transform", value);
	        if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        value = value.matrix;
	        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
	      }

	      /***/
	    },
	    /* 255 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return identity;
	      });
	      var degrees = 180 / Math.PI;

	      var identity = {
	        translateX: 0,
	        translateY: 0,
	        rotate: 0,
	        skewX: 0,
	        scaleX: 1,
	        scaleY: 1
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b, c, d, e, f) {
	        var scaleX, scaleY, skewX;
	        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	        return {
	          translateX: e,
	          translateY: f,
	          rotate: Math.atan2(b, a) * degrees,
	          skewX: Math.atan(skewX) * degrees,
	          scaleX: scaleX,
	          scaleY: scaleY
	        };
	      };

	      /***/
	    },
	    /* 256 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      var rho = Math.SQRT2,
	          rho2 = 2,
	          rho4 = 4,
	          epsilon2 = 1e-12;

	      function cosh(x) {
	        return ((x = Math.exp(x)) + 1 / x) / 2;
	      }

	      function sinh(x) {
	        return ((x = Math.exp(x)) - 1 / x) / 2;
	      }

	      function tanh(x) {
	        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	      }

	      // p0 = [ux0, uy0, w0]
	      // p1 = [ux1, uy1, w1]
	      /* harmony default export */__webpack_exports__["a"] = function (p0, p1) {
	        var ux0 = p0[0],
	            uy0 = p0[1],
	            w0 = p0[2],
	            ux1 = p1[0],
	            uy1 = p1[1],
	            w1 = p1[2],
	            dx = ux1 - ux0,
	            dy = uy1 - uy0,
	            d2 = dx * dx + dy * dy,
	            i,
	            S;

	        // Special case for u0 ≅ u1.
	        if (d2 < epsilon2) {
	          S = Math.log(w1 / w0) / rho;
	          i = function i(t) {
	            return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
	          };
	        }

	        // General case.
	        else {
	            var d1 = Math.sqrt(d2),
	                b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	                b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	                r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	                r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	            S = (r1 - r0) / rho;
	            i = function i(t) {
	              var s = t * S,
	                  coshr0 = cosh(r0),
	                  u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	              return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
	            };
	          }

	        i.duration = S * 1000;

	        return i;
	      };

	      /***/
	    },
	    /* 257 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return hslLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function hsl(hue) {
	        return function (start, end) {
	          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
	              s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.h = h(t);
	            start.s = s(t);
	            start.l = l(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 258 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = lab;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function lab(start, end) {
	        var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
	            a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
	            b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
	            opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	        return function (t) {
	          start.l = l(t);
	          start.a = a(t);
	          start.b = b(t);
	          start.opacity = opacity(t);
	          return start + "";
	        };
	      }

	      /***/
	    },
	    /* 259 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return hclLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function hcl(hue) {
	        return function (start, end) {
	          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
	              c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
	              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.h = h(t);
	            start.c = c(t);
	            start.l = l(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 260 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return cubehelixLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function cubehelix(hue) {
	        return function cubehelixGamma(y) {
	          y = +y;

	          function cubehelix(start, end) {
	            var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
	                s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	                l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	                opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	            return function (t) {
	              start.h = h(t);
	              start.s = s(t);
	              start.l = l(Math.pow(t, y));
	              start.opacity = opacity(t);
	              return start + "";
	            };
	          }

	          cubehelix.gamma = cubehelixGamma;

	          return cubehelix;
	        }(1);
	      }

	      /* harmony default export */__webpack_exports__["b"] = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 261 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (interpolator, n) {
	        var samples = new Array(n);
	        for (var i = 0; i < n; ++i) {
	          samples[i] = interpolator(i / (n - 1));
	        }return samples;
	      };

	      /***/
	    },
	    /* 262 */
	    /***/function (module, exports, __webpack_require__) {

	      var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /*!
	       * EventEmitter v5.1.0 - git.io/ee
	       * Unlicense - http://unlicense.org/
	       * Oliver Caldwell - http://oli.me.uk/
	       * @preserve
	       */

	      ;(function (exports) {
	        'use strict';

	        /**
	         * Class for managing events.
	         * Can be extended to provide event functionality in other classes.
	         *
	         * @class EventEmitter Manages event registering and emitting.
	         */

	        function EventEmitter() {}

	        // Shortcuts to improve speed and size
	        var proto = EventEmitter.prototype;
	        var originalGlobalValue = exports.EventEmitter;

	        /**
	         * Finds the index of the listener for the event in its storage array.
	         *
	         * @param {Function[]} listeners Array of listeners to search through.
	         * @param {Function} listener Method to look for.
	         * @return {Number} Index of the specified listener, -1 if not found
	         * @api private
	         */
	        function indexOfListener(listeners, listener) {
	          var i = listeners.length;
	          while (i--) {
	            if (listeners[i].listener === listener) {
	              return i;
	            }
	          }

	          return -1;
	        }

	        /**
	         * Alias a method while keeping the context correct, to allow for overwriting of target method.
	         *
	         * @param {String} name The name of the target method.
	         * @return {Function} The aliased method
	         * @api private
	         */
	        function alias(name) {
	          return function aliasClosure() {
	            return this[name].apply(this, arguments);
	          };
	        }

	        /**
	         * Returns the listener array for the specified event.
	         * Will initialise the event object and listener arrays if required.
	         * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	         * Each property in the object response is an array of listener functions.
	         *
	         * @param {String|RegExp} evt Name of the event to return the listeners from.
	         * @return {Function[]|Object} All listener functions for the event.
	         */
	        proto.getListeners = function getListeners(evt) {
	          var events = this._getEvents();
	          var response;
	          var key;

	          // Return a concatenated array of all matching events if
	          // the selector is a regular expression.
	          if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	              if (events.hasOwnProperty(key) && evt.test(key)) {
	                response[key] = events[key];
	              }
	            }
	          } else {
	            response = events[evt] || (events[evt] = []);
	          }

	          return response;
	        };

	        /**
	         * Takes a list of listener objects and flattens it into a list of listener functions.
	         *
	         * @param {Object[]} listeners Raw listener objects.
	         * @return {Function[]} Just the listener functions.
	         */
	        proto.flattenListeners = function flattenListeners(listeners) {
	          var flatListeners = [];
	          var i;

	          for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	          }

	          return flatListeners;
	        };

	        /**
	         * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	         *
	         * @param {String|RegExp} evt Name of the event to return the listeners from.
	         * @return {Object} All listener functions for an event in an object.
	         */
	        proto.getListenersAsObject = function getListenersAsObject(evt) {
	          var listeners = this.getListeners(evt);
	          var response;

	          if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	          }

	          return response || listeners;
	        };

	        function isValidListener(listener) {
	          if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true;
	          } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
	            return isValidListener(listener.listener);
	          } else {
	            return false;
	          }
	        }

	        /**
	         * Adds a listener function to the specified event.
	         * The listener will not be added if it is a duplicate.
	         * If the listener returns true then it will be removed after it is called.
	         * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to attach the listener to.
	         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addListener = function addListener(evt, listener) {
	          if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	          }

	          var listeners = this.getListenersAsObject(evt);
	          var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
	          var key;

	          for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	              listeners[key].push(listenerIsWrapped ? listener : {
	                listener: listener,
	                once: false
	              });
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of addListener
	         */
	        proto.on = alias('addListener');

	        /**
	         * Semi-alias of addListener. It will add a listener that will be
	         * automatically removed after its first execution.
	         *
	         * @param {String|RegExp} evt Name of the event to attach the listener to.
	         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addOnceListener = function addOnceListener(evt, listener) {
	          return this.addListener(evt, {
	            listener: listener,
	            once: true
	          });
	        };

	        /**
	         * Alias of addOnceListener.
	         */
	        proto.once = alias('addOnceListener');

	        /**
	         * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	         * You need to tell it what event names should be matched by a regex.
	         *
	         * @param {String} evt Name of the event to create.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.defineEvent = function defineEvent(evt) {
	          this.getListeners(evt);
	          return this;
	        };

	        /**
	         * Uses defineEvent to define multiple events.
	         *
	         * @param {String[]} evts An array of event names to define.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.defineEvents = function defineEvents(evts) {
	          for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	          }
	          return this;
	        };

	        /**
	         * Removes a listener function from the specified event.
	         * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to remove the listener from.
	         * @param {Function} listener Method to remove from the event.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeListener = function removeListener(evt, listener) {
	          var listeners = this.getListenersAsObject(evt);
	          var index;
	          var key;

	          for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	              index = indexOfListener(listeners[key], listener);

	              if (index !== -1) {
	                listeners[key].splice(index, 1);
	              }
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of removeListener
	         */
	        proto.off = alias('removeListener');

	        /**
	         * Adds listeners in bulk using the manipulateListeners method.
	         * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	         * You can also pass it a regular expression to add the array of listeners to all events that match it.
	         * Yeah, this function does quite a bit. That's probably a bad thing.
	         *
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to add.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addListeners = function addListeners(evt, listeners) {
	          // Pass through to manipulateListeners
	          return this.manipulateListeners(false, evt, listeners);
	        };

	        /**
	         * Removes listeners in bulk using the manipulateListeners method.
	         * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	         * You can also pass it an event name and an array of listeners to be removed.
	         * You can also pass it a regular expression to remove the listeners from all events that match it.
	         *
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to remove.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeListeners = function removeListeners(evt, listeners) {
	          // Pass through to manipulateListeners
	          return this.manipulateListeners(true, evt, listeners);
	        };

	        /**
	         * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	         * The first argument will determine if the listeners are removed (true) or added (false).
	         * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	         * You can also pass it an event name and an array of listeners to be added/removed.
	         * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	         *
	         * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	          var i;
	          var value;
	          var single = remove ? this.removeListener : this.addListener;
	          var multiple = remove ? this.removeListeners : this.addListeners;

	          // If evt is an object then pass each of its properties to this method
	          if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	              if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                // Pass the single listener straight through to the singular method
	                if (typeof value === 'function') {
	                  single.call(this, i, value);
	                } else {
	                  // Otherwise pass back to the multiple function
	                  multiple.call(this, i, value);
	                }
	              }
	            }
	          } else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	              single.call(this, evt, listeners[i]);
	            }
	          }

	          return this;
	        };

	        /**
	         * Removes all listeners from a specified event.
	         * If you do not specify an event then all listeners will be removed.
	         * That means every event will be emptied.
	         * You can also pass a regex to remove all events that match it.
	         *
	         * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeEvent = function removeEvent(evt) {
	          var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
	          var events = this._getEvents();
	          var key;

	          // Remove different things depending on the state of evt
	          if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	          } else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	              if (events.hasOwnProperty(key) && evt.test(key)) {
	                delete events[key];
	              }
	            }
	          } else {
	            // Remove all listeners in all events
	            delete this._events;
	          }

	          return this;
	        };

	        /**
	         * Alias of removeEvent.
	         *
	         * Added to mirror the node API.
	         */
	        proto.removeAllListeners = alias('removeEvent');

	        /**
	         * Emits an event of your choice.
	         * When emitted, every listener attached to that event will be executed.
	         * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	         * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	         * So they will not arrive within the array on the other side, they will be separate.
	         * You can also pass a regular expression to emit to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	         * @param {Array} [args] Optional array of arguments to be passed to each listener.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.emitEvent = function emitEvent(evt, args) {
	          var listenersMap = this.getListenersAsObject(evt);
	          var listeners;
	          var listener;
	          var i;
	          var key;
	          var response;

	          for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	              listeners = listenersMap[key].slice(0);

	              for (i = 0; i < listeners.length; i++) {
	                // If the listener returns true then it shall be removed from the event
	                // The function is executed either with a basic call or an apply if there is an args array
	                listener = listeners[i];

	                if (listener.once === true) {
	                  this.removeListener(evt, listener.listener);
	                }

	                response = listener.listener.apply(this, args || []);

	                if (response === this._getOnceReturnValue()) {
	                  this.removeListener(evt, listener.listener);
	                }
	              }
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of emitEvent
	         */
	        proto.trigger = alias('emitEvent');

	        /**
	         * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	         * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	         * @param {...*} Optional additional arguments to be passed to each listener.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.emit = function emit(evt) {
	          var args = Array.prototype.slice.call(arguments, 1);
	          return this.emitEvent(evt, args);
	        };

	        /**
	         * Sets the current value to check against when executing listeners. If a
	         * listeners return value matches the one set here then it will be removed
	         * after execution. This value defaults to true.
	         *
	         * @param {*} value The new value to check for when executing listeners.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.setOnceReturnValue = function setOnceReturnValue(value) {
	          this._onceReturnValue = value;
	          return this;
	        };

	        /**
	         * Fetches the current value to check against when executing listeners. If
	         * the listeners return value matches this one then it should be removed
	         * automatically. It will return true by default.
	         *
	         * @return {*|Boolean} The current value to check for or the default, true.
	         * @api private
	         */
	        proto._getOnceReturnValue = function _getOnceReturnValue() {
	          if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	          } else {
	            return true;
	          }
	        };

	        /**
	         * Fetches the events object and creates one if required.
	         *
	         * @return {Object} The events storage object.
	         * @api private
	         */
	        proto._getEvents = function _getEvents() {
	          return this._events || (this._events = {});
	        };

	        /**
	         * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	         *
	         * @return {Function} Non conflicting EventEmitter class.
	         */
	        EventEmitter.noConflict = function noConflict() {
	          exports.EventEmitter = originalGlobalValue;
	          return EventEmitter;
	        };

	        // Expose the class either via AMD, CommonJS or the global object
	        if (true) {
	          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return EventEmitter;
	          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	          module.exports = EventEmitter;
	        } else {
	          exports.EventEmitter = EventEmitter;
	        }
	      })(this || {});

	      /***/
	    },
	    /* 263 */
	    /***/function (module, exports, __webpack_require__) {

	      var Shape = __webpack_require__(1);
	      Shape.Rect = __webpack_require__(55);
	      Shape.Rect = __webpack_require__(55);
	      Shape.Circle = __webpack_require__(99);
	      Shape.Ellipse = __webpack_require__(100);
	      Shape.Path = __webpack_require__(101);
	      Shape.Text = __webpack_require__(103);
	      Shape.Line = __webpack_require__(104);
	      Shape.Image = __webpack_require__(105);
	      Shape.Polygon = __webpack_require__(106);
	      Shape.Polyline = __webpack_require__(107);
	      Shape.Arc = __webpack_require__(108);
	      Shape.Fan = __webpack_require__(109);
	      Shape.Cubic = __webpack_require__(110);
	      Shape.Quadratic = __webpack_require__(111);
	      Shape.Marker = __webpack_require__(112);

	      module.exports = Shape;

	      /***/
	    },
	    /* 264 */
	    /***/function (module, exports) {

	      module.exports = {
	        xAt: function xAt(psi, rx, ry, cx, t) {
	          return rx * Math.cos(psi) * Math.cos(t) - ry * Math.sin(psi) * Math.sin(t) + cx;
	        },
	        yAt: function yAt(psi, rx, ry, cy, t) {
	          return rx * Math.sin(psi) * Math.cos(t) + ry * Math.cos(psi) * Math.sin(t) + cy;
	        },
	        xExtrema: function xExtrema(psi, rx, ry) {
	          return Math.atan(-ry / rx * Math.tan(psi));
	        },
	        yExtrema: function yExtrema(psi, rx, ry) {
	          return Math.atan(ry / (rx * Math.tan(psi)));
	        }
	      };

	      /***/
	    }]
	    /******/)
	  );
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 全局变量
	 * @author dxq613
	 */
	var Util = __webpack_require__(0);
	var Theme = __webpack_require__(277);

	// const Global = {};
	var Global = {
	  version: '3.1.2', // TODO fix version
	  trackable: true,
	  animate: true,
	  snapArray: [0, 1, 2, 4, 5, 10],
	  // 指定固定 tick 数的逼近值
	  snapCountArray: [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10],
	  widthRatio: { // 宽度所占的分类的比例
	    column: 1 / 2, // 一般的柱状图占比 1/2
	    rose: 0.9999999, // 玫瑰图柱状占比 1
	    multiplePie: 1 / 1.3 // 多层的饼图、环图
	  },
	  // 折线图、区域图、path 当只有一个数据时，是否显示成点
	  showSinglePoint: false,
	  connectNulls: false,
	  scales: {}
	};

	function setTheme(theme) {
	  // for (const k in Global) {
	  //   if (Global.hasOwnProperty(k)) {
	  //     delete Global[k];
	  //   }
	  // }

	  var newTheme = {};
	  if (Util.isObject(theme)) {
	    newTheme = theme;
	  } else if (Util.indexOf(Object.keys(Theme), theme) !== -1) {
	    newTheme = Theme[theme];
	  } else {
	    newTheme = Theme.default;
	  }
	  Util.deepMix(Global, newTheme);
	}

	setTheme('default');

	Global.setTheme = setTheme;

	module.exports = Global;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var freeGlobal = __webpack_require__(66);

	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	module.exports = isObjectLike;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    getRawTag = __webpack_require__(133),
	    objectToString = __webpack_require__(134);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	    if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	    }
	    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}

	module.exports = baseGetTag;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(131),
	    getValue = __webpack_require__(137);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var KEYWORDS = ['min', 'max', 'median'];

	function getFirstScale(scales) {
	  var firstScale = void 0;
	  Util.each(scales, function (scale) {
	    if (scale) {
	      firstScale = scale;
	      return false;
	    }
	  });
	  return firstScale;
	}

	var Base = function () {
	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 1,
	      xScales: null,
	      yScales: null,
	      el: null
	    };
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var defaultCfg = this.getDefaultCfg();
	    cfg = Util.deepMix({}, defaultCfg, cfg);
	    Util.mix(this, cfg);
	  }

	  /**
	   * 将原始数值归一化
	   * @param  {string | number} val   原始值
	   * @param  {Scale} scale 度量对象
	   * @return {Number}       返回归一化后的数值
	   */


	  Base.prototype._getNormalizedValue = function _getNormalizedValue(val, scale) {
	    var result = void 0;
	    if (Util.indexOf(KEYWORDS, val) !== -1) {
	      // 分类则对应索引值
	      var scaleValue = void 0;
	      if (val === 'median') {
	        scaleValue = scale.isCategory ? (scale.values.length - 1) / 2 : (scale.min + scale.max) / 2;
	        result = scale.scale(scaleValue);
	      } else {
	        if (scale.isCategory) {
	          scaleValue = val === 'min' ? 0 : scale.values.length - 1;
	        } else {
	          scaleValue = scale[val];
	        }
	        result = scale.scale(scaleValue);
	      }
	    } else {
	      result = scale.scale(val);
	    }

	    return result;
	  };

	  /**
	   * 将原始数值转换成坐标系上的点
	   * @protected
	   * @param  {Coord} coord  坐标系
	   * @param  {Object | Array | Function} position 位置点
	   * @return {Object} 转换成坐标系上的点
	   */


	  Base.prototype.parsePoint = function parsePoint(coord, position) {
	    var self = this;
	    var xScales = self.xScales;
	    var yScales = self.yScales;
	    if (Util.isFunction(position)) {
	      position = position(xScales, yScales); // position 必须是对象
	    }

	    var x = void 0;
	    var y = void 0;

	    // 如果数据格式是 ['50%', '50%'] 的格式
	    if (Util.isArray(position) && Util.isString(position[0]) && position[0].indexOf('%') !== -1) {
	      return this.parsePercentPoint(coord, position);
	    }

	    if (Util.isArray(position)) {
	      // 数组  [2, 1]
	      x = self._getNormalizedValue(position[0], getFirstScale(xScales));
	      y = self._getNormalizedValue(position[1], getFirstScale(yScales));
	    } else {
	      for (var field in position) {
	        var value = position[field];
	        if (xScales[field]) {
	          x = self._getNormalizedValue(value, xScales[field]);
	        }

	        if (yScales[field]) {
	          y = self._getNormalizedValue(value, yScales[field]);
	        }
	      }
	    }

	    if (!Util.isNil(x) && !Util.isNil(y)) {
	      return coord.convert({
	        x: x,
	        y: y
	      });
	    }
	  };
	  // 如果传入的值是百分比的格式，根据坐标系的起始点和宽高计算


	  Base.prototype.parsePercentPoint = function parsePercentPoint(coord, position) {
	    var xPercent = parseFloat(position[0]) / 100;
	    var yPercent = parseFloat(position[1]) / 100;
	    var start = coord.start;
	    var end = coord.end;
	    var topLeft = {
	      x: Math.min(start.x, end.x),
	      y: Math.min(start.y, end.y)
	    };
	    var x = coord.width * xPercent + topLeft.x;
	    var y = coord.height * yPercent + topLeft.y;
	    return {
	      x: x,
	      y: y
	    };
	  };

	  /**
	   * 设置显示、隐藏
	   * @param {Boolean} visible 是否可见
	   */


	  Base.prototype.setVisible = function setVisible(visible) {
	    var el = this.el;
	    if (el) {
	      if (el.set) {
	        el.set('visible', visible);
	      } else {
	        el.style.display = visible ? '' : 'none';
	      }
	    }
	  };

	  /**
	   * 渲染辅助元素
	   * @override
	   */


	  Base.prototype.render = function render() {};

	  /**
	   * 清理图形、元素
	   */


	  Base.prototype.remove = function remove() {
	    var self = this;
	    var el = self.el;
	    if (el) {
	      el.remove();
	    }
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 工厂类，管理各种类型的 shape
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var PathUtil = __webpack_require__(22);
	var GPath = __webpack_require__(1).PathUtil;
	var Shape = {};

	var ShapeBase = {
	  _coord: null,
	  /**
	   * 绘制图形
	   * @param {Object} cfg 配置项
	   * @param {Object} container 容器
	   * @return {Object} shape 创建的 shape
	   */
	  draw: function draw(cfg, container) {
	    if (this.drawShape) {
	      return this.drawShape(cfg, container);
	    }
	    return null;
	  },

	  /**
	   * 获取绘制图形需要的点, 可以不定义，则使用默认的
	  getPoints(cfg) {
	    if (this.getShapePoints) {
	      return this.getShapePoints(cfg);
	    }
	    return null;
	  },*/
	  /**
	   * 设置坐标系
	   * @param {Coord} coord 坐标系
	   */
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },

	  /**
	   * 0～1 path 转 画布 path
	   * @param  {path} path 路径
	   * @param  {Boolean} islineToArc 是否转换成圆弧
	   * @return {path} path 转换到画布坐标的path
	   */
	  parsePath: function parsePath(path, islineToArc) {
	    var coord = this._coord;
	    path = GPath.parsePathString(path);
	    if (coord.isPolar && islineToArc !== false) {
	      path = PathUtil.convertPolarPath(coord, path);
	    } else {
	      path = PathUtil.convertNormalPath(coord, path);
	    }
	    return path;
	  },

	  /**
	   * 0～1 point 转 画布 point
	   * @param  {point} point 节点
	   * @return {point} point 转换后的点
	   */
	  parsePoint: function parsePoint(point) {
	    var coord = this._coord;
	    return coord.convertPoint(point);
	  },

	  /**
	   * 0～1 points 转 画布 points
	   * @param  {points} points 节点集合
	   * @return {points} points 转换后的多个节点
	   */
	  parsePoints: function parsePoints(points) {
	    var coord = this._coord;
	    var rst = [];
	    Util.each(points, function (point) {
	      rst.push(coord.convertPoint(point));
	    });
	    return rst;
	  }
	};

	var ShapeFactoryBase = {
	  defaultShapeType: null,
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },
	  getShape: function getShape(type) {
	    var self = this;
	    if (Util.isArray(type)) {
	      type = type[0];
	    }
	    var shape = self[type] || self[self.defaultShapeType];
	    shape._coord = self._coord;
	    return shape;
	  },
	  getShapePoints: function getShapePoints(type, cfg) {
	    var shape = this.getShape(type);
	    var fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;
	    var points = fn(cfg);
	    return points;
	  },
	  getDefaultPoints: function getDefaultPoints() /* cfg */{
	    return [];
	  },
	  getMarkerCfg: function getMarkerCfg(type, cfg) {
	    var shape = this.getShape(type);
	    if (!shape.getMarkerCfg) {
	      var defaultShapeType = this.defaultShapeType;
	      shape = this.getShape(defaultShapeType);
	    }
	    return shape.getMarkerCfg(cfg);
	  },
	  getSelectedCfg: function getSelectedCfg() /* type, cfg */{
	    return {};
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = shape.draw(cfg, container);
	    if (gShape) {
	      gShape.setSilent('origin', cfg.origin);
	      gShape._id = cfg.yIndex ? cfg._id + cfg.yIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  }
	};

	// 注册 Geometry 获取图形的入口
	Shape.registerFactory = function (factoryName, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var geomObj = Util.assign({}, ShapeFactoryBase, cfg);
	  Shape[className] = geomObj;
	  geomObj.name = factoryName;
	  return geomObj;
	};

	// 注册图形
	Shape.registerShape = function (factoryName, shapeType, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var factory = Shape[className];
	  var shapeObj = Util.assign({}, ShapeBase, cfg);
	  factory[shapeType] = shapeObj;
	  return shapeObj;
	};

	// 获得Geom 对应的 shapeFactory
	Shape.getShapeFactory = function (factoryName) {
	  var self = this;
	  factoryName = factoryName || 'point';
	  var className = Util.upperFirst(factoryName);
	  return self[className];
	};

	module.exports = Shape;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Built-in value references. */
	var _Symbol = root.Symbol;

	module.exports = _Symbol;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(65),
	    isLength = __webpack_require__(48);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var baseMatches = __webpack_require__(186),
	    baseMatchesProperty = __webpack_require__(196),
	    identity = __webpack_require__(57),
	    isArray = __webpack_require__(3),
	    property = __webpack_require__(204);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
	    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(201);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the Attribute base class
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);

	function toScaleString(scale, value) {
	  if (Util.isString(value)) {
	    return value;
	  }
	  return scale.invert(scale.scale(value));
	}
	/**
	 * 所有视觉通道属性的基类
	 * @class Attr
	 */

	var AttributeBase = function () {
	  function AttributeBase(cfg) {
	    _classCallCheck(this, AttributeBase);

	    /**
	     * 属性的类型
	     * @type {String}
	     */
	    this.type = 'base';

	    /**
	     * 属性的名称
	     * @type {String}
	     */
	    this.name = null;

	    /**
	     * 回调函数
	     * @type {Function}
	     */
	    this.method = null;

	    /**
	     * 备选的值数组
	     * @type {Array}
	     */
	    this.values = [];

	    /**
	     * 属性内部的度量
	     * @type {Array}
	     */
	    this.scales = [];

	    /**
	     * 是否通过线性取值, 如果未指定，则根据数值的类型判定
	     * @type {Boolean}
	     */
	    this.linear = null;

	    Util.mix(this, cfg);
	  }

	  AttributeBase.prototype.get = function get(name) {
	    return this[name];
	  };

	  AttributeBase.prototype.set = function set(name, value) {
	    this[name] = value;
	  };

	  // 获取属性值，将值映射到视觉通道


	  AttributeBase.prototype._getAttrValue = function _getAttrValue(scale, value) {
	    var values = this.values;
	    if (scale.isCategory && !this.linear) {
	      var index = scale.translate(value);
	      return values[index % values.length];
	    }
	    var percent = scale.scale(value);
	    return this.getLinearValue(percent);
	  };

	  /**
	   * 如果进行线性映射，返回对应的映射值
	   * @protected
	   * @param  {Number} percent 百分比
	   * @return {*}  颜色值、形状、大小等
	   */


	  AttributeBase.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var steps = values.length - 1;
	    var step = Math.floor(steps * percent);
	    var leftPercent = steps * percent - step;
	    var start = values[step];
	    var end = step === steps ? start : values[step + 1];
	    var rstValue = start + (end - start) * leftPercent;
	    return rstValue;
	  };

	  /**
	   * 默认的回调函数
	   * @param {*} value 回调函数的值
	   * @type {Function}
	   * @return {Array} 返回映射后的值
	   */


	  AttributeBase.prototype.callback = function callback(value) {
	    var self = this;
	    var scale = self.scales[0];
	    var rstValue = null;
	    if (scale.type === 'identity') {
	      rstValue = scale.value;
	    } else {
	      rstValue = self._getAttrValue(scale, value);
	    }
	    return rstValue;
	  };

	  /**
	   * 根据度量获取属性名
	   * @return {Array} dims of this Attribute
	   */


	  AttributeBase.prototype.getNames = function getNames() {
	    var scales = this.scales;
	    var names = this.names;
	    var length = Math.min(scales.length, names.length);
	    var rst = [];
	    for (var i = 0; i < length; i++) {
	      rst.push(names[i]);
	    }
	    return rst;
	  };

	  /**
	   * 根据度量获取维度名
	   * @return {Array} dims of this Attribute
	   */


	  AttributeBase.prototype.getFields = function getFields() {
	    var scales = this.scales;
	    var rst = [];
	    Util.each(scales, function (scale) {
	      rst.push(scale.field);
	    });
	    return rst;
	  };

	  /**
	   * 根据名称获取度量
	   * @param  {String} name the name of scale
	   * @return {Scale} scale
	   */


	  AttributeBase.prototype.getScale = function getScale(name) {
	    var scales = this.scales;
	    var names = this.names;
	    var index = names.indexOf(name);
	    return scales[index];
	  };

	  /**
	   * 映射数据
	   * @param {*} param1...paramn 多个数值
	   * @return {Array} 映射的值组成的数组
	   */


	  AttributeBase.prototype.mapping = function mapping() {
	    var scales = this.scales;
	    var callback = this.callback;

	    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	      params[_key] = arguments[_key];
	    }

	    var values = params;
	    if (callback) {
	      for (var i = 0; i < params.length; i++) {
	        params[i] = this._toOriginParam(params[i], scales[i]);
	      }
	      values = callback.apply(this, params);
	    }
	    if (!Util.isArray(values)) {
	      values = [values];
	    }
	    return values;
	  };

	  // 原始的参数


	  AttributeBase.prototype._toOriginParam = function _toOriginParam(param, scale) {
	    var rst = param;
	    if (!scale.isLinear) {
	      if (Util.isArray(param)) {
	        rst = [];
	        for (var i = 0; i < param.length; i++) {
	          rst.push(toScaleString(scale, param[i]));
	        }
	      } else {
	        rst = toScaleString(scale, param);
	      }
	    }
	    return rst;
	  };

	  return AttributeBase;
	}();

	module.exports = AttributeBase;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 所有 Geometry 的基类
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(58);
	var Attr = __webpack_require__(117);
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Adjust = __webpack_require__(279);
	var Labels = __webpack_require__(284);
	var Shape = __webpack_require__(10);
	var TooltipMixin = __webpack_require__(288);
	var ActiveMixin = __webpack_require__(289);
	var SelectMixin = __webpack_require__(290);
	var GROUP_ATTRS = ['color', 'shape', 'size'];
	var FIELD_ORIGIN = '_origin';

	function parseFields(field) {
	  if (Util.isArray(field)) {
	    return field;
	  }
	  if (Util.isString(field)) {
	    return field.split('*');
	  }
	  return [field];
	}

	// 转换成对象的数组 [{type: 'adjust'}]
	function parseAdjusts(adjusts) {
	  // 如果是字符串或者对象转换成数组
	  if (Util.isString(adjusts) || Util.isPlainObject(adjusts)) {
	    adjusts = [adjusts];
	  }
	  Util.each(adjusts, function (adjust, index) {
	    if (!Util.isObject(adjust)) {
	      adjusts[index] = { type: adjust };
	    }
	  });
	  return adjusts;
	}

	/**
	 * 几何标记
	 * @class Geom
	 */

	var GeomBase = function (_Base) {
	  _inherits(GeomBase, _Base);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  GeomBase.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 标记 _id 用于区分执行动画
	       * @type {String}
	       */
	      _id: null,
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'base',

	      /**
	       * 坐标系
	       * @type {Object}
	       */
	      coord: null,

	      /**
	       * 属性映射集
	       * @protected
	       * @type {Object}
	       */
	      attrs: {},

	      /**
	       * 所属的View
	       * @type {View}
	       */
	      view: null,

	      /**
	       * 几何标记显示的数据
	       * @type {Array}
	       */
	      data: [],

	      /**
	       * 相关的度量
	       * @type {Object}
	       */
	      scales: {},

	      /**
	       * 绘图容器
	       * @type {Object}
	       */
	      container: null,

	      /**
	       * 文本容器
	       * @type {Object}
	       */
	      labelContainer: null,

	      /**
	       * 图形容器
	       * @type {Object}
	       */
	      shapeContainer: null,

	      /**
	       * 几何标记的一些配置项，用于延迟生成图表
	       * @type {Object}
	       */
	      attrOptions: {},
	      // 样式配置项
	      styleOptions: null,
	      // 选中时的配置项
	      selectedOptions: null,
	      // active 时的配置项
	      activedOptions: null,
	      /**
	       * 某些类存在默认的adjust，不能更改 adjust
	       * @type {Boolean}
	       */
	      hasDefaultAdjust: false,
	      // 数据调整类型
	      adjusts: null,
	      /**
	       * 使用形状的类型
	       * @protected
	       * @type {String}
	       */
	      shapeType: null,
	      /**
	       * 是否生成多个点来绘制图形
	       * @protected
	       * @type {Boolean}
	       */
	      generatePoints: false,

	      /**
	       * 数据是否进行排序
	       * @type {Boolean}
	       */
	      sortable: false,

	      labelCfg: null,
	      /**
	       * 是否共享 tooltip
	       * @type {Boolean}
	       */
	      shareTooltip: true,
	      tooltipCfg: null,
	      /**
	       * 是否执行动画，默认执行
	       * @type {Boolean}
	       */
	      animate: true,
	      /**
	       * 动画配置
	       * @type {[type]}
	       */
	      animateCfg: null,
	      visible: true
	    };
	  };

	  function GeomBase(cfg) {
	    _classCallCheck(this, GeomBase);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    Util.assign(_this, TooltipMixin, ActiveMixin, SelectMixin);
	    if (_this.get('container')) {
	      _this._initContainer();
	    }
	    _this._initOptions();
	    return _this;
	  }

	  // 初始化时对配置项的格式化


	  GeomBase.prototype._initOptions = function _initOptions() {
	    var adjusts = this.get('adjusts');
	    if (adjusts) {
	      adjusts = parseAdjusts(adjusts);
	      this.set('adjusts', adjusts);
	    }
	  };

	  GeomBase.prototype._createScale = function _createScale(field, data) {
	    var scales = this.get('scales');
	    var scale = scales[field];
	    if (!scale) {
	      scale = this.get('view').createScale(field, data);
	      scales[field] = scale;
	    }
	    return scale;
	  };

	  GeomBase.prototype._setAttrOptions = function _setAttrOptions(attrName, attrCfg) {
	    var options = this.get('attrOptions');
	    options[attrName] = attrCfg;
	  };

	  GeomBase.prototype._createAttrOption = function _createAttrOption(attrName, field, cfg, defaultValues) {
	    var attrCfg = {};
	    attrCfg.field = field;
	    if (cfg) {
	      if (Util.isFunction(cfg)) {
	        attrCfg.callback = cfg;
	      } else {
	        attrCfg.values = cfg;
	      }
	    } else if (attrName !== 'color') {
	      attrCfg.values = defaultValues;
	    }
	    this._setAttrOptions(attrName, attrCfg);
	  };

	  /**
	   * 位置属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.position = function position(field) {
	    this._setAttrOptions('position', {
	      field: field
	    });
	    return this;
	  };

	  /**
	   * 颜色属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 颜色的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.color = function color(field, values) {
	    this._createAttrOption('color', field, values, Global.colors);
	    return this;
	  };

	  /**
	   * 大小属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 大小的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.size = function size(field, values) {
	    this._createAttrOption('size', field, values, Global.sizes);
	    return this;
	  };

	  /**
	   * 形状属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 大小的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.shape = function shape(field, values) {
	    var type = this.get('type');
	    var shapes = Global.shapes[type] || [];
	    this._createAttrOption('shape', field, values, shapes);
	    return this;
	  };

	  /**
	   * 透明度属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 透明度的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.opacity = function opacity(field, values) {
	    this._createAttrOption('opacity', field, values, Global.opacities);
	    return this;
	  };

	  GeomBase.prototype.style = function style(field, cfg) {
	    var styleOptions = this.get('styleOptions');
	    if (!styleOptions) {
	      styleOptions = {};
	      this.set('styleOptions', styleOptions);
	    }
	    if (Util.isObject(field)) {
	      cfg = field;
	      field = null;
	    }
	    var fields = void 0;
	    if (field) {
	      fields = parseFields(field);
	    }
	    styleOptions.fields = fields;
	    styleOptions.style = cfg;
	    return this;
	  };

	  GeomBase.prototype.label = function label(field, callback, cfg) {
	    var self = this;
	    var labelCfg = self.get('labelCfg');
	    // const scales = Util.map(self.get('labelCfg').fields, field => self._createScale(field));
	    if (!labelCfg) {
	      labelCfg = {};
	      self.set('labelCfg', labelCfg);
	    }
	    var fields = void 0;
	    if (field) {
	      fields = parseFields(field);
	    }
	    labelCfg.fields = fields;
	    // 如果存在回调函数
	    if (Util.isFunction(callback)) {
	      if (!cfg) {
	        cfg = {};
	      }
	      cfg.content = callback;
	    } else if (Util.isObject(callback)) {
	      // 如果没有设置回调函数
	      cfg = callback;
	    }

	    labelCfg.cfg = cfg;

	    return this;
	  };

	  GeomBase.prototype.tooltip = function tooltip(field, cfg) {
	    var tooltipCfg = this.get('tooltipCfg');
	    if (!tooltipCfg) {
	      tooltipCfg = {};
	    }
	    if (field === false) {
	      // geom 关闭 tooltip
	      this.set('tooltipCfg', false);
	    } else {
	      var tooltipFields = void 0;
	      if (field) {
	        tooltipFields = parseFields(field);
	      }
	      tooltipCfg.fields = tooltipFields;
	      tooltipCfg.cfg = cfg;
	    }

	    this.set('tooltipCfg', tooltipCfg);
	    return this;
	  };

	  GeomBase.prototype.animate = function animate(cfg) {
	    this.set('animateCfg', cfg);
	    return this;
	  };

	  /**
	   * 是否允许使用默认的图形激活交互
	   * @param  {Boolean} enable 是否允许激活开关
	   * @param {Object} cfg 激活的配置项
	   * @return {Geom}    返回 geom 自身
	   */


	  GeomBase.prototype.active = function active(enable, cfg) {
	    if (enable === false) {
	      this.set('allowActive', false);
	    } else if (Util.isObject(enable)) {
	      this.set('allowActive', true);
	      this.set('activedOptions', enable);
	    } else {
	      this.set('allowActive', true);
	      this.set('activedOptions', cfg);
	    }
	    return this;
	  };

	  /**
	   * 对 geometry 进行数据调整
	   * @chainable
	   * @param  {String|Array|null} adjusts 数据调整的类型
	   * @return {Object} geometry 对象
	   */


	  GeomBase.prototype.adjust = function adjust(adjusts) {
	    if (!this.get('hasDefaultAdjust')) {
	      if (adjusts) {
	        adjusts = parseAdjusts(adjusts);
	      }
	      this.set('adjusts', adjusts);
	    }
	    return this;
	  };

	  /**
	   * 设置图形的选中模式
	   * @param  {Boolean|Object} enable 布尔类型用于模式开关，对象类型用于配置
	   * @param  {Object} cfg    选中配置项
	   * @return {Geom}          返回 geom 自身
	   */


	  GeomBase.prototype.select = function select(enable, cfg) {
	    if (enable === false) {
	      this.set('allowSelect', false);
	    } else if (Util.isObject(enable)) {
	      this.set('allowSelect', true);
	      this.set('selectedOptions', enable);
	    } else {
	      this.set('allowSelect', true);
	      this.set('selectedOptions', cfg);
	    }

	    return this;
	  };

	  GeomBase.prototype.hasAdjust = function hasAdjust(adjustType) {
	    var self = this;
	    var adjusts = self.get('adjusts');
	    if (!adjustType) {
	      return false;
	    }
	    var rst = false;
	    Util.each(adjusts, function (adjust) {
	      if (adjust.type === adjustType) {
	        rst = true;
	        return false;
	      }
	    });
	    return rst;
	  };

	  GeomBase.prototype.hasStack = function hasStack() {
	    var isStacked = this.get('isStacked');
	    if (Util.isNil(isStacked)) {
	      isStacked = this.hasAdjust('stack');
	      this.set('isStacked', isStacked);
	    }
	    return isStacked;
	  };

	  GeomBase.prototype.isInCircle = function isInCircle() {
	    var coord = this.get('coord');
	    return coord && coord.isPolar;
	  };

	  GeomBase.prototype._initContainer = function _initContainer() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    if (!shapeContainer) {
	      var container = self.get('container');
	      var view = self.get('view');
	      var viewId = view && view.get('_id');
	      shapeContainer = container.addGroup({
	        viewId: viewId,
	        visible: self.get('visible')
	      });
	      self.set('shapeContainer', shapeContainer);
	    }
	  };

	  GeomBase.prototype.init = function init() {
	    var self = this;
	    self._initContainer();
	    self._initAttrs();
	    if (self.get('tooltipCfg') && self.get('tooltipCfg').fields) {
	      var tooltipFields = self.get('tooltipCfg').fields;
	      Util.each(tooltipFields, function (field) {
	        self._createScale(field);
	      });
	    }
	    var dataArray = self._processData();
	    if (self.get('adjusts')) {
	      self._adjust(dataArray);
	    }
	    self.set('dataArray', dataArray);
	  };

	  // step 1: init attrs


	  GeomBase.prototype._initAttrs = function _initAttrs() {
	    var self = this;
	    var attrs = this.get('attrs');
	    var attrOptions = this.get('attrOptions');
	    var coord = self.get('coord');
	    var isPie = false;

	    for (var type in attrOptions) {
	      if (attrOptions.hasOwnProperty(type)) {
	        var option = attrOptions[type];
	        var className = Util.upperFirst(type);
	        var fields = parseFields(option.field);
	        if (type === 'position') {
	          option.coord = coord;
	          // 饼图坐标系下，填充一维
	          if (fields.length === 1 && coord.type === 'theta') {
	            fields.unshift('1');
	            isPie = true;
	          }
	        }
	        var scales = [];
	        for (var i = 0; i < fields.length; i++) {
	          var field = fields[i];
	          var scale = self._createScale(field);
	          if (type === 'color' && Util.isNil(option.values)) {
	            // 设置 color 的默认色值
	            if (scale.values.length <= 8) {
	              option.values = isPie ? Global.colors_pie : Global.colors;
	            } else if (scale.values.length <= 16) {
	              option.values = isPie ? Global.colors_pie_16 : Global.colors_16;
	            } else {
	              option.values = Global.colors_24;
	            }

	            if (Util.isNil(option.values)) {
	              option.values = Global.colors; // 防止主题没有声明诸如 colors_pie 的属性
	            }
	          }
	          scales.push(scale);
	        }
	        // 饼图需要填充满整个空间
	        if (coord.type === 'theta' && type === 'position' && scales.length > 1) {
	          var yScale = scales[1];
	          yScale.change({
	            nice: false,
	            min: 0,
	            max: Math.max.apply(null, yScale.values)
	          });
	        }
	        option.scales = scales;
	        var attr = new Attr[className](option);
	        attrs[type] = attr;
	      }
	    }
	  };
	  // step 2: 处理数据


	  GeomBase.prototype._processData = function _processData() {
	    var self = this;
	    var data = this.get('data');
	    var dataArray = [];
	    var groupedArray = this._groupData(data);
	    for (var i = 0; i < groupedArray.length; i++) {
	      var subData = groupedArray[i];
	      var tempData = self._saveOrigin(subData);
	      self._numberic(tempData);
	      dataArray.push(tempData);
	    }
	    return dataArray;
	  };

	  // step 2.1 数据分组


	  GeomBase.prototype._groupData = function _groupData(data) {
	    var groupScales = this._getGroupScales();
	    var fields = groupScales.map(function (scale) {
	      return scale.field;
	    });

	    return Util.Array.group(data, fields);
	  };

	  // step 2.2 数据调整前保存原始数据


	  GeomBase.prototype._saveOrigin = function _saveOrigin(data) {
	    var rst = [];
	    for (var i = 0; i < data.length; i++) {
	      var origin = data[i];
	      var obj = {};
	      for (var k in origin) {
	        obj[k] = origin[k];
	      }
	      // const obj = Util.mix({}, origin);
	      obj[FIELD_ORIGIN] = origin;
	      rst.push(obj);
	    }
	    return rst;
	  };

	  // step 2.3 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理


	  GeomBase.prototype._numberic = function _numberic(data) {
	    var positionAttr = this.getAttr('position');
	    var scales = positionAttr.scales;
	    for (var j = 0; j < data.length; j++) {
	      var obj = data[j];
	      for (var i = 0; i < Math.min(2, scales.length); i++) {
	        var scale = scales[i];
	        if (scale.isCategory) {
	          var field = scale.field;
	          obj[field] = scale.translate(obj[field]);
	        }
	      }
	    }
	  };

	  GeomBase.prototype._getGroupScales = function _getGroupScales() {
	    var self = this;
	    var scales = self.get('groupScales');
	    if (!scales) {
	      scales = [];
	      var attrs = self.get('attrs');
	      Util.each(attrs, function (attr) {
	        if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
	          var attrScales = attr.scales;
	          Util.each(attrScales, function (scale) {
	            if (scale.isCategory && Util.indexOf(scales, scale) === -1) {
	              scales.push(scale);
	            }
	          });
	        }
	      });
	      self.set('groupScales', scales);
	    }
	    return scales;
	  };

	  GeomBase.prototype._updateStackRange = function _updateStackRange(field, scale, dataArray) {
	    var mergeArray = Util.Array.merge(dataArray);
	    var min = scale.min;
	    var max = scale.max;
	    for (var i = 0; i < mergeArray.length; i++) {
	      var obj = mergeArray[i];
	      var tmpMin = Math.min.apply(null, obj[field]);
	      var tmpMax = Math.max.apply(null, obj[field]);
	      if (tmpMin < min) {
	        min = tmpMin;
	      }
	      if (tmpMax > max) {
	        max = tmpMax;
	      }
	    }
	    if (min < scale.min || max > scale.max) {
	      scale.change({
	        min: min,
	        max: max
	      });
	    }
	  };

	  // step 2.2 调整数据


	  GeomBase.prototype._adjust = function _adjust(dataArray) {
	    var self = this;
	    var adjusts = self.get('adjusts');

	    var yScale = self.getYScale();
	    var xScale = self.getXScale();
	    var xField = xScale.field;
	    var yField = yScale ? yScale.field : null;
	    Util.each(adjusts, function (adjust) {
	      var adjustCfg = Util.mix({
	        xField: xField,
	        yField: yField
	      }, adjust);
	      var adjustType = Util.upperFirst(adjust.type);
	      if (adjustType === 'Dodge') {
	        var adjustNames = [];
	        if (xScale.isCategory || xScale.isIdentity) {
	          adjustNames.push('x');
	        } else if (!yScale) {
	          adjustNames.push('y');
	        } else {
	          throw new Error('dodge is not support linear attribute, please use category attribute!');
	        }
	        adjustCfg.adjustNames = adjustNames;
	        /* if (self.isInCircle()) {
	          adjustCfg.dodgeRatio = 1;
	          adjustCfg.marginRatio = 0;
	        }*/
	      } else if (adjustType === 'Stack') {
	        var coord = self.get('coord');
	        if (!yScale) {
	          // 一维的情况下获取高度和默认size
	          adjustCfg.height = coord.getHeight();
	          var size = self.getDefaultValue('size') || 3;
	          adjustCfg.size = size;
	        }
	        // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下
	        if (!coord.isTransposed && Util.isNil(adjustCfg.reverseOrder)) {
	          adjustCfg.reverseOrder = true;
	        }
	      }
	      var adjustElement = new Adjust[adjustType](adjustCfg);
	      adjustElement.processAdjust(dataArray);
	      if (adjustType === 'Stack' && yScale) {
	        self._updateStackRange(yField, yScale, dataArray);
	      }
	    });
	  };

	  /**
	   * @internal 设置coord，通常外部容器变化时，coord 会发生变化
	   * @param {Object} coord 坐标系
	   */


	  GeomBase.prototype.setCoord = function setCoord(coord) {
	    this.set('coord', coord);
	    var position = this.getAttr('position');
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer.setMatrix(coord.matrix);
	    if (position) {
	      position.coord = coord;
	    }
	  };

	  // step 3 绘制


	  GeomBase.prototype.paint = function paint() {
	    var self = this;
	    var dataArray = self.get('dataArray');
	    var mappedArray = [];
	    var shapeFactory = self.getShapeFactory();
	    shapeFactory.setCoord(self.get('coord'));
	    var shapeContainer = self.get('shapeContainer');
	    self._beforeMapping(dataArray);
	    for (var i = 0; i < dataArray.length; i++) {
	      var data = dataArray[i];
	      var index = i;
	      data = self._mapping(data);
	      mappedArray.push(data);
	      self.draw(data, shapeContainer, shapeFactory, index);
	    }
	    if (self.get('labelCfg')) {
	      self._addLabels(Util.union.apply(null, mappedArray));
	    }

	    if (!self.get('sortable')) {
	      self._sort(mappedArray); // 便于数据的查找，需要对数据进行排序，用于 geom.findPoint()
	    } else {
	      self.set('dataArray', mappedArray);
	    }
	  };

	  GeomBase.prototype._sort = function _sort(mappedArray) {
	    var self = this;
	    var xScale = self.getXScale();
	    var xField = xScale.field;
	    Util.each(mappedArray, function (itemArr) {
	      itemArr.sort(function (obj1, obj2) {
	        return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);
	      });
	    });

	    self.set('dataArray', mappedArray);
	  };

	  // step 3.1 before mapping


	  GeomBase.prototype._beforeMapping = function _beforeMapping(dataArray) {
	    var self = this;
	    if (self.get('sortable')) {
	      var xScale = self.getXScale();
	      var field = xScale.field;
	      Util.each(dataArray, function (data) {
	        data.sort(function (v1, v2) {
	          return xScale.translate(v1[field]) - xScale.translate(v2[field]);
	        });
	      });
	    }
	    if (self.get('generatePoints')) {
	      Util.each(dataArray, function (data) {
	        self._generatePoints(data);
	      });
	      Util.each(dataArray, function (data, index) {
	        var nextData = dataArray[index + 1];
	        if (nextData) {
	          data[0].nextPoints = nextData[0].points;
	        }
	      });
	    }
	  };

	  // step 3.2 add labels


	  GeomBase.prototype._addLabels = function _addLabels(points) {
	    var self = this;
	    var type = self.get('type');
	    var coord = self.get('coord');
	    var C = Labels.getLabelsClass(coord.type, type);
	    var container = self.get('container');
	    var scales = Util.map(self.get('labelCfg').fields, function (field) {
	      return self._createScale(field);
	    });
	    var labelContainer = container.addGroup(C, {
	      _id: this.get('_id'),
	      labelCfg: Util.mix({
	        scales: scales
	      }, self.get('labelCfg')),
	      coord: coord,
	      geom: self,
	      geomType: type,
	      visible: self.get('visible')
	    });
	    labelContainer.showLabels(points);
	    self.set('labelContainer', labelContainer);
	  };

	  /**
	   * @protected
	   * 获取图形的工厂类
	   * @return {Object} 工厂类对象
	   */


	  GeomBase.prototype.getShapeFactory = function getShapeFactory() {
	    var shapeFactory = this.get('shapeFactory');
	    if (!shapeFactory) {
	      var shapeType = this.get('shapeType');
	      shapeFactory = Shape.getShapeFactory(shapeType);
	      this.set('shapeFactory', shapeFactory);
	    }
	    return shapeFactory;
	  };

	  // step 3.2 generate points


	  GeomBase.prototype._generatePoints = function _generatePoints(data) {
	    var self = this;
	    var shapeFactory = self.getShapeFactory();
	    var shapeAttr = self.getAttr('shape');
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var cfg = self.createShapePointsCfg(obj);
	      var shape = shapeAttr ? self._getAttrValues(shapeAttr, obj) : null;
	      var points = shapeFactory.getShapePoints(shape, cfg);
	      obj.points = points;
	    }
	  };

	  /**
	   * 获取图形对应点的配置项
	   * @protected
	   * @param  {Object} obj 数据对象
	   * @return {Object} cfg 获取图形对应点的配置项
	   */


	  GeomBase.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var x = this._normalizeValues(obj[xScale.field], xScale);
	    var y = void 0; // 存在没有 y 的情况

	    if (yScale) {
	      y = this._normalizeValues(obj[yScale.field], yScale);
	    } else {
	      y = obj.y ? obj.y : 0.1;
	    }

	    return {
	      x: x,
	      y: y,
	      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined
	    };
	  };

	  /**
	   * @protected
	   * 如果y轴的最小值小于0则返回0，否则返回最小值
	   * @return {Number} y轴上的最小值
	   */


	  GeomBase.prototype.getYMinValue = function getYMinValue() {
	    var yScale = this.getYScale();
	    var min = yScale.min;
	    var value = void 0;
	    if (min >= 0) {
	      value = min;
	    } else {
	      value = 0;
	    }
	    return value;
	  };

	  // 将数据归一化


	  GeomBase.prototype._normalizeValues = function _normalizeValues(values, scale) {
	    var rst = [];
	    if (Util.isArray(values)) {
	      for (var i = 0; i < values.length; i++) {
	        var v = values[i];
	        rst.push(scale.scale(v));
	      }
	    } else {
	      rst = scale.scale(values);
	    }
	    return rst;
	  };

	  // step 3.2 mapping


	  GeomBase.prototype._mapping = function _mapping(data) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var mappedData = [];
	    for (var i = 0; i < data.length; i++) {
	      var record = data[i];
	      var newRecord = {};
	      newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];
	      newRecord.points = record.points;
	      newRecord.nextPoints = record.nextPoints;
	      for (var k in attrs) {
	        if (attrs.hasOwnProperty(k)) {
	          var attr = attrs[k];
	          var names = attr.names;
	          var values = self._getAttrValues(attr, record);
	          if (names.length > 1) {
	            // position 之类的生成多个字段的属性
	            for (var j = 0; j < values.length; j++) {
	              var val = values[j];
	              var name = names[j];
	              newRecord[name] = Util.isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值
	            }
	          } else {
	            newRecord[names[0]] = values.length === 1 ? values[0] : values;
	          }
	        }
	      }
	      mappedData.push(newRecord);
	    }

	    return mappedData;
	  };

	  // 获取属性映射的值


	  GeomBase.prototype._getAttrValues = function _getAttrValues(attr, record) {
	    var scales = attr.scales;
	    var params = [];
	    for (var i = 0; i < scales.length; i++) {
	      var scale = scales[i];
	      var field = scale.field;
	      if (scale.type === 'identity') {
	        params.push(scale.value);
	      } else {
	        params.push(record[field]);
	      }
	    }
	    var values = attr.mapping.apply(attr, params);
	    return values;
	  };

	  GeomBase.prototype.getAttrValue = function getAttrValue(attrName, record) {
	    var attr = this.getAttr(attrName);
	    var rst = null;
	    if (attr) {
	      var values = this._getAttrValues(attr, record);
	      rst = values[0];
	    }
	    return rst;
	  };

	  GeomBase.prototype.getDefaultValue = function getDefaultValue(attrName) {
	    var value = this.get(attrName);
	    var attr = this.getAttr(attrName);
	    if (attr) {
	      var scale = attr.getScale(attrName);
	      if (scale.type === 'identity') {
	        value = scale.value;
	      }
	    }
	    return value;
	  };

	  /**
	   * step 3.3 draw
	   * @protected
	   * @param  {Array} data 绘制图形
	   * @param {Object} container 绘图容器
	   * @param {Object} shapeFactory 绘制图形的工厂类
	   * @param {Number} index 每个 shape 的索引值
	   */


	  GeomBase.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      self.drawPoint(obj, container, shapeFactory, index + i);
	    }
	  };

	  GeomBase.prototype.getCallbackCfg = function getCallbackCfg(fields, cfg, origin) {
	    if (!fields) {
	      return cfg;
	    }
	    var tmpCfg = {};
	    var params = fields.map(function (field) {
	      return origin[field];
	    });
	    Util.each(cfg, function (v, k) {
	      if (Util.isFunction(v)) {
	        tmpCfg[k] = v.apply(null, params);
	      } else {
	        tmpCfg[k] = v;
	      }
	    });
	    return tmpCfg;
	  };

	  GeomBase.prototype._getShapeId = function _getShapeId(dataObj) {
	    var id = this.get('_id');
	    var keyFields = this.get('keyFields');
	    if (keyFields && keyFields.length > 0) {
	      Util.each(keyFields, function (key) {
	        id += '-' + dataObj[key];
	      });
	    } else {
	      var type = this.get('type');
	      var xScale = this.getXScale();
	      var yScale = this.getYScale();
	      var xField = xScale.field || 'x';
	      var yField = yScale.field || 'y';
	      var yVal = dataObj[yField];
	      var xVal = void 0;
	      if (xScale.isIdentity) {
	        xVal = xScale.value;
	      } else {
	        xVal = dataObj[xField];
	      }

	      if (type === 'interval' || type === 'schema') {
	        id += '-' + xVal;
	      } else if (type === 'line' || type === 'area' || type === 'path') {
	        id += '-' + type;
	      } else {
	        id += '-' + xVal + '-' + yVal;
	      }

	      var groupScales = this._getGroupScales();
	      if (!Util.isEmpty(groupScales)) {
	        Util.each(groupScales, function (groupScale) {
	          var field = groupScale.field;
	          if (groupScale.type !== 'identity') {
	            id += '-' + dataObj[field];
	          }
	        });
	      }
	    }

	    return id;
	  };

	  GeomBase.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var self = this;
	    var cfg = {
	      origin: obj,
	      x: obj.x,
	      y: obj.y,
	      color: obj.color,
	      size: obj.size,
	      shape: obj.shape,
	      isInCircle: self.isInCircle(),
	      opacity: obj.opacity
	    };
	    var styleOptions = self.get('styleOptions');
	    if (styleOptions && styleOptions.style) {
	      cfg.style = self.getCallbackCfg(styleOptions.fields, styleOptions.style, obj[FIELD_ORIGIN]);
	    }
	    if (this.get('generatePoints')) {
	      cfg.points = obj.points;
	      cfg.nextPoints = obj.nextPoints;
	    }
	    if (this.get('animate')) {
	      // _id 字段仅用于动画
	      cfg._id = self._getShapeId(obj[FIELD_ORIGIN]);
	    }
	    return cfg;
	  };

	  GeomBase.prototype.appendShapeInfo = function appendShapeInfo(shape, index) {
	    if (shape) {
	      shape.setSilent('index', index);
	      shape.setSilent('coord', this.get('coord'));

	      if (this.get('animate') && this.get('animateCfg')) {
	        shape.setSilent('animateCfg', this.get('animateCfg'));
	      }
	    }
	  };

	  GeomBase.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
	    var shape = obj.shape;
	    var cfg = this.getDrawCfg(obj);
	    var geomShape = shapeFactory.drawShape(shape, cfg, container);
	    this.appendShapeInfo(geomShape, index);
	  };

	  /**
	   * 获取属性
	   * @protected
	   * @param {String} name 属性名
	   * @return {Scale} 度量
	   */


	  GeomBase.prototype.getAttr = function getAttr(name) {
	    return this.get('attrs')[name];
	  };

	  /**
	   * 获取 x 对应的度量
	   * @return {Scale} x 对应的度量
	   */


	  GeomBase.prototype.getXScale = function getXScale() {
	    return this.getAttr('position').scales[0];
	  };

	  /**
	   * 获取 y 对应的度量
	   * @return {Scale} y 对应的度量
	   */


	  GeomBase.prototype.getYScale = function getYScale() {
	    return this.getAttr('position').scales[1];
	  };

	  GeomBase.prototype.getShapes = function getShapes() {
	    var result = [];
	    var shapeContainer = this.get('shapeContainer');
	    var children = shapeContainer.get('children');
	    Util.each(children, function (child) {
	      if (child.get('origin')) {
	        // 过滤 label
	        result.push(child);
	      }
	    });
	    return result;
	  };

	  GeomBase.prototype.getAttrsForLegend = function getAttrsForLegend() {
	    var attrs = this.get('attrs');
	    var rst = [];
	    Util.each(attrs, function (attr) {
	      if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
	        rst.push(attr);
	      }
	    });
	    return rst;
	  };

	  GeomBase.prototype.getFieldsForLegend = function getFieldsForLegend() {
	    var fields = [];
	    var attrOptions = this.get('attrOptions');
	    Util.each(GROUP_ATTRS, function (attrName) {
	      var attrCfg = attrOptions[attrName];
	      if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {
	        fields = fields.concat(attrCfg.field.split('*'));
	      }
	    });
	    return Util.uniq(fields);
	  };

	  GeomBase.prototype.changeVisible = function changeVisible(visible, stopDraw) {
	    var me = this;
	    me.set('visible', visible);
	    var shapeContainer = this.get('shapeContainer');
	    if (shapeContainer) {
	      shapeContainer.set('visible', visible);
	    }
	    var labelContainer = this.get('labelContainer');
	    if (labelContainer) {
	      labelContainer.set('visible', visible);
	    }
	    if (!stopDraw && shapeContainer) {
	      var canvas = shapeContainer.get('canvas');
	      canvas.draw();
	    }
	  };

	  GeomBase.prototype.reset = function reset() {
	    this.set('attrOptions', {});
	    this.clearInner();
	  };

	  GeomBase.prototype.clearInner = function clearInner() {
	    this.clearActivedShapes();
	    this.clearSelected();
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer && shapeContainer.clear();

	    // 由于 Labels 对应的模块需要生成group，所以这个地方需要删除
	    var labelContainer = this.get('labelContainer');
	    labelContainer && labelContainer.remove();
	    this.set('attrs', {});
	    this.set('groupScales', null);
	    // if (!this.get('hasDefaultAdjust')) {
	    //   this.set('adjusts', null);
	    // }
	    this.set('labelContainer', null);
	    this.set('xDistance', null);
	    this.set('isStacked', null);
	  };

	  GeomBase.prototype.clear = function clear() {
	    this.clearInner();
	    this.set('scales', {});
	  };

	  GeomBase.prototype.destroy = function destroy() {
	    this.clear();
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer && shapeContainer.remove();
	    this.offEvents();
	    _Base.prototype.destroy.call(this);
	  };

	  GeomBase.prototype.bindEvents = function bindEvents() {
	    if (this.get('view')) {
	      this._bindActiveAction();
	      this._bindSelectedAction();
	    }
	  };

	  GeomBase.prototype.offEvents = function offEvents() {
	    if (this.get('view')) {
	      this._offActiveAction();
	      this._offSelectedAction();
	    }
	  };

	  return GeomBase;
	}(Base);

	module.exports = GeomBase;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(69),
	    baseKeys = __webpack_require__(70),
	    isArrayLike = __webpack_require__(12);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(165),
	    Map = __webpack_require__(42),
	    Promise = __webpack_require__(166),
	    Set = __webpack_require__(78),
	    WeakMap = __webpack_require__(167),
	    baseGetTag = __webpack_require__(6),
	    toSource = __webpack_require__(67);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	    getTag = function getTag(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	            switch (ctorString) {
	                case dataViewCtorString:
	                    return dataViewTag;
	                case mapCtorString:
	                    return mapTag;
	                case promiseCtorString:
	                    return promiseTag;
	                case setCtorString:
	                    return setTag;
	                case weakMapCtorString:
	                    return weakMapTag;
	            }
	        }
	        return result;
	    };
	}

	module.exports = getTag;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	}

	module.exports = isSymbol;

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	module.exports = toKey;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview adjust the points position
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var DEFAULT_Y = 0; // 默认的y的值

	/**
	 * 数据调整的基类
	 * @class Adjust
	 */

	var Adjust = function () {
	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Adjust.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 调整对应的x方向对应的字段名称
	       * @type {Scale}
	       */
	      xField: null,
	      /**
	       * 调整对应的y方向对应的字段名称
	       * @type {Scale}
	       */
	      yField: null,

	      /**
	       * 调整的维度，默认,x,y都做调整
	       * @type {Array}
	       */
	      adjustNames: ['x', 'y'], // 指x,y

	      /**
	       * 参与分组的数据维度
	       * @type {Array}
	       */
	      groupFields: null
	    };
	  };

	  function Adjust(cfg) {
	    _classCallCheck(this, Adjust);

	    var defaultCfg = this.getDefaultCfg();
	    Util.assign(this, defaultCfg, cfg);
	  }

	  /**
	   * 对应的维度是否可以调整
	   * @protected
	   * @param  {String}  dimName 可以调整的维度 x,y
	   * @return {Boolean} 是否可以调整
	   */


	  Adjust.prototype.isAdjust = function isAdjust(dimName) {
	    return this.adjustNames.indexOf(dimName) >= 0;
	  };

	  /**
	   * @protected
	   * adjust data
	   * @param  {Array} dataArray data array
	   */


	  Adjust.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);

	    self.adjDataArray = dataArray;
	    self.mergeData = mergeData;
	    self.adjustData(dataArray, mergeData);
	    self.adjFrames = null;
	    self.mergeData = null;
	  };

	  /**
	   * @protected
	   * 获取可调整度量对应的值
	   * @param  {Frame} mergeData 数据
	   * @return {Object} 值的映射
	   */


	  Adjust.prototype._getDimValues = function _getDimValues(mergeData) {
	    var self = this;
	    var valuesMap = {};
	    var dims = [];
	    if (self.xField && self.isAdjust('x')) {
	      dims.push(self.xField);
	    }
	    if (self.yField && self.isAdjust('y')) {
	      dims.push(self.yField);
	    }
	    Util.each(dims, function (dim) {
	      var values = Util.Array.values(mergeData, dim);
	      values.sort(function (v1, v2) {
	        return v1 - v2;
	      });
	      valuesMap[dim] = values;
	    });
	    if (!self.yField && self.isAdjust('y')) {
	      // 只有一维的情况下,同时调整y
	      var dim = 'y';
	      var values = [DEFAULT_Y, 1]; // 默认分布在y轴的 0.1 与 0.2 之间
	      valuesMap[dim] = values;
	    }
	    return valuesMap;
	  };

	  Adjust.prototype.adjustData = function adjustData(dataArray, mergeData) {
	    var self = this;
	    var valuesMap = self._getDimValues(mergeData);
	    Util.each(dataArray, function (data, index) {
	      // 遍历所有数据集合
	      Util.each(valuesMap, function (values, dim) {
	        // 根据不同的度量分别调整位置
	        self.adjustDim(dim, values, data, dataArray.length, index);
	      });
	    });
	  };

	  Adjust.prototype.adjustDim = function adjustDim() /* dim, values, data, length, index */{};

	  Adjust.prototype.getAdjustRange = function getAdjustRange(dim, key, values) {
	    var self = this;
	    var index = values.indexOf(key);
	    var length = values.length;
	    var pre = void 0;
	    var next = void 0;
	    if (!self.yField && self.isAdjust('y')) {
	      pre = 0;
	      next = 1;
	    } else if (length > 1) {
	      pre = index === 0 ? values[0] : values[index - 1];
	      next = index === length - 1 ? values[length - 1] : values[index + 1];

	      if (index !== 0) {
	        pre += (key - pre) / 2;
	      } else {
	        pre -= (next - key) / 2;
	      }
	      if (index !== length - 1) {
	        next -= (next - key) / 2;
	      } else {
	        next += (key - values[length - 2]) / 2;
	      }
	    } else {
	      pre = key === 0 ? 0 : key - 0.5;
	      next = key === 0 ? 1 : key + 0.5;
	    }

	    return {
	      pre: pre,
	      next: next
	    };
	  };

	  /**
	   * 对数据进行分组
	   * @param  {Array} data 数据
	   * @param  {String} dim 分组的字段
	   * @return {Object}  分组的键值对映射
	   */


	  Adjust.prototype.groupData = function groupData(data, dim) {
	    var groups = {};

	    Util.each(data, function (record) {
	      var value = record[dim];
	      if (value === undefined) {
	        value = record[dim] = DEFAULT_Y;
	      }
	      if (!groups[value]) {
	        groups[value] = [];
	      }
	      groups[value].push(record);
	    });

	    return groups;
	  };

	  return Adjust;
	}();

	module.exports = Adjust;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算path 使用的工具方法
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Spline = __webpack_require__(286);

	function points2path(points, isInCircle) {
	  if (!points.length) {
	    return [];
	  }
	  var path = [];

	  for (var i = 0, length = points.length; i < length; i++) {
	    var item = points[i];
	    if (i === 0) {
	      path.push(['M', item.x, item.y]);
	    } else {
	      path.push(['L', item.x, item.y]);
	    }
	  }

	  if (isInCircle) {
	    path.push(['Z']);
	  }
	  return path;
	}

	function _getPointRadius(coord, point) {
	  var center = coord.getCenter();
	  var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	  return r;
	}

	function convertArr(arr, coord) {
	  var len = arr.length;
	  var tmp = [arr[0]];
	  for (var i = 1; i < len; i = i + 2) {
	    var point = coord.convertPoint({
	      x: arr[i],
	      y: arr[i + 1]
	    });
	    tmp.push(point.x, point.y);
	  }
	  return tmp;
	}

	function _convertPolarPath(pre, cur, coord) {
	  // const radius = coord.getRadius();
	  // const inner = coord.innerRadius || 0;
	  // let innerRadius = inner * radius;
	  var transposed = coord.isTransposed;
	  var startAngle = coord.startAngle;
	  var endAngle = coord.endAngle;

	  var prePoint = {
	    x: pre[1],
	    y: pre[2]
	  };
	  var curPoint = {
	    x: cur[1],
	    y: cur[2]
	  };
	  var rst = [];
	  // innerRadius = innerRadius || 0;
	  var xDim = transposed ? 'y' : 'x';
	  var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);
	  var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向
	  var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位
	  var convertPoint = coord.convertPoint(curPoint);
	  var r = _getPointRadius(coord, convertPoint);
	  if (r >= 0.5) {
	    // 小于1像素的圆在图像上无法识别
	    if (angleRange === Math.PI * 2) {
	      var middlePoint = {
	        x: (curPoint.x + prePoint.x) / 2,
	        y: (curPoint.y + prePoint.y) / 2
	      };
	      var middleConvertPoint = coord.convertPoint(middlePoint);
	      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    } else {
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    }
	  }
	  return rst;
	}

	// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形
	function filterFullCirleLine(path) {
	  Util.each(path, function (subPath, index) {
	    var cur = subPath;
	    if (cur[0].toLowerCase() === 'a') {
	      var pre = path[index - 1];
	      var next = path[index + 1];
	      if (next && next[0].toLowerCase() === 'a') {
	        if (pre && pre[0].toLowerCase() === 'l') {
	          pre[0] = 'M';
	        }
	      } else if (pre && pre[0].toLowerCase() === 'a') {
	        if (next && next[0].toLowerCase() === 'l') {
	          next[0] = 'M';
	        }
	      }
	    }
	  });
	}

	var PathUtil = {
	  // 线的path
	  getLinePath: function getLinePath(points, isInCircle) {
	    return points2path(points, isInCircle);
	  },

	  // get spline： 限定了范围的平滑线
	  getSplinePath: function getSplinePath(points, isInCircle, constaint) {
	    var data = [];
	    var first = points[0];
	    var prePoint = null;
	    if (points.length <= 2) {
	      return PathUtil.getLinePath(points, isInCircle);
	    }
	    Util.each(points, function (point) {
	      if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {
	        data.push(point.x);
	        data.push(point.y);
	        prePoint = point;
	      }
	    });
	    constaint = constaint || [// 范围
	    [0, 0], [1, 1]];
	    var splinePath = Spline.catmullRom2bezier(data, isInCircle, constaint);
	    splinePath.unshift(['M', first.x, first.y]);
	    return splinePath;
	  },
	  getPointRadius: function getPointRadius(coord, point) {
	    var result = _getPointRadius(coord, point);
	    return result;
	  },
	  getPointAngle: function getPointAngle(coord, point) {
	    var center = coord.getCenter();
	    var angle = Math.atan2(point.y - center.y, point.x - center.x);
	    return angle;
	  },
	  convertNormalPath: function convertNormalPath(coord, path) {
	    var tmp = [];
	    Util.each(path, function (subPath) {
	      var action = subPath[0];
	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'l':
	        case 'c':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    return tmp;
	  },
	  convertPolarPath: function convertPolarPath(coord, path) {
	    var tmp = [];
	    var pre = void 0;
	    var cur = void 0;
	    var transposed = void 0;
	    var equals = void 0;
	    Util.each(path, function (subPath, index) {
	      var action = subPath[0];

	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'c':
	        case 'q':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'l':
	          pre = path[index - 1];
	          cur = subPath;
	          transposed = coord.isTransposed;
	          // 是否半径相同，转换成圆弧
	          equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];
	          if (equals) {
	            tmp = tmp.concat(_convertPolarPath(pre, cur, coord));
	          } else {
	            // y 不相等，所以直接转换
	            tmp.push(convertArr(subPath, coord));
	          }
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    filterFullCirleLine(tmp); // 过滤多余的直线
	    return tmp;
	  }
	};

	module.exports = PathUtil;

	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			if (!module.children) module.children = [];
			Object.defineProperty(module, "loaded", {
				enumerable: true,
				get: function get() {
					return module.l;
				}
			});
			Object.defineProperty(module, "id", {
				enumerable: true,
				get: function get() {
					return module.i;
				}
			});
			module.webpackPolyfill = 1;
		}
		return module;
	};

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(121),
	    listCacheDelete = __webpack_require__(122),
	    listCacheGet = __webpack_require__(123),
	    listCacheHas = __webpack_require__(124),
	    listCacheSet = __webpack_require__(125);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(41);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(146);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}

	module.exports = getMapData;

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(44),
	    baseAssignValue = __webpack_require__(45);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(153),
	    isObjectLike = __webpack_require__(5);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function () {
	    return arguments;
	}()) ? baseIsArguments : function (value) {
	    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var root = __webpack_require__(4),
	    stubFalse = __webpack_require__(154);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 31 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;

	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var freeGlobal = __webpack_require__(66);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = function () {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}();

	module.exports = nodeUtil;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 33 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(182),
	    createBaseEach = __webpack_require__(185);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3),
	    isKey = __webpack_require__(56),
	    stringToPath = __webpack_require__(198),
	    toString = __webpack_require__(14);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of scale
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	/**
	 * 度量的构造函数
	 * @class Scale
	 */

	var Scale = function () {

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Scale.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'base',

	      /**
	       * 格式化函数,输出文本或者tick时的格式化函数
	       * @type {Function}
	       */
	      formatter: null,

	      /**
	       * 输出的值域
	       * @type {Array}
	       */
	      range: [0, 1],

	      /**
	       * 度量的标记
	       * @type {Array}
	       */
	      ticks: null,

	      /**
	       * 参与度量计算的值，可选项
	       * @type {Array}
	       */
	      values: []
	    };
	  };

	  function Scale(cfg) {
	    _classCallCheck(this, Scale);

	    var defaultCfg = this.getDefaultCfg();
	    Util.mix(this, defaultCfg, cfg);
	    this.init();
	  }

	  /**
	   * 度量初始化
	   * @protected
	   */


	  Scale.prototype.init = function init() {};

	  /**
	   * 获取该度量的ticks,返回的是多个对象，
	   *   - text: tick 的文本
	   *   - value: 对应的度量转换后的值
	   * <code>
	   *   [
	   *     {text: 0,value:0}
	   *     {text: 1,value:0.2}
	   *     {text: 2,value:0.4}
	   *     {text: 3,value:0.6}
	   *     {text: 4,value:0.8}
	   *     {text: 5,value:1}
	   *   ]
	   * </code>
	   * @param {Number} count 输出tick的个数的近似值，默认是 10
	   * @return {Array} 返回 ticks 数组
	   */


	  Scale.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = self.ticks;
	    var rst = [];
	    Util.each(ticks, function (tick) {
	      var obj = void 0;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: self.getText(tick),
	          tickValue: tick,
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  /**
	   * 获取格式化后的文本
	   * @param  {*} value 输入的数据
	   * @return {String} 格式化的文本
	   */


	  Scale.prototype.getText = function getText(value) {
	    var formatter = this.formatter;
	    value = formatter ? formatter(value) : value;
	    if (Util.isNil(value) || !value.toString) {
	      value = '';
	    }
	    return value.toString();
	  };
	  /**
	   * 输出的值域最小值
	   * @protected
	   * @return {Number} 返回最小的值
	   */


	  Scale.prototype.rangeMin = function rangeMin() {
	    return this.range[0];
	  };
	  /**
	   * 输出的值域最大值
	   * @protected
	   * @return {Number} 返回最大的值
	   */


	  Scale.prototype.rangeMax = function rangeMax() {
	    var range = this.range;
	    return range[range.length - 1];
	  };

	  /**
	   * 度量转换后的结果，翻转回输入域
	   * @param  {Number} value 需要翻转的数值
	   * @return {*} 度量的输入值
	   */


	  Scale.prototype.invert = function invert(value) {
	    return value;
	  };
	  /**
	   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等
	   * @param  {*} value 传入的值
	   * @return {Number} 转换的值
	   */


	  Scale.prototype.translate = function translate(value) {
	    return value;
	  };
	  /**
	   * 进行度量转换
	   * @param  {*} value 输入值
	   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]
	   */


	  Scale.prototype.scale = function scale(value) {
	    return value;
	  };
	  /**
	   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等
	   * @return {Scale} 克隆的度量
	   */


	  Scale.prototype.clone = function clone() {
	    var self = this;
	    var constr = self.constructor;
	    var cfg = {};
	    Util.each(self, function (v, k) {
	      cfg[k] = self[k];
	    });
	    return new constr(cfg);
	  };
	  /**
	   * 更改度量的属性信息
	   * @param  {Object} info 属性信息
	   * @chainable
	   * @return {Scale} 返回自身的引用
	   */


	  Scale.prototype.change = function change(info) {
	    this.ticks = null;
	    Util.mix(this, info);
	    this.init();
	    return this;
	  };

	  return Scale;
	}();

	module.exports = Scale;

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);
	var numberAuto = __webpack_require__(292);

	/**
	 * 线性度量
	 * @class Scale.Linear
	 */

	var Linear = function (_Base) {
	  _inherits(Linear, _Base);

	  function Linear() {
	    _classCallCheck(this, Linear);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Linear.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'linear',

	      /**
	       * 是否线性
	       * @type {Boolean}
	       * @readOnly
	       * @default true
	       */
	      isLinear: true,

	      /**
	       * min value of the scale
	       * @type {Number}
	       * @default null
	       */
	      min: null,

	      /**
	       * min value limitted of the scale
	       * @type {Number}
	       * @default null
	       */
	      minLimit: null,

	      /**
	       * max value of the scale
	       * @type {Number}
	       * @default null
	       */
	      max: null,

	      /**
	       * max value limitted of the scale
	       * @type {Number}
	       * @default null
	       */
	      maxLimit: null,

	      /**
	       * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks
	       * @type {Boolean}
	       * @default false
	       */
	      nice: false,

	      /**
	       * 自动生成标记时的个数
	       * @type {Number}
	       * @default null
	       */
	      tickCount: null,

	      /**
	       * 坐标轴点之间的间距，指的是真实数据的差值
	       * @type {Number}
	       * @default null
	       */
	      tickInterval: null,

	      /**
	       * 用于计算坐标点时逼近的数组
	       * @type {Array}
	       */
	      snapArray: null
	    });
	  };
	  /**
	   * @protected
	   * @override
	   */


	  Linear.prototype.init = function init() {
	    var self = this;
	    if (!self.ticks) {
	      self.min = self.translate(self.min);
	      self.max = self.translate(self.max);
	      self.initTicks();
	    } else {
	      var ticks = self.ticks;
	      var firstValue = self.translate(ticks[0]);
	      var lastValue = self.translate(ticks[ticks.length - 1]);
	      if (Util.isNil(self.min) || self.min > firstValue) {
	        self.min = firstValue;
	      }
	      if (Util.isNil(self.max) || self.max < lastValue) {
	        self.max = lastValue;
	      }
	    }
	  };

	  /**
	   * 计算坐标点
	   * @protected
	   * @return {Array} 计算完成的坐标点
	   */


	  Linear.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    if (max < min) {
	      throw new Error('max: ' + max + ' should not be less than min: ' + min);
	    }
	    var tmp = numberAuto({
	      min: min,
	      max: max,
	      minLimit: self.minLimit,
	      maxLimit: self.maxLimit,
	      minCount: count,
	      maxCount: count,
	      interval: interval,
	      snapArray: this.snapArray
	    });
	    return tmp.ticks;
	  };

	  // 初始化ticks


	  Linear.prototype.initTicks = function initTicks() {
	    var self = this;
	    var calTicks = self.calculateTicks();
	    if (self.nice) {
	      // 如果需要优化显示的tick
	      self.ticks = calTicks;
	      self.min = calTicks[0];
	      self.max = calTicks[calTicks.length - 1];
	    } else {
	      var ticks = [];
	      Util.each(calTicks, function (tick) {
	        if (tick >= self.min && tick <= self.max) {
	          ticks.push(tick);
	        }
	      });
	      // 如果 ticks 为空，直接输入最小值、最大值
	      if (!ticks.length) {
	        ticks.push(self.min);
	        ticks.push(self.max);
	      }
	      self.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */


	  Linear.prototype.scale = function scale(value) {
	    if (value === null || value === undefined) {
	      return NaN;
	    }
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }

	    var percent = (value - min) / (max - min);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Linear.prototype.invert = function invert(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    return this.min + percent * (this.max - this.min);
	  };

	  return Linear;
	}(Base);

	module.exports = Linear;

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var mat3 = MatrixUtil.mat3;
	var vec3 = MatrixUtil.vec3;

	var Coord = function () {
	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Coord.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * Mark x y is transposed.
	       * @type {Boolean}
	       */
	      isTransposed: false,
	      /**
	       * The matrix of coordinate
	       * @type {Array}
	       */
	      matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1]
	    };
	  };

	  function Coord(cfg) {
	    _classCallCheck(this, Coord);

	    var defaultCfg = this.getDefaultCfg();
	    Util.mix(this, defaultCfg, cfg);
	    this.init();
	  }

	  Coord.prototype.init = function init() {
	    var start = this.start;
	    var end = this.end;
	    var center = {
	      x: (start.x + end.x) / 2,
	      y: (start.y + end.y) / 2
	    };

	    this.center = center;
	    this.width = Math.abs(end.x - start.x);
	    this.height = Math.abs(end.y - start.y);
	  };

	  Coord.prototype._swapDim = function _swapDim(dim) {
	    var dimRange = this[dim];
	    if (dimRange) {
	      var tmp = dimRange.start;
	      dimRange.start = dimRange.end;
	      dimRange.end = tmp;
	    }
	  };

	  Coord.prototype.getCenter = function getCenter() {
	    return this.center;
	  };

	  Coord.prototype.getWidth = function getWidth() {
	    return this.width;
	  };

	  Coord.prototype.getHeight = function getHeight() {
	    return this.height;
	  };

	  Coord.prototype.convertDim = function convertDim(percent, dim) {
	    var _dim = this[dim],
	        start = _dim.start,
	        end = _dim.end;

	    return start + percent * (end - start);
	  };

	  Coord.prototype.invertDim = function invertDim(value, dim) {
	    var _dim2 = this[dim],
	        start = _dim2.start,
	        end = _dim2.end;

	    return (value - start) / (end - start);
	  };

	  /**
	   * 将归一化的坐标点数据转换为画布坐标
	   * @override
	   * @param  {Object} point 归一化的坐标点
	   * @return {Object}       返回画布坐标
	   */


	  Coord.prototype.convertPoint = function convertPoint(point) {
	    return point;
	  };

	  /**
	   * 将画布坐标转换为归一化的坐标点数据
	   * @override
	   * @param  {Object} point 画布坐标点数据
	   * @return {Object}       归一化后的数据点
	   */


	  Coord.prototype.invertPoint = function invertPoint(point) {
	    return point;
	  };

	  /**
	   * 将坐标点进行矩阵变换
	   * @param  {Number} x   对应 x 轴画布坐标
	   * @param  {Number} y   对应 y 轴画布坐标
	   * @param  {Number} tag 默认为 0，可取值 0, 1
	   * @return {Array}     返回变换后的三阶向量 [x, y, z]
	   */


	  Coord.prototype.applyMatrix = function applyMatrix(x, y) {
	    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var matrix = this.matrix;
	    var vector = [x, y, tag];
	    vec3.transformMat3(vector, vector, matrix);
	    return vector;
	  };

	  /**
	   * 将坐标点进行矩阵逆变换
	   * @param  {Number} x   对应 x 轴画布坐标
	   * @param  {Number} y   对应 y 轴画布坐标
	   * @param  {Number} tag 默认为 0，可取值 0, 1
	   * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]
	   */


	  Coord.prototype.invertMatrix = function invertMatrix(x, y) {
	    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var matrix = this.matrix;
	    var inversedMatrix = mat3.invert([], matrix);
	    var vector = [x, y, tag];
	    vec3.transformMat3(vector, vector, inversedMatrix);
	    return vector;
	  };

	  /**
	   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换
	   * @param  {Object} point 归一化的坐标点
	   * @return {Object}       返回进行矩阵变换后的画布坐标
	   */


	  Coord.prototype.convert = function convert(point) {
	    var _convertPoint = this.convertPoint(point),
	        x = _convertPoint.x,
	        y = _convertPoint.y;

	    var vector = this.applyMatrix(x, y, 1);
	    return {
	      x: vector[0],
	      y: vector[1]
	    };
	  };

	  /**
	   * 将进行过矩阵变换画布坐标转换为归一化坐标
	   * @param  {Object} point 画布坐标
	   * @return {Object}       返回归一化的坐标点
	   */


	  Coord.prototype.invert = function invert(point) {
	    var vector = this.invertMatrix(point.x, point.y, 1);
	    return this.invertPoint({
	      x: vector[0],
	      y: vector[1]
	    });
	  };

	  /**
	   * 坐标系旋转变换
	   * @param  {Number} radian 旋转弧度
	   * @return {Object}        返回坐标系对象
	   */


	  Coord.prototype.rotate = function rotate(radian) {
	    var matrix = this.matrix;
	    var center = this.center;
	    mat3.translate(matrix, matrix, [-center.x, -center.y]);
	    mat3.rotate(matrix, matrix, radian);
	    mat3.translate(matrix, matrix, [center.x, center.y]);
	    return this;
	  };

	  /**
	   * 坐标系反射变换
	   * @param  {String} dim 反射维度
	   * @return {Object}     返回坐标系对象
	   */


	  Coord.prototype.reflect = function reflect(dim) {
	    switch (dim) {
	      case 'x':
	        this._swapDim('x');
	        break;
	      case 'y':
	        this._swapDim('y');
	        break;
	      default:
	        this._swapDim('y');
	    }
	    return this;
	  };

	  /**
	   * 坐标系比例变换
	   * @param  {Number} s1 x 方向缩放比例
	   * @param  {Number} s2 y 方向缩放比例
	   * @return {Object}    返回坐标系对象
	   */


	  Coord.prototype.scale = function scale(s1, s2) {
	    var matrix = this.matrix;
	    var center = this.center;
	    mat3.translate(matrix, matrix, [-center.x, -center.y]);
	    mat3.scale(matrix, matrix, [s1, s2]);
	    mat3.translate(matrix, matrix, [center.x, center.y]);
	    return this;
	  };

	  /**
	   * 坐标系平移变换
	   * @param  {Number} x x 方向平移像素
	   * @param  {Number} y y 方向平移像素
	   * @return {Object}   返回坐标系对象
	   */


	  Coord.prototype.translate = function translate(x, y) {
	    var matrix = this.matrix;
	    mat3.translate(matrix, matrix, [x, y]);
	    return this;
	  };

	  /**
	   * 将坐标系 x y 两个轴进行转置
	   * @return {Object} 返回坐标系对象
	   */


	  Coord.prototype.transpose = function transpose() {
	    this.isTransposed = !this.isTransposed;
	    return this;
	  };

	  return Coord;
	}();

	module.exports = Coord;

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the base class of Axis
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(100),
	    LabelsRenderer = _require.LabelsRenderer;

	var _require2 = __webpack_require__(1),
	    Group = _require2.Group;

	var Grid = __webpack_require__(307);
	var Global = __webpack_require__(2);

	var Base = function (_Group) {
	  _inherits(Base, _Group);

	  function Base() {
	    _classCallCheck(this, Base);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 用于动画，唯一标识的 id
	       * @type {[type]}
	       */
	      _id: null,
	      zIndex: 4,
	      /**
	       * 坐标轴上的坐标点
	       * @type {Array}
	       */
	      ticks: null,
	      /**
	       * 坐标轴线的配置信息，如果设置成null，则不显示轴线
	       * @type {Object}
	       */
	      line: null,
	      /**
	       * 坐标轴刻度线的配置,如果设置成null，则不显示刻度线
	       * @type {Object}
	       */
	      tickLine: null,
	      /**
	       * 次刻度线个数配置
	       * @type {Number}
	       */
	      subTickCount: 0,
	      /**
	       * 次刻度线样式配置
	       * @type {Object}
	       */
	      subTickLine: null,
	      /**
	       * 网格线配置，如果值为 null，则不显示
	       * @type {Object}
	       */
	      grid: null,
	      /**
	       * 坐标轴文本配置
	       * @type {Object}
	       */
	      label: {
	        textStyle: {}, // 坐标轴文本样式
	        autoRotate: true,
	        formatter: null // 坐标轴文本格式化回调函数
	      },
	      /**
	       * 坐标轴标题配置
	       * @type {Object}
	       */
	      title: {
	        autoRotate: true, // 文本是否自动旋转
	        textStyle: {} // 坐标轴标题样式
	      },
	      autoPaint: true,
	      alignWithLabel: false
	    };
	  };

	  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var title = this.get('title');
	    var label = this.get('label');
	    var grid = this.get('grid');
	    if (title) {
	      this.setSilent('title', Util.deepMix({
	        autoRotate: true,
	        textStyle: {
	          fontSize: 12,
	          fill: '#ccc',
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily,
	          textAlign: 'center'
	        },
	        offset: 48
	      }, title));
	    }
	    if (label) {
	      this.setSilent('label', Util.deepMix({
	        autoRotate: true,
	        textStyle: {
	          fontSize: 12,
	          fill: '#ccc',
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily
	        },
	        offset: 10
	      }, label));
	    }
	    if (grid) {
	      this.setSilent('grid', Util.deepMix({
	        lineStyle: {
	          lineWidth: 1,
	          stroke: '#C0D0E0'
	        }
	      }, grid));
	    }
	  };

	  Base.prototype._renderUI = function _renderUI() {
	    var labelCfg = this.get('label');
	    if (labelCfg) {
	      this.renderLabels();
	    }
	    if (this.get('autoPaint')) {
	      this.paint();
	    }
	    if (!Util.isNil(this.get('title'))) {
	      this.renderTitle();
	    }
	    this.sort();
	  };

	  Base.prototype._parseTicks = function _parseTicks(ticks) {
	    ticks = ticks || [];
	    var ticksLength = ticks.length;
	    for (var i = 0; i < ticksLength; i++) {
	      var item = ticks[i];
	      if (!Util.isObject(item)) {
	        ticks[i] = this.parseTick(item, i, ticksLength);
	      }
	    }
	    this.set('ticks', ticks);
	    return ticks;
	  };

	  Base.prototype._addTickItem = function _addTickItem(index, point, length) {
	    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	    var tickItems = this.get('tickItems');
	    var subTickItems = this.get('subTickItems');
	    var end = this.getTickEnd(point, length, index);

	    var cfg = {
	      x1: point.x,
	      y1: point.y,
	      x2: end.x,
	      y2: end.y
	    };

	    if (!tickItems) {
	      tickItems = [];
	    }

	    if (!subTickItems) {
	      subTickItems = [];
	    }

	    if (type === 'sub') {
	      subTickItems.push(cfg);
	    } else {
	      tickItems.push(cfg);
	    }

	    this.set('tickItems', tickItems);
	    this.set('subTickItems', subTickItems);
	  };

	  Base.prototype._renderLine = function _renderLine() {
	    var lineCfg = this.get('line');
	    var path = void 0;
	    if (lineCfg) {
	      path = this.getLinePath();
	      lineCfg = Util.mix({
	        path: path
	      }, lineCfg);
	      var lineShape = this.addShape('path', {
	        attrs: lineCfg
	      });
	      lineShape.name = 'axis-line';
	      this.get('appendInfo') && lineShape.setSilent('appendInfo', this.get('appendInfo'));
	      this.set('lineShape', lineShape);
	    }
	  };

	  Base.prototype._processCatTicks = function _processCatTicks() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var tickLineCfg = self.get('tickLine');
	    var ticks = self.get('ticks');
	    ticks = self._parseTicks(ticks);
	    var tickSeg = 0;
	    if (ticks.length > 1) {
	      tickSeg = (ticks[1].value - ticks[0].value) / 2;
	    }

	    Util.each(ticks, function (tick, index) {
	      var tickPoint = self.getTickPoint(tick.value, index);
	      var tickPoint0 = self.getTickPoint(tick.value - tickSeg, index);
	      var tickPoint1 = self.getTickPoint(tick.value + tickSeg, index);
	      if (tickLineCfg) {
	        self._addTickItem(index, tickPoint0, tickLineCfg.length);
	        self._addTickItem(index, tickPoint1, tickLineCfg.length);
	      }
	      if (labelCfg) {
	        self.addLabel(tick, tickPoint, index);
	      }
	    });
	  };

	  Base.prototype._processTicks = function _processTicks() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var subTickCount = self.get('subTickCount');
	    var tickLineCfg = self.get('tickLine');
	    var ticks = self.get('ticks');
	    ticks = self._parseTicks(ticks);

	    Util.each(ticks, function (tick, index) {
	      var tickPoint = self.getTickPoint(tick.value, index);
	      if (tickLineCfg) {
	        self._addTickItem(index, tickPoint, tickLineCfg.length);
	      }
	      if (labelCfg) {
	        self.addLabel(tick, tickPoint, index);
	      }
	    });

	    if (subTickCount) {
	      // 如果有设置次级分点，添加次级tick
	      var subTickLineCfg = self.get('subTickLine');
	      Util.each(ticks, function (tick, index) {
	        if (index > 0) {
	          var diff = tick.value - ticks[index - 1].value;
	          diff = diff / (self.get('subTickCount') + 1);

	          for (var i = 1; i <= subTickCount; i++) {
	            var subTick = {
	              text: '',
	              value: index ? ticks[index - 1].value + i * diff : i * diff
	            };

	            var tickPoint = self.getTickPoint(subTick.value);
	            var subTickLength = void 0;
	            if (subTickLineCfg && subTickLineCfg.length) {
	              subTickLength = subTickLineCfg.length;
	            } else {
	              subTickLength = parseInt(tickLineCfg.length * (3 / 5), 10);
	            }
	            self._addTickItem(i - 1, tickPoint, subTickLength, 'sub');
	          }
	        }
	      });
	    }
	  };

	  Base.prototype._addTickLine = function _addTickLine(ticks, lineCfg) {
	    var self = this;
	    var cfg = Util.mix({}, lineCfg);
	    var path = [];
	    Util.each(ticks, function (item) {
	      path.push(['M', item.x1, item.y1]);
	      path.push(['L', item.x2, item.y2]);
	    });
	    delete cfg.length;
	    cfg.path = path;
	    var tickShape = self.addShape('path', {
	      attrs: cfg
	    });
	    tickShape.name = 'axis-ticks';
	    tickShape._id = self.get('_id') + '-ticks';
	    tickShape.set('coord', self.get('coord'));
	    self.get('appendInfo') && tickShape.setSilent('appendInfo', self.get('appendInfo'));
	  };

	  Base.prototype._renderTicks = function _renderTicks() {
	    var self = this;
	    var tickItems = self.get('tickItems');
	    var subTickItems = self.get('subTickItems');

	    if (!Util.isEmpty(tickItems)) {
	      var tickLineCfg = self.get('tickLine');
	      self._addTickLine(tickItems, tickLineCfg);
	    }

	    if (!Util.isEmpty(subTickItems)) {
	      var subTickLineCfg = self.get('subTickLine') || self.get('tickLine');
	      self._addTickLine(subTickItems, subTickLineCfg);
	    }
	  };

	  Base.prototype._renderGrid = function _renderGrid() {
	    var grid = this.get('grid');
	    if (!grid) {
	      return;
	    }
	    grid.coord = this.get('coord');
	    grid.appendInfo = this.get('appendInfo');
	    this.set('gridGroup', this.addGroup(Grid, grid));
	  };

	  Base.prototype.paint = function paint() {
	    this._renderLine();
	    var type = this.get('type');
	    if (type === 'cat' || type === 'timecat') {
	      this._processCatTicks();
	    } else {
	      this._processTicks();
	    }
	    this._renderTicks();
	    this._renderGrid();
	    var labelCfg = this.get('label');
	    if (labelCfg && labelCfg.autoRotate) {
	      this.autoRotateLabels();
	    }
	  };

	  Base.prototype.parseTick = function parseTick(tick, index, length) {
	    return {
	      text: tick,
	      value: index / (length - 1)
	    };
	  };

	  Base.prototype.getTextAnchor = function getTextAnchor(vector) {
	    var ratio = Math.abs(vector[1] / vector[0]);
	    var align = void 0;
	    if (ratio >= 1) {
	      // 上面或者下面
	      align = 'center';
	    } else {
	      if (vector[0] > 0) {
	        // 右侧
	        align = 'start';
	      } else {
	        // 左侧
	        align = 'end';
	      }
	    }
	    return align;
	  };

	  Base.prototype.getMaxLabelWidth = function getMaxLabelWidth(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    var max = 0;
	    Util.each(labels, function (label) {
	      var bbox = label.getBBox();
	      var width = bbox.width;
	      if (max < width) {
	        max = width;
	      }
	    });
	    return max;
	  };

	  Base.prototype.remove = function remove() {
	    _Group.prototype.remove.call(this);
	    var gridGroup = this.get('gridGroup');
	    gridGroup && gridGroup.remove();
	    this.removeLabels();
	  };

	  /**
	   * 旋转文本
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.autoRotateLabels = function autoRotateLabels() {};

	  /**
	   * 渲染标题
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.renderTitle = function renderTitle() {};

	  /**
	   * 获取坐标轴线的 path
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getLinePath = function getLinePath() {};

	  /**
	   * 获取 tick 在画布上的位置
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getTickPoint = function getTickPoint() {};

	  /**
	   * 获取标示坐标点的线的终点
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getTickEnd = function getTickEnd() {};

	  /**
	   * 获取距离坐标轴的向量
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getSideVector = function getSideVector() {};

	  return Base;
	}(Group);

	Util.assign(Base.prototype, LabelsRenderer, {
	  addLabel: function addLabel(tick, point, index) {
	    var labelsGroup = this.get('labelsGroup');
	    var label = {};
	    var rst = void 0;

	    if (labelsGroup) {
	      var offset = this.get('_labelOffset');
	      if (!Util.isNil(this.get('label').offset)) {
	        offset = this.get('label').offset;
	      }
	      var vector = this.getSideVector(offset, point, index);
	      point = {
	        x: point.x + vector[0],
	        y: point.y + vector[1]
	      };
	      label.text = tick.text;
	      label.x = point.x;
	      label.y = point.y;
	      label.textAlign = this.getTextAnchor(vector);
	      rst = labelsGroup.addLabel(label);
	      if (rst) {
	        rst.name = 'axis-label';
	        rst._id = this.get('_id') + '-' + tick.tickValue;
	        rst.set('coord', this.get('coord'));
	        this.get('appendInfo') && rst.setSilent('appendInfo', this.get('appendInfo'));
	      }
	    }
	    return rst;
	  }
	});

	module.exports = Base;

	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24),
	    stackClear = __webpack_require__(126),
	    stackDelete = __webpack_require__(127),
	    stackGet = __webpack_require__(128),
	    stackHas = __webpack_require__(129),
	    stackSet = __webpack_require__(130);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;

	/***/ }),
	/* 41 */
	/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}

	module.exports = eq;

	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;

	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(138),
	    mapCacheDelete = __webpack_require__(145),
	    mapCacheGet = __webpack_require__(147),
	    mapCacheHas = __webpack_require__(148),
	    mapCacheSet = __webpack_require__(149);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;

	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(45),
	    eq = __webpack_require__(41);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(68);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;

	/***/ }),
	/* 46 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(155),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;

	/***/ }),
	/* 48 */
	/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(73),
	    stubArray = __webpack_require__(74);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function (symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;

	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(71);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(79);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(188),
	    isObjectLike = __webpack_require__(5);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;

	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;

	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(35),
	    toKey = __webpack_require__(20);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return index && index == length ? object : undefined;
	}

	module.exports = baseGet;

	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isArray = __webpack_require__(3),
	    isSymbol = __webpack_require__(19);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}

	module.exports = isKey;

	/***/ }),
	/* 57 */
	/***/ (function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;

	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Chart、View、Geometry 的基类
	 * @author dxq613@gmail.com
	 */

	var EventEmitter = __webpack_require__(271);
	var Util = __webpack_require__(0);

	var Base = function (_EventEmitter) {
	  _inherits(Base, _EventEmitter);

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {};
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

	    var attrs = {
	      visible: true
	    };
	    var defaultCfg = _this.getDefaultCfg();
	    _this._attrs = attrs;
	    Util.assign(attrs, defaultCfg, cfg);
	    return _this;
	  }

	  Base.prototype.get = function get(name) {
	    return this._attrs[name];
	  };

	  Base.prototype.set = function set(name, value) {
	    this._attrs[name] = value;
	  };

	  Base.prototype.show = function show() {
	    var visible = this.get('visible');
	    if (!visible) {
	      this.set('visible', true);
	      this.changeVisible(true);
	    }
	  };

	  Base.prototype.hide = function hide() {
	    var visible = this.get('visible');
	    if (visible) {
	      this.set('visible', false);
	      this.changeVisible(false);
	    }
	  };

	  /**
	   * @protected
	   * @param {Boolean} visible 是否可见
	   * 显示、隐藏
	   */


	  Base.prototype.changeVisible = function changeVisible() /* visible */{};

	  Base.prototype.destroy = function destroy() {
	    this._attrs = {};
	    this.removeAllListeners();
	    this.destroyed = true;
	  };

	  return Base;
	}(EventEmitter);

	module.exports = Base;

	/***/ }),
	/* 59 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_create__ = __webpack_require__(392);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return __WEBPACK_IMPORTED_MODULE_0__src_create__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_creator__ = __webpack_require__(336);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "creator", function() { return __WEBPACK_IMPORTED_MODULE_1__src_creator__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_local__ = __webpack_require__(421);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "local", function() { return __WEBPACK_IMPORTED_MODULE_2__src_local__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_matcher__ = __webpack_require__(362);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "matcher", function() { return __WEBPACK_IMPORTED_MODULE_3__src_matcher__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_mouse__ = __webpack_require__(422);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mouse", function() { return __WEBPACK_IMPORTED_MODULE_4__src_mouse__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_namespace__ = __webpack_require__(348);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "namespace", function() { return __WEBPACK_IMPORTED_MODULE_5__src_namespace__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_namespaces__ = __webpack_require__(349);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "namespaces", function() { return __WEBPACK_IMPORTED_MODULE_6__src_namespaces__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_point__ = __webpack_require__(337);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clientPoint", function() { return __WEBPACK_IMPORTED_MODULE_7__src_point__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_select__ = __webpack_require__(360);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return __WEBPACK_IMPORTED_MODULE_8__src_select__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_selectAll__ = __webpack_require__(423);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selectAll", function() { return __WEBPACK_IMPORTED_MODULE_9__src_selectAll__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_selection_index__ = __webpack_require__(60);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selection", function() { return __WEBPACK_IMPORTED_MODULE_10__src_selection_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_selector__ = __webpack_require__(350);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selector", function() { return __WEBPACK_IMPORTED_MODULE_11__src_selector__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_selectorAll__ = __webpack_require__(361);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selectorAll", function() { return __WEBPACK_IMPORTED_MODULE_12__src_selectorAll__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_selection_style__ = __webpack_require__(365);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return __WEBPACK_IMPORTED_MODULE_13__src_selection_style__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_touch__ = __webpack_require__(424);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "touch", function() { return __WEBPACK_IMPORTED_MODULE_14__src_touch__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_touches__ = __webpack_require__(425);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "touches", function() { return __WEBPACK_IMPORTED_MODULE_15__src_touches__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_window__ = __webpack_require__(351);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return __WEBPACK_IMPORTED_MODULE_16__src_window__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_selection_on__ = __webpack_require__(352);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "event", function() { return __WEBPACK_IMPORTED_MODULE_17__src_selection_on__["c"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "customEvent", function() { return __WEBPACK_IMPORTED_MODULE_17__src_selection_on__["a"]; });



















	/***/ }),
	/* 60 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return root; });
	/* harmony export (immutable) */ __webpack_exports__["a"] = Selection;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__select__ = __webpack_require__(393);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectAll__ = __webpack_require__(394);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__filter__ = __webpack_require__(395);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data__ = __webpack_require__(396);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enter__ = __webpack_require__(363);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__exit__ = __webpack_require__(398);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__merge__ = __webpack_require__(399);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__order__ = __webpack_require__(400);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sort__ = __webpack_require__(401);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__call__ = __webpack_require__(402);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__nodes__ = __webpack_require__(403);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__node__ = __webpack_require__(404);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__size__ = __webpack_require__(405);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__empty__ = __webpack_require__(406);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__each__ = __webpack_require__(407);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__attr__ = __webpack_require__(408);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__style__ = __webpack_require__(365);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__property__ = __webpack_require__(409);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__classed__ = __webpack_require__(410);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__text__ = __webpack_require__(411);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__html__ = __webpack_require__(412);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__raise__ = __webpack_require__(413);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__lower__ = __webpack_require__(414);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__append__ = __webpack_require__(415);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__insert__ = __webpack_require__(416);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__remove__ = __webpack_require__(417);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__clone__ = __webpack_require__(418);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__datum__ = __webpack_require__(419);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__on__ = __webpack_require__(352);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__dispatch__ = __webpack_require__(420);































	var root = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: __WEBPACK_IMPORTED_MODULE_0__select__["a" /* default */],
	  selectAll: __WEBPACK_IMPORTED_MODULE_1__selectAll__["a" /* default */],
	  filter: __WEBPACK_IMPORTED_MODULE_2__filter__["a" /* default */],
	  data: __WEBPACK_IMPORTED_MODULE_3__data__["a" /* default */],
	  enter: __WEBPACK_IMPORTED_MODULE_4__enter__["b" /* default */],
	  exit: __WEBPACK_IMPORTED_MODULE_5__exit__["a" /* default */],
	  merge: __WEBPACK_IMPORTED_MODULE_6__merge__["a" /* default */],
	  order: __WEBPACK_IMPORTED_MODULE_7__order__["a" /* default */],
	  sort: __WEBPACK_IMPORTED_MODULE_8__sort__["a" /* default */],
	  call: __WEBPACK_IMPORTED_MODULE_9__call__["a" /* default */],
	  nodes: __WEBPACK_IMPORTED_MODULE_10__nodes__["a" /* default */],
	  node: __WEBPACK_IMPORTED_MODULE_11__node__["a" /* default */],
	  size: __WEBPACK_IMPORTED_MODULE_12__size__["a" /* default */],
	  empty: __WEBPACK_IMPORTED_MODULE_13__empty__["a" /* default */],
	  each: __WEBPACK_IMPORTED_MODULE_14__each__["a" /* default */],
	  attr: __WEBPACK_IMPORTED_MODULE_15__attr__["a" /* default */],
	  style: __WEBPACK_IMPORTED_MODULE_16__style__["a" /* default */],
	  property: __WEBPACK_IMPORTED_MODULE_17__property__["a" /* default */],
	  classed: __WEBPACK_IMPORTED_MODULE_18__classed__["a" /* default */],
	  text: __WEBPACK_IMPORTED_MODULE_19__text__["a" /* default */],
	  html: __WEBPACK_IMPORTED_MODULE_20__html__["a" /* default */],
	  raise: __WEBPACK_IMPORTED_MODULE_21__raise__["a" /* default */],
	  lower: __WEBPACK_IMPORTED_MODULE_22__lower__["a" /* default */],
	  append: __WEBPACK_IMPORTED_MODULE_23__append__["a" /* default */],
	  insert: __WEBPACK_IMPORTED_MODULE_24__insert__["a" /* default */],
	  remove: __WEBPACK_IMPORTED_MODULE_25__remove__["a" /* default */],
	  clone: __WEBPACK_IMPORTED_MODULE_26__clone__["a" /* default */],
	  datum: __WEBPACK_IMPORTED_MODULE_27__datum__["a" /* default */],
	  on: __WEBPACK_IMPORTED_MODULE_28__on__["b" /* default */],
	  dispatch: __WEBPACK_IMPORTED_MODULE_29__dispatch__["a" /* default */]
	};

	/* harmony default export */ __webpack_exports__["b"] = (selection);

	/***/ }),
	/* 61 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export CREATED */
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SCHEDULED; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return STARTING; });
	/* unused harmony export STARTED */
	/* unused harmony export RUNNING */
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ENDING; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ENDED; });
	/* harmony export (immutable) */ __webpack_exports__["g"] = init;
	/* harmony export (immutable) */ __webpack_exports__["h"] = set;
	/* harmony export (immutable) */ __webpack_exports__["f"] = get;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_dispatch__ = __webpack_require__(428);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_timer__ = __webpack_require__(368);



	var emptyOn = Object(__WEBPACK_IMPORTED_MODULE_0_d3_dispatch__["a" /* dispatch */])("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	/* harmony default export */ __webpack_exports__["e"] = (function (node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	});

	function init(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}

	function set(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > STARTING) throw new Error("too late; already started");
	  return schedule;
	}

	function get(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["c" /* timer */])(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	          o.state = ENDED;
	          o.timer.stop();
	          delete schedules[i];
	        }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(function () {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) {
	      return;
	    } // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {

	var G = __webpack_require__(1);
	var Animate = __webpack_require__(64);
	var Chart = __webpack_require__(115);
	var Global = __webpack_require__(2);
	var Scale = __webpack_require__(104);
	var Shape = __webpack_require__(10);
	var Util = __webpack_require__(0);

	var G2 = {
	  // version
	  version: Global.version,
	  // visual encoding
	  Animate: Animate,
	  Chart: Chart,
	  Global: Global,
	  Scale: Scale,
	  Shape: Shape,
	  Util: Util,
	  // render engine
	  G: G,
	  DomUtil: G.DomUtil,
	  MatrixUtil: G.MatrixUtil,
	  PathUtil: G.PathUtil
	};

	G2.track = function (enable) {
	  Global.trackable = enable;
	};
	__webpack_require__(331);

	// 保证两个版本共存
	if (typeof window !== 'undefined') {
	  if (window.G2) {
	    console.warn('There are multiple versions of G2. Version ' + G2.version + '\'s reference is \'window.G2_3\'');
	  } else {
	    window.G2 = G2;
	  }
	}

	module.exports = G2;

	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 颜色计算的辅助方法
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var RGB_REG = /rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;

	// 创建辅助 tag 取颜色
	function createTmp() {
	  var i = document.createElement('i');
	  i.title = 'Web Colour Picker';
	  i.style.display = 'none';
	  document.body.appendChild(i);
	  return i;
	}

	// 获取颜色之间的插值
	function getValue(start, end, percent, index) {
	  var value = start[index] + (end[index] - start[index]) * percent;
	  return value;
	}

	// 数组转换成颜色
	function arr2rgb(arr) {
	  return '#' + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);
	}

	// 将数值从 0-255 转换成16进制字符串
	function toHex(value) {
	  value = Math.round(value);
	  value = value.toString(16);
	  if (value.length === 1) {
	    value = '0' + value;
	  }
	  return value;
	}

	function calColor(colors, percent) {
	  if (Util.isNaN(percent) || !Util.isNumber(percent)) {
	    percent = 0;
	  }
	  var steps = colors.length - 1;
	  var step = Math.floor(steps * percent);
	  var left = steps * percent - step;
	  var start = colors[step];
	  var end = step === steps ? start : colors[step + 1];
	  var rgb = arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);
	  return rgb;
	}

	// rgb 颜色转换成数组
	function rgb2arr(str) {
	  var arr = [];
	  arr.push(parseInt(str.substr(1, 2), 16));
	  arr.push(parseInt(str.substr(3, 2), 16));
	  arr.push(parseInt(str.substr(5, 2), 16));
	  return arr;
	}

	var colorCache = {};
	var iEl = null;
	var ColorUtil = {
	  /**
	   * 将颜色转换到 rgb 的格式
	   * @param  {String} color 颜色
	   * @return {String} 将颜色转换到 '#ffffff' 的格式
	   */
	  toRGB: function toRGB(color) {
	    // 如果已经是 rgb的格式
	    if (color[0] === '#' && color.length === 7) {
	      return color;
	    }
	    if (!iEl) {
	      // 防止防止在页头报错
	      iEl = createTmp();
	    }
	    var rst = void 0;
	    if (colorCache[color]) {
	      rst = colorCache[color];
	    } else {
	      iEl.style.color = color;
	      rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');
	      var cArray = RGB_REG.exec(rst);
	      cArray.shift();
	      rst = arr2rgb(cArray);
	      colorCache[color] = rst;
	    }
	    return rst;
	  },


	  rgb2arr: rgb2arr,

	  /**
	   * 获取渐变函数
	   * @param  {Array} colors 多个颜色
	   * @return {String} 颜色值
	   */
	  gradient: function gradient(colors) {
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors, function (color) {
	      if (color.indexOf('#') === -1) {
	        color = ColorUtil.toRGB(color);
	      }
	      points.push(rgb2arr(color));
	    });
	    return function (percent) {
	      return calColor(points, percent);
	    };
	  }
	};

	module.exports = ColorUtil;

	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Default animation configuration for geoms
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Action = __webpack_require__(270);

	var defaultAnimationCfg = {
	  appear: {
	    duration: 450,
	    easing: 'easeQuadOut'
	  }, // 初始入场动画配置
	  update: {
	    duration: 450,
	    easing: 'easeQuadInOut'
	  }, // 更新时发生变更的动画配置
	  enter: {
	    duration: 400,
	    easing: 'easeQuadInOut',
	    delay: 100
	  }, // 更新时新增元素的入场动画配置
	  leave: {
	    duration: 350,
	    easing: 'easeQuadIn' // 更新时销毁动画配置
	  } };

	var Animate = {
	  line: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  path: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  area: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },

	    cfg: {
	      appear: {
	        duration: 500,
	        easing: 'easeQuadOut'
	      },
	      update: {
	        duration: 450,
	        easing: 'easeQuadInOut'
	      },
	      enter: {
	        duration: 600,
	        delay: 150,
	        easing: 'easeQuadInOut'
	      },
	      leave: {
	        easing: 'easeQuadOut',
	        duration: 350
	      }
	    }
	  },
	  polygon: {
	    appear: function appear() {
	      return Action.appear.zoomIn;
	    },
	    enter: function enter() {
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.zoomOut;
	    }
	  },
	  edge: {
	    appear: function appear() {
	      return Action.appear.pathIn;
	    },
	    enter: function enter() {
	      return Action.enter.pathIn;
	    },
	    leave: function leave() {
	      return Action.leave.pathOut;
	    }
	  },
	  interval: {
	    appear: function appear(coord) {
	      var result = void 0;
	      if (coord.isPolar) {
	        result = Action.appear.zoomIn;
	        if (coord.isTransposed || coord.type === 'theta') {
	          result = Action.appear.fanIn;
	        }
	      } else if (coord.isRect) {
	        result = coord.isTransposed ? Action.appear.scaleInX : Action.appear.scaleInY;
	      } else {
	        result = Action.appear.zoomIn;
	      }
	      return result;
	    },
	    enter: function enter(coord) {
	      if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
	        return Action.enter.fadeIn;
	      }
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.type === 'theta') {
	        return Action.update.fanIn;
	      }
	    }
	  },
	  point: {
	    appear: function appear() {
	      return Action.appear.zoomIn;
	    },
	    enter: function enter() {
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.zoomOut;
	    }
	  },
	  schema: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  contour: null,
	  heatmap: null,
	  label: {
	    appear: function appear() {
	      return Action.appear.fadeIn;
	    },
	    enter: function enter() {
	      return Action.enter.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },

	    cfg: {
	      appear: {
	        duration: 900
	      }
	    }
	  },
	  'axis-label': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-ticks': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-grid': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-grid-rect': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update() {
	      return Action.leave.fadeIn;
	    }
	  },
	  labelLine: {
	    appear: function appear() {
	      return Action.appear.pathIn;
	    },
	    enter: function enter() {
	      return Action.enter.pathIn;
	    },
	    leave: function leave() {
	      return Action.leave.pathOut;
	    }
	  }
	};

	Animate.Action = Action;
	Animate.defaultCfg = defaultAnimationCfg;

	// 获取动画
	Animate.getAnimation = function (geomType, coord, animationType) {
	  var geomAnimateCfg = this[geomType];
	  if (geomAnimateCfg) {
	    var animation = geomAnimateCfg[animationType];
	    if (Util.isFunction(animation)) {
	      return animation(coord);
	    }
	  }
	  return false;
	};

	// 获取动画配置
	Animate.getAnimateCfg = function (geomType, animationType) {
	  var defaultCfg = defaultAnimationCfg[animationType];
	  if (this[geomType] && this[geomType].cfg && this[geomType].cfg[animationType]) {
	    return Util.deepMix({}, defaultCfg, this[geomType].cfg[animationType]);
	  }
	  return defaultCfg;
	};

	// 注册动画
	Animate.registerAnimation = function (animationType, animationName, animationFun) {
	  if (!this.Action[animationType]) {
	    this.Action[animationType] = {};
	  }
	  this.Action[animationType][animationName] = animationFun;
	};

	module.exports = Animate;

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObject = __webpack_require__(7);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	    if (!isObject(value)) {
	        return false;
	    }
	    // The use of `Object#toString` avoids issues with the `typeof` operator
	    // in Safari 9 which returns 'object' for typed arrays and other constructors.
	    var tag = baseGetTag(value);
	    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(132)))

	/***/ }),
	/* 67 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8);

	var defineProperty = function () {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}();

	module.exports = defineProperty;

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(152),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isIndex = __webpack_require__(46),
	    isTypedArray = __webpack_require__(47);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	    // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' ||
	    // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') ||
	    // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	    // Skip index properties.
	    isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(33),
	    nativeKeys = __webpack_require__(156);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;

	/***/ }),
	/* 71 */
	/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(69),
	    baseKeysIn = __webpack_require__(158),
	    isArrayLike = __webpack_require__(12);

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;

	/***/ }),
	/* 73 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;

	/***/ }),
	/* 74 */
	/***/ (function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    getPrototype = __webpack_require__(51),
	    getSymbols = __webpack_require__(49),
	    stubArray = __webpack_require__(74);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};

	module.exports = getSymbolsIn;

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(77),
	    getSymbols = __webpack_require__(49),
	    keys = __webpack_require__(17);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    isArray = __webpack_require__(3);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;

	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;

	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(81),
	    arraySome = __webpack_require__(191),
	    cacheHas = __webpack_require__(82);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;

	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(43),
	    setCacheAdd = __webpack_require__(189),
	    setCacheHas = __webpack_require__(190);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	    var index = -1,
	        length = values == null ? 0 : values.length;

	    this.__data__ = new MapCache();
	    while (++index < length) {
	        this.add(values[index]);
	    }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;

	/***/ }),
	/* 82 */
	/***/ (function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;

	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;

	/***/ }),
	/* 84 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function (object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	  };
	}

	module.exports = matchesStrictComparable;

	/***/ }),
	/* 85 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;

	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(202),
	    hasPath = __webpack_require__(203);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;

	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(88);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	module.exports = flatten;

	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    isFlattenable = __webpack_require__(207);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;

	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(213),
	    baseIsNaN = __webpack_require__(214),
	    strictIndexOf = __webpack_require__(215);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	module.exports = baseIndexOf;

	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(216);

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? remainder ? result - remainder : result : 0;
	}

	module.exports = toInteger;

	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7),
	    isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}

	module.exports = toNumber;

	/***/ }),
	/* 92 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	module.exports = hasUnicode;

	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(19);

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
	      var computed = current,
	          result = value;
	    }
	  }
	  return result;
	}

	module.exports = baseExtremum;

	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(244);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;

	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(245),
	    shortOut = __webpack_require__(247);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;

	/***/ }),
	/* 96 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;

	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(81),
	    arrayIncludes = __webpack_require__(255),
	    arrayIncludesWith = __webpack_require__(256),
	    cacheHas = __webpack_require__(82),
	    createSet = __webpack_require__(257),
	    setToArray = __webpack_require__(54);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  } else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache();
	  } else {
	    seen = iteratee ? [] : result;
	  }
	  outer: while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = comparator || value !== 0 ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    } else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;

	/***/ }),
	/* 98 */
	/***/ (function(module, exports) {

	var _html, _tooltip;

	/**
	 * @fileOverview G2 3.0 default theme
	 * @author sima.zhang
	 */
	var DEFAULT_COLOR = '#1890FF';
	var COLOR_PLATE_8 = ['#1890FF', '#2FC25B', '#FACC14', '#223273', '#8543E0', '#13C2C2', '#3436C7', '#F04864'];
	var COLOR_PLATE_16 = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#E6965C', '#223273', '#7564CC', '#8543E0', '#5C8EE6', '#13C2C2', '#5CA3E6', '#3436C7', '#B381E6', '#F04864', '#D598D9'];
	var COLOR_PLATE_24 = ['#1890FF', '#66B5FF', '#41D9C7', '#2FC25B', '#6EDB8F', '#9AE65C', '#FACC14', '#E6965C', '#57AD71', '#223273', '#738AE6', '#7564CC', '#8543E0', '#A877ED', '#5C8EE6', '#13C2C2', '#70E0E0', '#5CA3E6', '#3436C7', '#8082FF', '#DD81E6', '#F04864', '#FA7D92', '#D598D9'];
	var COLOR_PIE = ['#1890FF', '#13C2C2', '#2FC25B', '#FACC14', '#F04864', '#8543E0', '#3436C7', '#223273'];
	var COLOR_PIE_16 = ['#1890FF', '#73C9E6', '#13C2C2', '#6CD9B3', '#2FC25B', '#9DD96C', '#FACC14', '#E6965C', '#F04864', '#D66BCA', '#8543E0', '#8E77ED', '#3436C7', '#737EE6', '#223273', '#7EA2E6'];

	var FONT_FAMILY = '"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"';
	// tooltip 相关 dom 的 css 类名
	var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
	var TOOLTIP_TITLE_CLASS = 'g2-tooltip-title';
	var TOOLTIP_LIST_CLASS = 'g2-tooltip-list';
	var TOOLTIP_LIST_ITEM_CLASS = 'g2-tooltip-list-item';
	var TOOLTIP_MARKER_CLASS = 'g2-tooltip-marker';

	// html 渲染的 legend 相关 dom 的 css 类型
	var LEGEND_CONTAINER_CLASS = 'g2-legend';
	var LEGEND_TITLE_CLASS = 'g2-legend-title';
	var LEGEND_LIST_CLASS = 'g2-legend-list';
	var LEGEND_LIST_ITEM_CLASS = 'g2-legend-list-item';
	var LEGEND_MARKER_CLASS = 'g2-legend-marker';

	var Theme = {
	  defaultColor: DEFAULT_COLOR, // 默认主题色
	  plotCfg: {
	    padding: [20, 20, 95, 80]
	  },
	  fontFamily: FONT_FAMILY,
	  defaultLegendPosition: 'bottom', // 默认图例的展示位置
	  colors: COLOR_PLATE_8,
	  colors_16: COLOR_PLATE_16,
	  colors_24: COLOR_PLATE_24,
	  colors_pie: COLOR_PIE,
	  colors_pie_16: COLOR_PIE_16,
	  shapes: {
	    point: ['hollowCircle', 'hollowSquare', 'hollowDiamond', 'hollowBowtie', 'hollowTriangle', 'hollowHexagon', 'cross', 'tick', 'plus', 'hyphen', 'line'],
	    line: ['line', 'dash', 'dot'],
	    area: ['area']
	  },
	  sizes: [1, 10],
	  opacities: [0.1, 0.9],
	  axis: {
	    top: {
	      // zIndex: 1, // 默认上下方向的坐标轴位于左右坐标轴的上方
	      position: 'top',
	      title: null,
	      label: {
	        offset: 14,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        },
	        autoRotate: true
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      }
	    },
	    bottom: {
	      position: 'bottom',
	      title: null,
	      label: {
	        offset: 22,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      }
	    },
	    left: {
	      position: 'left',
	      title: null,
	      label: {
	        offset: 12,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        zIndex: -1,
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    right: {
	      position: 'right',
	      title: null,
	      label: {
	        offset: 12,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    circle: {
	      zIndex: 1,
	      title: null,
	      label: {
	        offset: 12,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    radius: {
	      zIndex: 0,
	      label: {
	        offset: 12,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          textBaseline: 'middle',
	          lineHeight: 20,
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        type: 'circle'
	      }
	    },
	    helix: {
	      grid: null,
	      label: null,
	      title: null,
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        length: 4,
	        stroke: '#BFBFBF'
	      }
	    }
	  },
	  label: {
	    offset: 20,
	    textStyle: {
	      fill: '#545454',
	      fontSize: 12,
	      textBaseline: 'middle',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  treemapLabels: {
	    offset: 10,
	    textStyle: {
	      fill: '#fff',
	      fontSize: 12,
	      textBaseline: 'top',
	      fontStyle: 'bold',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  innerLabels: {
	    textStyle: {
	      fill: '#fff',
	      fontSize: 12,
	      textBaseline: 'middle',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  // 在theta坐标系下的饼图文本内部的样式
	  thetaLabels: {
	    labelLine: {
	      lineWidth: 1
	    },
	    labelHeight: 14,
	    offset: 30
	    // 在theta坐标系下的饼图文本的样式
	  },
	  legend: {
	    right: {
	      position: 'right',
	      layout: 'vertical',
	      itemMarginBottom: 8, // layout 为 vertical 时各个图例项的间距
	      width: 16,
	      height: 156,
	      title: null,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    left: {
	      position: 'left',
	      layout: 'vertical',
	      itemMarginBottom: 8,
	      width: 16,
	      height: 156,
	      title: null,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    top: {
	      position: 'top',
	      offset: 6,
	      layout: 'horizontal',
	      title: null,
	      itemGap: 10,
	      width: 156,
	      height: 16,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    bottom: {
	      position: 'bottom',
	      offset: 6,
	      layout: 'horizontal',
	      title: null,
	      itemGap: 10,
	      width: 156,
	      height: 16,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    // 定义 html 渲染图例的样式
	    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
	      height: 'auto',
	      width: 'auto',
	      position: 'absolute',
	      overflow: 'auto',
	      fontSize: '12px',
	      fontFamily: FONT_FAMILY,
	      lineHeight: '20px',
	      color: '#8C8C8C'
	    }, _html['' + LEGEND_TITLE_CLASS] = {
	      marginBottom: '4px'
	    }, _html['' + LEGEND_LIST_CLASS] = {
	      listStyleType: 'none',
	      margin: 0,
	      padding: 0
	    }, _html['' + LEGEND_LIST_ITEM_CLASS] = {
	      cursor: 'pointer',
	      marginBottom: '5px',
	      marginRight: '24px'
	    }, _html['' + LEGEND_MARKER_CLASS] = {
	      width: '9px',
	      height: '9px',
	      borderRadius: '50%',
	      display: 'inline-block',
	      marginRight: '8px',
	      verticalAlign: 'middle'
	    }, _html),
	    // 不能滑动的连续图例样式
	    gradient: {
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'center',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      lineStyle: {
	        lineWidth: 1,
	        stroke: '#fff'
	      },
	      unCheckColor: '#bfbfbf'
	    },
	    margin: [0, 20, 24, 5], // 图例跟四个边的坐标轴、绘图区域的间距
	    legendMargin: 24 // 图例之间的间距
	  },
	  tooltip: (_tooltip = {
	    crosshairs: false,
	    offset: 15
	  }, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
	    position: 'absolute',
	    visibility: 'hidden',
	    whiteSpace: 'nowrap',
	    zIndex: 8,
	    transition: 'visibility 0.2s cubic-bezier(0.23, 1, 0.32, 1), left 0.4s cubic-bezier(0.23, 1, 0.32, 1), top 0.4s cubic-bezier(0.23, 1, 0.32, 1)',
	    backgroundColor: 'rgba(0, 0, 0, 0.65)',
	    borderRadius: '4px',
	    color: 'rgb(255, 255, 255)',
	    fontSize: '12px',
	    fontFamily: FONT_FAMILY,
	    lineHeight: '20px',
	    padding: '10px 10px 6px 10px'
	  }, _tooltip['' + TOOLTIP_TITLE_CLASS] = {
	    marginBottom: '4px'
	  }, _tooltip['' + TOOLTIP_LIST_CLASS] = {
	    margin: 0,
	    listStyleType: 'none',
	    padding: 0
	  }, _tooltip['' + TOOLTIP_LIST_ITEM_CLASS] = {
	    marginBottom: '4px'
	  }, _tooltip['' + TOOLTIP_MARKER_CLASS] = {
	    width: '7px',
	    height: '7px',
	    borderRadius: '50%',
	    border: '1px solid #fff',
	    display: 'inline-block',
	    marginRight: '8px'
	  }, _tooltip),
	  tooltipMarker: {
	    symbol: function symbol(x, y, r, ctx, marker) {
	      var color = marker.get('color');
	      ctx.fillStyle = color;
	      ctx.lineWidth = 1;
	      ctx.strokeStyle = '#fff';
	      ctx.beginPath();
	      ctx.arc(x, y, r, 0, Math.PI * 2, false);
	      ctx.fill();
	      ctx.stroke();

	      ctx.save();
	      ctx.beginPath();
	      ctx.fillStyle = '#fff';
	      ctx.strokeStyle = color;
	      ctx.globalAlpha = 0.2;
	      ctx.lineWidth = 3;
	      ctx.arc(x, y, 6, 0, Math.PI * 2, false);
	      ctx.stroke();
	      ctx.restore();
	    },
	    radius: 4
	  }, // 提示信息在折线图、区域图上形成点的样式
	  tooltipCrosshairsRect: {
	    type: 'rect',
	    style: {
	      fill: '#CCD6EC',
	      opacity: 0.3
	    }
	  }, // tooltip 辅助背景框样式
	  tooltipCrosshairsLine: {
	    style: {
	      stroke: 'rgba(0, 0, 0, 0.25)',
	      lineWidth: 1
	    }
	  },
	  shape: {
	    point: {
	      lineWidth: 1,
	      fill: DEFAULT_COLOR,
	      radius: 4
	    },
	    hollowPoint: {
	      fill: '#fff',
	      lineWidth: 1,
	      stroke: DEFAULT_COLOR,
	      radius: 3
	    },
	    interval: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.85
	    },
	    hollowInterval: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    area: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.3
	    },
	    polygon: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 1
	    },
	    hollowPolygon: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    hollowArea: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    line: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 2,
	      fill: null
	    },
	    edge: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 1,
	      fill: null
	    },
	    schema: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 1,
	      fill: null
	    }
	  },
	  guide: {
	    line: {
	      lineStyle: {
	        stroke: DEFAULT_COLOR,
	        lineDash: [0, 2, 2],
	        lineWidth: 1
	      },
	      text: {
	        position: 'end',
	        autoRotate: true,
	        style: {
	          fill: '#545454',
	          fontSize: 12,
	          textAlign: 'center',
	          fontFamily: FONT_FAMILY
	        }
	      }
	    },
	    text: {
	      style: {
	        fill: '#545454',
	        fontSize: 12,
	        textBaseline: 'middle',
	        textAlign: 'start',
	        fontFamily: FONT_FAMILY

	      }
	    },
	    region: {
	      style: {
	        lineWidth: 0, // 辅助框的边框宽度
	        fill: '#000', // 辅助框填充的颜色
	        fillOpacity: 0.04 // 辅助框的背景透明度
	        // 辅助框的图形样式属性
	      } },
	    html: {
	      alignX: 'middle',
	      alignY: 'middle'
	    }
	  },
	  pixelRatio: null
	};

	module.exports = Theme;

	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Labels = __webpack_require__(100);
	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);
	var IGNORE_ARR = ['line', 'point', 'path'];
	var ORIGIN = '_origin';

	function avg(arr) {
	  var sum = 0;
	  Util.each(arr, function (value) {
	    sum += value;
	  });
	  return sum / arr.length;
	}

	var GeomLabels = function (_Group) {
	  _inherits(GeomLabels, _Group);

	  function GeomLabels() {
	    _classCallCheck(this, GeomLabels);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  GeomLabels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      label: Global.label,
	      /**
	       * 用户传入的文本配置信息
	       * @type {Object}
	       */
	      labelCfg: null,
	      /**
	       * 所在的坐标系
	       * @type {Object}
	       */
	      coord: null,
	      /**
	       * 图表的类型
	       * @type {String}
	       */
	      geomType: null,
	      zIndex: 6
	    };
	  };

	  GeomLabels.prototype._renderUI = function _renderUI() {
	    _Group.prototype._renderUI.call(this);
	    this.initLabelsCfg();
	    this.renderLabels(); // 调用入口文件
	  };

	  // 获取显示的 label 文本值


	  GeomLabels.prototype._getLabelValue = function _getLabelValue(record) {
	    var self = this;
	    var originRecord = record[ORIGIN];
	    var labelCfg = self.get('labelCfg');
	    var scales = labelCfg.scales;
	    var callback = labelCfg.cfg && labelCfg.cfg.content;
	    var value = void 0;
	    if (callback) {
	      var params = [];
	      Util.each(scales, function (scale) {
	        params.push(originRecord[scale.field]);
	      });
	      value = callback.apply(null, params);
	    } else {
	      var scale = scales[0];
	      value = originRecord[scale.field];
	      if (Util.isArray(value)) {
	        var tmp = [];
	        Util.each(value, function (subVal) {
	          tmp.push(scale.getText(subVal));
	        });
	        value = tmp;
	      } else {
	        value = scale.getText(value);
	      }
	    }
	    return value;
	  };

	  // 初始化labels的配置项


	  GeomLabels.prototype.initLabelsCfg = function initLabelsCfg() {
	    var self = this;
	    var labels = self.getDefaultLabelCfg();
	    var labelCfg = self.get('labelCfg');
	    // Util.merge(labels, labelCfg.cfg);
	    Util.deepMix(labels, labelCfg.cfg);
	    self.set('label', labels);
	  };

	  /**
	   * @protected
	   * 默认的文本样式
	   * @return {Object} default label config
	   */


	  GeomLabels.prototype.getDefaultLabelCfg = function getDefaultLabelCfg() {
	    var self = this;
	    var labelCfg = self.get('labelCfg').cfg;
	    var geomType = self.get('geomType');
	    if (geomType === 'polygon' || labelCfg && labelCfg.offset < 0 && Util.indexOf(IGNORE_ARR, geomType) === -1) {
	      // return Util.merge({}, self.get('label'), Global.innerLabels);
	      return Util.deepMix({}, self.get('label'), Global.innerLabels);
	    }
	    // return Util.merge({}, Global.label, self.get('label'));
	    return Util.deepMix({}, Global.label, self.get('label'));
	  };

	  /**
	   * @protected
	   * 获取labels
	   * @param {Array} points points
	   * @return {Array} label items
	   */


	  GeomLabels.prototype.getLabelsItems = function getLabelsItems(points) {
	    var self = this;
	    var items = [];
	    var labels = self.get('label');
	    var geom = self.get('geom');
	    var origin = void 0;

	    // 获取label相关的x，y的值，获取具体的x,y,防止存在数组
	    Util.each(points, function (point) {
	      origin = point._origin;
	      var label = self._getLabelValue(point);
	      if (!Util.isArray(label)) {
	        label = [label];
	      }
	      var total = label.length;

	      Util.each(label, function (sub, subIdx) {
	        var obj = self.getLabelPoint(label, point, subIdx);
	        // 文本为 null, undefined, 空字符串时不显示
	        // 但是文本为 0 时，需要显示
	        if (obj && !Util.isNil(obj.text) && obj.text !== '') {
	          obj = Util.mix({}, origin, obj); // 为了格式化输出
	          var align = void 0;
	          if (labels && labels.label && labels.label.textAlign) {
	            align = labels.label.textAlign;
	          } else {
	            align = self.getLabelAlign(obj, subIdx, total);
	          }
	          obj.textAlign = align;
	          if (geom) {
	            obj._id = geom._getShapeId(origin) + '-glabel-' + subIdx + '-' + obj.text;
	          }
	          obj.coord = self.get('coord');
	          items.push(obj);
	        }
	      });
	    });
	    return items;
	  };

	  /**
	   * @protected
	   * 如果发生冲突则会调整文本的位置
	   * @param {Array} items 文本的集合
	   * @return {Array} adjusted items
	   */


	  GeomLabels.prototype.adjustItems = function adjustItems(items) {
	    return items;
	  };

	  /**
	   * drawing lines to labels
	   * @param  {Array} items labels
	   * @param  {Object} labelLine configuration for label lines
	   */


	  GeomLabels.prototype.drawLines = function drawLines(items, labelLine) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      Util.each(items, function (point) {
	        self.lineToLabel(point, labelLine);
	      });
	    }
	  };

	  // 连接线


	  GeomLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
	    var self = this;
	    var coord = self.get('coord');
	    var start = {
	      x: label.x - label._offset.x,
	      y: label.y - label._offset.y
	    };
	    var inner = {
	      x: (start.x + label.x) / 2,
	      y: (start.y + label.y) / 2
	    };
	    var lineGroup = self.get('lineGroup');
	    // var lineShape;
	    if (!lineGroup) {
	      lineGroup = self.addGroup({
	        elCls: 'x-line-group'
	      });
	      self.set('lineGroup', lineGroup);
	    }
	    var lineShape = lineGroup.addShape('path', {
	      attrs: Util.mix({
	        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
	        fill: null,
	        stroke: label.color
	      }, labelLine)
	    });
	    // label 对应线的动画关闭
	    lineShape.name = 'labelLine';
	    // generate labelLine id according to label id
	    lineShape._id = label._id && label._id.replace('glabel', 'glabelline');
	    lineShape.set('coord', coord);
	  };

	  /**
	   * @protected
	   * 获取文本的位置信息
	   * @param {Array} labels labels
	   * @param {Object} point point
	   * @param {Number} index index
	   * @return {Object} point
	   */


	  GeomLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
	    var self = this;
	    var coord = self.get('coord');

	    function getDimValue(value, idx) {
	      if (Util.isArray(value)) {
	        if (labels.length === 1) {
	          // 如果仅一个label,多个y,取最后一个y
	          if (value.length <= 2) {
	            value = value[value.length - 1];
	            // value = value[0];
	          } else {
	            value = avg(value);
	          }
	        } else {
	          value = value[idx];
	        }
	      }
	      return value;
	    }

	    var labelPoint = {
	      x: getDimValue(point.x, index),
	      y: getDimValue(point.y, index),
	      text: labels[index]
	    };

	    // get nearest point of the shape as the label line start point
	    if (point && point.nextPoints && (point.shape === 'funnel' || point.shape === 'pyramid')) {
	      var maxX = -Infinity;
	      point.nextPoints.forEach(function (p) {
	        p = coord.convert(p);
	        if (p.x > maxX) {
	          maxX = p.x;
	        }
	      });
	      labelPoint.x = (labelPoint.x + maxX) / 2;
	    }
	    // sharp edge of the pyramid
	    if (point.shape === 'pyramid' && !point.nextPoints && point.points) {
	      point.points.forEach(function (p) {
	        p = coord.convert(p);
	        if (Util.isArray(p.x) && point.x.indexOf(p.x) === -1 || Util.isNumber(p.x) && point.x !== p.x) {
	          labelPoint.x = (labelPoint.x + p.x) / 2;
	        }
	      });
	    }

	    var offsetPoint = self.getLabelOffset(labelPoint, index, labels.length);
	    self.transLabelPoint(labelPoint);
	    labelPoint.x += offsetPoint.x;
	    labelPoint.y += offsetPoint.y;
	    labelPoint.color = point.color;
	    labelPoint._offset = offsetPoint;
	    return labelPoint;
	  };

	  GeomLabels.prototype.transLabelPoint = function transLabelPoint(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var tmpPoint = coord.applyMatrix(point.x, point.y, 1);
	    point.x = tmpPoint[0];
	    point.y = tmpPoint[1];
	  };

	  GeomLabels.prototype.getOffsetVector = function getOffsetVector() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var offset = labelCfg.offset || 0;
	    var coord = self.get('coord');
	    var vector = void 0;
	    if (coord.isTransposed) {
	      // 如果x,y翻转，则偏移x
	      vector = coord.applyMatrix(offset, 0);
	    } else {
	      // 否则，偏转y
	      vector = coord.applyMatrix(0, offset);
	    }
	    return vector;
	  };

	  // 获取默认的偏移量


	  GeomLabels.prototype.getDefaultOffset = function getDefaultOffset() {
	    var self = this;
	    var offset = 0; // Global.labels.offset;

	    var coord = self.get('coord');
	    var vector = self.getOffsetVector();
	    if (coord.isTransposed) {
	      // 如果x,y翻转，则偏移x
	      offset = vector[0];
	    } else {
	      // 否则，偏转y
	      offset = vector[1];
	    }
	    return offset;
	  };

	  // 获取文本的偏移位置，x,y


	  GeomLabels.prototype.getLabelOffset = function getLabelOffset(point, index, total) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    var coord = self.get('coord');
	    var transposed = coord.isTransposed;
	    var yField = transposed ? 'x' : 'y';
	    var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成
	    var offsetPoint = {
	      x: 0,
	      y: 0
	    };
	    if (index > 0 || total === 1) {
	      // 判断是否小于0
	      offsetPoint[yField] = offset * factor;
	    } else {
	      offsetPoint[yField] = offset * factor * -1;
	    }
	    return offsetPoint;
	  };

	  GeomLabels.prototype.getLabelAlign = function getLabelAlign(point, index, total) {
	    var self = this;
	    var align = 'center';
	    var coord = self.get('coord');
	    if (coord.isTransposed) {
	      var offset = self.getDefaultOffset();
	      // var vector = coord.applyMatrix(offset,0);
	      if (offset < 0) {
	        align = 'right';
	      } else if (offset === 0) {
	        align = 'center';
	      } else {
	        align = 'left';
	      }
	      if (total > 1 && index === 0) {
	        if (align === 'right') {
	          align = 'left';
	        } else if (align === 'left') {
	          align = 'right';
	        }
	      }
	    }
	    return align;
	  };

	  GeomLabels.prototype.showLabels = function showLabels(points) {
	    var self = this;
	    var items = self.getLabelsItems(points);
	    var labels = self.get('label');
	    items = self.adjustItems(items);
	    self.resetLabels(items);
	    if (labels.labelLine) {
	      self.drawLines(items, labels.labelLine);
	    }
	  };

	  GeomLabels.prototype.destroy = function destroy() {
	    this.removeLabels(); // 清理文本
	    _Group.prototype.destroy.call(this);
	  };

	  return GeomLabels;
	}(Group);

	Util.assign(GeomLabels.prototype, Labels.LabelsRenderer);

	module.exports = GeomLabels;

	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of labels
	 * @author sima.zhang
	 */
	var Labels = __webpack_require__(101);
	Labels.LabelsRenderer = __webpack_require__(285);

	module.exports = Labels;

	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The Label class
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil,
	    Group = _require.Group;

	var Labels = function (_Group) {
	  _inherits(Labels, _Group);

	  function Labels() {
	    _classCallCheck(this, Labels);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Labels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 6,
	      /**
	       * 显示的文本集合
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 文本样式
	       * @type {(Object|Function)}
	       */
	      textStyle: null,
	      /**
	       * 文本显示格式化回调函数
	       * @type {Function}
	       */
	      formatter: null,
	      /**
	       * 使用 html 渲染文本
	       * @type {(String|Function)}
	      */
	      htmlTemplate: null,
	      /**
	       * html 渲染时用的容器的模板，必须存在 class = "g-labels"
	       * @type {String}
	       */
	      _containerTpl: '<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',
	      /**
	       * html 渲染时单个 label 的模板，必须存在 class = "g-label"，如果 htmlTemplate 为字符串，则使用 htmlTemplate
	       * @type {String}
	       */
	      _itemTpl: '<div class="g-label" style="position:absolute;">{text}</div>'
	    };
	  };

	  Labels.prototype._renderUI = function _renderUI() {
	    this._drawLabels();
	  };

	  Labels.prototype._drawLabels = function _drawLabels() {
	    var self = this;
	    var items = self.get('items');
	    Util.each(items, function (item, index) {
	      self._addLabel(item, index);
	    });
	  };

	  Labels.prototype._addLabel = function _addLabel(item, index) {
	    var cfg = this._getLabelCfg(item, index);
	    return this._createText(cfg);
	  };

	  Labels.prototype._getLabelCfg = function _getLabelCfg(item, index) {
	    var textStyle = this.get('textStyle') || {};
	    var formatter = this.get('formatter');
	    var htmlTemplate = this.get('htmlTemplate');

	    if (!Util.isObject(item)) {
	      var tmp = item;
	      item = {};
	      item.text = tmp;
	    }

	    if (Util.isFunction(textStyle)) {
	      textStyle = textStyle(item.text, item, index);
	    }

	    if (formatter) {
	      item.text = formatter(item.text, item, index);
	    }

	    if (Util.isFunction(htmlTemplate)) {
	      item.text = htmlTemplate(item.text, item, index);
	    }

	    if (Util.isNil(item.text)) {
	      item.text = '';
	    }

	    item.text = item.text + ''; // ? 为什么转换为字符串

	    var cfg = Util.mix({}, item, textStyle, {
	      x: item.x || 0,
	      y: item.y || 0
	    });

	    return cfg;
	  };

	  Labels.prototype._createText = function _createText(cfg) {
	    var htmlTemplate = this.get('htmlTemplate');
	    var customDiv = this.get('customDiv');
	    var labelShape = void 0;

	    if (htmlTemplate) {
	      if (!customDiv) {
	        var containerTpl = this.get('_containerTpl');
	        var wrapper = this.get('canvas').get('el').parentNode;
	        customDiv = DomUtil.createDom(containerTpl);
	        wrapper.style.position = 'relative';
	        wrapper.appendChild(customDiv);
	        this.set('customDiv', customDiv);
	      }

	      var node = this._createDom(cfg);
	      customDiv.appendChild(node);
	      this._setCustomPosition(cfg, node);
	    } else {
	      var origin = cfg.point;
	      delete cfg.point; // 临时解决，否则影响动画
	      labelShape = this.addShape('text', {
	        attrs: cfg
	      });
	      labelShape.setSilent('origin', origin);
	      labelShape.name = 'label'; // 用于事件标注
	      this.get('appendInfo') && labelShape.setSilent('appendInfo', this.get('appendInfo'));
	      return labelShape;
	    }
	  };

	  Labels.prototype._setCustomPosition = function _setCustomPosition(cfg, htmlDom) {
	    var textAlign = cfg.textAlign || 'left';
	    var top = cfg.y;
	    var left = cfg.x;
	    var width = DomUtil.getOuterWidth(htmlDom);
	    var height = DomUtil.getOuterHeight(htmlDom);

	    top = top - height / 2;
	    if (textAlign === 'center') {
	      left = left - width / 2;
	    } else if (textAlign === 'right') {
	      left = left - width;
	    }

	    htmlDom.style.top = parseInt(top, 10) + 'px';
	    htmlDom.style.left = parseInt(left, 10) + 'px';
	  };

	  Labels.prototype._createDom = function _createDom(cfg) {
	    var itemTpl = this.get('_itemTpl');
	    var htmlTemplate = this.get('htmlTemplate');

	    if (Util.isString(htmlTemplate)) {
	      cfg.text = Util.substitute(htmlTemplate, { text: cfg.text });
	    }

	    var str = Util.substitute(itemTpl, { text: cfg.text });

	    return DomUtil.createDom(str);
	  };

	  Labels.prototype.getLabels = function getLabels() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      return Util.toArray(customDiv.childNodes);
	    }
	    return this.get('children');
	  };

	  Labels.prototype.addLabel = function addLabel(item) {
	    var items = this.get('items');
	    var count = items.length;
	    items.push(item);
	    return this._addLabel(item, count);
	  };

	  Labels.prototype.changeLabel = function changeLabel(oldLabel, newLabel) {
	    if (!oldLabel) {
	      return;
	    }
	    var htmlTemplate = this.get('htmlTemplate');
	    var index = Util.indexOf(this.getLabels(), oldLabel);
	    var cfg = this._getLabelCfg(newLabel, index);
	    if (htmlTemplate) {
	      var node = this._createDom(cfg);
	      oldLabel.innerHTML = node.innerHTML;
	      this._setCustomPosition(cfg, oldLabel);
	    } else {
	      oldLabel._id = newLabel._id;
	      oldLabel.attr('text', cfg.text);
	      if (oldLabel.attr('x') !== cfg.x || oldLabel.attr('y') !== cfg.y) {
	        var rotate = oldLabel.get('attrs').rotate;
	        if (rotate) {
	          oldLabel.rotateAtStart(-rotate);
	          oldLabel.attr(cfg);
	          oldLabel.rotateAtStart(rotate);
	        } else {
	          oldLabel.attr(cfg);
	        }
	      }
	    }
	  };

	  Labels.prototype.clear = function clear() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      customDiv.innerHTML = '';
	    }
	    _Group.prototype.clear.call(this);
	  };

	  Labels.prototype.setItems = function setItems(items) {
	    this.clear();
	    this.set('items', items);
	    this._drawLabels();
	  };

	  Labels.prototype.remove = function remove() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      customDiv.parentNode.removeChild(customDiv);
	    }
	    _Group.prototype.remove.call(this);
	  };

	  return Labels;
	}(Group);

	module.exports = Labels;

	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Labels = __webpack_require__(99);
	var PathUtil = __webpack_require__(22);
	var Util = __webpack_require__(0);

	var PolarLabels = function (_Labels) {
	  _inherits(PolarLabels, _Labels);

	  function PolarLabels() {
	    _classCallCheck(this, PolarLabels);

	    return _possibleConstructorReturn(this, _Labels.apply(this, arguments));
	  }

	  PolarLabels.prototype.getPointRauis = function getPointRauis(coord, point) {
	    return PathUtil.getPointRadius(coord, point);
	  };

	  PolarLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset, point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var labelEmit = self._isEmitLabels();
	    var r = self.getPointRauis(coord, point);
	    if (coord.isTransposed && r > offset && !labelEmit) {
	      var appendAngle = Math.asin(offset / (2 * r));
	      angle = angle + appendAngle * 2;
	    } else {
	      r = r + offset;
	    }

	    return {
	      x: center.x + r * Math.cos(angle),
	      y: center.y + r * Math.sin(angle),
	      angle: angle,
	      r: r
	    };
	  };

	  PolarLabels.prototype.getArcPoint = function getArcPoint(point, index) {
	    var self = this;

	    var outerPoint = void 0; // 圆弧上的中点
	    // var coord = self.get('coord');
	    index = index || 0;
	    if (Util.isArray(point.x) || Util.isArray(point.y)) {
	      outerPoint = {
	        x: Util.isArray(point.x) ? point.x[index] : point.x,
	        y: Util.isArray(point.y) ? point.y[index] : point.y
	      };
	    } else {
	      outerPoint = point;
	    }
	    self.transLabelPoint(outerPoint);
	    return outerPoint;
	  };

	  // 获取点所在的角度


	  PolarLabels.prototype.getPointAngle = function getPointAngle(point) {
	    var self = this;
	    var coord = self.get('coord');
	    return PathUtil.getPointAngle(coord, point);
	  };

	  // 获取中心的位置


	  PolarLabels.prototype.getMiddlePoint = function getMiddlePoint(points) {
	    var self = this;
	    var coord = self.get('coord');
	    var count = points.length;
	    var middlePoint = {
	      x: 0,
	      y: 0
	    };
	    Util.each(points, function (point) {
	      middlePoint.x += point.x;
	      middlePoint.y += point.y;
	    });
	    middlePoint.x /= count;
	    middlePoint.y /= count;

	    middlePoint = coord.convert(middlePoint);
	    return middlePoint;
	  };

	  // 是否居中


	  PolarLabels.prototype._isToMiddle = function _isToMiddle(point) {
	    return point.x.length > 2;
	  };

	  /**
	   * @protected
	   * 获取文本的位置信息
	   * @param {Array} labels labels
	   * @param {Object} point point
	   * @param {Number} index index
	   * @return {Object} point
	   */


	  PolarLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
	    var self = this;
	    var text = labels[index];
	    var factor = 1;
	    var arcPoint = void 0;
	    if (self._isToMiddle(point)) {
	      arcPoint = self.getMiddlePoint(point.points);
	    } else {
	      if (labels.length === 1 && index === 0) {
	        index = 1;
	      } else if (index === 0) {
	        factor = -1;
	      }
	      arcPoint = self.getArcPoint(point, index);
	    }

	    var offset = self.getDefaultOffset();
	    offset = offset * factor;
	    var middleAngle = self.getPointAngle(arcPoint);
	    var labelPoint = self.getCirclePoint(middleAngle, offset, arcPoint);
	    labelPoint.text = text;
	    labelPoint.angle = middleAngle;
	    labelPoint.color = point.color;

	    labelPoint.rotate = self.getLabelRotate(middleAngle, offset, point);
	    return labelPoint;
	  };

	  PolarLabels.prototype._isEmitLabels = function _isEmitLabels() {
	    var labels = this.get('label');
	    return labels.labelEmit;
	  };

	  /**
	   * @protected
	   * 获取文本旋转的方向
	   * @param {Number} angle angle
	   * @return {Number} angle
	   */


	  PolarLabels.prototype.getLabelRotate = function getLabelRotate(angle) {
	    var self = this;
	    var rotate = void 0;
	    rotate = angle * 180 / Math.PI;
	    rotate += 90;

	    if (self._isEmitLabels()) {
	      rotate -= 90;
	    }
	    if (rotate) {
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      } else if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  };

	  // override


	  PolarLabels.prototype.getLabelAlign = function getLabelAlign(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var align = void 0;
	    if (self._isEmitLabels()) {
	      if (point.angle <= Math.PI / 2 && point.angle > -Math.PI / 2) {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    } else if (!coord.isTransposed) {
	      align = 'center';
	    } else {
	      var center = coord.getCenter();
	      var offset = self.getDefaultOffset();
	      if (Math.abs(point.x - center.x) < 1) {
	        align = 'center';
	      } else if (point.angle > Math.PI || point.angle <= 0) {
	        if (offset > 0) {
	          align = 'left';
	        } else {
	          align = 'right';
	        }
	      } else {
	        if (offset > 0) {
	          align = 'right';
	        } else {
	          align = 'left';
	        }
	      }
	    }
	    return align;
	  };

	  return PolarLabels;
	}(Labels);

	module.exports = PolarLabels;

	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  Scale: __webpack_require__(291),
	  Coord: __webpack_require__(299),
	  Axis: __webpack_require__(304),
	  Guide: __webpack_require__(311),
	  Legend: __webpack_require__(320),
	  Tooltip: __webpack_require__(326),
	  Event: __webpack_require__(328)
	};

	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Scale entry, used to reference all the scales
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Base = __webpack_require__(36);
	Base.Linear = __webpack_require__(37);
	Base.Identity = __webpack_require__(293);
	Base.Cat = __webpack_require__(106);
	Base.Time = __webpack_require__(294);
	Base.TimeCat = __webpack_require__(296);
	Base.Log = __webpack_require__(297);
	Base.Pow = __webpack_require__(298);

	var _loop = function _loop(k) {
	  if (Base.hasOwnProperty(k)) {
	    var methodName = Util.lowerFirst(k);
	    Base[methodName] = function (cfg) {
	      return new Base[k](cfg);
	    };
	  }
	};

	for (var k in Base) {
	  _loop(k);
	}

	var CAT_ARR = ['cat', 'timeCat'];

	Base.isCategory = function (type) {
	  return CAT_ARR.indexOf(type) >= 0;
	};

	module.exports = Base;

	/***/ }),
	/* 105 */
	/***/ (function(module, exports) {

	/**
	 * @fileOverview 计算方法
	 * @author dxq613@gmail.com
	 */

	// 如果小数点后面超过 10 位浮点数时进行一下处理
	var DECIMAL_LENGTH = 12;
	// 获取系数
	function getFactor(v) {
	  var factor = 1;
	  if (v === Infinity || v === -Infinity) {
	    throw new Error('Not support Infinity!');
	  }
	  if (v < 1) {
	    var count = 0;
	    while (v < 1) {
	      factor = factor / 10;
	      v = v * 10;
	      count++;
	    }
	    // 浮点数计算出现问题
	    if (factor.toString().length > DECIMAL_LENGTH) {
	      factor = parseFloat(factor.toFixed(count));
	    }
	  } else {
	    while (v > 10) {
	      factor = factor * 10;
	      v = v / 10;
	    }
	  }

	  return factor;
	}

	// 取小于当前值的
	function arrayFloor(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }

	  var pre = values[0];

	  if (value < values[0]) {
	    return NaN;
	  }

	  if (value >= values[length - 1]) {
	    return values[length - 1];
	  }
	  for (var i = 1; i < values.length; i++) {
	    if (value < values[i]) {
	      break;
	    }
	    pre = values[i];
	  }

	  return pre;
	}

	// 大于当前值的第一个
	function arrayCeiling(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	  // var pre = values[0];
	  var rst = void 0;
	  if (value > values[length - 1]) {
	    return NaN;
	  }
	  if (value < values[0]) {
	    return values[0];
	  }

	  for (var i = 1; i < values.length; i++) {
	    if (value <= values[i]) {
	      rst = values[i];
	      break;
	    }
	  }

	  return rst;
	}

	var Util = {
	  // 获取逼近的数值
	  snapFactorTo: function snapFactorTo(v, arr, snapType) {
	    // 假设 v = -512,isFloor = true
	    if (isNaN(v)) {
	      return NaN;
	    }
	    var factor = 1; // 计算系数
	    if (v !== 0) {
	      if (v < 0) {
	        factor = -1;
	      }
	      v = v * factor; // v = 512
	      var tmpFactor = getFactor(v);
	      factor = factor * tmpFactor; // factor = -100

	      v = v / tmpFactor; // v = 5.12
	    }
	    if (snapType === 'floor') {
	      v = Util.snapFloor(arr, v); // v = 5
	    } else if (snapType === 'ceil') {
	      v = Util.snapCeiling(arr, v); // v = 6
	    } else {
	      v = Util.snapTo(arr, v); // 四舍五入 5
	    }
	    var rst = v * factor;
	    // 如果出现浮点数计算问题，需要处理一下
	    if (Math.abs(factor) < 1 && rst.toString().length > DECIMAL_LENGTH) {
	      var decimalVal = parseInt(1 / factor);
	      var symbol = factor > 0 ? 1 : -1;
	      rst = v / decimalVal * symbol;
	    }
	    return rst;
	  },

	  // 获取逼近的倍数
	  snapMultiple: function snapMultiple(v, base, snapType) {
	    var div = void 0;
	    if (snapType === 'ceil') {
	      div = Math.ceil(v / base);
	    } else if (snapType === 'floor') {
	      div = Math.floor(v / base);
	    } else {
	      div = Math.round(v / base);
	    }
	    return div * base;
	  },

	  /**
	   * 获取逼近的值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的值
	   */
	  snapTo: function snapTo(values, value) {
	    // 这里假定values是升序排列
	    var floorVal = arrayFloor(values, value);
	    var ceilingVal = arrayCeiling(values, value);
	    if (isNaN(floorVal) || isNaN(ceilingVal)) {
	      if (values[0] >= value) {
	        return values[0];
	      }
	      var last = values[values.length - 1];
	      if (last <= value) {
	        return last;
	      }
	    }
	    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {
	      return floorVal;
	    }
	    return ceilingVal;
	  },

	  /**
	   * 获取逼近的最小值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最小值
	   */
	  snapFloor: function snapFloor(values, value) {
	    // 这里假定values是升序排列
	    return arrayFloor(values, value);
	  },

	  /**
	   * 获取逼近的最大值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最大值
	   */
	  snapCeiling: function snapCeiling(values, value) {
	    // 这里假定values是升序排列
	    return arrayCeiling(values, value);
	  }
	};

	module.exports = Util;

	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the scale function to process the categories
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);
	var catAuto = __webpack_require__(107);

	/**
	 * 度量的构造函数
	 * @class Scale.Category
	 */

	var Category = function (_Base) {
	  _inherits(Category, _Base);

	  function Category() {
	    _classCallCheck(this, Category);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Category.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'cat',

	      /**
	       * 自动生成标记时的个数
	       * @type {Number}
	       * @default null
	       */
	      tickCount: null,

	      /**
	       * 是否分类度量
	       * @type {Boolean}
	       */
	      isCategory: true
	    });
	  };

	  /**
	   * @override
	   */


	  Category.prototype.init = function init() {
	    var self = this;
	    var values = self.values;
	    var tickCount = self.tickCount;

	    Util.each(values, function (v, i) {
	      values[i] = v.toString();
	    });
	    if (!self.ticks) {
	      var ticks = values;
	      if (tickCount) {
	        var temp = catAuto({
	          maxCount: tickCount,
	          data: values
	        });
	        ticks = temp.ticks;
	      }
	      this.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */


	  Category.prototype.getText = function getText(value) {

	    if (this.values.indexOf(value) === -1 && Util.isNumber(value)) {
	      value = this.values[Math.round(value)];
	    }

	    return _Base.prototype.getText.call(this, value);
	  };

	  /**
	   * @override
	   */


	  Category.prototype.translate = function translate(value) {
	    var index = this.values.indexOf(value);
	    if (index === -1 && Util.isNumber(value)) {
	      index = value;
	    } else if (index === -1) {
	      index = NaN;
	    }
	    return index;
	  };
	  /**
	   * @override
	   */


	  Category.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var percent = void 0;

	    if (Util.isString(value) || this.values.indexOf(value) !== -1) {
	      value = this.translate(value);
	    }
	    if (this.values.length > 1) {
	      percent = value / (this.values.length - 1);
	    } else {
	      percent = value;
	    }
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Category.prototype.invert = function invert(value) {
	    if (Util.isString(value)) {
	      // 如果已经是字符串
	      return value;
	    }
	    var min = this.rangeMin();
	    var max = this.rangeMax();

	    // 归一到 范围内
	    if (value < min) {
	      value = min;
	    }
	    if (value > max) {
	      value = max;
	    }
	    var percent = (value - min) / (max - min);
	    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;
	    index = index || 0;
	    return this.values[index];
	  };

	  return Category;
	}(Base);

	module.exports = Category;

	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算分类的的坐标点
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var MAX_COUNT = 8;
	var SUB_COUNT = 4; // 控制个数不能过小

	function getSimpleArray(data) {
	  var arr = [];
	  Util.each(data, function (sub) {
	    if (Util.isArray(sub)) {
	      arr = arr.concat(sub);
	    } else {
	      arr.push(sub);
	    }
	  });
	  return arr;
	}
	function getGreatestFactor(count, number) {
	  var i = void 0;
	  for (i = number; i > 0; i--) {
	    if (count % i === 0) {
	      break;
	    }
	  }
	  // 如果是素数，没有可以整除的数字
	  if (i === 1) {
	    for (i = number; i > 0; i--) {
	      if ((count - 1) % i === 0) {
	        break;
	      }
	    }
	  }
	  return i;
	}

	module.exports = function (info) {
	  var rst = {};
	  var ticks = [];
	  var maxCount = info.maxCount || MAX_COUNT;
	  var categories = getSimpleArray(info.data);
	  var length = categories.length;
	  var tickCount = getGreatestFactor(length - 1, maxCount - 1) + 1;

	  // 如果计算出来只有两个坐标点，则直接使用传入的 maxCount
	  if (tickCount === 2) {
	    tickCount = maxCount;
	  } else if (tickCount < maxCount - SUB_COUNT) {
	    tickCount = maxCount - SUB_COUNT;
	  }
	  var step = parseInt(length / (tickCount - 1), 10);

	  var groups = categories.map(function (e, i) {
	    return i % step === 0 ? categories.slice(i, i + step) : null;
	  }).filter(function (e) {
	    return e;
	  });

	  if (categories.length) {
	    ticks.push(categories[0]);
	  }
	  for (var i = 1; i < groups.length && i * step < length - step; i++) {
	    ticks.push(groups[i][0]);
	  }
	  if (categories.length) {
	    var last = categories[length - 1];
	    if (ticks.indexOf(last) === -1) {
	      ticks.push(last);
	    }
	  }

	  rst.categories = categories;
	  rst.ticks = ticks;
	  return rst;
	};

	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function (main) {
	  'use strict';

	  /**
	   * Parse or format dates
	   * @class fecha
	   */

	  var fecha = {};
	  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
	  var twoDigits = /\d\d?/;
	  var threeDigits = /\d{3}/;
	  var fourDigits = /\d{4}/;
	  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	  var literal = /\[([^]*?)\]/gm;
	  var noop = function noop() {};

	  function shorten(arr, sLen) {
	    var newArr = [];
	    for (var i = 0, len = arr.length; i < len; i++) {
	      newArr.push(arr[i].substr(0, sLen));
	    }
	    return newArr;
	  }

	  function monthUpdate(arrName) {
	    return function (d, v, i18n) {
	      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
	      if (~index) {
	        d.month = index;
	      }
	    };
	  }

	  function pad(val, len) {
	    val = String(val);
	    len = len || 2;
	    while (val.length < len) {
	      val = '0' + val;
	    }
	    return val;
	  }

	  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	  var monthNamesShort = shorten(monthNames, 3);
	  var dayNamesShort = shorten(dayNames, 3);
	  fecha.i18n = {
	    dayNamesShort: dayNamesShort,
	    dayNames: dayNames,
	    monthNamesShort: monthNamesShort,
	    monthNames: monthNames,
	    amPm: ['am', 'pm'],
	    DoFn: function DoFn(D) {
	      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
	    }
	  };

	  var formatFlags = {
	    D: function D(dateObj) {
	      return dateObj.getDate();
	    },
	    DD: function DD(dateObj) {
	      return pad(dateObj.getDate());
	    },
	    Do: function Do(dateObj, i18n) {
	      return i18n.DoFn(dateObj.getDate());
	    },
	    d: function d(dateObj) {
	      return dateObj.getDay();
	    },
	    dd: function dd(dateObj) {
	      return pad(dateObj.getDay());
	    },
	    ddd: function ddd(dateObj, i18n) {
	      return i18n.dayNamesShort[dateObj.getDay()];
	    },
	    dddd: function dddd(dateObj, i18n) {
	      return i18n.dayNames[dateObj.getDay()];
	    },
	    M: function M(dateObj) {
	      return dateObj.getMonth() + 1;
	    },
	    MM: function MM(dateObj) {
	      return pad(dateObj.getMonth() + 1);
	    },
	    MMM: function MMM(dateObj, i18n) {
	      return i18n.monthNamesShort[dateObj.getMonth()];
	    },
	    MMMM: function MMMM(dateObj, i18n) {
	      return i18n.monthNames[dateObj.getMonth()];
	    },
	    YY: function YY(dateObj) {
	      return String(dateObj.getFullYear()).substr(2);
	    },
	    YYYY: function YYYY(dateObj) {
	      return pad(dateObj.getFullYear(), 4);
	    },
	    h: function h(dateObj) {
	      return dateObj.getHours() % 12 || 12;
	    },
	    hh: function hh(dateObj) {
	      return pad(dateObj.getHours() % 12 || 12);
	    },
	    H: function H(dateObj) {
	      return dateObj.getHours();
	    },
	    HH: function HH(dateObj) {
	      return pad(dateObj.getHours());
	    },
	    m: function m(dateObj) {
	      return dateObj.getMinutes();
	    },
	    mm: function mm(dateObj) {
	      return pad(dateObj.getMinutes());
	    },
	    s: function s(dateObj) {
	      return dateObj.getSeconds();
	    },
	    ss: function ss(dateObj) {
	      return pad(dateObj.getSeconds());
	    },
	    S: function S(dateObj) {
	      return Math.round(dateObj.getMilliseconds() / 100);
	    },
	    SS: function SS(dateObj) {
	      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
	    },
	    SSS: function SSS(dateObj) {
	      return pad(dateObj.getMilliseconds(), 3);
	    },
	    a: function a(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
	    },
	    A: function A(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
	    },
	    ZZ: function ZZ(dateObj) {
	      var o = dateObj.getTimezoneOffset();
	      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
	    }
	  };

	  var parseFlags = {
	    D: [twoDigits, function (d, v) {
	      d.day = v;
	    }],
	    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
	      d.day = parseInt(v, 10);
	    }],
	    M: [twoDigits, function (d, v) {
	      d.month = v - 1;
	    }],
	    YY: [twoDigits, function (d, v) {
	      var da = new Date(),
	          cent = +('' + da.getFullYear()).substr(0, 2);
	      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
	    }],
	    h: [twoDigits, function (d, v) {
	      d.hour = v;
	    }],
	    m: [twoDigits, function (d, v) {
	      d.minute = v;
	    }],
	    s: [twoDigits, function (d, v) {
	      d.second = v;
	    }],
	    YYYY: [fourDigits, function (d, v) {
	      d.year = v;
	    }],
	    S: [/\d/, function (d, v) {
	      d.millisecond = v * 100;
	    }],
	    SS: [/\d{2}/, function (d, v) {
	      d.millisecond = v * 10;
	    }],
	    SSS: [threeDigits, function (d, v) {
	      d.millisecond = v;
	    }],
	    d: [twoDigits, noop],
	    ddd: [word, noop],
	    MMM: [word, monthUpdate('monthNamesShort')],
	    MMMM: [word, monthUpdate('monthNames')],
	    a: [word, function (d, v, i18n) {
	      var val = v.toLowerCase();
	      if (val === i18n.amPm[0]) {
	        d.isPm = false;
	      } else if (val === i18n.amPm[1]) {
	        d.isPm = true;
	      }
	    }],
	    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
	      if (v === 'Z') v = '+00:00';
	      var parts = (v + '').match(/([\+\-]|\d\d)/gi),
	          minutes;

	      if (parts) {
	        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
	        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
	      }
	    }]
	  };
	  parseFlags.dd = parseFlags.d;
	  parseFlags.dddd = parseFlags.ddd;
	  parseFlags.DD = parseFlags.D;
	  parseFlags.mm = parseFlags.m;
	  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
	  parseFlags.MM = parseFlags.M;
	  parseFlags.ss = parseFlags.s;
	  parseFlags.A = parseFlags.a;

	  // Some common format strings
	  fecha.masks = {
	    default: 'ddd MMM DD YYYY HH:mm:ss',
	    shortDate: 'M/D/YY',
	    mediumDate: 'MMM D, YYYY',
	    longDate: 'MMMM D, YYYY',
	    fullDate: 'dddd, MMMM D, YYYY',
	    shortTime: 'HH:mm',
	    mediumTime: 'HH:mm:ss',
	    longTime: 'HH:mm:ss.SSS'
	  };

	  /***
	   * Format a date
	   * @method format
	   * @param {Date|number} dateObj
	   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
	   */
	  fecha.format = function (dateObj, mask, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof dateObj === 'number') {
	      dateObj = new Date(dateObj);
	    }

	    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
	      throw new Error('Invalid Date in fecha.format');
	    }

	    mask = fecha.masks[mask] || mask || fecha.masks['default'];

	    var literals = [];

	    // Make literals inactive by replacing them with ??
	    mask = mask.replace(literal, function ($0, $1) {
	      literals.push($1);
	      return '??';
	    });
	    // Apply formatting rules
	    mask = mask.replace(token, function ($0) {
	      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
	    });
	    // Inline literal values back into the formatted value
	    return mask.replace(/\?\?/g, function () {
	      return literals.shift();
	    });
	  };

	  /**
	   * Parse a date string into an object, changes - into /
	   * @method parse
	   * @param {string} dateStr Date string
	   * @param {string} format Date parse format
	   * @returns {Date|boolean}
	   */
	  fecha.parse = function (dateStr, format, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof format !== 'string') {
	      throw new Error('Invalid format in fecha.parse');
	    }

	    format = fecha.masks[format] || format;

	    // Avoid regular expression denial of service, fail early for really long strings
	    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
	    if (dateStr.length > 1000) {
	      return false;
	    }

	    var isValid = true;
	    var dateInfo = {};
	    format.replace(token, function ($0) {
	      if (parseFlags[$0]) {
	        var info = parseFlags[$0];
	        var index = dateStr.search(info[0]);
	        if (!~index) {
	          isValid = false;
	        } else {
	          dateStr.replace(info[0], function (result) {
	            info[1](dateInfo, result, i18n);
	            dateStr = dateStr.substr(index + result.length);
	            return result;
	          });
	        }
	      }

	      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
	    });

	    if (!isValid) {
	      return false;
	    }

	    var today = new Date();
	    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
	      dateInfo.hour = +dateInfo.hour + 12;
	    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
	      dateInfo.hour = 0;
	    }

	    var date;
	    if (dateInfo.timezoneOffset != null) {
	      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
	      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
	    } else {
	      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
	    }
	    return date;
	  };

	  /* istanbul ignore next */
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = fecha;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	      return fecha;
	    }).call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    main.fecha = fecha;
	  }
	})(this);

	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 提取公共代码到util方法
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	module.exports = {
	  toTimeStamp: function toTimeStamp(value) {
	    if (Util.isString(value)) {
	      if (value.indexOf('T') > 0) {
	        value = new Date(value).getTime();
	      } else {
	        value = new Date(value.replace(/-/ig, '/')).getTime();
	      }
	    }
	    if (Util.isDate(value)) {
	      value = value.getTime();
	    }
	    return value;
	  }
	};

	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of category legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(111);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil,
	    Event = _require.Event,
	    Group = _require.Group;

	var Global = __webpack_require__(2);

	var CONTAINER_CLASS = 'g2-legend';
	var TITLE_CLASS = 'g2-legend-title';
	var LIST_CLASS = 'g2-legend-list';
	var ITEM_CLASS = 'g2-legend-list-item';
	var TEXT_CLASS = 'g2-legend-text';
	var MARKER_CLASS = 'g2-legend-marker';

	function findNodeByClass(node, className) {
	  return node.getElementsByClassName(className)[0];
	}

	function getParentNode(node, className) {
	  var nodeClass = node.className;
	  nodeClass = nodeClass.split(' ');
	  if (nodeClass.indexOf(className) > -1) {
	    return node;
	  }

	  if (node.parentNode) {
	    if (node.parentNode.className === CONTAINER_CLASS) {
	      return node.parentNode;
	    }
	    return getParentNode(node.parentNode, className);
	  }

	  return null;
	}

	function findItem(items, refer) {
	  var rst = null;
	  var value = refer instanceof Group ? refer.get('value') : refer;
	  Util.each(items, function (item) {
	    if (item.value === value) {
	      rst = item;
	      return false;
	    }
	  });

	  return rst;
	}

	function findShapeByName(group, name) {
	  return group.findBy(function (node) {
	    return node.name === name;
	  });
	}

	var Category = function (_Base) {
	  _inherits(Category, _Base);

	  function Category() {
	    _classCallCheck(this, Category);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Category.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type标识
	       * @type {String}
	       */
	      type: 'category-legend',
	      /**
	       * 子项集合
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * TODO：rename
	       * 图例项水平方向的间距
	       * @type {Number}
	       */
	      itemGap: 5,
	      /**
	       * TODO：rename
	       * 图例标题距离图例项的距离
	       * @type {Number}
	       */
	      titleGap: 15,
	      /**
	       * TODO：rename
	       * 图例项垂直方向的间距
	       * @type {Number}
	       */
	      itemMarginBottom: 8,
	      /**
	       * 图例项图组
	       * @type {Group}
	       */
	      itemsGroup: null,
	      /**
	       * 布局方式： horizontal，vertical
	       * @type {String}
	       */
	      layout: 'horizontal',
	      /**
	       * 是否允许全部取消，默认 false，即必须保留一个被选中
	       * @type {Boolean}
	       */
	      allowAllCanceled: false,
	      /**
	       * 边框内边距
	       * @type {Array}
	       */
	      backPadding: [0, 0, 0, 0],
	      /**
	       * 是否能被点击
	       * @type {Boolean}
	       */
	      checkable: true,
	      /**
	       * 图例项取消选中的颜色
	       * @type {String}
	       */
	      unCheckColor: '#ccc',
	      /**
	       * 图例背景层属性设置
	       * @type {Obejct}
	       */
	      background: {
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      /**
	       * 图例项的宽度，当图例有很多图例项，并且用户想要这些图例项在同一平面内垂直对齐，此时这个属性可帮用户实现此效果
	       * @type {Number}
	       */
	      itemWidth: null,
	      textStyle: {
	        fill: '#333',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      },
	      /**
	       * marker 和文字的距离
	       * @type {Number}
	       */
	      _wordSpaceing: 8,
	      /**
	       * 是否使用 html 进行渲染，默认为 false
	       * @type {Boolean}
	       */
	      useHtml: false,
	      /**
	       * useHtml 为 true 时生效，用于自动定位
	       * @type {[type]}
	       */
	      autoPosition: true,
	      container: null,
	      /**
	       * 使用html时的外层模板
	       * @type {String}
	       */
	      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<h4 class="' + TITLE_CLASS + '"></h4>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
	      /**
	       * 默认的图例项 html 模板
	       * @type {String}
	       */
	      _defaultItemTpl: '<li class="' + ITEM_CLASS + ' item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="' + MARKER_CLASS + '" style="background-color:{color};"></i>' + '<span class="' + TEXT_CLASS + '">{value}</span></li>',
	      /**
	       * 用户设置的图例项 html 模板
	       * @type {String|Function}
	       */
	      itemTpl: null,
	      /**
	       * 图例项是否可点击，默认为 true
	       * @type {Boolean}
	       */
	      clickable: true,
	      /**
	       * TODO: rename
	       * 图例项的选择模式，多选和单选 multiple、single
	       * @type {String}
	       */
	      selectedMode: 'multiple',
	      /**
	       * 图例项的顺序是否要逆序，默认为 false
	       * @type {Boolean}
	       */
	      reversed: false,
	      /**
	       * 是否自动换行
	       * @type {Boolean}
	       */
	      autoWrap: true
	    });
	  };

	  Category.prototype._beforeRenderUI = function _beforeRenderUI() {
	    _Base.prototype._beforeRenderUI.call(this);
	  };

	  Category.prototype._renderUI = function _renderUI() {
	    if (!this.get('useHtml')) {
	      _Base.prototype._renderUI.call(this);
	      this._renderItems();
	      this.get('autoWrap') && this._adjustItems(); // 默认自动换行
	      this._renderBack();
	    } else {
	      // 使用 html 渲染图例
	      this._renderHTML();
	    }
	  };

	  Category.prototype._bindUI = function _bindUI() {
	    if (this.get('hoverable')) {
	      this.on('mousemove', Util.wrapBehavior(this, '_onMousemove'));
	      this.on('mouseleave', Util.wrapBehavior(this, '_onMouseleave'));
	    }

	    if (this.get('clickable')) {
	      this.on('click', Util.wrapBehavior(this, '_onClick'));
	    }
	  };

	  Category.prototype._getLegendItem = function _getLegendItem(target) {
	    var item = target.get('parent');
	    if (item && item.name === 'legendGroup') {
	      return item;
	    }
	    return null;
	  };

	  Category.prototype._onMousemove = function _onMousemove(ev) {
	    var item = this._getLegendItem(ev.currentTarget);
	    if (item && item.get('checked')) {
	      var items = this.get('items');
	      var itemhover = new Event('itemhover', ev, true, true);
	      itemhover.item = findItem(items, item);
	      itemhover.checked = item.get('checked');
	      this.emit('itemhover', itemhover);
	    } else if (!item) {
	      this.emit('itemunhover', ev);
	    }

	    return;
	  };

	  Category.prototype._onMouseleave = function _onMouseleave(ev) {
	    this.emit('itemunhover', ev);
	    return;
	  };

	  Category.prototype._onClick = function _onClick(ev) {
	    var clickedItem = this._getLegendItem(ev.currentTarget);
	    var items = this.get('items');
	    if (clickedItem && !clickedItem.get('destroyed')) {
	      var checked = clickedItem.get('checked');
	      if (!this.get('allowAllCanceled') && checked && this.getCheckedCount() === 1) {
	        return;
	      }
	      var mode = this.get('selectedMode');
	      var item = findItem(items, clickedItem);
	      var itemclick = new Event('itemclick', ev, true, true);
	      itemclick.item = item;
	      itemclick.currentTarget = clickedItem;
	      itemclick.checked = mode === 'single' ? true : !checked;

	      var unCheckColor = this.get('unCheckColor');
	      var checkColor = this.get('textStyle').fill;
	      var markerItem = void 0;
	      var textItem = void 0;
	      var legendItem = void 0;
	      if (mode === 'single') {
	        var itemsGroup = this.get('itemsGroup');
	        var children = itemsGroup.get('children');
	        Util.each(children, function (child) {
	          markerItem = findShapeByName(child, 'legend-marker');
	          textItem = findShapeByName(child, 'legend-text');
	          legendItem = findShapeByName(child, 'legend-item');
	          if (child !== clickedItem) {
	            if (markerItem.attr('fill')) {
	              markerItem.attr('fill', unCheckColor);
	            }
	            if (markerItem.attr('stroke')) {
	              markerItem.attr('stroke', unCheckColor);
	            }
	            textItem.attr('fill', unCheckColor);
	            markerItem.setSilent('checked', false);
	            textItem.setSilent('checked', false);
	            legendItem.setSilent('checked', false);
	            child.setSilent('checked', false);
	          } else {
	            if (markerItem.attr('fill')) {
	              markerItem.attr('fill', item.marker.fill);
	            }
	            if (markerItem.attr('stroke')) {
	              markerItem.attr('stroke', item.marker.stroke);
	            }
	            textItem.attr('fill', checkColor);
	            markerItem.setSilent('checked', true);
	            textItem.setSilent('checked', true);
	            legendItem.setSilent('checked', true);
	            child.setSilent('checked', true);
	          }
	        });
	      } else {
	        markerItem = findShapeByName(clickedItem, 'legend-marker');
	        textItem = findShapeByName(clickedItem, 'legend-text');
	        legendItem = findShapeByName(clickedItem, 'legend-item');

	        if (markerItem.attr('fill')) {
	          markerItem.attr('fill', checked ? unCheckColor : item.marker.fill);
	        }
	        if (markerItem.attr('stroke')) {
	          markerItem.attr('stroke', checked ? unCheckColor : item.marker.stroke);
	        }
	        textItem.attr('fill', checked ? unCheckColor : checkColor);
	        clickedItem.setSilent('checked', !checked);
	        markerItem.setSilent('checked', !checked);
	        textItem.setSilent('checked', !checked);
	        legendItem.setSilent('checked', !checked);
	      }
	      this.emit('itemclick', itemclick);
	    }
	    return;
	  };

	  Category.prototype._renderHTML = function _renderHTML() {
	    var _this2 = this;

	    var self = this;
	    var canvas = self.get('canvas');
	    var outterNode = canvas.get('el').parentNode;
	    var title = this.get('title');
	    var containerTpl = self.get('containerTpl');
	    var legendWrapper = DomUtil.createDom(containerTpl);
	    var titleDom = findNodeByClass(legendWrapper, TITLE_CLASS);
	    var itemListDom = findNodeByClass(legendWrapper, LIST_CLASS);
	    var unCheckedColor = self.get('unCheckColor');
	    var mode = self.get('selectedMode');
	    var LEGEND_STYLE = Global.legend.html;

	    // fix：IE 9 兼容问题，先加入 legendWrapper
	    var container = self.get('container');
	    if (/^\#/.test(container)) {
	      // 如果传入 dom 节点的 id
	      var id = container.replace('#', '');
	      container = document.getElementById(id);
	      // container.style.position = 'relative';
	      container.appendChild(legendWrapper);
	    } else {
	      var _position = self.get('position');
	      var _canvas = self.get('canvas');
	      var rangeStyle = {};
	      if (_position === 'left' || _position === 'right') {
	        rangeStyle = {
	          maxHeight: (self.get('maxLength') || _canvas.get('height')) + 'px'
	        };
	      } else {
	        rangeStyle = {
	          maxWidth: (self.get('maxLength') || _canvas.get('width')) + 'px'
	        };
	      }

	      DomUtil.modifyCSS(legendWrapper, Util.mix({}, LEGEND_STYLE[CONTAINER_CLASS], rangeStyle, self.get(CONTAINER_CLASS)));
	      outterNode.appendChild(legendWrapper);
	    }

	    DomUtil.modifyCSS(itemListDom, Util.mix({}, LEGEND_STYLE[LIST_CLASS], self.get(LIST_CLASS)));

	    if (titleDom) {
	      if (title && title.text) {
	        titleDom.innerHTML = title.text;
	        DomUtil.modifyCSS(titleDom, Util.mix({}, LEGEND_STYLE[TITLE_CLASS], self.get(TITLE_CLASS)));
	      } else {
	        legendWrapper.removeChild(titleDom);
	      }
	    }

	    // 开始渲染图例项
	    var items = self.get('items');
	    var itemTpl = self.get('_defaultItemTpl');
	    var userItemTpl = self.get('itemTpl');
	    if (userItemTpl && userItemTpl !== itemTpl) {
	      itemTpl = userItemTpl;
	    }

	    if (self.get('reversed')) {
	      items.reverse();
	    }

	    var position = self.get('position');
	    var itemStyle = Util.mix({}, LEGEND_STYLE[ITEM_CLASS], {
	      display: position === 'right' || position === 'left' ? 'block' : 'inline-block'
	    }, self.get(ITEM_CLASS));
	    var markerStyle = Util.mix({}, LEGEND_STYLE[MARKER_CLASS], self.get(MARKER_CLASS));
	    Util.each(items, function (item, index) {
	      var checked = item.checked;
	      var value = self._formatItemValue(item.value);
	      var markerColor = item.marker.fill || item.marker.stroke;
	      var color = checked ? markerColor : unCheckedColor;
	      var domStr = void 0;
	      if (Util.isFunction(itemTpl)) {
	        domStr = itemTpl(value, color, checked, index);
	      } else {
	        domStr = itemTpl;
	      }
	      var itemDiv = Util.substitute(domStr, {
	        index: index,
	        checked: checked ? 'checked' : 'unChecked',
	        value: value,
	        color: color,
	        originColor: markerColor,
	        originValue: item.value
	      });
	      var itemDom = DomUtil.createDom(itemDiv);
	      var markerDom = findNodeByClass(itemDom, MARKER_CLASS);
	      DomUtil.modifyCSS(itemDom, itemStyle);
	      markerDom && DomUtil.modifyCSS(markerDom, markerStyle);

	      if (!checked) {
	        itemDom.style.color = unCheckedColor;
	        if (markerDom) {
	          markerDom.style.backgroundColor = unCheckedColor;
	        }
	      }
	      itemListDom.appendChild(itemDom);
	    });

	    if (self.get('clickable')) {
	      var childNodes = itemListDom.childNodes;
	      // 注册事件
	      legendWrapper.onclick = function (ev) {
	        var target = ev.target;
	        var targetClass = target.className;
	        targetClass = targetClass.split(' ');
	        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
	          return;
	        }
	        var parentDom = getParentNode(target, ITEM_CLASS);
	        var textDom = findNodeByClass(parentDom, TEXT_CLASS);
	        var markerDom = findNodeByClass(parentDom, MARKER_CLASS);
	        var clickedItem = findItem(items, parentDom.getAttribute('data-value'));

	        if (!clickedItem) {
	          return;
	        }
	        var domClass = parentDom.className;
	        var originColor = parentDom.getAttribute('data-color');
	        if (mode === 'single') {
	          // 单选模式
	          // update checked status
	          clickedItem.checked = true;
	          // 其他图例项全部置灰
	          Util.each(childNodes, function (child) {
	            if (child !== parentDom) {
	              var childMarkerDom = findNodeByClass(child, MARKER_CLASS);
	              childMarkerDom.style.backgroundColor = unCheckedColor;
	              child.className = Util.replace(child.className, 'checked', 'unChecked');
	              child.style.color = unCheckedColor;

	              var childItem = findItem(items, child.getAttribute('data-value'));
	              childItem.checked = false;
	            } else {
	              if (textDom) {
	                textDom.style.color = self.get('textStyle').fill;
	              }
	              if (markerDom) {
	                markerDom.style.backgroundColor = originColor;
	              }
	              parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
	            }
	          });
	        } else {
	          // 混合模式
	          var clickedItemChecked = domClass.includes('checked');
	          var count = 0;
	          Util.each(childNodes, function (child) {
	            if (child.className.includes('checked')) {
	              count++;
	            }
	          });
	          if (!_this2.get('allowAllCanceled') && clickedItemChecked && count === 1) {
	            return;
	          }
	          // 在判断最后一个图例后再更新checked状态，防止点击最后一个图例item时图例样式没有变化但是checked状态改变了 fix #422
	          clickedItem.checked = !clickedItem.checked;
	          if (clickedItemChecked) {
	            if (markerDom) {
	              markerDom.style.backgroundColor = unCheckedColor;
	            }
	            parentDom.className = Util.replace(domClass, 'checked', 'unChecked');
	            parentDom.style.color = unCheckedColor;
	          } else {
	            if (markerDom) {
	              markerDom.style.backgroundColor = originColor;
	            }
	            parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
	            parentDom.style.color = self.get('textStyle').fill;
	          }
	        }

	        self.emit('itemclick', {
	          item: clickedItem,
	          currentTarget: parentDom,
	          checked: mode === 'single' ? true : clickedItem.checked
	        });
	      };
	    }
	    if (self.get('hoverable')) {
	      legendWrapper.onmousemove = function (ev) {
	        var target = ev.target;
	        var targetClass = target.className;
	        targetClass = targetClass.split(' ');
	        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
	          return;
	        }
	        var parentDom = getParentNode(target, ITEM_CLASS);
	        var domClass = parentDom.className;
	        var hoveredItem = findItem(items, parentDom.getAttribute('data-value'));
	        if (hoveredItem && domClass.includes('checked')) {
	          self.emit('itemhover', {
	            item: hoveredItem,
	            currentTarget: parentDom,
	            checked: hoveredItem.checked
	          });
	        } else if (!hoveredItem) {
	          self.emit('itemunhover', ev);
	        }
	      };

	      legendWrapper.onmouseout = function (ev) {
	        self.emit('itemunhover', ev);
	      };
	    }

	    self.set('legendWrapper', legendWrapper);
	  };

	  Category.prototype._renderItems = function _renderItems() {
	    var self = this;
	    var items = self.get('items');
	    if (self.get('reversed')) {
	      items.reverse();
	    }
	    Util.each(items, function (item, index) {
	      self._addItem(item, index);
	    });
	  };

	  Category.prototype._renderBack = function _renderBack() {
	    var padding = this.get('backPadding');
	    var backAttrs = this.get('background');
	    this.renderBack(padding, backAttrs);
	  };

	  Category.prototype._formatItemValue = function _formatItemValue(value) {
	    var formatter = this.get('itemFormatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  };

	  Category.prototype._getNextX = function _getNextX() {
	    var layout = this.get('layout');
	    var itemGap = this.get('itemGap');
	    var itemsGroup = this.get('itemsGroup');
	    var itemWidth = this.get('itemWidth');
	    var children = itemsGroup.get('children');
	    var nextX = 0;

	    if (layout === 'horizontal') {
	      // 水平布局
	      Util.each(children, function (v) {
	        nextX += (itemWidth ? itemWidth : v.getBBox().width) + itemGap;
	      });
	    }
	    return nextX;
	  };

	  Category.prototype._getNextY = function _getNextY() {
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
	    var layout = this.get('layout');
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var nextY = titleGap;
	    if (titleShape) {
	      nextY += titleShape.getBBox().height;
	    }

	    if (layout === 'vertical') {
	      // 竖直布局
	      Util.each(children, function (v) {
	        nextY += v.getBBox().height + itemMarginBottom;
	      });
	    }
	    return nextY;
	  };

	  Category.prototype._addItem = function _addItem(item) {
	    var itemsGroup = this.get('itemsGroup');
	    var x = this._getNextX();
	    var y = this._getNextY();
	    var unCheckColor = this.get('unCheckColor');
	    var itemGroup = itemsGroup.addGroup({
	      x: x,
	      y: y,
	      value: item.value,
	      checked: item.checked
	    });
	    itemGroup.set('viewId', itemsGroup.get('viewId'));

	    var textStyle = this.get('textStyle');
	    var wordSpace = this.get('_wordSpaceing');
	    var startX = 0;

	    if (item.marker) {
	      // 如果有marker添加marker
	      var markerAttrs = Util.mix({}, item.marker, {
	        x: item.marker.radius + x,
	        y: y
	      });

	      if (!item.checked) {
	        if (markerAttrs.fill) {
	          markerAttrs.fill = unCheckColor;
	        }
	        if (markerAttrs.stroke) {
	          markerAttrs.stroke = unCheckColor;
	        }
	      }

	      var markerShape = itemGroup.addShape('marker', {
	        type: 'marker',
	        attrs: markerAttrs
	      });
	      markerShape.attr('cursor', 'pointer');
	      markerShape.name = 'legend-marker';
	      startX += markerShape.getBBox().width + wordSpace;
	    }

	    var textAttrs = Util.mix({}, textStyle, {
	      x: startX + x,
	      y: y,
	      text: this._formatItemValue(item.value)
	    });
	    if (!item.checked) {
	      Util.mix(textAttrs, {
	        fill: unCheckColor
	      });
	    }

	    var textShape = itemGroup.addShape('text', {
	      attrs: textAttrs
	    });
	    textShape.attr('cursor', 'pointer');
	    textShape.name = 'legend-text';
	    this.get('appendInfo') && textShape.setSilent('appendInfo', this.get('appendInfo'));

	    // 添加一个包围矩形，用于事件支持
	    var bbox = itemGroup.getBBox();
	    var itemWidth = this.get('itemWidth');
	    var wrapperShape = itemGroup.addShape('rect', {
	      attrs: {
	        x: x,
	        y: y - bbox.height / 2,
	        fill: '#fff',
	        fillOpacity: 0,
	        width: itemWidth || bbox.width,
	        height: bbox.height
	      }
	    });
	    wrapperShape.attr('cursor', 'pointer');
	    wrapperShape.setSilent('origin', item); // 保存图例项相关的数据，便于事件操作
	    wrapperShape.name = 'legend-item';
	    this.get('appendInfo') && wrapperShape.setSilent('appendInfo', this.get('appendInfo'));
	    itemGroup.name = 'legendGroup';
	    return itemGroup;
	  };

	  Category.prototype._adjustHorizontal = function _adjustHorizontal() {
	    var itemsGroup = this.get('itemsGroup');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength');
	    var itemGap = this.get('itemGap');
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
	    var row = 0;
	    var rowLength = 0;
	    var width = void 0;
	    var height = void 0;
	    var box = void 0;
	    var itemWidth = this.get('itemWidth');
	    if (itemsGroup.getBBox().width > maxLength) {
	      Util.each(children, function (child) {
	        box = child.getBBox();
	        width = itemWidth || box.width;
	        height = box.height + itemMarginBottom;

	        if (maxLength - rowLength < width) {
	          row++;
	          rowLength = 0;
	        }
	        child.move(rowLength, row * height + titleGap);
	        rowLength += width + itemGap;
	      });
	    }
	    return;
	  };

	  Category.prototype._adjustVertical = function _adjustVertical() {
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength'); // 垂直布局，则 maxLength 代表容器的高度
	    var itemGap = this.get('itemGap');
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleGap');
	    var titleHeight = titleShape ? titleShape.getBBox().height + titleGap : 0;
	    var itemWidth = this.get('itemWidth');
	    var colLength = titleHeight;
	    var width = void 0;
	    var height = void 0;
	    var box = void 0;
	    var maxItemWidth = 0;
	    var totalLength = 0;

	    if (itemsGroup.getBBox().height > maxLength) {
	      Util.each(children, function (v) {
	        box = v.getBBox();
	        width = box.width;
	        height = box.height;

	        if (itemWidth) {
	          maxItemWidth = itemWidth + itemGap;
	        } else if (width > maxItemWidth) {
	          maxItemWidth = width + itemGap;
	        }

	        if (maxLength - colLength < height) {
	          colLength = titleHeight;
	          totalLength += maxItemWidth;
	          v.move(totalLength, titleHeight);
	        } else {
	          v.move(totalLength, colLength);
	        }

	        colLength += height + itemMarginBottom;
	      });
	    }
	    return;
	  };

	  Category.prototype._adjustItems = function _adjustItems() {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._adjustHorizontal();
	    } else {
	      this._adjustVertical();
	    }
	  };

	  Category.prototype.getWidth = function getWidth() {
	    if (this.get('useHtml')) {
	      return DomUtil.getOuterWidth(this.get('legendWrapper'));
	    }
	    return _Base.prototype.getWidth.call(this);
	  };

	  Category.prototype.getHeight = function getHeight() {
	    if (this.get('useHtml')) {
	      return DomUtil.getOuterHeight(this.get('legendWrapper'));
	    }

	    return _Base.prototype.getHeight.call(this);
	  };

	  Category.prototype.move = function move(x, y) {
	    if (this.get('useHtml') && !/^\#/.test(this.get('container'))) {
	      DomUtil.modifyCSS(this.get('legendWrapper'), {
	        left: x + 'px',
	        top: y + 'px'
	      });
	    } else {
	      _Base.prototype.move.call(this, x, y);
	    }
	  };

	  Category.prototype.remove = function remove() {
	    if (this.get('useHtml')) {
	      // 移除元素
	      var legendWrapper = this.get('legendWrapper');
	      if (legendWrapper && legendWrapper.parentNode) {
	        legendWrapper.parentNode.removeChild(legendWrapper);
	      }
	    }
	    _Base.prototype.remove.call(this); // must be called
	  };

	  return Category;
	}(Base);

	module.exports = Category;

	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The base class of legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Base = function (_Group) {
	  _inherits(Base, _Group);

	  function Base() {
	    _classCallCheck(this, Base);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 图例标题配置
	       * @type {Object}
	       */
	      title: {
	        fill: '#333',
	        textBaseline: 'middle'
	      },
	      /**
	       * 图例项文本格式化
	       * @type {Function}
	       */
	      itemFormatter: null,
	      /**
	       * 是否使用 html 进行渲染
	       * @type {Boolean}
	       */
	      useHtml: false,
	      /**
	       * 图例是否绘制在绘图区域内
	       * @type {Boolean}
	       */
	      inPlot: false,
	      /**
	       * 鼠标 hover 到图例上的默认交互是否开启
	       * @type {Boolean}
	       */
	      hoverable: true
	    };
	  };

	  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var group = this.addGroup();
	    group.set('viewId', this.get('viewId'));
	    this.set('itemsGroup', group);
	  };

	  Base.prototype._renderUI = function _renderUI() {
	    this._renderTitle();
	  };

	  Base.prototype._renderTitle = function _renderTitle() {
	    var title = this.get('title');
	    if (title && title.text) {
	      var titleShape = this.addShape('text', {
	        attrs: Util.mix({
	          x: 0,
	          y: 0,
	          fill: '#333', // 默认样式
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily
	        }, title)
	      });
	      titleShape.name = 'legend-title';
	      this.get('appendInfo') && titleShape.setSilent('appendInfo', this.get('appendInfo'));
	      this.set('titleShape', titleShape);
	    }
	  };

	  Base.prototype.getCheckedCount = function getCheckedCount() {
	    var itemsGroup = this.get('itemsGroup');
	    var items = itemsGroup.get('children');
	    var checkedArr = Util.filter(items, function (item) {
	      return item.get('checked');
	    });
	    return checkedArr.length;
	  };

	  Base.prototype.setItems = function setItems(items) {
	    this.set('items', items);
	    this.clearItems();
	    this._renderUI();
	  };

	  Base.prototype.addItem = function addItem(item) {
	    var items = this.get('items');
	    items.push(item);
	    this.clearItems();
	    this._renderUI();
	  };

	  Base.prototype.clearItems = function clearItems() {
	    var itemsGroup = this.get('itemsGroup');
	    itemsGroup.clear();
	  };

	  Base.prototype.getWidth = function getWidth() {
	    var bbox = this.getBBox();
	    return bbox.width;
	  };

	  Base.prototype.getHeight = function getHeight() {
	    var bbox = this.getBBox();
	    return bbox.height;
	  };

	  return Base;
	}(Group);

	module.exports = Base;

	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The base class of continuous legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Base = __webpack_require__(111);

	var _require = __webpack_require__(1),
	    Event = _require.Event,
	    Group = _require.Group;

	var Slider = __webpack_require__(324);
	var TRIGGER_WIDTH = 12;

	var Continuous = function (_Base) {
	  _inherits(Continuous, _Base);

	  function Continuous() {
	    _classCallCheck(this, Continuous);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Continuous.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'continuous-legend',
	      /**
	       * 子项
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical',
	      /**
	       * 宽度
	       * @type {Number}
	       */
	      width: 156,
	      /**
	       * 高度
	       * @type {Number}
	       */
	      height: 20,
	      /**
	       * 标题偏移量
	       * @type {Number}
	       */
	      titleGap: 22,
	      /**
	       * 默认文本图形属性
	       * @type {ATTRS}
	       */
	      textStyle: {
	        fill: '#333',
	        textAlign: 'center',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      },
	      /**
	       * 连续图例是否可滑动
	       * @type {Boolean}
	       */
	      slidable: true,
	      /**
	       * 范围内颜色
	       * @type {ATTRS}
	       */
	      inRange: {
	        fill: '#4E7CCC'
	      },
	      _range: [0, 100],
	      /**
	       * 中滑块属性
	       * @type {ATTRS}
	       */
	      middleAttr: {
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      outRangeStyle: {
	        fill: '#D9D9D9'
	      },
	      numberFormatter: null, // 如果数字已经有格式化函数，从外部传入
	      labelOffset: 10 // ToDO: 文本同渐变背景的距离
	    });
	  };

	  Continuous.prototype._calStartPoint = function _calStartPoint() {
	    var start = {
	      x: 0,
	      y: this.get('titleGap') - TRIGGER_WIDTH
	    };
	    var titleShape = this.get('titleShape');
	    if (titleShape) {
	      var titleBox = titleShape.getBBox();
	      start.y += titleBox.height;
	    }

	    return start;
	  };

	  Continuous.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var items = this.get('items');
	    if (!Util.isArray(items) || Util.isEmpty(items)) {
	      return;
	    }

	    _Base.prototype._beforeRenderUI.call(this);
	    this.set('firstItem', items[0]);
	    this.set('lastItem', items[items.length - 1]);
	  };

	  Continuous.prototype._formatItemValue = function _formatItemValue(value) {
	    var numberFormatter = this.get('numberFormatter');
	    if (numberFormatter) {
	      value = numberFormatter(value);
	    }
	    var formatter = this.get('itemFormatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  };

	  Continuous.prototype._renderUI = function _renderUI() {
	    _Base.prototype._renderUI.call(this);

	    if (this.get('slidable')) {
	      this._renderSlider();
	    } else {
	      this._renderBackground();
	    }
	  };

	  Continuous.prototype._renderSlider = function _renderSlider() {
	    var minHandleElement = new Group();
	    var maxHandleElement = new Group();
	    var backgroundElement = new Group();
	    var start = this._calStartPoint();
	    var slider = this.addGroup(Slider, {
	      minHandleElement: minHandleElement,
	      maxHandleElement: maxHandleElement,
	      backgroundElement: backgroundElement,
	      middleAttr: this.get('middleAttr'),
	      layout: this.get('layout'),
	      range: this.get('_range'),
	      width: this.get('width'),
	      height: this.get('height')
	    });
	    slider.translate(start.x, start.y);
	    this.set('slider', slider);

	    var shape = this._renderSliderShape();
	    shape.attr('clip', slider.get('middleHandleElement'));
	    this._renderTrigger();
	  };

	  Continuous.prototype._addBackground = function _addBackground(parent, name, attrs) {
	    parent.addShape(name, {
	      attrs: Util.mix({}, attrs, this.get('outRangeStyle'))
	    });
	    return parent.addShape(name, {
	      attrs: attrs
	    });
	  };

	  Continuous.prototype._renderTrigger = function _renderTrigger() {
	    var min = this.get('firstItem');
	    var max = this.get('lastItem');
	    var layout = this.get('layout');
	    var textStyle = this.get('textStyle');
	    var inRange = this.get('inRange');
	    var attrType = this.get('type');
	    var minBlockAttr = void 0;
	    var maxBlockAttr = void 0;

	    if (attrType === 'color-legend') {
	      minBlockAttr = {
	        fill: min.attrValue
	      };
	      maxBlockAttr = {
	        fill: max.attrValue
	      };
	    } else {
	      minBlockAttr = Util.mix({}, inRange);
	      maxBlockAttr = Util.mix({}, inRange);
	    }
	    var minTextAttr = Util.mix({
	      text: this._formatItemValue(min.value) + ''
	    }, textStyle);
	    var maxTextAttr = Util.mix({
	      text: this._formatItemValue(max.value) + ''
	    }, textStyle);
	    if (layout === 'vertical') {
	      this._addVerticalTrigger('min', minBlockAttr, minTextAttr);
	      this._addVerticalTrigger('max', maxBlockAttr, maxTextAttr);
	    } else {
	      this._addHorizontalTrigger('min', minBlockAttr, minTextAttr);
	      this._addHorizontalTrigger('max', maxBlockAttr, maxTextAttr);
	    }
	  };

	  Continuous.prototype._addVerticalTrigger = function _addVerticalTrigger(type, blockAttr, textAttr) {
	    var slider = this.get('slider');
	    var trigger = slider.get(type + 'HandleElement');
	    var width = this.get('width');
	    var button = trigger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [[width / 2 + TRIGGER_WIDTH, 0], [width / 2 + 1, 0], [width / 2 + TRIGGER_WIDTH, type === 'min' ? TRIGGER_WIDTH : -TRIGGER_WIDTH]]
	      }, blockAttr)
	    });
	    var text = trigger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: width + 8,
	        y: type === 'max' ? -4 : 4,
	        textAlign: 'start',
	        lineHeight: 1,
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.attr('cursor', trigerCursor);
	    text.attr('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  };

	  Continuous.prototype._addHorizontalTrigger = function _addHorizontalTrigger(type, blockAttr, textAttr) {
	    var slider = this.get('slider');
	    var trigger = slider.get(type + 'HandleElement');
	    var button = trigger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [[0, 0], [0, TRIGGER_WIDTH], [type === 'min' ? -TRIGGER_WIDTH : TRIGGER_WIDTH, TRIGGER_WIDTH]]
	      }, blockAttr)
	    });
	    var text = trigger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: type === 'min' ? -TRIGGER_WIDTH - 4 : TRIGGER_WIDTH + 4,
	        y: TRIGGER_WIDTH / 2,
	        textAlign: type === 'min' ? 'end' : 'start',
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.attr('cursor', trigerCursor);
	    text.attr('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  };

	  Continuous.prototype._bindUI = function _bindUI() {
	    var self = this;
	    if (self.get('slidable')) {
	      // const canvas = self.get('canvas');
	      var slider = self.get('slider');
	      slider.on('sliderchange', function (ev) {
	        var range = ev.range;
	        var firstItemValue = self.get('firstItem').value * 1;
	        var lastItemValue = self.get('lastItem').value * 1;
	        var minValue = firstItemValue + range[0] / 100 * (lastItemValue - firstItemValue);
	        var maxValue = firstItemValue + range[1] / 100 * (lastItemValue - firstItemValue);
	        self._updateElement(minValue, maxValue);
	        var itemFiltered = new Event('itemfilter', ev, true, true);
	        itemFiltered.range = [minValue, maxValue];
	        self.emit('itemfilter', itemFiltered);
	      });
	    }
	  };

	  Continuous.prototype._updateElement = function _updateElement(min, max) {
	    var minTextElement = this.get('minTextElement');
	    var maxTextElement = this.get('maxTextElement');
	    if (max > 1) {
	      // 对于大于 1 的值，默认显示为整数
	      min = parseInt(min, 10);
	      max = parseInt(max, 10);
	    }
	    minTextElement.attr('text', this._formatItemValue(min) + '');
	    maxTextElement.attr('text', this._formatItemValue(max) + '');
	    if (this.get('type') === 'color-legend' && this.get('attr')) {
	      var attr = this.get('attr'); // 图形属性，为了更新滑块颜色
	      var minButtonElement = this.get('minButtonElement');
	      var maxButtonElement = this.get('maxButtonElement');
	      minButtonElement.attr('fill', attr.mapping(min).join(''));
	      maxButtonElement.attr('fill', attr.mapping(max).join(''));
	    }
	  };

	  return Continuous;
	}(Base);

	module.exports = Continuous;

	/***/ }),
	/* 113 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = Transition;
	/* harmony export (immutable) */ __webpack_exports__["b"] = transition;
	/* harmony export (immutable) */ __webpack_exports__["c"] = newId;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__attr__ = __webpack_require__(433);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attrTween__ = __webpack_require__(446);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__delay__ = __webpack_require__(447);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__duration__ = __webpack_require__(448);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ease__ = __webpack_require__(449);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__filter__ = __webpack_require__(450);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__merge__ = __webpack_require__(451);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__on__ = __webpack_require__(452);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__remove__ = __webpack_require__(453);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__select__ = __webpack_require__(454);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__selectAll__ = __webpack_require__(455);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__selection__ = __webpack_require__(456);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__style__ = __webpack_require__(457);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__styleTween__ = __webpack_require__(458);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__text__ = __webpack_require__(459);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__transition__ = __webpack_require__(460);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__tween__ = __webpack_require__(339);



















	var id = 0;

	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"])().transition(name);
	}

	function newId() {
	  return ++id;
	}

	var selection_prototype = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype;

	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: __WEBPACK_IMPORTED_MODULE_10__select__["a" /* default */],
	  selectAll: __WEBPACK_IMPORTED_MODULE_11__selectAll__["a" /* default */],
	  filter: __WEBPACK_IMPORTED_MODULE_6__filter__["a" /* default */],
	  merge: __WEBPACK_IMPORTED_MODULE_7__merge__["a" /* default */],
	  selection: __WEBPACK_IMPORTED_MODULE_12__selection__["a" /* default */],
	  transition: __WEBPACK_IMPORTED_MODULE_16__transition__["a" /* default */],
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: __WEBPACK_IMPORTED_MODULE_8__on__["a" /* default */],
	  attr: __WEBPACK_IMPORTED_MODULE_1__attr__["a" /* default */],
	  attrTween: __WEBPACK_IMPORTED_MODULE_2__attrTween__["a" /* default */],
	  style: __WEBPACK_IMPORTED_MODULE_13__style__["a" /* default */],
	  styleTween: __WEBPACK_IMPORTED_MODULE_14__styleTween__["a" /* default */],
	  text: __WEBPACK_IMPORTED_MODULE_15__text__["a" /* default */],
	  remove: __WEBPACK_IMPORTED_MODULE_9__remove__["a" /* default */],
	  tween: __WEBPACK_IMPORTED_MODULE_17__tween__["a" /* default */],
	  delay: __WEBPACK_IMPORTED_MODULE_3__delay__["a" /* default */],
	  duration: __WEBPACK_IMPORTED_MODULE_4__duration__["a" /* default */],
	  ease: __WEBPACK_IMPORTED_MODULE_5__ease__["a" /* default */]
	};

	/***/ }),
	/* 114 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(357);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(434);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(435);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"]; });




	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview G2 图表的入口文件
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var View = __webpack_require__(116);
	var G = __webpack_require__(1);
	var Canvas = G.Canvas;
	var DomUtil = G.DomUtil;
	var Plot = __webpack_require__(330);
	var Controller = __webpack_require__(103);
	var Global = __webpack_require__(2);
	var AUTO_STR = 'auto';

	function _isScaleExist(scales, compareScale) {
	  var flag = false;
	  Util.each(scales, function (scale) {
	    var scaleValues = [].concat(scale.values);
	    var compareScaleValues = [].concat(compareScale.values);
	    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort().toString() === compareScaleValues.sort().toString()) {
	      flag = true;
	      return;
	    }
	  });

	  return flag;
	}

	function mergeBBox(box1, box2) {
	  return {
	    minX: Math.min(box1.minX, box2.minX),
	    minY: Math.min(box1.minY, box2.minY),
	    maxX: Math.max(box1.maxX, box2.maxX),
	    maxY: Math.max(box1.maxY, box2.maxY)
	  };
	}

	function isEqualArray(arr1, arr2) {
	  return Util.isEqualWith(arr1, arr2, function (v1, v2) {
	    return v1 === v2;
	  });
	}

	/**
	 * 图表的入口
	 * @class Chart
	 */

	var Chart = function (_View) {
	  _inherits(Chart, _View);

	  function Chart() {
	    _classCallCheck(this, Chart);

	    return _possibleConstructorReturn(this, _View.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Chart.prototype.getDefaultCfg = function getDefaultCfg() {
	    var viewCfg = _View.prototype.getDefaultCfg.call(this);
	    return Util.mix(viewCfg, {
	      id: null,
	      forceFit: false,
	      container: null,
	      wrapperEl: null,
	      canvas: null,
	      width: 500,
	      height: 500,
	      pixelRatio: null,
	      padding: Global.plotCfg.padding,
	      backPlot: null,
	      frontPlot: null,
	      plotBackground: null,
	      background: null,
	      autoPaddingAppend: 5,
	      views: []
	    });
	  };

	  Chart.prototype.init = function init() {
	    this._initCanvas();
	    this._initPlot();
	    this._initEvents();
	    _View.prototype.init.call(this);

	    var tooltipController = new Controller.Tooltip({
	      chart: this,
	      options: {}
	    });
	    this.set('tooltipController', tooltipController);

	    var legendController = new Controller.Legend({
	      chart: this
	    });
	    this.set('legendController', legendController);
	    this.set('_id', 'chart'); // 防止同用户设定的 id 同名
	    this.emit('afterinit'); // 初始化完毕
	  };

	  Chart.prototype._isAutoPadding = function _isAutoPadding() {
	    var padding = this.get('padding');
	    if (Util.isArray(padding)) {
	      return padding.indexOf(AUTO_STR) !== -1;
	    }
	    return padding === AUTO_STR;
	  };

	  Chart.prototype._getAutoPadding = function _getAutoPadding() {
	    var padding = this.get('padding');
	    // 图例在最前面的一层
	    var frontPlot = this.get('frontPlot');
	    var frontBBox = frontPlot.getBBox();
	    // 坐标轴在最后面的一层
	    var backPlot = this.get('backPlot');
	    var backBBox = backPlot.getBBox();

	    var box = mergeBBox(frontBBox, backBBox);
	    var outter = [0 - box.minY, // 上面超出的部分
	    box.maxX - this.get('width'), // 右边超出的部分
	    box.maxY - this.get('height'), // 下边超出的部分
	    0 - box.minX];
	    // 如果原始的 padding 内部存在 'auto' 则替换对应的边
	    var autoPadding = Util.toAllPadding(padding);
	    for (var i = 0; i < autoPadding.length; i++) {
	      if (autoPadding[i] === AUTO_STR) {
	        var tmp = Math.max(0, outter[i]);
	        autoPadding[i] = tmp + this.get('autoPaddingAppend');
	      }
	    }
	    return autoPadding;
	  };

	  // 初始化画布


	  Chart.prototype._initCanvas = function _initCanvas() {
	    var container = this.get('container');
	    var id = this.get('id');
	    // 如果未设置 container 使用 ID, 兼容 2.x 版本
	    if (!container && id) {
	      container = id;
	      this.set('container', id);
	    }
	    var width = this.get('width');
	    var height = this.get('height');
	    if (Util.isString(container)) {
	      container = document.getElementById(container);
	      if (!container) {
	        throw new Error('Please specify the container for the chart!');
	      }
	      this.set('container', container);
	    }
	    var wrapperEl = DomUtil.createDom('<div style="position:relative;"></div>');
	    container.appendChild(wrapperEl);
	    this.set('wrapperEl', wrapperEl);
	    if (this.get('forceFit')) {
	      width = DomUtil.getWidth(container, width);
	      this.set('width', width);
	    }
	    var canvas = new Canvas({
	      containerDOM: wrapperEl,
	      width: width,
	      height: height,
	      pixelRatio: this.get('pixelRatio')
	    });
	    this.set('canvas', canvas);
	  };

	  // 初始化绘图区间


	  Chart.prototype._initPlot = function _initPlot() {
	    this._initPlotBack(); // 最底层的是背景相关的 group
	    var canvas = this.get('canvas');
	    var backPlot = canvas.addGroup({
	      zIndex: 1
	    }); // 图表最后面的容器
	    var plotContainer = canvas.addGroup({
	      zIndex: 2
	    }); // 图表所在的容器
	    var frontPlot = canvas.addGroup({
	      zIndex: 3
	    }); // 图表前面的容器

	    this.set('backPlot', backPlot);
	    this.set('middlePlot', plotContainer);
	    this.set('frontPlot', frontPlot);
	  };

	  // 初始化背景


	  Chart.prototype._initPlotBack = function _initPlotBack() {
	    var canvas = this.get('canvas');
	    var plot = canvas.addGroup(Plot, {
	      padding: this.get('padding'),
	      plotBackground: Util.mix({}, Global.plotBackground, this.get('plotBackground')),
	      background: Util.mix({}, Global.background, this.get('background'))
	    });
	    this.set('plot', plot);
	    this.set('plotRange', plot.get('plotRange'));
	  };

	  Chart.prototype._initEvents = function _initEvents() {
	    if (this.get('forceFit')) {
	      window.addEventListener('resize', Util.wrapBehavior(this, '_initForceFitEvent'));
	    }
	  };

	  Chart.prototype._initForceFitEvent = function _initForceFitEvent() {
	    var timer = setTimeout(Util.wrapBehavior(this, 'forceFit'), 200);
	    clearTimeout(this.get('resizeTimer'));
	    this.set('resizeTimer', timer);
	  };

	  // 绘制图例


	  Chart.prototype._renderLegends = function _renderLegends() {
	    var options = this.get('options');
	    var legendOptions = options.legends;
	    if (Util.isNil(legendOptions) || legendOptions !== false) {
	      // 没有关闭图例
	      var legendController = this.get('legendController');
	      legendController.options = legendOptions || {};
	      legendController.plotRange = this.get('plotRange');

	      if (legendOptions && legendOptions.custom) {
	        // 用户自定义图例
	        legendController.addCustomLegend();
	      } else {
	        var geoms = this.getAllGeoms();
	        var scales = [];
	        Util.each(geoms, function (geom) {
	          var view = geom.get('view');
	          var attrs = geom.getAttrsForLegend();
	          Util.each(attrs, function (attr) {
	            var type = attr.type;
	            var scale = attr.getScale(type);
	            if (scale.field && scale.type !== 'identity' && !_isScaleExist(scales, scale)) {
	              scales.push(scale);
	              var filteredValues = view.getFilteredValues(scale.field);
	              legendController.addLegend(scale, attr, geom, filteredValues);
	            }
	          });
	        });
	      }

	      legendController.alignLegends();
	    }
	  };

	  // 绘制 tooltip


	  Chart.prototype._renderTooltips = function _renderTooltips() {
	    var options = this.get('options');
	    if (Util.isNil(options.tooltip) || options.tooltip !== false) {
	      // 用户没有关闭 tooltip
	      var tooltipController = this.get('tooltipController');
	      tooltipController.options = options.tooltip || {};
	      tooltipController.renderTooltip();
	    }
	  };

	  /**
	   * 获取所有的几何标记
	   * @return {Array} 所有的几何标记
	   */


	  Chart.prototype.getAllGeoms = function getAllGeoms() {
	    var geoms = [];
	    geoms = geoms.concat(this.get('geoms'));

	    var views = this.get('views');
	    Util.each(views, function (view) {
	      geoms = geoms.concat(view.get('geoms'));
	    });

	    return geoms;
	  };

	  /**
	   * 自适应宽度
	   * @chainable
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.forceFit = function forceFit() {
	    var self = this;
	    if (!self || self.destroyed) {
	      return;
	    }
	    var container = self.get('container');
	    var oldWidth = self.get('width');
	    var width = DomUtil.getWidth(container, oldWidth);
	    if (width !== 0 && width !== oldWidth) {
	      var height = self.get('height');
	      self.changeSize(width, height);
	    }
	    return self;
	  };

	  Chart.prototype.resetPlot = function resetPlot() {
	    var plot = this.get('plot');
	    var padding = this.get('padding');
	    if (!isEqualArray(padding, plot.get('padding'))) {
	      // 重置 padding，仅当padding 发生更改
	      plot.set('padding', padding);
	      plot.repaint();
	    }
	  };

	  /**
	   * 改变大小
	   * @param  {Number} width  图表宽度
	   * @param  {Number} height 图表高度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeSize = function changeSize(width, height) {
	    var self = this;
	    var canvas = self.get('canvas');
	    canvas.changeSize(width, height);
	    var plot = this.get('plot');
	    self.set('width', width);
	    self.set('height', height);
	    // change size 时重新计算边框
	    plot.repaint();
	    // 保持边框不变，防止自动 padding 时绘制多遍
	    this.set('keepPadding', true);
	    self.repaint();
	    this.set('keepPadding', false);
	    this.emit('afterchangesize');
	    return self;
	  };
	  /**
	   * 改变宽度
	   * @param  {Number} width  图表宽度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeWidth = function changeWidth(width) {
	    return this.changeSize(width, this.get('height'));
	  };
	  /**
	   * 改变宽度
	   * @param  {Number} height  图表高度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeHeight = function changeHeight(height) {
	    return this.changeSize(this.get('width'), height);
	  };

	  /**
	   * 创建一个视图
	   * @param  {Object} cfg 视图的配置项
	   * @return {View} 视图对象
	   */


	  Chart.prototype.view = function view(cfg) {
	    cfg = cfg || {};
	    cfg.parent = this;
	    cfg.backPlot = this.get('backPlot');
	    cfg.middlePlot = this.get('middlePlot');
	    cfg.frontPlot = this.get('frontPlot');
	    cfg.canvas = this.get('canvas');
	    if (Util.isNil(cfg.animate)) {
	      cfg.animate = this.get('animate');
	    }
	    cfg.options = Util.mix({}, this._getSharedOptions(), cfg.options);
	    var view = new View(cfg);
	    view.set('_id', 'view' + this.get('views').length); // 标识 ID，防止同用户设定的 id 重名
	    this.get('views').push(view);
	    this.emit('addview', { view: view });
	    return view;
	  };

	  // isShapeInView() {
	  //   return true;
	  // }

	  Chart.prototype.removeView = function removeView(view) {
	    var views = this.get('views');
	    Util.Array.remove(views, view);
	    view.destroy();
	  };

	  Chart.prototype._getSharedOptions = function _getSharedOptions() {
	    var options = this.get('options');
	    var sharedOptions = {};
	    Util.each(['scales', 'coord', 'axes'], function (name) {
	      sharedOptions[name] = Util.cloneDeep(options[name]);
	    });
	    return sharedOptions;
	  };

	  /**
	   * @override
	   * 当前chart 的范围
	   */


	  Chart.prototype.getViewRegion = function getViewRegion() {
	    var plotRange = this.get('plotRange');
	    return {
	      start: plotRange.bl,
	      end: plotRange.tr
	    };
	  };

	  /**
	   * 设置图例配置信息
	   * @param  {String|Object} field 字段名
	   * @param  {Object} [cfg] 图例的配置项
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.legend = function legend(field, cfg) {
	    var options = this.get('options');
	    if (!options.legends) {
	      options.legends = {};
	    }

	    var legends = {};
	    if (field === false) {
	      options.legends = false;
	    } else if (Util.isObject(field)) {
	      legends = field;
	    } else if (Util.isString(field)) {
	      legends[field] = cfg;
	    } else {
	      legends = cfg;
	    }
	    Util.mix(options.legends, legends);

	    return this;
	  };

	  /**
	   * 设置提示信息
	   * @param  {String|Object} visible 是否可见
	   * @param  {Object} [cfg] 提示信息的配置项
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.tooltip = function tooltip(visible, cfg) {
	    var options = this.get('options');
	    if (!options.tooltip) {
	      options.tooltip = {};
	    }

	    if (visible === false) {
	      options.tooltip = false;
	    } else if (Util.isObject(visible)) {
	      Util.mix(options.tooltip, visible);
	    } else {
	      Util.mix(options.tooltip, cfg);
	    }

	    return this;
	  };

	  /**
	   * 清空图表
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.clear = function clear() {
	    this.emit('beforeclear');
	    var views = this.get('views');
	    while (views.length > 0) {
	      var view = views.shift();
	      view.destroy();
	    }
	    _View.prototype.clear.call(this);
	    var canvas = this.get('canvas');
	    this.resetPlot();
	    canvas.draw();
	    this.emit('afterclear');
	    return this;
	  };

	  Chart.prototype.clearInner = function clearInner() {
	    var views = this.get('views');
	    Util.each(views, function (view) {
	      view.clearInner();
	    });

	    var tooltipController = this.get('tooltipController');
	    tooltipController && tooltipController.clear();

	    if (!this.get('keepLegend')) {
	      var legendController = this.get('legendController');
	      legendController && legendController.clear();
	    }

	    _View.prototype.clearInner.call(this);
	  };

	  // chart 除了view 上绘制的组件外，还会绘制图例和 tooltip


	  Chart.prototype.drawComponents = function drawComponents() {
	    _View.prototype.drawComponents.call(this);
	    // 一般是点击图例时，仅仅隐藏某些选项，而不销毁图例
	    if (!this.get('keepLegend')) {
	      this._renderLegends(); // 渲染图例
	    }
	  };

	  /**
	   * 绘制图表
	   * @override
	   */


	  Chart.prototype.render = function render() {
	    // 需要自动计算边框，则重新设置
	    if (!this.get('keepPadding') && this._isAutoPadding()) {
	      this.beforeRender(); // 初始化各个 view 和 绘制
	      this.drawComponents();
	      var autoPadding = this._getAutoPadding();
	      var plot = this.get('plot');
	      // 在计算出来的边框不一致的情况，重新改变边框
	      if (!isEqualArray(plot.get('padding'), autoPadding)) {
	        plot.set('padding', autoPadding);
	        plot.repaint();
	      }
	    }
	    _View.prototype.render.call(this);
	    this._renderTooltips(); // 渲染 tooltip
	  };

	  Chart.prototype.repaint = function repaint() {
	    // 重绘时需要判定当前的 padding 是否发生过改变，如果发生过改变进行调整
	    // 需要判定是否使用了自动 padding
	    if (!this.get('keepPadding')) {
	      this.resetPlot();
	    }
	    _View.prototype.repaint.call(this);
	  };

	  /**
	   * @override
	   * 显示或者隐藏
	   */


	  Chart.prototype.changeVisible = function changeVisible(visible) {
	    var wrapperEl = this.get('wrapperEl');
	    var visibleStr = visible ? '' : 'none';
	    wrapperEl.style.display = visibleStr;
	  };

	  /**
	   * 返回图表的 dataUrl 用于生成图片
	   * @return {String} dataUrl 路径
	   */


	  Chart.prototype.toDataURL = function toDataURL() {
	    var canvas = this.get('canvas');
	    var canvasDom = canvas.get('el');
	    var dataURL = canvasDom.toDataURL('image/png');
	    return dataURL;
	  };

	  /**
	   * 图表导出功能
	   * @param  {String} [name] 图片的名称，默认为 chart.png
	   * @return {String} 返回生成图片的 dataUrl 路径
	   */


	  Chart.prototype.downloadImage = function downloadImage(name) {
	    var dataURL = this.toDataURL();
	    var link = document.createElement('a');

	    if (window.Blob && window.URL) {
	      var arr = dataURL.split(',');
	      var mime = arr[0].match(/:(.*?);/)[1];
	      var bstr = atob(arr[1]);
	      var n = bstr.length;
	      var u8arr = new Uint8Array(n);
	      while (n--) {
	        u8arr[n] = bstr.charCodeAt(n);
	      }
	      var blobObj = new Blob([u8arr], { type: mime });
	      if (window.navigator.msSaveBlob) {
	        window.navigator.msSaveBlob(blobObj, (name || 'chart') + '.png');
	      } else {
	        link.addEventListener('click', function () {
	          link.download = (name || 'chart') + '.png';
	          link.href = window.URL.createObjectURL(blobObj);
	        });
	      }
	    } else {
	      link.addEventListener('click', function () {
	        link.download = (name || 'chart') + '.png';
	        link.href = dataURL.replace('image/png', 'image/octet-stream');
	      });
	    }
	    var e = document.createEvent('MouseEvents');
	    e.initEvent('click', false, false);
	    link.dispatchEvent(e);
	    return dataURL;
	  };

	  /**
	   * 根据坐标点显示对应的 tooltip
	   * @param  {Object} point 画布上的点
	   * @return {Chart}       返回 chart 实例
	   */


	  Chart.prototype.showTooltip = function showTooltip(point) {
	    var views = this.getViewsByPoint(point);
	    if (views.length) {
	      var tooltipController = this.get('tooltipController');
	      tooltipController.showTooltip(point, views);
	    }
	    return this;
	  };

	  /**
	   * 隐藏 tooltip
	  * @return {Chart}       返回 chart 实例
	   */


	  Chart.prototype.hideTooltip = function hideTooltip() {
	    var tooltipController = this.get('tooltipController');
	    tooltipController.hideTooltip();
	    return this;
	  };

	  /**
	   * 根据传入的画布坐标，获取该处的 tooltip 上的记录信息
	   * @param  {Object} point 画布坐标点
	   * @return {Array}       返回结果
	   */


	  Chart.prototype.getTooltipItems = function getTooltipItems(point) {
	    var self = this;
	    var views = self.getViewsByPoint(point);
	    var rst = [];
	    Util.each(views, function (view) {
	      var geoms = view.get('geoms');
	      Util.each(geoms, function (geom) {
	        var dataArray = geom.get('dataArray');
	        var items = [];
	        Util.each(dataArray, function (data) {
	          var tmpPoint = geom.findPoint(point, data);
	          if (tmpPoint) {
	            var subItems = geom.getTipItems(tmpPoint);
	            items = items.concat(subItems);
	          }
	        });
	        rst = rst.concat(items);
	      });
	    });
	    return rst;
	  };

	  /**
	   * @override
	   * 销毁图表
	   */


	  Chart.prototype.destroy = function destroy() {
	    this.emit('beforedestroy');
	    clearTimeout(this.get('resizeTimer'));
	    var canvas = this.get('canvas');
	    var wrapperEl = this.get('wrapperEl');
	    wrapperEl.parentNode.removeChild(wrapperEl);
	    _View.prototype.destroy.call(this);
	    canvas.destroy();
	    window.removeEventListener('resize', Util.getWrapBehavior(this, '_initForceFitEvent'));
	    this.emit('afterdestroy');
	  };

	  return Chart;
	}(View);

	module.exports = Chart;

	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview view
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(58);
	var Geom = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var Controller = __webpack_require__(103);
	var Global = __webpack_require__(2);
	var FIELD_ORIGIN = '_origin';
	var Animate = __webpack_require__(329);

	function isFullCircle(coord) {
	  var startAngle = coord.startAngle;
	  var endAngle = coord.endAngle;
	  if (!Util.isNil(startAngle) && !Util.isNil(endAngle) && endAngle - startAngle < Math.PI * 2) {
	    return false;
	  }
	  return true;
	}

	function isBetween(value, start, end) {
	  var tmp = (value - start) / (end - start);
	  return tmp >= 0 && tmp <= 1;
	}

	function isPointInCoord(coord, point) {
	  var result = false;
	  if (coord) {
	    var type = coord.type;
	    if (type === 'theta') {
	      var start = coord.start;
	      var end = coord.end;
	      result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);
	    } else {
	      var invertPoint = coord.invert(point);
	      result = invertPoint.x >= 0 && invertPoint.y >= 0 && invertPoint.x <= 1 && invertPoint.y <= 1;
	    }
	  }
	  return result;
	}

	var ViewGeoms = {};
	Util.each(Geom, function (geomConstructor, className) {
	  var methodName = Util.lowerFirst(className);
	  ViewGeoms[methodName] = function (cfg) {
	    var geom = new geomConstructor(cfg);
	    this.addGeom(geom);
	    return geom;
	  };
	});

	/**
	 * 图表中的视图
	 * @class View
	 */

	var View = function (_Base) {
	  _inherits(View, _Base);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  View.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      viewContainer: null,
	      coord: null,
	      start: { x: 0, y: 0 },
	      end: { x: 1, y: 1 },
	      geoms: [],
	      scales: {},
	      options: {},
	      scaleController: null,
	      padding: 0,
	      parent: null,
	      tooltipEnable: true, // 是否展示 tooltip
	      animate: true,
	      visible: true
	    };
	  };

	  function View(cfg) {
	    _classCallCheck(this, View);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    var self = _this;
	    Util.each(Geom, function (geomConstructor, className) {
	      var methodName = Util.lowerFirst(className);
	      self[methodName] = function (cfg) {
	        var geom = new geomConstructor(cfg);
	        self.addGeom(geom);
	        return geom;
	      };
	    });
	    // Util.mix(this, ViewGeoms);
	    _this.init();
	    return _this;
	  }

	  /**
	   * @protected
	   * 初始化
	   */


	  View.prototype.init = function init() {
	    this._initViewPlot(); // 先创建容器
	    if (this.get('data')) {
	      this._initData(this.get('data'));
	    }
	    this._initOptions();
	    this._initControllers();
	    this._bindEvents();
	  };

	  // 初始化配置项


	  View.prototype._initOptions = function _initOptions() {
	    var self = this;
	    var options = Util.mix({}, self.get('options')); // 防止修改原始值
	    if (!options.scales) {
	      options.scales = {};
	    }
	    if (!options.coord) {
	      options.coord = {};
	    }

	    if (options.animate === false) {
	      this.set('animate', false);
	    }

	    if (options.tooltip === false || Util.isNull(options.tooltip)) {
	      // 配置项方式关闭 tooltip
	      this.set('tooltipEnable', false);
	    }

	    if (options.geoms && options.geoms.length) {
	      Util.each(options.geoms, function (geomOption) {
	        self._createGeom(geomOption);
	      });
	    }
	    var scaleController = self.get('scaleController');
	    if (scaleController) {
	      scaleController.defs = options.scales;
	    }
	    var coordController = self.get('coordController');
	    if (coordController) {
	      coordController.reset(options.coord);
	    }
	    this.set('options', options);
	  };

	  View.prototype._createGeom = function _createGeom(cfg) {
	    var type = cfg.type;
	    var geom = void 0;
	    if (this[type]) {
	      geom = this[type]();
	      Util.each(cfg, function (v, k) {
	        if (geom[k]) {

	          if (Util.isObject(v) && v.field) {
	            // 配置项传入
	            if (v === 'label') {
	              geom[k](v.field, v.callback, v.cfg);
	            } else {
	              var _cfg = void 0;
	              Util.each(v, function (value, key) {
	                if (key !== 'field') {
	                  _cfg = value;
	                }
	              });
	              geom[k](v.field, _cfg);
	            }
	          } else {
	            geom[k](v);
	          }
	        }
	      });
	    }
	  };

	  // 初始化所有的控制器


	  View.prototype._initControllers = function _initControllers() {
	    var options = this.get('options');

	    var scaleController = new Controller.Scale({
	      defs: options.scales
	    });
	    var coordController = new Controller.Coord(options.coord);
	    this.set('scaleController', scaleController);
	    this.set('coordController', coordController);

	    var axisController = new Controller.Axis();
	    this.set('axisController', axisController);

	    var guideController = new Controller.Guide({
	      options: options.guides || []
	    });
	    this.set('guideController', guideController);
	  };

	  View.prototype._initViewPlot = function _initViewPlot() {
	    if (!this.get('viewContainer')) {
	      // 用于 geom 的绘制
	      this.set('viewContainer', this.get('middlePlot'));
	    }
	  };

	  View.prototype._initGeoms = function _initGeoms() {
	    var geoms = this.get('geoms');
	    var filteredData = this.get('filteredData');
	    var coord = this.get('coord');
	    var viewId = this.get('_id');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.set('data', filteredData);
	      geom.set('coord', coord);
	      geom.set('_id', viewId + '-geom' + i);
	      geom.set('keyFields', this.get('keyFields'));
	      geom.init();
	    }
	  };

	  View.prototype._clearGeoms = function _clearGeoms() {
	    var self = this;
	    var geoms = self.get('geoms');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.clear();
	    }
	  };

	  View.prototype._removeGeoms = function _removeGeoms() {
	    var self = this;
	    var geoms = self.get('geoms');
	    while (geoms.length > 0) {
	      var geom = geoms.shift();
	      geom.destroy();
	    }
	  };

	  View.prototype._drawGeoms = function _drawGeoms() {
	    var geoms = this.get('geoms');
	    var coord = this.get('coord');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.setCoord(coord);
	      geom.paint();
	    }
	  };

	  View.prototype.isShapeInView = function isShapeInView(shape) {
	    var id = this.get('_id');
	    var shapeId = shape._id;
	    if (!shapeId) {
	      return shape.get('parent').get('viewId') === id;
	    }
	    return shapeId.split('-')[0] === id;
	  };

	  /**
	   * View 所在的范围
	   * @protected
	   * @return {Object} View 所在的范围
	   */


	  View.prototype.getViewRegion = function getViewRegion() {
	    var self = this;
	    var parent = self.get('parent');
	    var start = void 0;
	    var end = void 0;
	    if (parent) {
	      var region = parent.getViewRegion();
	      var viewRegion = self._getViewRegion(region.start, region.end);
	      start = viewRegion.start;
	      end = viewRegion.end;
	    } else {
	      start = self.get('start');
	      end = self.get('end');
	    }
	    return {
	      start: start,
	      end: end
	    };
	  };

	  // 获取 range 所在的范围


	  View.prototype._getViewRegion = function _getViewRegion(plotStart, plotEnd) {
	    var start = this.get('start');
	    var end = this.get('end');
	    var startX = start.x;
	    var startY = 1 - end.y;
	    var endX = end.x;
	    var endY = 1 - start.y;
	    var padding = this.get('padding');
	    // 转换成 上、右、下、左的模式
	    var allPadding = Util.toAllPadding(padding);
	    var top = allPadding[0];
	    var right = allPadding[1];
	    var bottom = allPadding[2];
	    var left = allPadding[3];

	    var startPoint = {
	      x: startX * (plotEnd.x - plotStart.x) + plotStart.x + left,
	      y: startY * (plotEnd.y - plotStart.y) + plotStart.y - bottom

	    };
	    var endPoint = {
	      x: endX * (plotEnd.x - plotStart.x) + plotStart.x - right,
	      y: endY * (plotEnd.y - plotStart.y) + plotStart.y + top
	    };

	    return {
	      start: startPoint,
	      end: endPoint
	    };
	  };

	  View.prototype._createCoord = function _createCoord() {
	    var coordController = this.get('coordController');
	    var region = this.getViewRegion();
	    var coord = coordController.createCoord(region.start, region.end);
	    this.set('coord', coord);
	  };

	  View.prototype._renderAxes = function _renderAxes() {
	    var options = this.get('options');
	    var axesOptions = options.axes;
	    if (axesOptions === false) {
	      // 不渲染坐标轴
	      return;
	    }
	    var axisController = this.get('axisController');
	    axisController.container = this.get('backPlot');
	    axisController.coord = this.get('coord');
	    axisController.options = axesOptions || {};
	    var xScale = this.getXScale();
	    var yScales = this.getYScales();
	    var viewId = this.get('_id');
	    axisController.createAxis(xScale, yScales, viewId);
	  };

	  View.prototype._renderGuides = function _renderGuides() {
	    var guideController = this.get('guideController');
	    if (!Util.isEmpty(guideController.options)) {
	      var coord = this.get('coord');
	      guideController.view = this;
	      guideController.backContainer = this.get('backPlot');
	      guideController.frontContainer = this.get('frontPlot');
	      guideController.xScales = this._getScales('x');
	      guideController.yScales = this._getScales('y');
	      guideController.render(coord);
	    }
	  };
	  // 注册事件


	  View.prototype._bindEvents = function _bindEvents() {
	    var eventController = new Controller.Event({
	      view: this,
	      canvas: this.get('canvas')
	    });
	    eventController.bindEvents();
	    this.set('eventController', eventController);
	  };
	  // 清理时间


	  View.prototype._clearEvents = function _clearEvents() {
	    var eventController = this.get('eventController');
	    eventController && eventController.clearEvents();
	  };

	  View.prototype._getScales = function _getScales(dimType) {
	    var geoms = this.get('geoms');
	    var result = {};
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      var scale = dimType === 'x' ? geom.getXScale() : geom.getYScale();
	      if (scale && !result[scale.field]) {
	        result[scale.field] = scale;
	      }
	    }
	    return result;
	  };

	  View.prototype._adjustScale = function _adjustScale() {
	    this._setCatScalesRange();
	    var geoms = this.get('geoms');
	    var scaleController = this.get('scaleController');
	    var colDefs = scaleController.defs;

	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      if (geom.get('type') === 'interval') {
	        var yScale = geom.getYScale();
	        var field = yScale.field;
	        if (!(colDefs[field] && colDefs[field].min) && yScale.min > 0 && yScale.type !== 'time') {
	          yScale.change({
	            min: 0
	          });
	        }
	      }
	    }
	  };

	  View.prototype._setCatScalesRange = function _setCatScalesRange() {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScales = self.getYScales();
	    var scales = [];

	    xScale && scales.push(xScale);
	    scales = scales.concat(yScales);
	    var inFullCircle = coord.isPolar && isFullCircle(coord);
	    var scaleController = self.get('scaleController');
	    var colDefs = scaleController.defs;
	    Util.each(scales, function (scale) {
	      if ((scale.isCategory || scale.isIdentity) && scale.values && !(colDefs[scale.field] && colDefs[scale.field].range)) {
	        var count = scale.values.length;
	        var range = void 0;
	        if (count === 1) {
	          range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5]的状态
	        } else {
	          var widthRatio = 1;
	          var offset = 0;
	          if (inFullCircle) {
	            if (!coord.isTransposed) {
	              range = [0, 1 - 1 / count];
	            } else {
	              widthRatio = Global.widthRatio.multiplePie;
	              offset = 1 / count * widthRatio;
	              range = [offset / 2, 1 - offset / 2];
	            }
	          } else {
	            offset = 1 / count * 1 / 2; // 两边留下分类空间的一半
	            range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时
	          }
	        }
	        scale.range = range;
	      }
	    });
	  };

	  View.prototype.getXScale = function getXScale() {
	    var geoms = this.get('geoms');
	    // 如果进行过滤，那么 geom 默认隐藏时会出现不一致
	    // 默认隐藏时坐标轴不绘制，但是调用了 geom.show() 后，则图形显示了，坐标轴依然不见
	    /* .filter(function(geom) {
	      return geom.get('visible');
	    }); */
	    var xScale = null;
	    if (!Util.isEmpty(geoms)) {
	      xScale = geoms[0].getXScale();
	    }
	    return xScale;
	  };

	  View.prototype.getYScales = function getYScales() {
	    var geoms = this.get('geoms');
	    /* .filter(function(geom) {
	      return geom.get('visible');
	    }); */
	    var rst = [];

	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      var yScale = geom.getYScale();
	      if (yScale && Util.indexOf(rst, yScale) === -1) {
	        rst.push(yScale);
	      }
	    }
	    return rst;
	  };

	  /**
	   * 获取数据对应在画布空间的坐标
	   * @param  {Object} item 原始数据
	   * @return {Object}      返回对应的画布上的坐标点
	   */


	  View.prototype.getXY = function getXY(item) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScales = self._getScales('x');
	    var yScales = self._getScales('y');
	    var x = void 0;
	    var y = void 0;

	    for (var field in item) {
	      if (xScales[field]) {
	        x = xScales[field].scale(item[field]);
	      }
	      if (yScales[field]) {
	        y = yScales[field].scale(item[field]);
	      }
	    }

	    if (!Util.isNil(x) && !Util.isNil(y)) {
	      return coord.convert({
	        x: x,
	        y: y
	      });
	    }

	    return null;
	  };

	  /**
	   * 获取逼近的点的数据集合
	   * @param  {Object} point 画布上的像素点
	   * @return {Array} 数据
	   */


	  View.prototype.getSnapRecords = function getSnapRecords(point) {
	    var self = this;
	    var geoms = self.get('geoms');
	    var rst = [];
	    Util.each(geoms, function (geom) {
	      var dataArray = geom.get('dataArray');
	      var record = void 0;
	      Util.each(dataArray, function (data) {
	        record = geom.findPoint(point, data);
	        record && rst.push(record);
	      });
	    });
	    return rst;
	  };

	  /**
	   * @protected
	   * 添加几何标记
	   * @param {Geom} geom 几何标记
	   */


	  View.prototype.addGeom = function addGeom(geom) {
	    var self = this;
	    var geoms = self.get('geoms');
	    geoms.push(geom);
	    geom.set('view', self);
	    var container = self.get('viewContainer');
	    geom.set('container', container);
	    geom.set('animate', self.get('animate'));
	    geom.bindEvents();
	  };

	  /**
	   * @protected
	   * 移除几何标记
	   * @param {Geom} geom 几何标记
	   */


	  View.prototype.removeGeom = function removeGeom(geom) {
	    var geoms = this.get('geoms');
	    Util.Array.remove(geoms, geom);
	    geom.destroy();
	  };

	  View.prototype.createScale = function createScale(field, data) {
	    var scales = this.get('scales');
	    var parent = this.get('parent');
	    var scale = scales[field];
	    // const filters = this._getFilters();
	    if (!data) {
	      var filteredData = this.get('filteredData');
	      var legendFields = this._getFieldsForLegend();
	      // 过滤导致数据为空时，需要使用全局数据
	      // 参与过滤的字段的度量也根据全局数据来生成
	      if (filteredData.length && legendFields.indexOf(field) === -1) {
	        data = filteredData;
	      } else {
	        data = this.get('data');
	      }
	    }
	    var scaleController = this.get('scaleController');
	    if (!scale) {
	      scale = scaleController.createScale(field, data);
	      if (scale.sync && parent) {
	        var parentScale = parent.createScale(field, data);
	        scale = this._getSyncScale(parentScale, scale);
	      }
	      scales[field] = scale;
	    } else if (scale.sync) {
	      // 防止 view 内部创建的scale，Chart 上的scale 范围更大
	      var newScale = scaleController.createScale(field, data);
	      this._syncScale(scale, newScale);
	    }
	    return scale;
	  };

	  View.prototype._getFieldsForLegend = function _getFieldsForLegend() {
	    var fields = [];
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var geomFields = geom.getFieldsForLegend();
	      fields = fields.concat(geomFields);
	    });
	    return Util.uniq(fields);
	  };

	  // 如果需要同步度量，则使得 values,min,max的范围最大


	  View.prototype._getSyncScale = function _getSyncScale(parentScale, scale) {
	    if (parentScale.type !== scale.type) {
	      return scale;
	    }
	    this._syncScale(parentScale, scale);
	    return parentScale;
	  };

	  View.prototype._syncScale = function _syncScale(distScale, sourceScale) {
	    var mergeValues = Util.union(distScale.values, sourceScale.values);
	    if (sourceScale.isLinear) {
	      var max = Math.max(distScale.max, sourceScale.max);
	      var min = Math.min(distScale.min, sourceScale.min);
	      if (distScale.max !== max || distScale.min !== min) {
	        distScale.change({
	          min: min,
	          max: max,
	          values: mergeValues
	        });
	      }
	    }

	    if (mergeValues.length !== distScale.values.length) {
	      distScale.change({
	        values: mergeValues
	      });
	    }
	  };

	  View.prototype.getFilteredValues = function getFilteredValues(field) {
	    var scale = this.get('scales')[field];
	    var values = scale.values;
	    var filters = this._getFilters();
	    var rst = void 0;
	    if (filters && filters[field]) {
	      rst = values.filter(filters[field]);
	    } else {
	      rst = values.slice(0);
	    }
	    return rst;
	  };

	  View.prototype.filter = function filter(field, condition) {
	    var options = this.get('options');
	    if (!options.filters) {
	      options.filters = {};
	    }
	    options.filters[field] = condition;
	  };

	  // 获取 filters


	  View.prototype._getFilters = function _getFilters() {
	    var options = this.get('options');
	    return options.filters;
	  };

	  // 执行 filter 数据


	  View.prototype.execFilter = function execFilter(data) {
	    var self = this;
	    var filters = self._getFilters();
	    if (filters) {
	      data = data.filter(function (obj) {
	        var rst = true;
	        Util.each(filters, function (fn, k) {
	          if (fn) {
	            rst = fn(obj[k], obj);
	            if (!rst) {
	              return false;
	            }
	          }
	        });
	        return rst;
	      });
	    }
	    return data;
	  };

	  View.prototype.axis = function axis(field, cfg) {
	    var options = this.get('options');
	    if (field === false) {
	      options.axes = false;
	    } else {
	      if (!options.axes) {
	        options.axes = {};
	      }
	      var axisOptions = options.axes;
	      axisOptions[field] = cfg;
	    }

	    return this;
	  };

	  View.prototype.guide = function guide() {
	    return this.get('guideController');
	  };

	  View.prototype._getKeyFields = function _getKeyFields(scaleDefs) {
	    var keyFields = [];
	    Util.each(scaleDefs, function (def, field) {
	      if (def.key) {
	        keyFields.push(field);
	      }
	    });
	    this.set('keyFields', keyFields);
	  };

	  View.prototype.scale = function scale(field, cfg) {
	    var options = this.get('options');
	    var scaleDefs = options.scales;
	    if (Util.isObject(field)) {
	      Util.mix(scaleDefs, field);
	    } else {
	      scaleDefs[field] = cfg;
	    }

	    this._getKeyFields(scaleDefs);
	    return this;
	  };

	  View.prototype.tooltip = function tooltip(visible) {
	    this.set('tooltipEnable', visible);
	    return this;
	  };

	  View.prototype.animate = function animate(enable) {
	    var options = this.get('options');
	    options.animate = enable;
	    this.set('animate', enable);
	    return this;
	  };

	  View.prototype.changeOptions = function changeOptions(options) {
	    this.set('options', options);
	    this._initOptions(options);
	    return this;
	  };

	  /**
	   * @internal 查找包含指定点的视图
	   * @param  {Object} point 点的位置
	   * @return {Array} 多个视图
	   */


	  View.prototype.getViewsByPoint = function getViewsByPoint(point) {
	    var rst = [];
	    var views = this.get('views');

	    if (isPointInCoord(this.get('coord'), point)) {
	      rst.push(this);
	    }

	    Util.each(views, function (view) {
	      if (view.get('visible') && isPointInCoord(view.get('coord'), point)) {
	        rst.push(view);
	      }
	    });
	    return rst;
	  };

	  /**
	   * 遍历所有的 shape ，用户更改 shape 后进行刷新
	   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
	   * @return {View} 当前视图
	   */


	  View.prototype.eachShape = function eachShape(fn) {
	    var self = this;
	    var views = self.get('views');
	    var canvas = self.get('canvas');
	    Util.each(views, function (view) {
	      view.eachShape(fn);
	    });
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var shapes = geom.getShapes();
	      Util.each(shapes, function (shape) {
	        var origin = shape.get('origin');
	        if (Util.isArray(origin)) {
	          var arr = origin.map(function (subOrigin) {
	            return subOrigin[FIELD_ORIGIN];
	          });
	          fn(arr, shape, geom, self);
	        } else {
	          var obj = origin[FIELD_ORIGIN];
	          fn(obj, shape, geom, self);
	        }
	      });
	    });
	    canvas.draw();
	    return this;
	  };

	  /**
	   * 遍历所有的 shape ，回调函数中 true / false 控制图形是否显示
	   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
	   * @return {View} 当前视图
	   */


	  View.prototype.filterShape = function filterShape(fn) {
	    var callback = function callback(record, shape, geom, view) {
	      if (!fn(record, shape, geom, view)) {
	        shape.set('visible', false);
	      } else {
	        shape.set('visible', true);
	      }
	    };
	    this.eachShape(callback);
	    return this;
	  };

	  View.prototype.clearInner = function clearInner() {
	    this.set('scales', {});
	    var options = this.get('options');
	    options.geoms = null;
	    this._clearGeoms();
	    // reset guide
	    this.get('guideController') && this.get('guideController').reset();
	    // clear axis
	    this.get('axisController') && this.get('axisController').clear();
	  };

	  /**
	   * 清除视图内容，包括 geoms
	   * @return {View} 当前视图
	   */


	  View.prototype.clear = function clear() {
	    var options = this.get('options');
	    options.filters = null;
	    this._removeGeoms();
	    // const container = this.get('viewContainer');
	    // container.clear();
	    this.clearInner();
	    this.get('guideController') && this.get('guideController').clear();
	    this.set('isUpdate', false);
	    this.set('keyFields', []);
	    return this;
	  };

	  /**
	   * 设置坐标系信息
	   * @param  {String} type 类型
	   * @param  {Object} cfg  配置项
	   * @return {Object} coordController 坐标系的管理器
	   */


	  View.prototype.coord = function coord(type, cfg) {
	    var coordController = this.get('coordController');
	    coordController.reset({
	      type: type,
	      cfg: cfg
	    });
	    return coordController;
	  };

	  /**
	   * 当父元素边框发生改变时坐标系需要重新调整
	   * @protected
	   */


	  View.prototype.resetCoord = function resetCoord() {
	    this._createCoord();
	  };

	  View.prototype.source = function source(data, scales) {
	    this._initData(data);
	    if (scales) {
	      this.scale(scales);
	    }
	    this.emit('setdata');
	    return this;
	  };

	  View.prototype.changeData = function changeData(data) {
	    this.emit('beforechangedata');
	    this._initData(data);
	    this.emit('afterchangedata');
	    this.repaint();
	    return this;
	  };

	  View.prototype._initData = function _initData(data) {
	    var dataView = this.get('dataView');
	    if (dataView) {
	      dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
	      this.set('dataView', null);
	    }
	    if (data && data.isDataView) {
	      data.on('change', Util.wrapBehavior(this, '_onViewChange'));
	      this.set('dataView', data);
	      data = data.rows;
	    }
	    this.set('data', data);
	  };

	  View.prototype._onViewChange = function _onViewChange() {
	    this.emit('beforechangedata');
	    var dataView = this.get('dataView');
	    var rows = dataView.rows;
	    this.set('data', rows);
	    this.emit('afterchangedata');
	    this.repaint();
	  };

	  // 初始化各个 view 和绘制辅助元素


	  View.prototype.beforeRender = function beforeRender() {
	    var views = this.get('views');
	    // 如果存在 views 则初始化子 view 的方法
	    Util.each(views, function (view) {
	      view.beforeRender();
	    });
	    this.initView();
	  };

	  // 绘制坐标轴、图例、辅助元素等图表组件


	  View.prototype.drawComponents = function drawComponents() {
	    var views = this.get('views');
	    // 如果存在 views 则初始化子 view 的方法
	    Util.each(views, function (view) {
	      view.drawComponents();
	    });
	    this._renderAxes();
	    this._renderGuides();
	  };

	  // 绘制图形


	  View.prototype.drawCanvas = function drawCanvas(stopDraw) {
	    if (!stopDraw) {
	      var views = this.get('views');
	      var backPlot = this.get('backPlot');
	      backPlot.sort();
	      var canvas = this.get('canvas');
	      var animate = this.get('animate');
	      if (animate) {
	        var isUpdate = this.get('isUpdate');
	        Util.each(views, function (view) {
	          Animate.execAnimation(view, isUpdate);
	        });
	        Animate.execAnimation(this, isUpdate);
	      } else {
	        canvas.draw();
	      }
	    }
	  };

	  View.prototype.render = function render(stopDraw) {
	    this.clearInner();
	    this.emit('beforerender');
	    this.beforeRender();
	    this.emit('beforepaint');
	    this.drawComponents();
	    this.paint();
	    this.emit('afterpaint');
	    this.drawCanvas(stopDraw);
	    this.emit('afterrender');
	    this.set('rendered', true);
	    return this;
	  };

	  View.prototype.initView = function initView() {
	    var data = this.get('data') || [];
	    var filteredData = this.execFilter(data);
	    this.set('filteredData', filteredData);
	    // if (!Util.isEmpty(data)) {
	    this._createCoord(); // draw geometry 前绘制区域可能会发生改变
	    this._initGeoms();
	    this._adjustScale();
	    // }
	  };

	  View.prototype.paint = function paint() {
	    var views = this.get('views');
	    // 绘制
	    Util.each(views, function (view) {
	      view.paint();
	    });
	    var data = this.get('data');
	    if (!Util.isEmpty(data)) {
	      this._drawGeoms();
	    }
	    // 如果 view 隐藏了，隐藏所有的图形和坐标轴
	    if (!this.get('visible')) {
	      this.changeVisible(false, true); // 隐藏所有的图形，但是不绘制
	    }
	  };

	  View.prototype.changeVisible = function changeVisible(visible, stopDraw) {
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      // if (geom.get('visible')) { // geom 隐藏时不受
	      geom.changeVisible(visible, true);
	      // }
	    });
	    this.get('axisController') && this.get('axisController').changeVisible(visible);
	    this.get('guideController') && this.get('guideController').changeVisible(visible);
	    if (!stopDraw) {
	      var canvas = this.get('canvas');
	      canvas.draw();
	    }
	  };

	  View.prototype.repaint = function repaint() {
	    this.set('isUpdate', true);
	    this.clearInner();
	    this.render();
	  };

	  View.prototype.destroy = function destroy() {
	    this._clearEvents();
	    var dataView = this.get('dataView');
	    dataView && dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
	    this.clear();
	    _Base.prototype.destroy.call(this);
	  };

	  return View;
	}(Base);

	module.exports = View;

	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {


	var Base = __webpack_require__(15);
	Base.Color = __webpack_require__(272);
	Base.Size = __webpack_require__(273);
	Base.Opacity = __webpack_require__(274);
	Base.Shape = __webpack_require__(275);
	Base.Position = __webpack_require__(276);
	module.exports = Base;

	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape 的辅助方法
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);

	var ShapeUtil = {
	  splitPoints: function splitPoints(obj) {
	    var points = [];
	    var x = obj.x;
	    var y = obj.y;
	    y = Util.isArray(y) ? y : [y];
	    Util.each(y, function (yItem, index) {
	      var point = {
	        x: Util.isArray(x) ? x[index] : x,
	        y: yItem
	      };
	      points.push(point);
	    });
	    return points;
	  }
	};

	module.exports = ShapeUtil;

	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(120);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	}

	module.exports = cloneDeep;

	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    arrayEach = __webpack_require__(150),
	    assignValue = __webpack_require__(44),
	    baseAssign = __webpack_require__(151),
	    baseAssignIn = __webpack_require__(157),
	    cloneBuffer = __webpack_require__(160),
	    copyArray = __webpack_require__(161),
	    copySymbols = __webpack_require__(162),
	    copySymbolsIn = __webpack_require__(163),
	    getAllKeys = __webpack_require__(76),
	    getAllKeysIn = __webpack_require__(164),
	    getTag = __webpack_require__(18),
	    initCloneArray = __webpack_require__(168),
	    initCloneByTag = __webpack_require__(169),
	    initCloneObject = __webpack_require__(174),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isMap = __webpack_require__(176),
	    isObject = __webpack_require__(7),
	    isSet = __webpack_require__(178),
	    keys = __webpack_require__(17);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || isFunc && !object) {
	      result = isFlat || isFunc ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function (subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });

	    return result;
	  }

	  if (isMap(value)) {
	    value.forEach(function (subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });

	    return result;
	  }

	  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;

	/***/ }),
	/* 121 */
	/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;

	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;

	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;

	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;

	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;

	/***/ }),
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache();
	  this.size = 0;
	}

	module.exports = stackClear;

	/***/ }),
	/* 127 */
	/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;

	/***/ }),
	/* 128 */
	/***/ (function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;

	/***/ }),
	/* 129 */
	/***/ (function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;

	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24),
	    Map = __webpack_require__(42),
	    MapCache = __webpack_require__(43);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;

	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(65),
	    isMasked = __webpack_require__(135),
	    isObject = __webpack_require__(7),
	    toSource = __webpack_require__(67);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;

	/***/ }),
	/* 132 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var g;

	// This works in non-strict mode
	g = function () {
		return this;
	}();

	try {
		// This works if eval is allowed (see CSP)
		g = g || Function("return this")() || (1, eval)("this");
	} catch (e) {
		// This works if the window reference is available
		if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	}

	// g can still be undefined, but nothing to do about it...
	// We return undefined, instead of nothing here, so it's
	// easier to handle this case. if(!global) { ...}

	module.exports = g;

	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;

	/***/ }),
	/* 134 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;

	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(136);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}

	module.exports = isMasked;

	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;

	/***/ }),
	/* 137 */
	/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;

	/***/ }),
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(139),
	    ListCache = __webpack_require__(24),
	    Map = __webpack_require__(42);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map || ListCache)(),
	    'string': new Hash()
	  };
	}

	module.exports = mapCacheClear;

	/***/ }),
	/* 139 */
	/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(140),
	    hashDelete = __webpack_require__(141),
	    hashGet = __webpack_require__(142),
	    hashHas = __webpack_require__(143),
	    hashSet = __webpack_require__(144);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;

	/***/ }),
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;

	/***/ }),
	/* 141 */
	/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;

	/***/ }),
	/* 142 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;

	/***/ }),
	/* 143 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;

	/***/ }),
	/* 144 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;

	/***/ }),
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;

	/***/ }),
	/* 146 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}

	module.exports = isKeyable;

	/***/ }),
	/* 147 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;

	/***/ }),
	/* 148 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;

	/***/ }),
	/* 149 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;

	/***/ }),
	/* 150 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;

	/***/ }),
	/* 151 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    keys = __webpack_require__(17);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;

	/***/ }),
	/* 152 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;

	/***/ }),
	/* 153 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;

	/***/ }),
	/* 154 */
	/***/ (function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;

	/***/ }),
	/* 155 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isLength = __webpack_require__(48),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;

	/***/ }),
	/* 156 */
	/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(71);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;

	/***/ }),
	/* 157 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    keysIn = __webpack_require__(72);

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn(source), object);
	}

	module.exports = baseAssignIn;

	/***/ }),
	/* 158 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7),
	    isPrototype = __webpack_require__(33),
	    nativeKeysIn = __webpack_require__(159);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeysIn;

	/***/ }),
	/* 159 */
	/***/ (function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = nativeKeysIn;

	/***/ }),
	/* 160 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var root = __webpack_require__(4);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 161 */
	/***/ (function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;

	/***/ }),
	/* 162 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    getSymbols = __webpack_require__(49);

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;

	/***/ }),
	/* 163 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    getSymbolsIn = __webpack_require__(75);

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	module.exports = copySymbolsIn;

	/***/ }),
	/* 164 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(77),
	    getSymbolsIn = __webpack_require__(75),
	    keysIn = __webpack_require__(72);

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}

	module.exports = getAllKeysIn;

	/***/ }),
	/* 165 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;

	/***/ }),
	/* 166 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;

	/***/ }),
	/* 167 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;

	/***/ }),
	/* 168 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;

	/***/ }),
	/* 169 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52),
	    cloneDataView = __webpack_require__(170),
	    cloneRegExp = __webpack_require__(171),
	    cloneSymbol = __webpack_require__(172),
	    cloneTypedArray = __webpack_require__(173);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag:case float64Tag:
	    case int8Tag:case int16Tag:case int32Tag:
	    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return new Ctor();

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return new Ctor();

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;

	/***/ }),
	/* 170 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;

	/***/ }),
	/* 171 */
	/***/ (function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;

	/***/ }),
	/* 172 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;

	/***/ }),
	/* 173 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;

	/***/ }),
	/* 174 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(175),
	    getPrototype = __webpack_require__(51),
	    isPrototype = __webpack_require__(33);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	}

	module.exports = initCloneObject;

	/***/ }),
	/* 175 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = function () {
	  function object() {}
	  return function (proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object();
	    object.prototype = undefined;
	    return result;
	  };
	}();

	module.exports = baseCreate;

	/***/ }),
	/* 176 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsMap = __webpack_require__(177),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil && nodeUtil.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	module.exports = isMap;

	/***/ }),
	/* 177 */
	/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(18),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap(value) {
	  return isObjectLike(value) && getTag(value) == mapTag;
	}

	module.exports = baseIsMap;

	/***/ }),
	/* 178 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsSet = __webpack_require__(179),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	module.exports = isSet;

	/***/ }),
	/* 179 */
	/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(18),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var setTag = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet(value) {
	  return isObjectLike(value) && getTag(value) == setTag;
	}

	module.exports = baseIsSet;

	/***/ }),
	/* 180 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(73),
	    baseFilter = __webpack_require__(181),
	    baseIteratee = __webpack_require__(13),
	    isArray = __webpack_require__(3);

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = filter;

	/***/ }),
	/* 181 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34);

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function (value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	module.exports = baseFilter;

	/***/ }),
	/* 182 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(183),
	    keys = __webpack_require__(17);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;

	/***/ }),
	/* 183 */
	/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(184);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;

	/***/ }),
	/* 184 */
	/***/ (function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function (object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;

	/***/ }),
	/* 185 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(12);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function (collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while (fromRight ? index-- : ++index < length) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;

	/***/ }),
	/* 186 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(187),
	    getMatchData = __webpack_require__(195),
	    matchesStrictComparable = __webpack_require__(84);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function (object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;

	/***/ }),
	/* 187 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    baseIsEqual = __webpack_require__(53);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack();
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;

	/***/ }),
	/* 188 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    equalArrays = __webpack_require__(80),
	    equalByTag = __webpack_require__(192),
	    equalObjects = __webpack_require__(194),
	    getTag = __webpack_require__(18),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isTypedArray = __webpack_require__(47);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack());
	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;

	/***/ }),
	/* 189 */
	/***/ (function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;

	/***/ }),
	/* 190 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;

	/***/ }),
	/* 191 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;

	/***/ }),
	/* 192 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    Uint8Array = __webpack_require__(79),
	    eq = __webpack_require__(41),
	    equalArrays = __webpack_require__(80),
	    mapToArray = __webpack_require__(193),
	    setToArray = __webpack_require__(54);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == other + '';

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;

	/***/ }),
	/* 193 */
	/***/ (function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;

	/***/ }),
	/* 194 */
	/***/ (function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(76);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;

	/***/ }),
	/* 195 */
	/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(83),
	    keys = __webpack_require__(17);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	    var result = keys(object),
	        length = result.length;

	    while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	    }
	    return result;
	}

	module.exports = getMatchData;

	/***/ }),
	/* 196 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(53),
	    get = __webpack_require__(197),
	    hasIn = __webpack_require__(86),
	    isKey = __webpack_require__(56),
	    isStrictComparable = __webpack_require__(83),
	    matchesStrictComparable = __webpack_require__(84),
	    toKey = __webpack_require__(20);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function (object) {
	    var objValue = get(object, path);
	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;

	/***/ }),
	/* 197 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;

	/***/ }),
	/* 198 */
	/***/ (function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(199);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function (string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	      result.push('');
	    }
	  string.replace(rePropName, function (match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});

	module.exports = stringToPath;

	/***/ }),
	/* 199 */
	/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(200);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;

	/***/ }),
	/* 200 */
	/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(43);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function memoized() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache)();
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;

	/***/ }),
	/* 201 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    arrayMap = __webpack_require__(85),
	    isArray = __webpack_require__(3),
	    isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	module.exports = baseToString;

	/***/ }),
	/* 202 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;

	/***/ }),
	/* 203 */
	/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(35),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isIndex = __webpack_require__(46),
	    isLength = __webpack_require__(48),
	    toKey = __webpack_require__(20);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;

	/***/ }),
	/* 204 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(205),
	    basePropertyDeep = __webpack_require__(206),
	    isKey = __webpack_require__(56),
	    toKey = __webpack_require__(20);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;

	/***/ }),
	/* 205 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;

	/***/ }),
	/* 206 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function (object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;

	/***/ }),
	/* 207 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3);

	/** Built-in value references. */
	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	module.exports = isFlattenable;

	/***/ }),
	/* 208 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(45),
	    createAggregator = __webpack_require__(209);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The order of grouped values
	 * is determined by the order they occur in `collection`. The corresponding
	 * value of each key is an array of elements responsible for generating the
	 * key. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	 * // => { '4': [4.2], '6': [6.1, 6.3] }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.groupBy(['one', 'two', 'three'], 'length');
	 * // => { '3': ['one', 'two'], '5': ['three'] }
	 */
	var groupBy = createAggregator(function (result, value, key) {
	  if (hasOwnProperty.call(result, key)) {
	    result[key].push(value);
	  } else {
	    baseAssignValue(result, key, [value]);
	  }
	});

	module.exports = groupBy;

	/***/ }),
	/* 209 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayAggregator = __webpack_require__(210),
	    baseAggregator = __webpack_require__(211),
	    baseIteratee = __webpack_require__(13),
	    isArray = __webpack_require__(3);

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	    return function (collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
	    };
	}

	module.exports = createAggregator;

	/***/ }),
	/* 210 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }
	  return accumulator;
	}

	module.exports = arrayAggregator;

	/***/ }),
	/* 211 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34);

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseAggregator(collection, setter, iteratee, accumulator) {
	  baseEach(collection, function (value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	module.exports = baseAggregator;

	/***/ }),
	/* 212 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(89),
	    toInteger = __webpack_require__(90);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Gets the index at which the first occurrence of `value` is found in `array`
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the
	 * offset from the end of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.indexOf([1, 2, 1, 2], 2);
	 * // => 1
	 *
	 * // Search from the `fromIndex`.
	 * _.indexOf([1, 2, 1, 2], 2, 2);
	 * // => 3
	 */
	function indexOf(array, value, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseIndexOf(array, value, index);
	}

	module.exports = indexOf;

	/***/ }),
	/* 213 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;

	/***/ }),
	/* 214 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	module.exports = baseIsNaN;

	/***/ }),
	/* 215 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = strictIndexOf;

	/***/ }),
	/* 216 */
	/***/ (function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(91);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	module.exports = toFinite;

	/***/ }),
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsDate = __webpack_require__(218),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsDate = nodeUtil && nodeUtil.isDate;

	/**
	 * Checks if `value` is classified as a `Date` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 * @example
	 *
	 * _.isDate(new Date);
	 * // => true
	 *
	 * _.isDate('Mon April 23 2012');
	 * // => false
	 */
	var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	module.exports = isDate;

	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var dateTag = '[object Date]';

	/**
	 * The base implementation of `_.isDate` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 */
	function baseIsDate(value) {
	  return isObjectLike(value) && baseGetTag(value) == dateTag;
	}

	module.exports = baseIsDate;

	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(70),
	    getTag = __webpack_require__(18),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isArrayLike = __webpack_require__(12),
	    isBuffer = __webpack_require__(30),
	    isPrototype = __webpack_require__(33),
	    isTypedArray = __webpack_require__(47);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;

	/***/ }),
	/* 220 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(53);

	/**
	 * This method is like `_.isEqual` except that it accepts `customizer` which
	 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	 * are handled by the method instead. The `customizer` is invoked with up to
	 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * function isGreeting(value) {
	 *   return /^h(?:i|ello)$/.test(value);
	 * }
	 *
	 * function customizer(objValue, othValue) {
	 *   if (isGreeting(objValue) && isGreeting(othValue)) {
	 *     return true;
	 *   }
	 * }
	 *
	 * var array = ['hello', 'goodbye'];
	 * var other = ['hi', 'goodbye'];
	 *
	 * _.isEqualWith(array, other, customizer);
	 * // => true
	 */
	function isEqualWith(value, other, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  var result = customizer ? customizer(value, other) : undefined;
	  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	}

	module.exports = isEqualWith;

	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsFinite = root.isFinite;

	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on
	 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	 * @example
	 *
	 * _.isFinite(3);
	 * // => true
	 *
	 * _.isFinite(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 *
	 * _.isFinite('3');
	 * // => false
	 */
	function isFinite(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}

	module.exports = isFinite;

	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {

	var isNumber = __webpack_require__(223);

	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is based on
	 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	 * `undefined` and other non-number values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */
	function isNaN(value) {
	  // An `NaN` primitive is the only value that is not equal to itself.
	  // Perform the `toStringTag` check first to avoid errors with some
	  // ActiveX objects in IE.
	  return isNumber(value) && value != +value;
	}

	module.exports = isNaN;

	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	function isNumber(value) {
	    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
	}

	module.exports = isNumber;

	/***/ }),
	/* 224 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	function isNull(value) {
	  return value === null;
	}

	module.exports = isNull;

	/***/ }),
	/* 225 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    getPrototype = __webpack_require__(51),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;

	/***/ }),
	/* 226 */
	/***/ (function(module, exports, __webpack_require__) {

	var createCaseFirst = __webpack_require__(227);

	/**
	 * Converts the first character of `string` to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.lowerFirst('Fred');
	 * // => 'fred'
	 *
	 * _.lowerFirst('FRED');
	 * // => 'fRED'
	 */
	var lowerFirst = createCaseFirst('toLowerCase');

	module.exports = lowerFirst;

	/***/ }),
	/* 227 */
	/***/ (function(module, exports, __webpack_require__) {

	var castSlice = __webpack_require__(228),
	    hasUnicode = __webpack_require__(92),
	    stringToArray = __webpack_require__(230),
	    toString = __webpack_require__(14);

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function (string) {
	    string = toString(string);

	    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

	    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	module.exports = createCaseFirst;

	/***/ }),
	/* 228 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(229);

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : baseSlice(array, start, end);
	}

	module.exports = castSlice;

	/***/ }),
	/* 229 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;

	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {

	var asciiToArray = __webpack_require__(231),
	    hasUnicode = __webpack_require__(92),
	    unicodeToArray = __webpack_require__(232);

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
	}

	module.exports = stringToArray;

	/***/ }),
	/* 231 */
	/***/ (function(module, exports) {

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	module.exports = asciiToArray;

	/***/ }),
	/* 232 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	}

	module.exports = unicodeToArray;

	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(85),
	    baseIteratee = __webpack_require__(13),
	    baseMap = __webpack_require__(234),
	    isArray = __webpack_require__(3);

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	module.exports = map;

	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34),
	    isArrayLike = __webpack_require__(12);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function (value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;

	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(93),
	    baseGt = __webpack_require__(236),
	    baseIteratee = __webpack_require__(13);

	/**
	 * This method is like `_.max` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.maxBy(objects, function(o) { return o.n; });
	 * // => { 'n': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.maxBy(objects, 'n');
	 * // => { 'n': 2 }
	 */
	function maxBy(array, iteratee) {
	    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;
	}

	module.exports = maxBy;

	/***/ }),
	/* 236 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */
	function baseGt(value, other) {
	  return value > other;
	}

	module.exports = baseGt;

	/***/ }),
	/* 237 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(93),
	    baseIteratee = __webpack_require__(13),
	    baseLt = __webpack_require__(238);

	/**
	 * This method is like `_.min` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.minBy(objects, function(o) { return o.n; });
	 * // => { 'n': 1 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.minBy(objects, 'n');
	 * // => { 'n': 1 }
	 */
	function minBy(array, iteratee) {
	    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : undefined;
	}

	module.exports = minBy;

	/***/ }),
	/* 238 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	module.exports = baseLt;

	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePick = __webpack_require__(240),
	    flatRest = __webpack_require__(243);

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = flatRest(function (object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});

	module.exports = pick;

	/***/ }),
	/* 240 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePickBy = __webpack_require__(241),
	    hasIn = __webpack_require__(86);

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, paths) {
	  return basePickBy(object, paths, function (value, path) {
	    return hasIn(object, path);
	  });
	}

	module.exports = basePick;

	/***/ }),
	/* 241 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55),
	    baseSet = __webpack_require__(242),
	    castPath = __webpack_require__(35);

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, paths, predicate) {
	    var index = -1,
	        length = paths.length,
	        result = {};

	    while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	            baseSet(result, castPath(path, object), value);
	        }
	    }
	    return result;
	}

	module.exports = basePickBy;

	/***/ }),
	/* 242 */
	/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(44),
	    castPath = __webpack_require__(35),
	    isIndex = __webpack_require__(46),
	    isObject = __webpack_require__(7),
	    toKey = __webpack_require__(20);

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	module.exports = baseSet;

	/***/ }),
	/* 243 */
	/***/ (function(module, exports, __webpack_require__) {

	var flatten = __webpack_require__(87),
	    overRest = __webpack_require__(94),
	    setToString = __webpack_require__(95);

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	module.exports = flatRest;

	/***/ }),
	/* 244 */
	/***/ (function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;

	/***/ }),
	/* 245 */
	/***/ (function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(246),
	    defineProperty = __webpack_require__(68),
	    identity = __webpack_require__(57);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function (func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;

	/***/ }),
	/* 246 */
	/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function () {
	    return value;
	  };
	}

	module.exports = constant;

	/***/ }),
	/* 247 */
	/***/ (function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function () {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;

	/***/ }),
	/* 248 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(96),
	    baseEach = __webpack_require__(34),
	    baseIteratee = __webpack_require__(13),
	    baseReduce = __webpack_require__(249),
	    isArray = __webpack_require__(3);

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	    var func = isArray(collection) ? arrayReduce : baseReduce,
	        initAccum = arguments.length < 3;

	    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	module.exports = reduce;

	/***/ }),
	/* 249 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function (value, index, collection) {
	    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;

	/***/ }),
	/* 250 */
	/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(14);

	/**
	 * Replaces matches for `pattern` in `string` with `replacement`.
	 *
	 * **Note:** This method is based on
	 * [`String#replace`](https://mdn.io/String/replace).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to modify.
	 * @param {RegExp|string} pattern The pattern to replace.
	 * @param {Function|string} replacement The match replacement.
	 * @returns {string} Returns the modified string.
	 * @example
	 *
	 * _.replace('Hi Fred', 'Fred', 'Barney');
	 * // => 'Hi Barney'
	 */
	function replace() {
	  var args = arguments,
	      string = toString(args[0]);

	  return args.length < 3 ? string : string.replace(args[1], args[2]);
	}

	module.exports = replace;

	/***/ }),
	/* 251 */
	/***/ (function(module, exports, __webpack_require__) {

	var createRound = __webpack_require__(252);

	/**
	 * Computes `number` rounded to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round.
	 * @param {number} [precision=0] The precision to round to.
	 * @returns {number} Returns the rounded number.
	 * @example
	 *
	 * _.round(4.006);
	 * // => 4
	 *
	 * _.round(4.006, 2);
	 * // => 4.01
	 *
	 * _.round(4060, -2);
	 * // => 4100
	 */
	var round = createRound('round');

	module.exports = round;

	/***/ }),
	/* 252 */
	/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(90),
	    toNumber = __webpack_require__(91),
	    toString = __webpack_require__(14);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Creates a function like `_.round`.
	 *
	 * @private
	 * @param {string} methodName The name of the `Math` method to use when rounding.
	 * @returns {Function} Returns the new round function.
	 */
	function createRound(methodName) {
	  var func = Math[methodName];
	  return function (number, precision) {
	    number = toNumber(number);
	    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	    if (precision) {
	      // Shift with exponential notation to avoid floating-point issues.
	      // See [MDN](https://mdn.io/round#Examples) for more details.
	      var pair = (toString(number) + 'e').split('e'),
	          value = func(pair[0] + 'e' + (+pair[1] + precision));

	      pair = (toString(value) + 'e').split('e');
	      return +(pair[0] + 'e' + (+pair[1] - precision));
	    }
	    return func(number);
	  };
	}

	module.exports = createRound;

	/***/ }),
	/* 253 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(88),
	    baseRest = __webpack_require__(254),
	    baseUniq = __webpack_require__(97),
	    isArrayLikeObject = __webpack_require__(259);

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */
	var union = baseRest(function (arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});

	module.exports = union;

	/***/ }),
	/* 254 */
	/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(57),
	    overRest = __webpack_require__(94),
	    setToString = __webpack_require__(95);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;

	/***/ }),
	/* 255 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(89);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;

	/***/ }),
	/* 256 */
	/***/ (function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;

	/***/ }),
	/* 257 */
	/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(78),
	    noop = __webpack_require__(258),
	    setToArray = __webpack_require__(54);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
	  return new Set(values);
	};

	module.exports = createSet;

	/***/ }),
	/* 258 */
	/***/ (function(module, exports) {

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;

	/***/ }),
	/* 259 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(12),
	    isObjectLike = __webpack_require__(5);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;

	/***/ }),
	/* 260 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseUniq = __webpack_require__(97);

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each element
	 * is kept. The order of result values is determined by the order they occur
	 * in the array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	function uniq(array) {
	  return array && array.length ? baseUniq(array) : [];
	}

	module.exports = uniq;

	/***/ }),
	/* 261 */
	/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(262);

	/**
	 * Converts `string`, as space separated words, to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the upper cased string.
	 * @example
	 *
	 * _.upperCase('--foo-bar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('fooBar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('__foo_bar__');
	 * // => 'FOO BAR'
	 */
	var upperCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + word.toUpperCase();
	});

	module.exports = upperCase;

	/***/ }),
	/* 262 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(96),
	    deburr = __webpack_require__(263),
	    words = __webpack_require__(266);

	/** Used to compose unicode capture groups. */
	var rsApos = '[\'\u2019]';

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function (string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	module.exports = createCompounder;

	/***/ }),
	/* 263 */
	/***/ (function(module, exports, __webpack_require__) {

	var deburrLetter = __webpack_require__(264),
	    toString = __webpack_require__(14);

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

	/** Used to compose unicode capture groups. */
	var rsCombo = '[' + rsComboRange + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	module.exports = deburr;

	/***/ }),
	/* 264 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePropertyOf = __webpack_require__(265);

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C', '\xe7': 'c',
	  '\xd0': 'D', '\xf0': 'd',
	  '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N', '\xf1': 'n',
	  '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
	  '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
	  '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
	  '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
	  '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
	  '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
	  '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
	  '\u0134': 'J', '\u0135': 'j',
	  '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
	  '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
	  '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
	  '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
	  '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
	  '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
	  '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
	  '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
	  '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't', '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W', '\u0175': 'w',
	  '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
	  '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017F': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	module.exports = deburrLetter;

	/***/ }),
	/* 265 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = basePropertyOf;

	/***/ }),
	/* 266 */
	/***/ (function(module, exports, __webpack_require__) {

	var asciiWords = __webpack_require__(267),
	    hasUnicodeWord = __webpack_require__(268),
	    toString = __webpack_require__(14),
	    unicodeWords = __webpack_require__(269);

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	module.exports = words;

	/***/ }),
	/* 267 */
	/***/ (function(module, exports) {

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	module.exports = asciiWords;

	/***/ }),
	/* 268 */
	/***/ (function(module, exports) {

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	module.exports = hasUnicodeWord;

	/***/ }),
	/* 269 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = '[\'\u2019]',
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	}

	module.exports = unicodeWords;

	/***/ }),
	/* 270 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Default animation funciton
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var G = __webpack_require__(1);
	var PathUtil = G.PathUtil;

	function getClip(coord) {
	  var start = coord.start;
	  var end = coord.end;
	  var width = coord.getWidth();
	  var height = coord.getHeight();
	  var margin = 200;
	  var startAngle = void 0;
	  var endAngle = void 0;
	  var center = void 0;
	  var radius = void 0;
	  var clip = void 0;

	  if (coord.isPolar) {
	    radius = coord.getRadius();
	    center = coord.getCenter();
	    startAngle = coord.startAngle;
	    endAngle = coord.endAngle;
	    clip = new G.Fan({
	      attrs: {
	        x: center.x,
	        y: center.y,
	        rs: 0,
	        re: radius + margin,
	        startAngle: startAngle,
	        endAngle: startAngle
	      }
	    });
	    clip.endState = {
	      endAngle: endAngle
	    };
	  } else {
	    clip = new G.Rect({
	      attrs: {
	        x: start.x - margin,
	        y: end.y - margin,
	        width: coord.isTransposed ? width + margin * 2 : 0,
	        height: coord.isTransposed ? 0 : height + margin * 2
	      }
	    });

	    if (coord.isTransposed) {
	      clip.endState = {
	        height: height + margin * 2
	      };
	    } else {
	      clip.endState = {
	        width: width + margin * 2
	      };
	    }
	  }
	  clip.isClip = true;
	  return clip;
	}

	// 获取图形的包围盒
	function getPointsBox(points) {
	  if (Util.isEmpty(points)) {
	    return null;
	  }

	  var minX = points[0].x;
	  var maxX = points[0].x;
	  var minY = points[0].y;
	  var maxY = points[0].y;
	  Util.each(points, function (point) {
	    minX = minX > point.x ? point.x : minX;
	    maxX = maxX < point.x ? point.x : maxX;
	    minY = minY > point.y ? point.y : minY;
	    maxY = maxY < point.y ? point.y : maxY;
	  });
	  return {
	    minX: minX,
	    maxX: maxX,
	    minY: minY,
	    maxY: maxY,
	    centerX: (minX + maxX) / 2,
	    centerY: (minY + maxY) / 2
	  };
	}

	function getAngle(shape, coord) {
	  var points = shape.points || shape.get('origin').points;
	  var box = getPointsBox(points);
	  var endAngle = void 0;
	  var startAngle = void 0;
	  var coordStartAngle = coord.startAngle;
	  var coordEndAngle = coord.endAngle;
	  var diffAngle = coordEndAngle - coordStartAngle;

	  if (coord.isTransposed) {
	    endAngle = box.maxY * diffAngle;
	    startAngle = box.minY * diffAngle;
	  } else {
	    endAngle = box.maxX * diffAngle;
	    startAngle = box.minX * diffAngle;
	  }
	  endAngle += coordStartAngle;
	  startAngle += coordStartAngle;
	  return {
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}

	function getAnimateParam(animateCfg, index, id) {
	  var result = {};
	  if (animateCfg.delay) {
	    result.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;
	  }
	  result.easing = Util.isFunction(animateCfg.easing) ? animateCfg.easing(index, id) : animateCfg.easing;
	  result.duration = Util.isFunction(animateCfg.duration) ? animateCfg.duration(index, id) : animateCfg.duration;
	  result.callback = animateCfg.callback;
	  return result;
	}

	function scaleInY(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x = (box.minX + box.maxX) / 2;
	  var y = void 0;

	  if (points[0].y - points[1].y <= 0) {
	    // 当顶点在零点之下
	    y = box.maxY;
	  } else {
	    y = box.minY;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr('transform', [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]);
	  var endState = {
	    transform: [['t', -x, -y], ['s', 1, 100], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function scaleInX(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x = void 0;
	  var y = (box.minY + box.maxY) / 2;

	  if (points[0].y - points[1].y > 0) {
	    // 当顶点在零点之下
	    x = box.maxX;
	  } else {
	    x = box.minX;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr({
	    transform: [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]
	  });
	  var endState = {
	    transform: [['t', -x, -y], ['s', 100, 1], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function lineWidthOut(shape, animateCfg) {
	  var endState = {
	    lineWidth: 0,
	    opacity: 0
	  };
	  var id = shape._id;
	  var index = shape.get('index');
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function zoomIn(shape, animateCfg, coord) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var x = void 0;
	  var y = void 0;
	  if (coord.isPolar && shape.name !== 'point') {
	    x = coord.getCenter().x;
	    y = coord.getCenter().y;
	  } else {
	    var box = shape.getBBox();
	    x = (box.minX + box.maxX) / 2;
	    y = (box.minY + box.maxY) / 2;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr({
	    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
	  });
	  var endState = {
	    transform: [['t', -x, -y], ['s', 100, 100], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function zoomOut(shape, animateCfg, coord) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var x = void 0;
	  var y = void 0;
	  if (coord.isPolar && shape.name !== 'point') {
	    x = coord.getCenter().x;
	    y = coord.getCenter().y;
	  } else {
	    var box = shape.getBBox();
	    x = (box.minX + box.maxX) / 2;
	    y = (box.minY + box.maxY) / 2;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  var endState = {
	    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function pathIn(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape._id;
	  var index = shape.get('index');
	  var path = PathUtil.pathToAbsolute(shape.attr('path'));
	  shape.attr('path', [path[0]]);
	  var endState = {
	    path: path
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function pathOut(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape._id;
	  var index = shape.get('index');
	  var path = PathUtil.pathToAbsolute(shape.attr('path'));
	  var endState = {
	    path: [path[0]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function clipIn(shape, animateCfg, coord, startAngle, endAngle) {
	  var clip = getClip(coord);
	  var canvas = shape.get('canvas');
	  var id = shape._id;
	  var index = shape.get('index');
	  var endState = void 0;
	  if (startAngle) {
	    clip.attr('startAngle', startAngle);
	    clip.attr('endAngle', startAngle);
	    endState = {
	      endAngle: endAngle
	    };
	  } else {
	    endState = clip.endState;
	  }
	  clip.set('canvas', canvas);
	  shape.attr('clip', clip);
	  shape.setSilent('animating', true);
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  clip.animate(endState, animateParam.duration, animateParam.easing, function () {
	    if (shape && !shape.get('destroyed')) {
	      shape.attr('clip', null);
	      shape.setSilent('cacheShape', null);
	      shape.setSilent('animating', false);
	      clip.remove();
	    }
	  }, animateParam.delay);
	}

	function fadeIn(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var fillOpacity = Util.isNil(shape.attr('fillOpacity')) ? 1 : shape.attr('fillOpacity');
	  var strokeOpacity = Util.isNil(shape.attr('strokeOpacity')) ? 1 : shape.attr('strokeOpacity');
	  shape.attr('fillOpacity', 0);
	  shape.attr('strokeOpacity', 0);
	  var endState = {
	    fillOpacity: fillOpacity,
	    strokeOpacity: strokeOpacity
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function fadeOut(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var endState = {
	    fillOpacity: 0,
	    strokeOpacity: 0
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function fanIn(shape, animateCfg, coord) {
	  var angle = getAngle(shape, coord);
	  var endAngle = angle.endAngle;
	  var startAngle = angle.startAngle;
	  clipIn(shape, animateCfg, coord, startAngle, endAngle);
	}

	// 默认动画库
	module.exports = {
	  enter: {
	    clipIn: clipIn,
	    zoomIn: zoomIn,
	    pathIn: pathIn,
	    scaleInY: scaleInY,
	    scaleInX: scaleInX,
	    fanIn: fanIn,
	    fadeIn: fadeIn
	  },
	  leave: {
	    lineWidthOut: lineWidthOut,
	    zoomOut: zoomOut,
	    pathOut: pathOut,
	    fadeOut: fadeOut
	  },
	  appear: {
	    clipIn: clipIn,
	    zoomIn: zoomIn,
	    pathIn: pathIn,
	    scaleInY: scaleInY,
	    scaleInX: scaleInX,
	    fanIn: fanIn,
	    fadeIn: fadeIn
	  },
	  update: {
	    fadeIn: fadeIn,
	    fanIn: fanIn
	  }
	};

	/***/ }),
	/* 271 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	 * EventEmitter v5.1.0 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */

	;(function (exports) {
	    'use strict';

	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */

	    function EventEmitter() {}

	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var originalGlobalValue = exports.EventEmitter;

	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }

	        return -1;
	    }

	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }

	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;

	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        } else {
	            response = events[evt] || (events[evt] = []);
	        }

	        return response;
	    };

	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;

	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }

	        return flatListeners;
	    };

	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;

	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }

	        return response || listeners;
	    };

	    function isValidListener(listener) {
	        if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true;
	        } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
	            return isValidListener(listener.listener);
	        } else {
	            return false;
	        }
	    }

	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	        }

	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');

	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };

	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');

	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };

	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };

	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);

	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');

	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };

	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };

	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;

	        // If evt is an object then pass each of its properties to this method
	        if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    } else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        } else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }

	        return this;
	    };

	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
	        var events = this._getEvents();
	        var key;

	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        } else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        } else {
	            // Remove all listeners in all events
	            delete this._events;
	        }

	        return this;
	    };

	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');

	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listenersMap = this.getListenersAsObject(evt);
	        var listeners;
	        var listener;
	        var i;
	        var key;
	        var response;

	        for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	                listeners = listenersMap[key].slice(0);

	                for (i = 0; i < listeners.length; i++) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[i];

	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }

	                    response = listener.listener.apply(this, args || []);

	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');

	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };

	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };

	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        } else {
	            return true;
	        }
	    };

	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };

	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };

	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	            return EventEmitter;
	        }).call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	        module.exports = EventEmitter;
	    } else {
	        exports.EventEmitter = EventEmitter;
	    }
	})(this || {});

	/***/ }),
	/* 272 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the color attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var ColorUtil = __webpack_require__(63);
	var Base = __webpack_require__(15);
	var Util = __webpack_require__(0);

	/**
	 * 视觉通道 color
	 * @class Attr.Color
	 */

	var Color = function (_Base) {
	  _inherits(Color, _Base);

	  function Color(cfg) {
	    _classCallCheck(this, Color);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['color'];
	    _this.type = 'color';
	    _this.gradient = null;
	    if (Util.isString(_this.values)) {
	      _this.linear = true;
	    }
	    return _this;
	  }

	  /**
	   * @override
	   */


	  Color.prototype.getLinearValue = function getLinearValue(percent) {
	    var gradient = this.gradient;
	    if (!gradient) {
	      var values = this.values;
	      gradient = ColorUtil.gradient(values);
	      this.gradient = gradient;
	    }
	    return gradient(percent);
	  };

	  return Color;
	}(Base);

	module.exports = Color;

	/***/ }),
	/* 273 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the size attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 size
	 * @class Attr.Size
	 */

	var Size = function (_Base) {
	  _inherits(Size, _Base);

	  function Size(cfg) {
	    _classCallCheck(this, Size);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['size'];
	    _this.type = 'size';
	    _this.gradient = null;
	    return _this;
	  }

	  return Size;
	}(Base);

	module.exports = Size;

	/***/ }),
	/* 274 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the opacity attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 Opacity
	 * @class Attr.Opacity
	 */

	var Opacity = function (_Base) {
	  _inherits(Opacity, _Base);

	  function Opacity(cfg) {
	    _classCallCheck(this, Opacity);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['opacity'];
	    _this.type = 'opacity';
	    _this.gradient = null;
	    return _this;
	  }

	  return Opacity;
	}(Base);

	module.exports = Opacity;

	/***/ }),
	/* 275 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the shape attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 Shape
	 * @class Attr.Shape
	 */

	var Shape = function (_Base) {
	  _inherits(Shape, _Base);

	  function Shape(cfg) {
	    _classCallCheck(this, Shape);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['shape'];
	    _this.type = 'shape';
	    _this.gradient = null;
	    return _this;
	  }

	  /**
	   * @override
	   */


	  Shape.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var index = Math.round((values.length - 1) * percent);
	    return values[index];
	  };

	  return Shape;
	}(Base);

	module.exports = Shape;

	/***/ }),
	/* 276 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the position attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Base = __webpack_require__(15);

	var Position = function (_Base) {
	  _inherits(Position, _Base);

	  function Position(cfg) {
	    _classCallCheck(this, Position);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['x', 'y'];
	    _this.type = 'position';
	    return _this;
	  }

	  Position.prototype.mapping = function mapping(x, y) {
	    var scales = this.scales;
	    var coord = this.coord;
	    var scaleX = scales[0];
	    var scaleY = scales[1];
	    var rstX = void 0;
	    var rstY = void 0;
	    var obj = void 0;
	    if (Util.isNil(x) || Util.isNil(y)) {
	      return [];
	    }
	    if (Util.isArray(y) && Util.isArray(x)) {
	      rstX = [];
	      rstY = [];
	      for (var i = 0, j = 0; i < x.length && j < y.length; i++, j++) {
	        obj = coord.convertPoint({
	          x: scaleX.scale(x[i]),
	          y: scaleY.scale(y[j])
	        });
	        rstX.push(obj.x);
	        rstY.push(obj.y);
	      }
	    } else if (Util.isArray(y)) {
	      x = scaleX.scale(x);
	      rstY = [];
	      Util.each(y, function (yVal) {
	        yVal = scaleY.scale(yVal);
	        obj = coord.convertPoint({
	          x: x,
	          y: yVal
	        });
	        if (rstX && rstX !== obj.x) {
	          if (!Util.isArray(rstX)) {
	            rstX = [rstX];
	          }
	          rstX.push(obj.x);
	        } else {
	          rstX = obj.x;
	        }
	        rstY.push(obj.y);
	      });
	    } else if (Util.isArray(x)) {
	      y = scaleY.scale(y);
	      rstX = [];
	      Util.each(x, function (xVal) {
	        xVal = scaleX.scale(xVal);
	        obj = coord.convertPoint({
	          x: xVal,
	          y: y
	        });
	        if (rstY && rstY !== obj.y) {
	          if (!Util.isArray(rstY)) {
	            rstY = [rstY];
	          }
	          rstY.push(obj.y);
	        } else {
	          rstY = obj.y;
	        }
	        rstX.push(obj.x);
	      });
	    } else {
	      x = scaleX.scale(x);
	      y = scaleY.scale(y);
	      var point = coord.convertPoint({
	        x: x,
	        y: y
	      });
	      rstX = point.x;
	      rstY = point.y;
	    }
	    return [rstX, rstY];
	  };

	  return Position;
	}(Base);

	module.exports = Position;

	/***/ }),
	/* 277 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Theme entry
	 * @author sima.zhang
	 */
	var Theme = {
	  default: __webpack_require__(98),
	  dark: __webpack_require__(278)
	};

	module.exports = Theme;

	/***/ }),
	/* 278 */
	/***/ (function(module, exports, __webpack_require__) {

	var _html, _tooltip;

	/**
	 * @fileOverview G2 3.0 dark theme
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var BasicTheme = __webpack_require__(98);

	// tooltip 相关 dom 的 css 类名
	var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
	var LEGEND_CONTAINER_CLASS = 'g2-legend';

	var DarkTheme = Util.deepMix({}, BasicTheme, {
	  background: {
	    fill: '#1F1F1F',
	    radius: 2
	  }, // 容器区域
	  plotBackground: {
	    fill: '#1F1F1F'
	  }, // 绘图区域
	  axis: {
	    top: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    },
	    bottom: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    },
	    left: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    right: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    circle: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    radius: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    helix: {
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    }
	  },
	  label: {
	    textStyle: {
	      fill: '#A6A6A6'
	    }
	  },
	  legend: {
	    right: {
	      textStyle: {
	        fill: '#737373'
	      },
	      unCheckColor: '#bfbfbf'
	    },
	    left: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    top: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    bottom: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
	      color: '#D9D9D9'
	    }, _html),
	    gradient: {
	      textStyle: {
	        fill: '#D9D9D9'
	      },
	      lineStyle: {
	        stroke: '#404040'
	      }
	    }
	  },
	  tooltip: (_tooltip = {}, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
	    color: '#D9D9D9'
	  }, _tooltip),
	  tooltipCrosshairsRect: {
	    type: 'rect',
	    style: {
	      fill: '#fff',
	      opacity: 0.1
	    }
	  }, // tooltip 辅助背景框样式
	  tooltipCrosshairsLine: {
	    style: {
	      stroke: 'rgba(255, 255, 255, 0.45)'
	    }
	  },
	  guide: {
	    line: {
	      text: {
	        style: {
	          fill: '#A6A6A6'
	        }
	      }
	    },
	    text: {
	      style: {
	        fill: '#A6A6A6'
	      }
	    },
	    region: {
	      // TODO
	      style: {
	        lineWidth: 0, // 辅助框的边框宽度
	        fill: '#000', // 辅助框填充的颜色
	        fillOpacity: 0.04 // 辅助框的背景透明度
	        // 辅助框的图形样式属性
	      } }
	  }
	});

	module.exports = DarkTheme;

	/***/ }),
	/* 279 */
	/***/ (function(module, exports, __webpack_require__) {


	var Adjust = __webpack_require__(21);
	Adjust.Stack = __webpack_require__(280);
	Adjust.Jitter = __webpack_require__(281);
	Adjust.Symmetric = __webpack_require__(282);
	Adjust.Dodge = __webpack_require__(283);

	module.exports = Adjust;

	/***/ }),
	/* 280 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The extension function of stack ,which mixin to geom
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Stack
	 */

	var Stack = function (_Adjust) {
	  _inherits(Stack, _Adjust);

	  function Stack() {
	    _classCallCheck(this, Stack);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Stack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      /**
	       * 仅有一个维度调整时，总的高度
	       * @type {Number}
	       */
	      height: null,
	      /**
	       * 单个点的大小
	       * @type {Number}
	       */
	      size: 10,
	      /**
	       * 是否反序进行层叠
	       * @type {Boolean}
	       */
	      reverseOrder: false,

	      /**
	       * @override
	       */
	      adjustNames: ['y'] // Only support stack y
	    });
	  };

	  Stack.prototype.processOneDimStack = function processOneDimStack(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField || 'y';
	    var height = self.height;

	    var stackY = {};
	    // 如果层叠的顺序翻转
	    if (self.reverseOrder) {
	      dataArray = dataArray.slice(0).reverse();
	    }
	    for (var i = 0; i < dataArray.length; i++) {
	      // var preY = stackHeight;
	      var data = dataArray[i];
	      // cates
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var size = item.size || self.size;
	        var stackHeight = size * 2 / height;
	        var x = item[xField];
	        if (!stackY[x]) {
	          stackY[x] = stackHeight / 2;
	        }
	        item[yField] = stackY[x];
	        stackY[x] += stackHeight;
	      }
	    }
	  };

	  Stack.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    if (self.yField) {
	      self.processStack(dataArray);
	    } else {
	      self.processOneDimStack(dataArray);
	    }
	  };

	  Stack.prototype.processStack = function processStack(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField;
	    var count = dataArray.length;
	    var stackCache = {
	      positive: {},
	      negative: {}
	    };
	    // 层叠顺序翻转
	    if (self.reverseOrder) {
	      dataArray = dataArray.slice(0).reverse();
	    }
	    for (var i = 0; i < count; i++) {
	      var data = dataArray[i];
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var x = item[xField] || 0;
	        var y = item[yField] || 0;
	        var xkey = x.toString();
	        y = Util.isArray(y) ? y[1] : y;
	        var direction = y >= 0 ? 'positive' : 'negative';
	        if (!stackCache[direction][xkey]) {
	          stackCache[direction][xkey] = 0;
	        }
	        item[yField] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];
	        stackCache[direction][xkey] += y;
	      }
	    }
	  };

	  return Stack;
	}(Adjust);

	module.exports = Stack;

	/***/ }),
	/* 281 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Repositions graphic elements randomly using a normal or uniform distribution
	 * @author dxq613@gmail.com
	 * reference: http://www-01.ibm.com/support/knowledgecenter/SSLVMB_21.0.0/com.ibm.spss.statistics.help/gpl_statement_element_jitter.htm
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Jitter
	 */

	var Jitter = function (_Adjust) {
	  _inherits(Jitter, _Adjust);

	  function Jitter() {
	    _classCallCheck(this, Jitter);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Jitter.prototype.getAdjustOffset = function getAdjustOffset(pre, next) {
	    var r = Math.random(); // 随机位置，均匀分布
	    var avg = next - pre; // * length
	    var append = avg * 0.05;
	    return pre + append + avg * 0.9 * r;
	  };

	  // adjust group data


	  Jitter.prototype._adjustGroup = function _adjustGroup(group, dim, key, values) {
	    var self = this;
	    var range = self.getAdjustRange(dim, key, values);

	    Util.each(group, function (record) {
	      record[dim] = self.getAdjustOffset(range.pre, range.next); // 获取调整的位置
	    });
	  };

	  Jitter.prototype.adjustDim = function adjustDim(dim, values, data) {
	    var self = this;
	    var groupData = self.groupData(data, dim);
	    Util.each(groupData, function (group, key) {
	      key = parseFloat(key);
	      self._adjustGroup(group, dim, key, values);
	    });
	  };

	  return Jitter;
	}(Adjust);

	module.exports = Jitter;

	/***/ }),
	/* 282 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The extension function of symmetric ,which mixin to geom
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Symmetric
	 */

	var Symmetric = function (_Adjust) {
	  _inherits(Symmetric, _Adjust);

	  function Symmetric() {
	    _classCallCheck(this, Symmetric);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Symmetric.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      // 缓存的最大值
	      cacheMax: null,
	      /**
	       * @override
	       */
	      adjustNames: ['y'] // Only support stack y
	    });
	  };
	  // 获取最大的y值


	  Symmetric.prototype._getMax = function _getMax(dim) {
	    var self = this;
	    var mergeData = self.mergeData;
	    var maxRecord = Util.maxBy(mergeData, function (obj) {
	      var value = obj[dim];
	      if (Util.isArray(value)) {
	        return Math.max.apply(null, value);
	      }
	      return value;
	    });
	    var maxValue = maxRecord[dim];
	    var max = Util.isArray(maxValue) ? Math.max.apply(null, maxValue) : maxValue;
	    return max;
	  };

	  // 获取每个字段最大的值


	  Symmetric.prototype._getXValuesMax = function _getXValuesMax() {
	    var self = this;
	    var yField = self.yField;
	    var xField = self.xField;
	    var cache = {};
	    var mergeData = self.mergeData;
	    Util.each(mergeData, function (obj) {
	      var xValue = obj[xField];
	      var yValue = obj[yField];
	      var max = Util.isArray(yValue) ? Math.max.apply(null, yValue) : yValue;
	      cache[xValue] = cache[xValue] || 0;
	      if (cache[xValue] < max) {
	        cache[xValue] = max;
	      }
	    });
	    return cache;
	  };

	  // 入口函数


	  Symmetric.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);
	    self.mergeData = mergeData;
	    self._processSymmetric(dataArray);
	    self.mergeData = null;
	  };

	  // 处理对称


	  Symmetric.prototype._processSymmetric = function _processSymmetric(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField;
	    var max = self._getMax(yField);
	    var first = dataArray[0][0];

	    var cache = void 0;
	    if (first && Util.isArray(first[yField])) {
	      cache = self._getXValuesMax();
	    }
	    Util.each(dataArray, function (data) {
	      Util.each(data, function (obj) {
	        var value = obj[yField];
	        var offset = void 0;
	        if (Util.isArray(value)) {
	          var xValue = obj[xField];
	          var valueMax = cache[xValue];
	          offset = (max - valueMax) / 2;
	          var tmp = [];
	          /* eslint-disable no-loop-func */
	          Util.each(value, function (subVal) {
	            // 多个字段
	            tmp.push(offset + subVal);
	          });
	          /* eslint-enable no-loop-func */
	          obj[yField] = tmp;
	        } else {
	          offset = (max - value) / 2;
	          obj[yField] = [offset, value + offset];
	        }
	      });
	    });
	  };

	  return Symmetric;
	}(Adjust);

	module.exports = Symmetric;

	/***/ }),
	/* 283 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Moves graphic elements next to other graphic elements that appear at the same value, rather than superimposing them.
	 * @fileOverview dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);
	var Global = __webpack_require__(2);
	/**
	 * 数据调整的基类
	 * @class Adjust.Dodge
	 */

	var Dodge = function (_Adjust) {
	  _inherits(Dodge, _Adjust);

	  function Dodge() {
	    _classCallCheck(this, Dodge);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Dodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      /**
	       * 调整过程中,2个数据的间距
	       * @type {Number}
	       */
	      marginRatio: 1 / 2,

	      /**
	       * 调整占单位宽度的比例,例如：占2个分类间距的 1/2
	       * @type {Number}
	       */
	      dodgeRatio: Global.widthRatio.column,

	      dodgeBy: null
	    });
	  };

	  /**
	   * @protected
	   * @override
	   */


	  Dodge.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);
	    var dodgeDim = self.dodgeBy;
	    var adjDataArray = dataArray;
	    if (dodgeDim) {
	      // 如果指定了分组dim的字段
	      adjDataArray = Util.Array.group(mergeData, dodgeDim);
	    }
	    self.cacheMap = {};
	    self.adjDataArray = adjDataArray;
	    self.mergeData = mergeData;
	    self.adjustData(adjDataArray, mergeData);

	    self.adjDataArray = null;
	    self.mergeData = null;
	  };

	  Dodge.prototype.getDistribution = function getDistribution(dim) {
	    var self = this;
	    var dataArray = self.adjDataArray;
	    var cacheMap = self.cacheMap;
	    var map = cacheMap[dim];
	    if (!map) {
	      map = {};
	      Util.each(dataArray, function (data, index) {
	        var values = Util.Array.values(data, dim);
	        if (!values.length) {
	          values.push(0);
	        }
	        Util.each(values, function (val) {
	          if (!map[val]) {
	            map[val] = [];
	          }
	          map[val].push(index);
	        });
	      });
	      cacheMap[dim] = map;
	    }

	    return map;
	  };

	  Dodge.prototype.adjustDim = function adjustDim(dim, values, data, frameCount, frameIndex) {
	    var self = this;
	    var map = self.getDistribution(dim);
	    var groupData = self.groupData(data, dim); // 根据值分组

	    Util.each(groupData, function (group, key) {
	      key = parseFloat(key);
	      var range = void 0;
	      if (values.length === 1) {
	        range = {
	          pre: values[0] - 1,
	          next: values[0] + 1
	        };
	      } else {
	        range = self.getAdjustRange(dim, key, values);
	      }
	      Util.each(group, function (record) {
	        var value = record[dim];
	        var valueArr = map[value];
	        var valIndex = valueArr.indexOf(frameIndex);
	        record[dim] = self.getDodgeOffset(range, valIndex, valueArr.length);
	      });
	    });
	  };

	  Dodge.prototype.getDodgeOffset = function getDodgeOffset(range, index, count) {
	    var self = this;
	    var pre = range.pre;
	    var next = range.next;
	    var tickLength = next - pre;
	    var dodgeRatio = self.dodgeRatio;
	    var width = tickLength * dodgeRatio / count;
	    var margin = self.marginRatio * width;
	    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;
	    return (pre + next) / 2 + offset;
	  };

	  return Dodge;
	}(Adjust);

	module.exports = Dodge;

	/***/ }),
	/* 284 */
	/***/ (function(module, exports, __webpack_require__) {

	var GeomLabels = __webpack_require__(99);
	var PolarLabels = __webpack_require__(102);
	var PieLabels = __webpack_require__(287);

	var Labels = {
	  getLabelsClass: function getLabelsClass(coordType) {
	    var rst = GeomLabels;
	    if (coordType === 'polar') {
	      rst = PolarLabels;
	    } else if (coordType === 'theta') {
	      // pie chart
	      rst = PieLabels;
	    }
	    return rst;
	  }
	};

	module.exports = Labels;

	/***/ }),
	/* 285 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The class that performs label rendering
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Labels = __webpack_require__(101);

	module.exports = {
	  renderLabels: function renderLabels() {
	    var labelCfg = this.get('label');

	    if (Util.isNil(labelCfg)) {
	      return;
	    }

	    if (Util.isNil(labelCfg.items)) {
	      labelCfg.items = [];
	    }

	    var labelsGroup = this.addGroup(Labels, labelCfg);
	    this.set('labelsGroup', labelsGroup);
	  },
	  resetLabels: function resetLabels(items) {
	    var self = this;
	    var labelCfg = self.get('label');

	    if (!labelCfg) {
	      return;
	    }

	    var labelsGroup = self.get('labelsGroup');
	    var children = labelsGroup.getLabels();
	    var count = children.length;
	    items = items || labelCfg.items;
	    Util.each(items, function (item, index) {
	      if (index < count) {
	        var label = children[index];
	        labelsGroup.changeLabel(label, item);
	      } else {
	        var labelShape = self.addLabel(item.text, item);
	        if (labelShape) {
	          labelShape._id = item._id;
	          labelShape.set('coord', item.coord);
	        }
	      }
	    });
	    for (var i = count - 1; i >= items.length; i--) {
	      children[i].remove();
	    }
	  },
	  addLabel: function addLabel(value, offsetPoint) {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var label = {};
	    var rst = void 0;
	    if (labelsGroup) {
	      label.text = value;
	      label.x = offsetPoint.x;
	      label.y = offsetPoint.y;
	      label.point = offsetPoint;
	      label.textAlign = offsetPoint.textAlign;
	      if (offsetPoint.rotate) {
	        label.rotate = offsetPoint.rotate;
	      }
	      rst = labelsGroup.addLabel(label);
	    }
	    return rst;
	  },
	  removeLabels: function removeLabels() {
	    var labelsGroup = this.get('labelsGroup');
	    labelsGroup && labelsGroup.remove();
	    this.set('labelsGroup', null);
	  }
	};

	/***/ }),
	/* 286 */
	/***/ (function(module, exports, __webpack_require__) {

	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var Vector2 = MatrixUtil.vec2;

	function smoothBezier(points, smooth, isLoop, constraint) {
	  var cps = [];

	  var prevPoint = void 0;
	  var nextPoint = void 0;
	  var hasConstraint = !!constraint;
	  var min = void 0,
	      max = void 0;
	  if (hasConstraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];

	    for (var i = 0, l = points.length; i < l; i++) {
	      var point = points[i];
	      min = Vector2.min([], min, point);
	      max = Vector2.max([], max, point);
	    }
	    min = Vector2.min([], min, constraint[0]);
	    max = Vector2.max([], max, constraint[1]);
	  }

	  for (var _i = 0, len = points.length; _i < len; _i++) {
	    var _point = points[_i];
	    if (isLoop) {
	      prevPoint = points[_i ? _i - 1 : len - 1];
	      nextPoint = points[(_i + 1) % len];
	    } else {
	      if (_i === 0 || _i === len - 1) {
	        cps.push(_point);
	        continue;
	      } else {
	        prevPoint = points[_i - 1];
	        nextPoint = points[_i + 1];
	      }
	    }
	    var v = [];
	    v = Vector2.sub(v, nextPoint, prevPoint);
	    v = Vector2.scale(v, v, smooth);

	    var d0 = Vector2.distance(_point, prevPoint);
	    var d1 = Vector2.distance(_point, nextPoint);

	    var sum = d0 + d1;
	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }

	    var v1 = Vector2.scale([], v, -d0);
	    var v2 = Vector2.scale([], v, d1);

	    var cp0 = Vector2.add([], _point, v1);
	    var cp1 = Vector2.add([], _point, v2);

	    if (hasConstraint) {
	      cp0 = Vector2.max([], cp0, min);
	      cp0 = Vector2.min([], cp0, max);
	      cp1 = Vector2.max([], cp1, min);
	      cp1 = Vector2.min([], cp1, max);
	    }

	    cps.push(cp0);
	    cps.push(cp1);
	  }

	  if (isLoop) {
	    cps.push(cps.shift());
	  }
	  return cps;
	}

	function catmullRom2bezier(crp, z, constraint) {
	  var isLoop = !!z;

	  var pointList = [];

	  for (var i = 0, l = crp.length; i < l; i += 2) {
	    pointList.push([crp[i], crp[i + 1]]);
	  }

	  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);
	  var len = pointList.length;
	  var d1 = [];

	  var cp1 = void 0;
	  var cp2 = void 0;
	  var p = void 0;

	  for (var _i2 = 0; _i2 < len - 1; _i2++) {
	    cp1 = controlPointList[_i2 * 2];
	    cp2 = controlPointList[_i2 * 2 + 1];
	    p = pointList[_i2 + 1];

	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
	  }

	  if (isLoop) {
	    cp1 = controlPointList[len];
	    cp2 = controlPointList[len + 1];
	    p = pointList[0];

	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
	  }
	  return d1;
	}

	module.exports = {
	  catmullRom2bezier: catmullRom2bezier
	};

	/***/ }),
	/* 287 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var PolarLabels = __webpack_require__(102);
	var PathUtil = __webpack_require__(22);
	var Global = __webpack_require__(2);
	var MARGIN = 5;

	function getEndPoint(center, angle, r) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}

	function antiCollision(labels, lineHeight, plotRange, center, isRight) {
	  // adjust y position of labels to avoid overlapping
	  var overlapping = true;
	  var start = plotRange.start;
	  var end = plotRange.end;
	  var startY = Math.min(start.y, end.y);
	  var totalHeight = Math.abs(start.y - end.y);
	  var i = void 0;

	  var maxY = 0;
	  var minY = Number.MIN_VALUE;
	  var boxes = labels.map(function (label) {
	    if (label.y > maxY) {
	      maxY = label.y;
	    }
	    if (label.y < minY) {
	      minY = label.y;
	    }
	    return {
	      size: lineHeight,
	      targets: [label.y - startY]
	    };
	  });
	  minY -= startY;
	  if (maxY - startY > totalHeight) {
	    totalHeight = maxY - startY;
	  }

	  while (overlapping) {
	    /* eslint no-loop-func: 0 */
	    boxes.forEach(function (box) {
	      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;
	      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);
	      // box.pos = Math.max(0, target - box.size / 2);
	    });

	    // detect overlapping and join boxes
	    overlapping = false;
	    i = boxes.length;
	    while (i--) {
	      if (i > 0) {
	        var previousBox = boxes[i - 1];
	        var box = boxes[i];
	        if (previousBox.pos + previousBox.size > box.pos) {
	          // overlapping
	          previousBox.size += box.size;
	          previousBox.targets = previousBox.targets.concat(box.targets);

	          // overflow, shift up
	          if (previousBox.pos + previousBox.size > totalHeight) {
	            previousBox.pos = totalHeight - previousBox.size;
	          }
	          boxes.splice(i, 1); // removing box
	          overlapping = true;
	        }
	      }
	    }
	  }

	  i = 0;
	  // step 4: normalize y and adjust x
	  boxes.forEach(function (b) {
	    var posInCompositeBox = startY + lineHeight / 2; // middle of the label
	    b.targets.forEach(function () {
	      labels[i].y = b.pos + posInCompositeBox;
	      posInCompositeBox += lineHeight;
	      i++;
	    });
	  });

	  // (x - cx)^2 + (y - cy)^2 = totalR^2
	  labels.forEach(function (label) {
	    var rPow2 = label.r * label.r;
	    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);
	    if (rPow2 < dyPow2) {
	      label.x = center.x;
	    } else {
	      var dx = Math.sqrt(rPow2 - dyPow2);
	      if (!isRight) {
	        // left
	        label.x = center.x - dx;
	      } else {
	        // right
	        label.x = center.x + dx;
	      }
	    }
	  });
	}

	var PieLabels = function (_PolarLabels) {
	  _inherits(PieLabels, _PolarLabels);

	  function PieLabels() {
	    _classCallCheck(this, PieLabels);

	    return _possibleConstructorReturn(this, _PolarLabels.apply(this, arguments));
	  }

	  PieLabels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      label: Global.thetaLabels
	    };
	  };

	  PieLabels.prototype.getDefaultOffset = function getDefaultOffset() {
	    var labelCfg = this.get('label');
	    var offset = labelCfg.offset || 0;
	    return offset;
	  };

	  /**
	   * @protected
	   * to avoid overlapping
	   * @param {Array} items labels to be placed
	   * @return {Array} items
	   */


	  PieLabels.prototype.adjustItems = function adjustItems(items) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      items = self._distribute(items, offset);
	    }

	    return items;
	  };

	  /**
	   * @private
	   * distribute labels
	   * @param {Array} labels labels
	   * @param {Number} offset offset
	   * @return {Array} labels
	   */


	  PieLabels.prototype._distribute = function _distribute(labels, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var radius = coord.getRadius();
	    var lineHeight = self.get('label').labelHeight;
	    var center = coord.getCenter();
	    var totalR = radius + offset;
	    var totalHeight = totalR * 2 + lineHeight * 2;
	    var plotRange = {
	      start: coord.start,
	      end: coord.end
	    };
	    var geom = self.get('geom');
	    if (geom) {
	      var view = geom.get('view');
	      plotRange = view.getViewRegion();
	    }

	    // step 1: separate labels
	    var halves = [[], // left
	    [] // right
	    ];
	    labels.forEach(function (label) {
	      if (label.textAlign === 'right') {
	        // left
	        halves[0].push(label);
	      } else {
	        // right or center will be put on the right side
	        halves[1].push(label);
	      }
	    });

	    halves.forEach(function (half, index) {
	      // step 2: reduce labels
	      var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);
	      if (half.length > maxLabelsCountForOneSide) {
	        half.sort(function (a, b) {
	          // sort by percentage DESC
	          return b['..percent'] - a['..percent'];
	        });
	        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);
	      }

	      // step 3: distribute position (x and y)
	      half.sort(function (a, b) {
	        // sort by y ASC
	        return a.y - b.y;
	      });
	      antiCollision(half, lineHeight, plotRange, center, index);
	    });

	    return halves[0].concat(halves[1]);
	  };

	  // 连接线


	  PieLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
	    var self = this;
	    var coord = self.get('coord');
	    var r = coord.getRadius();
	    var distance = self.getDefaultOffset();
	    var angle = label.orignAngle || label.angle;
	    var center = coord.getCenter();
	    var start = getEndPoint(center, angle, r + MARGIN / 2);
	    var inner = getEndPoint(center, angle, r + distance / 2);
	    var lineGroup = self.get('lineGroup');
	    // var lineShape;
	    if (!lineGroup) {
	      lineGroup = self.addGroup({
	        elCls: 'x-line-group'
	      });
	      self.set('lineGroup', lineGroup);
	    }
	    // lineShape =
	    var lineShape = lineGroup.addShape('path', {
	      attrs: Util.mix({
	        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
	        fill: null,
	        stroke: label.color
	      }, labelLine)
	    });
	    // label 对应线的动画关闭
	    lineShape.name = 'labelLine';
	    lineShape._id = label._id && label._id.replace('glabel', 'glabelline'); // generate labelLine id according to label id
	    lineShape.set('coord', coord);
	  };

	  /**
	   * @protected
	   * get rotation for label
	   * @param {Number} angle angle
	   * @param {Number} offset offset
	   * @return {Number} rotate
	   */


	  PieLabels.prototype.getLabelRotate = function getLabelRotate(angle, offset) {
	    var rotate = void 0;
	    if (offset < 0) {
	      rotate = angle * 180 / Math.PI;
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      }
	      if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  };

	  /**
	   * @protected
	   * get text align for label
	   * @param {Object} point point
	   * @return {String} align
	   */


	  PieLabels.prototype.getLabelAlign = function getLabelAlign(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();

	    var align = void 0;
	    if (point.angle <= Math.PI / 2 && point.x >= center.x) {
	      align = 'left';
	    } else {
	      align = 'right';
	    }

	    var offset = self.getDefaultOffset();
	    if (offset <= 0) {
	      if (align === 'right') {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    }
	    return align;
	  };

	  PieLabels.prototype.getArcPoint = function getArcPoint(point) {
	    return point;
	  };

	  PieLabels.prototype.getPointAngle = function getPointAngle(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var startPoint = {
	      x: Util.isArray(point.x) ? point.x[0] : point.x,
	      y: point.y[0]
	    };
	    self.transLabelPoint(startPoint); // 转换到画布坐标，如果坐标系发生改变
	    var endPoint = {
	      x: Util.isArray(point.x) ? point.x[1] : point.x,
	      y: point.y[1]
	    };
	    self.transLabelPoint(endPoint); // 转换到画布坐标，如果坐标系发生改变
	    var angle = void 0;
	    var startAngle = PathUtil.getPointAngle(coord, startPoint);
	    if (point.points && point.points[0].y === point.points[1].y) {
	      angle = startAngle;
	    } else {
	      var endAngle = PathUtil.getPointAngle(coord, endPoint);
	      if (startAngle >= endAngle) {
	        // 100% pie slice
	        endAngle = endAngle + Math.PI * 2;
	      }
	      angle = startAngle + (endAngle - startAngle) / 2;
	    }
	    return angle;
	  };

	  PieLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var r = coord.getRadius() + offset;
	    var point = getEndPoint(center, angle, r);
	    point.angle = angle;
	    point.r = r;
	    return point;
	  };

	  return PieLabels;
	}(PolarLabels);

	module.exports = PieLabels;

	/***/ }),
	/* 288 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The tooltip handler
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(2),
	    defaultColor = _require.defaultColor;

	var FIELD_ORIGIN = '_origin';

	function getScaleName(scale) {
	  return scale.alias || scale.field;
	}

	var TooltipMixin = {
	  _getIntervalSize: function _getIntervalSize(obj) {
	    var size = null;
	    var type = this.get('type');
	    var coord = this.get('coord');
	    if (coord.isRect && (type === 'interval' || type === 'schema')) {
	      size = this.getSize(obj[FIELD_ORIGIN]); // 如果字段发生了映射，宽度计算就会报错

	      var dim = coord.isTransposed ? 'y' : 'x';
	      if (Util.isArray(obj[dim])) {
	        var width = Math.abs(obj[dim][1] - obj[dim][0]);
	        size = size < width ? null : size; // 直方图计算错误
	      }
	    }

	    return size;
	  },
	  _snapEqual: function _snapEqual(v1, v2, scale) {
	    var equals = void 0;
	    v1 = scale.translate(v1);
	    v2 = scale.translate(v2);

	    if (scale.isCategory) {
	      equals = v1 === v2;
	    } else {
	      equals = Util.snapEqual(v1, v2);
	    }
	    return equals;
	  },
	  _getScaleValueByPoint: function _getScaleValueByPoint(point) {
	    var result = 0;
	    var coord = this.get('coord');
	    var xScale = this.getXScale();
	    var invertPoint = coord.invert(point);
	    var xValue = invertPoint.x;

	    if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {
	      xValue = xScale.rangeMin(); // 极坐标下，scale 的 range 被做过特殊处理 see view.js#L88
	    }
	    result = xScale.invert(xValue);

	    if (xScale.isCategory) {
	      result = xScale.translate(result); // 防止分类类型
	    }

	    return result;
	  },
	  _getOriginByPoint: function _getOriginByPoint(point) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var xField = xScale.field;
	    var yField = yScale.field;
	    var coord = this.get('coord');
	    var invertPoint = coord.invert(point);
	    var xValue = xScale.invert(invertPoint.x);
	    var yValue = yScale.invert(invertPoint.y);

	    var result = {};
	    result[xField] = xValue;
	    result[yField] = yValue;
	    return result;
	  },
	  _getScale: function _getScale(field) {
	    var self = this;
	    var scales = self.get('scales');
	    var rst = null;

	    Util.each(scales, function (scale) {
	      if (scale.field === field) {
	        rst = scale;
	        return false;
	      }
	    });
	    return rst;
	  },


	  // 获取值对应的度量
	  _getTipValueScale: function _getTipValueScale() {
	    var attrs = this.getAttrsForLegend();
	    var scale = void 0;
	    Util.each(attrs, function (attr) {
	      var tmpScale = attr.getScale(attr.type);
	      if (tmpScale.isLinear) {
	        // 如果指定字段是非position的，同时是连续的
	        scale = tmpScale;
	        return false;
	      }
	    });

	    var xScale = this.getXScale();
	    var yScale = this.getYScale();

	    if (!scale && yScale && yScale.field === '..y') {
	      return xScale;
	    }

	    return scale || yScale || xScale;
	  },
	  _getTipTitleScale: function _getTipTitleScale(titleField) {
	    var self = this;
	    if (titleField) {
	      return self._getScale(titleField);
	    }
	    var position = self.getAttr('position');
	    var fields = position.getFields();
	    var tmpField = void 0;
	    Util.each(fields, function (field) {
	      if (field.indexOf('..') === -1) {
	        tmpField = field;
	        return false;
	      }
	    });
	    return self._getScale(tmpField);
	  },
	  _filterValue: function _filterValue(arr, point) {
	    var coord = this.get('coord');
	    var yScale = this.getYScale();
	    var yField = yScale.field;
	    var invertPoint = coord.invert(point);
	    var yValue = invertPoint.y;
	    yValue = yScale.invert(yValue);
	    var rst = arr[arr.length - 1];

	    Util.each(arr, function (obj) {
	      var origin = obj[FIELD_ORIGIN];
	      if (origin[yField][0] <= yValue && origin[yField][1] >= yValue) {
	        rst = obj;
	        return false;
	      }
	    });
	    return rst;
	  },
	  getXDistance: function getXDistance() {
	    var self = this;
	    var distance = self.get('xDistance');
	    if (!distance) {
	      var xScale = self.getXScale();
	      if (xScale.isCategory) {
	        distance = 1;
	      } else {
	        var values = xScale.values; // values 是无序的
	        var min = xScale.translate(values[0]);
	        var max = min;
	        Util.each(values, function (value) {
	          // 时间类型需要 translate
	          value = xScale.translate(value);
	          if (value < min) {
	            min = value;
	          }
	          if (value > max) {
	            max = value;
	          }
	        });
	        var length = values.length;
	        // 应该是除以 length - 1
	        distance = (max - min) / (length - 1);
	      }
	      self.set('xDistance', distance);
	    }

	    return distance;
	  },
	  findPoint: function findPoint(point, dataArray) {
	    var self = this;
	    var type = self.get('type');
	    var xScale = self.getXScale();
	    var yScale = self.getYScale();
	    var xField = xScale.field;
	    var yField = yScale.field;
	    var rst = null;

	    if (Util.indexOf(['heatmap'], type) > -1) {
	      var coord = self.get('coord');
	      var invertPoint = coord.invert(point);
	      var xValue = xScale.invert(invertPoint.x);
	      var yValue = yScale.invert(invertPoint.y);
	      var min = Infinity;
	      Util.each(dataArray, function (obj) {
	        var distance = Math.pow(obj[FIELD_ORIGIN][xField] - xValue, 2) + Math.pow(obj[FIELD_ORIGIN][yField] - yValue, 2);
	        if (distance < min) {
	          min = distance;
	          rst = obj;
	        }
	      });
	      return rst;
	    }

	    var first = dataArray[0];
	    var last = dataArray[dataArray.length - 1];

	    if (!first) {
	      return rst;
	    }

	    var value = self._getScaleValueByPoint(point); // 根据该点获得对应度量后数据的值
	    var firstXValue = first[FIELD_ORIGIN][xField];
	    var firstYValue = first[FIELD_ORIGIN][yField];
	    var lastXValue = last[FIELD_ORIGIN][xField];
	    var isYRange = yScale.isLinear && Util.isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况

	    // 如果x的值是数组
	    if (Util.isArray(firstXValue)) {
	      Util.each(dataArray, function (record) {
	        var origin = record[FIELD_ORIGIN];
	        if (xScale.translate(origin[xField][0]) <= value && xScale.translate(origin[xField][1]) >= value) {
	          if (isYRange) {
	            if (!Util.isArray(rst)) {
	              rst = [];
	            }
	            rst.push(record);
	          } else {
	            rst = record;
	            return false;
	          }
	        }
	      });
	      if (Util.isArray(rst)) {
	        rst = this._filterValue(rst, point);
	      }
	    } else {
	      var next = void 0;
	      if (!xScale.isLinear && xScale.type !== 'timeCat') {
	        Util.each(dataArray, function (record, index) {
	          var origin = record[FIELD_ORIGIN];
	          if (self._snapEqual(origin[xField], value, xScale)) {
	            if (isYRange) {
	              if (!Util.isArray(rst)) {
	                rst = [];
	              }
	              rst.push(record);
	            } else {
	              rst = record;
	              return false;
	            }
	          } else if (xScale.translate(origin[xField]) <= value) {
	            last = record;
	            next = dataArray[index + 1];
	          }
	        });

	        if (Util.isArray(rst)) {
	          rst = this._filterValue(rst, point);
	        }
	      } else {
	        if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {
	          return null;
	        }

	        var firstIdx = 0;
	        var lastIdx = dataArray.length - 1;
	        var middleIdx = void 0;
	        while (firstIdx <= lastIdx) {
	          middleIdx = Math.floor((firstIdx + lastIdx) / 2);
	          var item = dataArray[middleIdx][FIELD_ORIGIN][xField];
	          if (self._snapEqual(item, value, xScale)) {
	            return dataArray[middleIdx];
	          }

	          if (xScale.translate(item) <= xScale.translate(value)) {
	            firstIdx = middleIdx + 1;
	            last = dataArray[middleIdx];
	            next = dataArray[middleIdx + 1];
	          } else {
	            if (lastIdx === 0) {
	              last = dataArray[0];
	            }
	            lastIdx = middleIdx - 1;
	          }
	        }
	      }

	      if (last && next) {
	        // 计算最逼近的
	        if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - value)) {
	          last = next;
	        }
	      }
	    }

	    var distance = self.getXDistance(); // 每个分类间的平均间距
	    if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) <= distance / 2) {
	      rst = last;
	    }

	    return rst;
	  },

	  /**
	   * @protected
	   * 获取tooltip的标题
	   * @param  {Object} origin 点的原始信息
	   * @param  {String} titleField 标题的字段
	   * @return {String} 提示信息的标题
	   */
	  getTipTitle: function getTipTitle(origin, titleField) {
	    var tipTitle = '';
	    var titleScale = this._getTipTitleScale(titleField);

	    if (titleScale) {
	      var value = origin[titleScale.field];
	      tipTitle = titleScale.getText(value);
	    } else if (this.get('type') === 'heatmap') {
	      // 热力图在不存在 title 的时候特殊处理
	      var xScale = this.getXScale();
	      var yScale = this.getYScale();
	      var xValue = xScale.getText(origin[xScale.field]);
	      var yValue = yScale.getText(origin[yScale.field]);

	      tipTitle = '( ' + xValue + ', ' + yValue + ' )';
	    }
	    return tipTitle;
	  },
	  getTipValue: function getTipValue(origin, valueScale) {
	    var value = void 0;
	    var field = valueScale.field;
	    value = origin[field];

	    if (Util.isArray(value)) {
	      var tmp = [];
	      Util.each(value, function (sub) {
	        tmp.push(valueScale.getText(sub));
	      });
	      value = tmp.join('-');
	    } else {
	      value = valueScale.getText(value);
	    }
	    return value;
	  },

	  /**
	   * @protected
	   * 获取tooltip的名称
	   * @param  {Object} origin 点的原始信息
	   * @return {String} 提示信息的名称
	   */
	  getTipName: function getTipName(origin) {
	    var name = void 0;
	    var nameScale = void 0;
	    var groupScales = this._getGroupScales();
	    if (groupScales.length) {
	      // 如果存在分组类型，取第一个分组类型
	      Util.each(groupScales, function (scale) {
	        nameScale = scale;
	        return false;
	      });
	    }
	    if (nameScale) {
	      var field = nameScale.field;
	      name = nameScale.getText(origin[field]);
	    } else {
	      var valueScale = this._getTipValueScale();
	      name = getScaleName(valueScale);
	    }
	    return name;
	  },

	  /**
	   * 获取点对应tooltip的信息
	   * @protected
	   * @param  {Object} point 原始的数据记录
	   * @param  {String} titleField tooltipTitle 配置信息
	   * @return {Array}  一条或者多条记录
	   */
	  getTipItems: function getTipItems(point, titleField) {
	    var self = this;
	    var origin = point[FIELD_ORIGIN];
	    var tipTitle = self.getTipTitle(origin, titleField);
	    var tooltipCfg = self.get('tooltipCfg');
	    var items = [];
	    var name = void 0;
	    var value = void 0;

	    function addItem(itemName, itemValue, cfg) {
	      if (!Util.isNil(itemValue) && itemValue !== '') {
	        // 值为null的时候，忽视
	        var item = {
	          title: tipTitle,
	          point: point,
	          name: itemName || tipTitle,
	          value: itemValue,
	          color: point.color || defaultColor,
	          marker: true
	        };
	        item.size = self._getIntervalSize(point);

	        items.push(Util.mix({}, item, cfg));
	      }
	    }

	    if (tooltipCfg) {
	      var fields = tooltipCfg.fields;
	      var cfg = tooltipCfg.cfg;
	      var callbackParams = [];
	      Util.each(fields, function (field) {
	        callbackParams.push(origin[field]);
	      });
	      if (cfg) {
	        // 存在回调函数
	        if (Util.isFunction(cfg)) {
	          cfg = cfg.apply(null, callbackParams);
	        }
	        var itemCfg = Util.mix({}, {
	          point: point,
	          title: tipTitle,
	          color: point.color || defaultColor,
	          marker: true // 默认展示 marker
	        }, cfg);

	        itemCfg.size = self._getIntervalSize(point);
	        items.push(itemCfg);
	      } else {
	        Util.each(fields, function (field) {
	          if (!Util.isNil(origin[field])) {
	            // 字段数据为null ,undefined时不显示
	            var scale = self._getScale(field);
	            name = getScaleName(scale);
	            value = scale.getText(origin[field]);
	            addItem(name, value);
	          }
	        });
	      }
	    } else {
	      var valueScale = self._getTipValueScale();
	      if (!Util.isNil(origin[valueScale.field])) {
	        // 字段数据为null ,undefined时不显示
	        value = self.getTipValue(origin, valueScale);
	        name = self.getTipName(origin);
	        addItem(name, value);
	      }
	    }
	    return items;
	  },
	  isShareTooltip: function isShareTooltip() {
	    var shareTooltip = this.get('shareTooltip');
	    var type = this.get('type');
	    var view = this.get('view');
	    var options = void 0;
	    if (view.get('parent')) {
	      options = view.get('parent').get('options');
	    } else {
	      options = view.get('options');
	    }

	    if (type === 'interval') {
	      var coord = this.get('coord');
	      var coordType = coord.type;
	      if (coordType === 'theta' || coordType === 'polar' && coord.isTransposed) {
	        shareTooltip = false;
	      }
	    } else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {
	      shareTooltip = false;
	    }

	    if (options.tooltip && Util.isBoolean(options.tooltip.shared)) {
	      // 以用户设置的为准
	      shareTooltip = options.tooltip.shared;
	    }
	    return shareTooltip;
	  }
	};

	module.exports = TooltipMixin;

	/***/ }),
	/* 289 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the interaction when geom was actived
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var FIELD_ORIGIN = '_origin';

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');
	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function isChange(preShapes, shapes) {
	  if (!preShapes) {
	    return true;
	  }

	  if (preShapes.length !== shapes.length) {
	    return true;
	  }

	  var rst = false;
	  Util.each(shapes, function (shape, index) {
	    if (!isSameShape(shape, preShapes[index])) {
	      rst = true;
	      return false;
	    }
	  });
	  return rst;
	}

	function getOriginAttrs(activeCfg, shape) {
	  var originAttrs = {};
	  Util.each(activeCfg, function (v, k) {
	    var originValue = shape.__attrs[k];
	    if (Util.isArray(originValue)) {
	      originValue = Util.cloneDeep(originValue); // 缓存原来的属性，由于 __attrs.matrix 是数组，所以此处需要深度复制
	    }
	    originAttrs[k] = originValue;
	  });
	  return originAttrs;
	}

	var ActiveMixin = {
	  _isAllowActive: function _isAllowActive() {
	    var allowActive = this.get('allowActive');
	    if (Util.isNil(allowActive)) {
	      // 用户未设置，使用默认的策略
	      var view = this.get('view');
	      var isShareTooltip = this.isShareTooltip();
	      var options = view.get('options');
	      // 默认情况下，tooltip 关闭或者 tooltip 模式为 shared === false 的时候允许 active
	      if (options.tooltip === false || !isShareTooltip) {
	        return true;
	      }
	    } else {
	      return allowActive;
	    }

	    return false;
	  },
	  _onMouseenter: function _onMouseenter(ev) {
	    var self = this;
	    var shape = ev.shape;
	    var shapeContainer = self.get('shapeContainer');
	    if (shape && shapeContainer.contain(shape) && self._isAllowActive()) {
	      // shape.get('animating')
	      self.setShapesActived(shape);
	    }
	  },
	  _onMouseleave: function _onMouseleave() {
	    var self = this;
	    var view = self.get('view');
	    var canvas = view.get('canvas');
	    if (self.get('activeShapes')) {
	      self.clearActivedShapes();
	      canvas.draw();
	    }
	  },
	  _bindActiveAction: function _bindActiveAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.on(type + ':mouseenter', Util.wrapBehavior(self, '_onMouseenter'));
	    view.on(type + ':mouseleave', Util.wrapBehavior(self, '_onMouseleave'));
	  },
	  _offActiveAction: function _offActiveAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.off(type + ':mouseenter', Util.getWrapBehavior(self, '_onMouseenter'));
	    view.off(type + ':mouseleave', Util.getWrapBehavior(self, '_onMouseleave'));
	  },
	  _setActiveShape: function _setActiveShape(shape) {
	    var self = this;
	    var activedOptions = self.get('activedOptions') || {};
	    var shapeData = shape.get('origin');
	    var shapeName = shapeData.shape || self.getDefaultValue('shape');
	    if (Util.isArray(shapeName)) {
	      shapeName = shapeName[0];
	    }
	    var shapeFactory = self.get('shapeFactory');
	    var shapeCfg = Util.mix({}, shape.__attrs, {
	      origin: shapeData
	    });
	    var activeCfg = shapeFactory.getActiveCfg(shapeName, shapeCfg);
	    if (activedOptions.style) {
	      Util.mix(activeCfg, activedOptions.style);
	    }
	    var originAttrs = getOriginAttrs(activeCfg, shape);
	    shape.setSilent('_originAttrs', originAttrs);
	    if (activedOptions.animate) {
	      shape.animate(activeCfg, 300);
	    } else {
	      // Util.mix(shape.__attrs, activeCfg);
	      shape.attr(activeCfg);
	    }
	    shape.setZIndex(1); // 提前
	  },
	  setShapesActived: function setShapesActived(shapes) {
	    var self = this;
	    if (!Util.isArray(shapes)) {
	      shapes = [shapes];
	    }
	    var preShapes = self.get('activeShapes'); // 获取上次被激活的 shapes
	    if (!isChange(preShapes, shapes)) {
	      return;
	    }
	    var view = self.get('view');
	    var canvas = view.get('canvas');
	    var shapeContainer = self.get('shapeContainer');
	    var activedOptions = self.get('activedOptions');
	    if (activedOptions && activedOptions.highlight) {
	      // 上次的动画未完成，所以要停止掉动画
	      Util.each(shapes, function (shape) {
	        if (shape.get('animating')) {
	          shape.stopAnimate();
	        }
	      });
	      self.highlightShapes(shapes);
	    } else {
	      if (preShapes) {
	        self.clearActivedShapes(); // 先清除激活元素
	      }

	      Util.each(shapes, function (shape) {
	        if (shape.get('animating')) {
	          shape.stopAnimate();
	        }
	        if (shape.get('visible') && !shape.get('selected')) {
	          self._setActiveShape(shape);
	        }
	      });
	    }
	    self.set('activeShapes', shapes);
	    shapeContainer.sort();
	    canvas.draw();
	  },
	  clearActivedShapes: function clearActivedShapes() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var activedOptions = self.get('activedOptions');
	    var activeAnimate = activedOptions && activedOptions.animate;
	    if (shapeContainer && !shapeContainer.get('destroyed')) {
	      var activeShapes = self.get('activeShapes');
	      Util.each(activeShapes, function (activeShape) {
	        if (!activeShape.get('selected')) {
	          var originAttrs = activeShape.get('_originAttrs');
	          if (activeAnimate) {
	            activeShape.stopAnimate();
	            activeShape.animate(originAttrs, 300);
	          } else {
	            activeShape.attr(originAttrs);
	          }
	          activeShape.setZIndex(0);
	          activeShape.set('_originAttrs', null);
	        }
	      });
	      var preHighlightShapes = self.get('preHighlightShapes');
	      if (preHighlightShapes) {
	        var shapes = shapeContainer.get('children');
	        Util.each(shapes, function (shape) {
	          if (!shape.get('selected')) {
	            var originAttrs = shape.get('_originAttrs');
	            if (originAttrs) {
	              if (activeAnimate) {
	                shape.stopAnimate();
	                shape.animate(originAttrs, 300);
	              } else {
	                shape.attr(originAttrs);
	              }
	              shape.setZIndex(0);
	              shape.set('_originAttrs', null);
	            }
	          }
	        });
	      }
	      // 恢复原来排序
	      var children = shapeContainer.get('children');
	      children.sort(function (obj1, obj2) {
	        return obj1._INDEX - obj2._INDEX;
	      });

	      self.set('activeShapes', null);
	      self.set('preHighlightShapes', null);
	    }
	  },
	  getGroupShapesByPoint: function getGroupShapesByPoint(point) {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var activeShapes = [];
	    if (shapeContainer) {
	      var xField = self.getXScale().field;
	      var shapes = self.getShapes();
	      var originObj = self._getOriginByPoint(point);
	      Util.each(shapes, function (shape) {
	        var origin = shape.get('origin');
	        if (shape.get('visible') && origin) {
	          // 有可能不是图形，而是label文本，所以判断一下
	          var shapeXValue = origin[FIELD_ORIGIN][xField];
	          if (shapeXValue === originObj[xField]) {
	            activeShapes.push(shape);
	          }
	        }
	      });
	    }
	    return activeShapes;
	  },
	  getSingleShapeByPoint: function getSingleShapeByPoint(point) {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var canvas = shapeContainer.get('canvas');
	    var pixelRatio = canvas.get('pixelRatio');
	    var result = void 0;
	    if (shapeContainer) {
	      result = shapeContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
	    }

	    if (result && result.get('origin')) {
	      return result;
	    }
	  },
	  highlightShapes: function highlightShapes(_highlightShapes, highlightCfg) {
	    var self = this;
	    if (!Util.isArray(_highlightShapes)) {
	      _highlightShapes = [_highlightShapes];
	    }

	    var preHighlightShapes = self.get('activeShapes'); // 获取上次被激活的 shapes
	    if (!isChange(preHighlightShapes, _highlightShapes)) {
	      return;
	    }
	    if (preHighlightShapes) {
	      self.clearActivedShapes();
	    }

	    var shapes = self.getShapes();
	    var activedOptions = self.get('activedOptions');
	    var activeAnimate = activedOptions && activedOptions.animate;
	    var activeStyle = activedOptions && activedOptions.style;

	    Util.each(shapes, function (shape) {
	      var changeAttrs = {};
	      shape.stopAnimate();
	      if (Util.indexOf(_highlightShapes, shape) !== -1) {
	        Util.mix(changeAttrs, activeStyle, highlightCfg);
	        // shape.__attrs = Util.mix({}, shape.get('_originAttrs'), highlightCfg);
	        shape.setZIndex(1); // 提前
	      } else {
	        Util.mix(changeAttrs, {
	          fillOpacity: 0.3
	        });
	        shape.setZIndex(0);
	      }
	      var originAttrs = getOriginAttrs(changeAttrs, shape);
	      shape.setSilent('_originAttrs', originAttrs);
	      if (activeAnimate) {
	        shape.animate(changeAttrs, 300);
	      } else {
	        shape.attr(changeAttrs);
	      }
	    });
	    self.set('preHighlightShapes', _highlightShapes);
	    self.set('activeShapes', _highlightShapes);
	  }
	};

	module.exports = ActiveMixin;

	/***/ }),
	/* 290 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the interaction when geom was selected
	 * @author sima.zhang
	 */

	var Util = __webpack_require__(0);
	var FIELD_ORIGIN = '_origin';

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');
	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function getOriginAttrs(selectedCfg, shape) {
	  var originAttrs = {};
	  Util.each(selectedCfg, function (v, k) {
	    if (k === 'transform') {
	      k = 'matrix';
	    }
	    var originValue = shape.__attrs[k];
	    if (Util.isArray(originValue)) {
	      originValue = Util.cloneDeep(originValue); // 缓存原来的属性，由于 __attrs.matrix 是数组，所以此处需要深度复制
	    }
	    originAttrs[k] = originValue;
	  });
	  return originAttrs;
	}

	var SelectMixin = {
	  _isAllowSelect: function _isAllowSelect() {
	    var isAllowSelect = this.get('allowSelect');
	    if (Util.isNil(isAllowSelect)) {
	      var type = this.get('type');
	      var coord = this.get('coord');
	      var coordType = coord && coord.type;

	      if (type === 'interval' && coordType === 'theta') {
	        // 饼图默认可以进行选中
	        return true;
	      }
	    } else {
	      // 用户设置了 select 配置
	      return isAllowSelect;
	    }

	    return false;
	  },
	  _onClick: function _onClick(ev) {
	    var self = this;
	    if (self._isAllowSelect()) {
	      // 允许选中下才执行
	      self.clearActivedShapes(); // 清除hover效果
	      var shape = ev.shape;
	      var shapeContainer = self.get('shapeContainer');
	      if (shape && !shape.get('animating') && shapeContainer.contain(shape)) {
	        self.setShapeSelected(shape);
	      }
	    }
	  },
	  _bindSelectedAction: function _bindSelectedAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.on(type + ':click', Util.wrapBehavior(self, '_onClick'));
	  },
	  _offSelectedAction: function _offSelectedAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.off(type + ':click', Util.getWrapBehavior(self, '_onClick'));
	  },
	  _setShapeStatus: function _setShapeStatus(shape, status) {
	    var self = this;
	    var view = self.get('view');
	    var selectedOptions = self.get('selectedOptions') || {};
	    var animate = selectedOptions.animate !== false; // 默认允许动画
	    var canvas = view.get('canvas');

	    shape.set('selected', status);
	    var shapeData = shape.get('origin');

	    if (status) {
	      // 选中状态
	      var shapeName = shapeData.shape || self.getDefaultValue('shape');
	      if (Util.isArray(shapeName)) {
	        shapeName = shapeName[0];
	      }
	      var shapeFactory = self.get('shapeFactory');
	      var cfg = Util.mix({
	        geom: self,
	        point: shapeData
	      }, selectedOptions);
	      var selectedStyle = shapeFactory.getSelectedCfg(shapeName, cfg);
	      Util.mix(selectedStyle, cfg.style); // 用户设置的优先级更高

	      if (!shape.get('_originAttrs')) {
	        // 缓存原有属性
	        if (shape.get('animating')) {
	          // 停止动画
	          shape.stopAnimate();
	        }
	        shape.set('_originAttrs', getOriginAttrs(selectedStyle, shape));
	      }

	      if (animate) {
	        shape.animate(selectedStyle, 300);
	      } else {
	        shape.attr(selectedStyle);
	        canvas.draw();
	      }
	    } else {
	      var originAttrs = shape.get('_originAttrs');
	      shape.set('_originAttrs', null);
	      if (animate) {
	        shape.animate(originAttrs, 300);
	      } else {
	        shape.attr(originAttrs);
	        canvas.draw();
	      }
	    }
	  },
	  setShapeSelected: function setShapeSelected(shape) {
	    var self = this;
	    var selectedShapes = self._getSelectedShapes();
	    var selectedOptions = self.get('selectedOptions') || {};
	    var cancelable = selectedOptions.cancelable !== false; // 选中状态是否允许取消，默认允许
	    if (selectedOptions.mode === 'multiple') {
	      // 支持多选
	      if (Util.indexOf(selectedShapes, shape) === -1) {
	        selectedShapes.push(shape);
	        self._setShapeStatus(shape, true);
	      } else if (cancelable) {
	        // 图形已经被选中并且选中状态允许取消选中
	        Util.Array.remove(selectedShapes, shape);
	        self._setShapeStatus(shape, false);
	      }
	    } else {
	      var selectedShape = selectedShapes[0];
	      if (cancelable) {
	        // 如果允许取消，则选中null
	        shape = isSameShape(selectedShape, shape) ? null : shape;
	      }
	      if (!isSameShape(selectedShape, shape)) {
	        if (selectedShape) {
	          self._setShapeStatus(selectedShape, false);
	        }
	        if (shape) {
	          self._setShapeStatus(shape, true);
	        }
	      }
	    }
	  },
	  clearSelected: function clearSelected() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    if (shapeContainer && !shapeContainer.get('destroyed')) {
	      var selectedShapes = self._getSelectedShapes();
	      Util.each(selectedShapes, function (shape) {
	        self._setShapeStatus(shape, false);
	        shape.set('_originAttrs', null);
	      });
	    }
	  },

	  /**
	   * 设置记录对应的图形选中
	   * @param {Object} record 选中的记录
	   * @chainable
	   * @return {Geom} 返回当前的 Geometry
	   */
	  setSelected: function setSelected(record) {
	    var self = this;
	    var shapes = self.getShapes();
	    Util.each(shapes, function (shape) {
	      var origin = shape.get('origin');
	      if (origin && origin[FIELD_ORIGIN] === record) {
	        self.setShapeSelected(shape);
	      }
	    });
	    return this;
	  },
	  _getSelectedShapes: function _getSelectedShapes() {
	    var self = this;
	    var shapes = self.getShapes();
	    var selectedShapes = [];

	    Util.each(shapes, function (shape) {
	      if (shape.get('selected')) {
	        selectedShapes.push(shape);
	      }
	    });
	    self.set('selectedShapes', selectedShapes);
	    return selectedShapes;
	  }
	};

	module.exports = SelectMixin;

	/***/ }),
	/* 291 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview 度量的控制器
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Scale = __webpack_require__(104);
	var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
	var TYPES = {
	  LINEAR: 'linear',
	  CAT: 'cat',
	  TIME: 'time'
	};

	var ScaleController = function () {
	  function ScaleController(cfg) {
	    _classCallCheck(this, ScaleController);

	    // defs 列定义
	    this.defs = {};
	    Util.assign(this, cfg);
	  }

	  ScaleController.prototype._getDef = function _getDef(field) {
	    var defs = this.defs;
	    var def = null;
	    if (Global.scales[field] || defs[field]) {
	      def = Util.mix({}, Global.scales[field]);
	      // 处理覆盖属性的问题
	      Util.each(defs[field], function (v, k) {
	        if (Util.isNil(v)) {
	          delete def[k];
	        } else {
	          def[k] = v;
	        }
	      });
	    }
	    return def;
	  };

	  ScaleController.prototype._getDefaultType = function _getDefaultType(field, data) {
	    var type = TYPES.LINEAR;
	    var value = Util.Array.firstValue(data, field);
	    if (Util.isArray(value)) {
	      value = value[0];
	    }
	    if (dateRegex.test(value)) {
	      type = TYPES.TIME;
	    } else if (Util.isString(value)) {
	      type = TYPES.CAT;
	    }
	    return type;
	  };

	  ScaleController.prototype._getScaleCfg = function _getScaleCfg(type, field, data) {
	    var cfg = {
	      field: field
	    };
	    var values = Util.Array.values(data, field);
	    cfg.values = values;
	    if (!Scale.isCategory(type) && type !== 'time') {
	      var range = Util.Array.getRange(values);
	      cfg.min = range.min;
	      cfg.max = range.max;
	      cfg.nice = true;
	    }

	    if (type === 'time') {
	      cfg.nice = false;
	    }
	    return cfg;
	  };

	  ScaleController.prototype.createScale = function createScale(field, data) {
	    var self = this;
	    var def = self._getDef(field);
	    var scale = void 0;
	    // 如果数据为空直接返回常量度量
	    if (!data || !data.length) {
	      if (def && def.type) {
	        scale = Scale[def.type](def);
	      } else {
	        scale = Scale.identity({
	          value: field,
	          field: field.toString(),
	          values: [field]
	        });
	      }
	      return scale;
	    }
	    var firstValue = Util.Array.firstValue(data, field);

	    if (Util.isNumber(field) || Util.isNil(firstValue) && !def) {
	      scale = Scale.identity({
	        value: field,
	        field: field.toString(),
	        values: [field]
	      });
	    } else {
	      // 如果已经定义过这个度量
	      var type = void 0;
	      if (def) {
	        type = def.type;
	      }
	      type = type || self._getDefaultType(field, data);
	      var cfg = self._getScaleCfg(type, field, data);
	      if (def) {
	        Util.mix(cfg, def);
	      }
	      scale = Scale[type](cfg);
	    }
	    return scale;
	  };

	  return ScaleController;
	}();

	module.exports = ScaleController;

	/***/ }),
	/* 292 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自动计算数字坐标轴
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var AutoUtil = __webpack_require__(105);
	var MIN_COUNT = 5;
	var MAX_COUNT = 7;
	var Global = __webpack_require__(2);

	module.exports = function (info) {
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var ticks = [];
	  var minCount = info.minCount || MIN_COUNT;
	  var maxCount = info.maxCount || MAX_COUNT;
	  var isFixedCount = minCount === maxCount; // 是否限定死了个数
	  var minLimit = Util.isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值
	  var maxLimit = Util.isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值
	  var avgCount = (minCount + maxCount) / 2;
	  var count = avgCount;
	  // 用户传入的逼近数组
	  var snapArray = info.snapArray ? info.snapArray : isFixedCount ? Global.snapCountArray : Global.snapArray;

	  // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分
	  if (min === minLimit && max === maxLimit && isFixedCount) {
	    interval = (max - min) / (count - 1);
	  }

	  if (Util.isNil(min)) {
	    min = 0;
	  }
	  if (Util.isNil(max)) {
	    max = 0;
	  }
	  if (max === min) {
	    if (min === 0) {
	      max = 1;
	    } else {
	      if (min > 0) {
	        min = 0;
	      } else {
	        max = 0;
	      }
	    }
	    if (max - min < 5 && !interval && max - min >= 1) {
	      interval = 1;
	    }
	  }

	  if (Util.isNil(interval)) {
	    // 计算间距
	    var temp = (max - min) / (avgCount - 1);
	    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');
	    if (maxCount !== minCount) {
	      count = parseInt((max - min) / interval, 10);
	      if (count > maxCount) {
	        count = maxCount;
	      }
	      if (count < minCount) {
	        count = minCount;
	      }
	      // 不确定tick的个数时，使得tick偏小
	      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');
	    }
	  }
	  if (info.interval || maxCount !== minCount) {
	    // 校正 max 和 min
	    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近
	    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近

	    count = Math.round((max - min) / interval);
	    min = Util.fixedBase(min, interval);
	    max = Util.fixedBase(max, interval);
	  } else {
	    avgCount = parseInt(avgCount, 10); // 取整
	    var avg = (max + min) / 2;
	    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');
	    var sideCount = Math.floor((avgCount - 2) / 2);
	    var maxTick = avgTick + sideCount * interval;
	    var minTick = void 0;
	    if (avgCount % 2 === 0) {
	      minTick = avgTick - sideCount * interval;
	    } else {
	      minTick = avgTick - (sideCount + 1) * interval;
	    }
	    if (maxTick < max) {
	      maxTick = maxTick + interval;
	    }
	    if (minTick > min) {
	      minTick = minTick - interval;
	    }
	    max = Util.fixedBase(maxTick, interval);
	    min = Util.fixedBase(minTick, interval);
	  }

	  max = Math.min(max, maxLimit);
	  min = Math.max(min, minLimit);

	  ticks.push(min);
	  for (var i = 1; i < count; i++) {
	    var tickValue = Util.fixedBase(interval * i + min, interval);
	    if (tickValue < max) {
	      ticks.push(tickValue);
	    }
	  }
	  if (ticks[ticks.length - 1] < max) {
	    ticks.push(max);
	  }
	  return {
	    min: min,
	    max: max,
	    interval: interval,
	    count: count,
	    ticks: ticks
	  };
	};

	/***/ }),
	/* 293 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The data is replaced with constant
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);

	var Identity = function (_Base) {
	  _inherits(Identity, _Base);

	  function Identity() {
	    _classCallCheck(this, Identity);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Identity.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      isIdentity: true,
	      /**
	       * @override
	       * @type {String}
	       */
	      type: 'identity',

	      /**
	       * 常量值
	       * @type {*}
	       */
	      value: null
	    });
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.getText = function getText() {
	    return this.value.toString();
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.scale = function scale(value) {
	    if (this.value !== value && Util.isNumber(value)) {
	      return value;
	    }
	    return this.range[0];
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.invert = function invert() {
	    return this.value;
	  };

	  return Identity;
	}(Base);

	module.exports = Identity;

	/***/ }),
	/* 294 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);
	var timeAuto = __webpack_require__(295);
	var fecha = __webpack_require__(108);
	var TimeUtil = __webpack_require__(109);

	/**
	 * 时间度量的构造函数
	 * @class Scale.Time
	 */

	var Time = function (_Linear) {
	  _inherits(Time, _Linear);

	  function Time() {
	    _classCallCheck(this, Time);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Time.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'time',

	      /**
	       * 格式化符
	       * @type {String}
	       */
	      mask: 'YYYY-MM-DD'
	    });
	  };

	  /**
	   * @override
	   */


	  Time.prototype.init = function init() {
	    var self = this;
	    var values = self.values;
	    if (values && values.length) {
	      // 重新计算最大最小值
	      var timeStamps = [];
	      var min = Infinity; // 最小值
	      var secondMin = min; // 次小值
	      var max = 0;
	      // 使用一个循环，计算min,max,secondMin
	      Util.each(values, function (v) {
	        var timeStamp = self._toTimeStamp(v);
	        if (isNaN(timeStamp)) {
	          throw new TypeError('Invalid Time: ' + v);
	        }
	        if (min > timeStamp) {
	          secondMin = min;
	          min = timeStamp;
	        } else if (secondMin > timeStamp) {
	          secondMin = timeStamp;
	        }
	        if (max < timeStamp) {
	          max = timeStamp;
	        }
	        timeStamps.push(timeStamp);
	      });
	      // 存在多个值时，设置最小间距
	      if (values.length > 1) {
	        self.minTickInterval = secondMin - min;
	      }
	      if (Util.isNil(self.min) || self._toTimeStamp(self.min) > min) {
	        self.min = min;
	      }
	      if (Util.isNil(self.max) || self._toTimeStamp(self.max) < max) {
	        self.max = max;
	      }
	    }
	    _Linear.prototype.init.call(this);
	  };

	  Time.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    var tmp = timeAuto({
	      min: min,
	      max: max,
	      minCount: count,
	      maxCount: count,
	      interval: interval,
	      minInterval: self.minTickInterval
	    });
	    return tmp.ticks;
	  };

	  /**
	   * @override
	   */


	  Time.prototype.getText = function getText(value) {
	    var formatter = this.formatter;
	    value = this.translate(value);
	    value = formatter ? formatter(value) : fecha.format(value, this.mask);
	    return value;
	  };

	  /**
	   * @override
	   */


	  Time.prototype.scale = function scale(value) {
	    if (Util.isString(value)) {
	      value = this.translate(value);
	    }
	    return _Linear.prototype.scale.call(this, value);
	  };

	  /**
	   * @override
	   */


	  Time.prototype.translate = function translate(value) {
	    return this._toTimeStamp(value);
	  };

	  // 将时间转换为时间戳


	  Time.prototype._toTimeStamp = function _toTimeStamp(value) {
	    return TimeUtil.toTimeStamp(value);
	  };

	  return Time;
	}(Linear);

	module.exports = Time;

	/***/ }),
	/* 295 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算时间坐标轴
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var AutoUtil = __webpack_require__(105);

	var MAX_COUNT = 6;
	var SNAP_ARRAY = [1, 2, 4, 6, 8, 12];
	var MINUTE_MS = 60 * 1000;
	var HOUR_MS = 3600 * 1000;
	var DAY_MS = 24 * 3600 * 1000;

	function getYear(date) {
	  return new Date(date).getFullYear();
	}

	function createYear(year) {
	  return new Date(year, 0, 1).getTime();
	}

	function getMonth(date) {
	  return new Date(date).getMonth();
	}

	function diffMonth(min, max) {
	  var minYear = getYear(min);
	  var maxYear = getYear(max);
	  var minMonth = getMonth(min);
	  var maxMonth = getMonth(max);
	  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;
	}

	function creatMonth(year, month) {
	  return new Date(year, month, 1).getTime();
	}

	function diffDay(min, max) {
	  return Math.ceil((max - min) / DAY_MS);
	}

	function diffHour(min, max) {
	  return Math.ceil((max - min) / HOUR_MS);
	}

	function diffMinus(min, max) {
	  return Math.ceil((max - min) / (60 * 1000));
	}

	module.exports = function (info) {
	  var minInterval = info.minInterval;
	  var ticks = [];
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var count = void 0;

	  // 如果最大值和最小值相等，则设置最大值大于最小值一天
	  if (max === min) {
	    max = min + DAY_MS;
	  }

	  // 计算间距
	  if (Util.isNil(interval)) {
	    var innerTime = max - min;
	    var dms = DAY_MS; // 天代表的秒
	    var yms = 365 * dms; // 年代表的秒
	    interval = parseInt(innerTime / (info.maxCount || MAX_COUNT), 10);
	    if (minInterval && minInterval > interval) {
	      interval = minInterval;
	    }
	    var yfactor = interval / yms;
	    var minYear = getYear(min);
	    // 大于半年
	    if (yfactor > 0.51) {
	      var year = Math.ceil(yfactor);
	      // interval = year * yms;
	      var maxYear = getYear(max);

	      for (var i = minYear; i <= maxYear + year; i = i + year) {
	        ticks.push(createYear(i));
	      }
	      interval = null;
	    } else if (yfactor > 0.0834) {
	      // 大于一个月
	      var month = Math.ceil(yfactor / 0.0834);
	      var mmMoth = getMonth(min);
	      var dMonths = diffMonth(min, max);

	      for (var _i = 0; _i <= dMonths + month; _i = _i + month) {
	        ticks.push(creatMonth(minYear, _i + mmMoth));
	      }
	      interval = null;
	    } else if (interval > dms * 0.5) {
	      // 大于一天
	      var date = new Date(min);
	      var _year = date.getFullYear();
	      var _month = date.getMonth(min);
	      var mday = date.getDate();
	      var day = Math.ceil(interval / dms);
	      var ddays = diffDay(min, max);
	      interval = day * dms;
	      for (var _i2 = 0; _i2 < ddays + day; _i2 = _i2 + day) {
	        ticks.push(new Date(_year, _month, mday + _i2).getTime());
	      }
	    } else if (interval > HOUR_MS) {
	      // 大于一个小时
	      var _date = new Date(min);
	      var _year2 = _date.getFullYear();
	      var _month2 = _date.getMonth(min);
	      var _day = _date.getDate();
	      var hour = _date.getHours();
	      var hours = AutoUtil.snapTo(SNAP_ARRAY, Math.ceil(interval / HOUR_MS));
	      var dHours = diffHour(min, max);
	      interval = hours * HOUR_MS;

	      for (var _i3 = 0; _i3 <= dHours + hours; _i3 = _i3 + hours) {
	        ticks.push(new Date(_year2, _month2, _day, hour + _i3).getTime());
	      }
	    } else if (interval > MINUTE_MS) {
	      // 最小单位是分钟
	      var dMinus = diffMinus(min, max);
	      var minutes = Math.ceil(interval / MINUTE_MS);
	      interval = minutes * MINUTE_MS;

	      for (var _i4 = 0; _i4 <= dMinus + minutes; _i4 = _i4 + minutes) {
	        ticks.push(min + _i4 * MINUTE_MS);
	      }
	    } else {
	      if (interval < 1000) {
	        interval = 1000;
	      }
	      min = Math.floor(min / 1000) * 1000;
	      var dSeconds = Math.ceil((max - min) / 1000);
	      var seconds = Math.ceil(interval / 1000);
	      interval = seconds * 1000;

	      for (var _i5 = 0; _i5 < dSeconds + seconds; _i5 = _i5 + seconds) {
	        ticks.push(min + _i5 * 1000);
	      }
	    }
	  }

	  if (!ticks.length) {
	    min = Math.floor(min / 1000) * 1000;
	    max = Math.ceil(max / 1000) * 1000;
	    count = (max - min) / interval;
	    for (var _i6 = 0; _i6 <= count; _i6++) {
	      ticks.push(Util.fixedBase(interval * _i6 + min, interval));
	    }
	  }

	  return {
	    max: max,
	    min: min,
	    interval: interval,
	    ticks: ticks,
	    count: ticks.length
	  };
	};

	/***/ }),
	/* 296 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 时间数据作为分类类型
	 * @author dxq613@gmail.com
	 */

	var Category = __webpack_require__(106);
	var Util = __webpack_require__(0);
	var fecha = __webpack_require__(108);
	var catAuto = __webpack_require__(107);
	var TimeUtil = __webpack_require__(109);

	/**
	 * 度量的构造函数
	 * @class Scale.TimeCategory
	 */

	var TimeCategory = function (_Category) {
	  _inherits(TimeCategory, _Category);

	  function TimeCategory() {
	    _classCallCheck(this, TimeCategory);

	    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  TimeCategory.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Category.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'timeCat',

	      /**
	       * 格式化符
	       * @type {String}
	       */
	      mask: 'YYYY-MM-DD',

	      /**
	       * @override
	       */
	      tickCount: 7
	    });
	  };

	  TimeCategory.prototype.init = function init() {
	    var self = this;
	    var values = this.values;
	    // 针对时间分类类型，会将时间统一转换为时间戳
	    Util.each(values, function (v, i) {
	      values[i] = self._toTimeStamp(v);
	    });
	    values.sort(function (v1, v2) {
	      return v1 - v2;
	    });

	    if (!self.ticks) {
	      self.ticks = this.calculateTicks(false);
	    }
	  };

	  /**
	   * 计算 ticks
	   * @param  {boolean} formated 是否将 ticks 按照指定的 mask 格式化
	   * @return {array} 返回 ticks 数组
	   */


	  TimeCategory.prototype.calculateTicks = function calculateTicks(formated) {
	    var self = this;
	    var count = self.tickCount;
	    var ticks = void 0;
	    if (count) {
	      var temp = catAuto({
	        maxCount: count,
	        data: self.values
	      });
	      ticks = temp.ticks;
	    } else {
	      ticks = self.values;
	    }

	    if (formated) {
	      Util.each(ticks, function (value, index) {
	        ticks[index] = fecha.format(value, self.mask);
	      });
	    }
	    return ticks;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.translate = function translate(value) {
	    value = this._toTimeStamp(value);
	    var index = this.values.indexOf(value);

	    if (index === -1) {
	      if (Util.isNumber(value) && value < this.values.length) {
	        index = value;
	      } else {
	        index = NaN;
	      }
	    }
	    return index;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var index = this.translate(value);
	    var percent = void 0;

	    if (this.values.length === 1) {
	      percent = index;
	    } else if (index > -1) {
	      percent = index / (this.values.length - 1);
	    } else {
	      percent = 0;
	    }

	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.getText = function getText(value) {
	    var result = '';
	    var index = this.translate(value);
	    if (index > -1) {
	      result = this.values[index];
	    } else {
	      result = value;
	    }

	    var formatter = this.formatter;
	    result = parseInt(result, 10);
	    result = formatter ? formatter(result) : fecha.format(result, this.mask);
	    return result;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = this.ticks;
	    var rst = [];
	    Util.each(ticks, function (tick) {
	      var obj = void 0;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: Util.isString(tick) ? tick : self.getText(tick),
	          tickValue: tick, // 用于坐标轴上文本动画时确定前后帧的对应关系
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  // 将时间转换为时间戳


	  TimeCategory.prototype._toTimeStamp = function _toTimeStamp(value) {
	    return TimeUtil.toTimeStamp(value);
	  };

	  return TimeCategory;
	}(Category);

	module.exports = TimeCategory;

	/***/ }),
	/* 297 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 使用度量，进行log转换
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);

	// 计算log
	function log(a, b) {
	  if (a === 1) {
	    return 1;
	  }
	  return Math.log(b) / Math.log(a);
	}

	/**
	 * 度量的log计算
	 * @class Scale.Log
	 */

	var Log = function (_Linear) {
	  _inherits(Log, _Linear);

	  function Log() {
	    _classCallCheck(this, Log);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Log.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'log',

	      /**
	       * 进行log计算的基数
	       * @type {Number}
	       */
	      base: 2,

	      /**
	       * @override
	       * log 的坐标点的个数控制在10个以下
	       * @type {Number}
	       */
	      tickCount: 10,

	      // 最小的tick，仅内部使用
	      _minTick: null
	    });
	  };
	  /**
	   * @override
	   */


	  Log.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var base = self.base;
	    var minTick = void 0;
	    if (self.min < 0) {
	      throw new Error('The minimum value must be greater than zero!');
	    }
	    var maxTick = log(base, self.max);

	    if (self.min > 0) {
	      minTick = Math.floor(log(base, self.min));
	    } else {
	      var values = self.values;
	      var positiveMin = self.max; // 查找大于0的第一个值, 如果都小于0，默认为1
	      Util.each(values, function (value) {
	        if (value > 0 && value < positiveMin) {
	          positiveMin = value;
	        }
	      });
	      if (positiveMin === self.max) {
	        positiveMin = self.max / base;
	      }
	      if (positiveMin > 1) {
	        positiveMin = 1;
	      }
	      minTick = Math.floor(log(base, positiveMin));
	      self._minTick = minTick;
	      self.positiveMin = positiveMin;
	    }
	    var count = maxTick - minTick;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];

	    for (var i = minTick; i < maxTick + avg; i = i + avg) {
	      ticks.push(Math.pow(base, i));
	    } /**/
	    if (self.min === 0) {
	      ticks.unshift(0);
	    }
	    return ticks;
	  };
	  // 获取度量计算时，value占的定义域百分比


	  Log.prototype._getScalePercent = function _getScalePercent(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    // 如果值小于等于0，则按照0处理
	    if (value <= 0) {
	      return 0;
	    }
	    var base = this.base;
	    var positiveMin = this.positiveMin;
	    // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示
	    if (positiveMin) {
	      min = positiveMin * 1 / base;
	    }
	    var percent = void 0;
	    // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例
	    if (value < positiveMin) {
	      percent = value / positiveMin / (log(base, max) - log(base, min));
	    } else {
	      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));
	    }
	    return percent;
	  };

	  /**
	   * @override
	   */


	  Log.prototype.scale = function scale(value) {
	    var percent = this._getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };
	  /**
	   * @override
	   */


	  Log.prototype.invert = function invert(value) {
	    var base = this.base;
	    var max = log(base, this.max);
	    var rangeMin = this.rangeMin();
	    var range = this.rangeMax() - rangeMin;
	    var min = void 0;
	    var positiveMin = this.positiveMin;
	    if (positiveMin) {
	      if (value === 0) {
	        return 0;
	      }
	      min = log(base, positiveMin / base);
	      var appendPercent = 1 / (max - min) * range; // 0 到 positiveMin的占比
	      if (value < appendPercent) {
	        // 落到 0 - positiveMin 之间
	        return value / appendPercent * positiveMin;
	      }
	    } else {
	      min = log(base, this.min);
	    }
	    var percent = (value - rangeMin) / range;
	    var tmp = percent * (max - min) + min;
	    return Math.pow(base, tmp);
	  };

	  return Log;
	}(Linear);

	module.exports = Log;

	/***/ }),
	/* 298 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 使用pow进行度量计算
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);

	// 求以a为次幂，结果为b的基数，如 x^^a = b;求x
	function calBase(a, b) {
	  var e = Math.E;
	  var value = Math.pow(e, Math.log(b) / a); // 使用换底公式求底
	  return value;
	}

	/**
	 * 度量的Pow计算
	 * @class Scale.Log
	 */

	var Pow = function (_Linear) {
	  _inherits(Pow, _Linear);

	  function Pow() {
	    _classCallCheck(this, Pow);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Pow.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'pow',

	      /**
	       * 进行pow计算的基数
	       * @type {Number}
	       */
	      exponent: 2,

	      /**
	       * @override
	       * pow 的坐标点的个数控制在10个以下
	       * @type {Number}
	       */
	      tickCount: 10
	    });
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var exponent = self.exponent;
	    var min = void 0;
	    var max = Math.ceil(calBase(exponent, self.max));

	    if (self.min >= 0) {
	      min = Math.floor(calBase(exponent, self.min));
	    } else {
	      min = 0;
	    }
	    if (min > max) {
	      var tmp = max;
	      max = min;
	      min = tmp;
	    }
	    var count = max - min;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];

	    for (var i = min; i < max + avg; i = i + avg) {
	      ticks.push(Math.pow(i, exponent));
	    }
	    return ticks;
	  };

	  // 获取度量计算时，value占的定义域百分比


	  Pow.prototype._getScalePercent = function _getScalePercent(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    var exponent = this.exponent;
	    var percent = (calBase(exponent, value) - calBase(exponent, min)) / (calBase(exponent, max) - calBase(exponent, min));
	    return percent;
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.scale = function scale(value) {
	    var percent = this._getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.invert = function invert(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    var exponent = this.exponent;
	    var max = calBase(exponent, this.max);
	    var min = calBase(exponent, this.min);
	    var tmp = percent * (max - min) + min;
	    return Math.pow(tmp, exponent);
	  };

	  return Pow;
	}(Linear);

	module.exports = Pow;

	/***/ }),
	/* 299 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Coord = __webpack_require__(300);

	var CoordController = function () {
	  function CoordController(option) {
	    _classCallCheck(this, CoordController);

	    this.type = 'rect';
	    this.actions = [];
	    this.cfg = {};
	    Util.mix(this, option);
	    this.option = option || {};
	  }

	  CoordController.prototype.reset = function reset(coordOption) {
	    this.actions = coordOption.actions || [];
	    this.type = coordOption.type;
	    this.cfg = coordOption.cfg;
	    this.option.actions = this.actions;
	    this.option.type = this.type;
	    this.option.cfg = this.cfg;
	    return this;
	  };

	  CoordController.prototype._execActions = function _execActions(coord) {
	    var actions = this.actions;
	    Util.each(actions, function (action) {
	      var m = action[0];
	      coord[m](action[1], action[2]);
	    });
	  };

	  CoordController.prototype.hasAction = function hasAction(actionName) {
	    var actions = this.actions;
	    var rst = false;
	    Util.each(actions, function (action) {
	      if (actionName === action[0]) {
	        rst = true;
	        return false;
	      }
	    });
	    return rst;
	  };
	  /**
	   * 创建坐标系对象
	   * @param  {Object} start 坐标系起始点
	   * @param  {Object} end   坐标系结束点
	   * @return {Function} 坐标系的构造函数
	   */


	  CoordController.prototype.createCoord = function createCoord(start, end) {
	    var self = this;
	    var type = self.type;
	    var cfg = self.cfg;
	    var C = void 0; // 构造函数
	    var coord = void 0;

	    var coordCfg = Util.mix({
	      start: start,
	      end: end
	    }, cfg);

	    if (type === 'theta') {
	      // definition of theta coord
	      C = Coord.Polar;

	      if (!self.hasAction('transpose')) {
	        self.transpose(); // 极坐标，同时transpose
	      }
	      coord = new C(coordCfg);
	      coord.type = type;
	    } else {
	      C = Coord[Util.upperFirst(type)] || Coord.Rect;
	      coord = new C(coordCfg);
	    }

	    self._execActions(coord);
	    return coord;
	  };

	  CoordController.prototype.rotate = function rotate(angle) {
	    angle = angle * Math.PI / 180;
	    this.actions.push(['rotate', angle]);
	    return this;
	  };

	  CoordController.prototype.reflect = function reflect(dim) {
	    this.actions.push(['reflect', dim]);
	    return this;
	  };

	  CoordController.prototype.scale = function scale(sx, sy) {
	    this.actions.push(['scale', sx, sy]);
	    return this;
	  };

	  CoordController.prototype.transpose = function transpose() {
	    this.actions.push(['transpose']);
	    return this;
	  };

	  return CoordController;
	}();

	module.exports = CoordController;

	/***/ }),
	/* 300 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of coordinate
	 * @author sima.zhang1990@gmail.com
	 */
	var Coord = __webpack_require__(38);
	Coord.Cartesian = __webpack_require__(301);
	Coord.Rect = Coord.Cartesian;
	Coord.Polar = __webpack_require__(302);
	Coord.Helix = __webpack_require__(303);

	module.exports = Coord;

	/***/ }),
	/* 301 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Cartesian Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);

	var Cartesian = function (_Base) {
	  _inherits(Cartesian, _Base);

	  /**
	   * @override
	   */
	  Cartesian.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      start: {
	        x: 0,
	        y: 0
	      },
	      end: {
	        x: 0,
	        y: 0
	      },
	      type: 'cartesian',
	      isRect: true
	    });
	  };

	  function Cartesian(cfg) {
	    _classCallCheck(this, Cartesian);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Cartesian.prototype._init = function _init() {
	    var start = this.start,
	        end = this.end;

	    var x = {
	      start: start.x,
	      end: end.x
	    };
	    var y = {
	      start: start.y,
	      end: end.y
	    };
	    this.x = x;
	    this.y = y;
	  };

	  Cartesian.prototype.convertPoint = function convertPoint(point) {
	    var x = void 0;
	    var y = void 0;
	    if (this.isTransposed) {
	      x = point.y;
	      y = point.x;
	    } else {
	      x = point.x;
	      y = point.y;
	    }

	    return {
	      x: this.convertDim(x, 'x'),
	      y: this.convertDim(y, 'y')
	    };
	  };

	  Cartesian.prototype.invertPoint = function invertPoint(point) {
	    var x = this.invertDim(point.x, 'x');
	    var y = this.invertDim(point.y, 'y');

	    if (this.isTransposed) {
	      return {
	        x: y,
	        y: x
	      };
	    }

	    return {
	      x: x,
	      y: y
	    };
	  };

	  return Cartesian;
	}(Base);

	module.exports = Cartesian;

	/***/ }),
	/* 302 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Polar Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var mat3 = MatrixUtil.mat3;
	var vec2 = MatrixUtil.vec2;
	var vec3 = MatrixUtil.vec3;

	var Polar = function (_Base) {
	  _inherits(Polar, _Base);

	  Polar.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      startAngle: -Math.PI / 2,
	      endAngle: Math.PI * 3 / 2,
	      innerRadius: 0,
	      type: 'polar',
	      isPolar: true
	    });
	  };

	  function Polar(cfg) {
	    _classCallCheck(this, Polar);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Polar.prototype._init = function _init() {
	    var radius = this.radius;
	    var innerRadius = this.innerRadius;
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;
	    var center = this.center;
	    var oneBox = this.getOneBox();

	    var oneWidth = oneBox.maxX - oneBox.minX;
	    var oneHeight = oneBox.maxY - oneBox.minY;
	    var left = Math.abs(oneBox.minX) / oneWidth;
	    var top = Math.abs(oneBox.minY) / oneHeight;
	    var width = this.width;
	    var height = this.height;
	    var maxRadius = void 0;
	    var circleCentre = void 0;
	    if (height / oneHeight > width / oneWidth) {
	      // width为主
	      maxRadius = width / oneWidth;
	      circleCentre = {
	        x: center.x - (0.5 - left) * width,
	        y: center.y - (0.5 - top) * maxRadius * oneHeight
	      };
	    } else {
	      // height为主
	      maxRadius = height / oneHeight;
	      circleCentre = {
	        x: center.x - (0.5 - left) * maxRadius * oneWidth,
	        y: center.y - (0.5 - top) * height
	      };
	    }

	    if (!radius) {
	      radius = maxRadius;
	    } else if (radius > 0 && radius <= 1) {
	      radius = maxRadius * radius;
	    } else if (radius <= 0 || radius > maxRadius) {
	      radius = maxRadius;
	    }

	    var x = {
	      start: startAngle,
	      end: endAngle
	    };

	    var y = {
	      start: innerRadius * radius,
	      end: radius
	    };

	    this.x = x;
	    this.y = y;
	    this.radius = radius;
	    this.circleCentre = circleCentre;
	    this.center = circleCentre;
	  };

	  Polar.prototype.getCenter = function getCenter() {
	    return this.circleCentre;
	  };

	  Polar.prototype.getOneBox = function getOneBox() {
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;
	    if (endAngle - startAngle >= Math.PI * 2) {
	      return {
	        minX: -1,
	        maxX: 1,
	        minY: -1,
	        maxY: 1
	      };
	    }
	    var xs = [0, Math.cos(startAngle), Math.cos(endAngle)];
	    var ys = [0, Math.sin(startAngle), Math.sin(endAngle)];

	    for (var i = -Math.PI * 5 / 2; i < Math.PI * 3 / 2; i += Math.PI / 2) {
	      if (startAngle <= i && i <= endAngle) {
	        xs.push(Math.cos(i));
	        ys.push(Math.sin(i));
	      }
	    }

	    return {
	      minX: Math.min.apply(Math, xs),
	      maxX: Math.max.apply(Math, xs),
	      minY: Math.min.apply(Math, ys),
	      maxY: Math.max.apply(Math, ys)
	    };
	  };

	  Polar.prototype.getRadius = function getRadius() {
	    return this.radius;
	  };

	  Polar.prototype.convertPoint = function convertPoint(point) {
	    var center = this.getCenter();
	    var x = this.isTransposed ? point.y : point.x;
	    var y = this.isTransposed ? point.x : point.y;

	    x = this.convertDim(x, 'x');
	    y = this.convertDim(y, 'y');

	    return {
	      x: center.x + Math.cos(x) * y,
	      y: center.y + Math.sin(x) * y
	    };
	  };

	  Polar.prototype.invertPoint = function invertPoint(point) {
	    var center = this.getCenter();
	    var vPoint = [point.x - center.x, point.y - center.y];
	    var x = this.x;
	    var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	    mat3.rotate(m, m, x.start);

	    var vStart = [1, 0, 0];
	    vec3.transformMat3(vStart, vStart, m);
	    vStart = [vStart[0], vStart[1]];
	    var angle = vec2.angleTo(vStart, vPoint, x.end < x.start);
	    if (Util.snapEqual(angle, Math.PI * 2)) {
	      angle = 0;
	    }
	    var radius = vec2.length(vPoint);

	    var xPercent = angle / (x.end - x.start);
	    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;

	    var yPercent = this.invertDim(radius, 'y');
	    var rst = {};
	    rst.x = this.isTransposed ? yPercent : xPercent;
	    rst.y = this.isTransposed ? xPercent : yPercent;
	    return rst;
	  };

	  return Polar;
	}(Base);

	module.exports = Polar;

	/***/ }),
	/* 303 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Helix Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var vec2 = MatrixUtil.vec2;

	var Helix = function (_Base) {
	  _inherits(Helix, _Base);

	  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      startAngle: 1.25 * Math.PI,
	      endAngle: 7.25 * Math.PI,
	      innerRadius: 0,
	      type: 'helix',
	      isHelix: true
	    });
	  };

	  function Helix(cfg) {
	    _classCallCheck(this, Helix);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Helix.prototype._init = function _init() {
	    var width = this.width;
	    var height = this.height;
	    var radius = this.radius;
	    var innerRadius = this.innerRadius;
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;

	    var index = (endAngle - startAngle) / (2 * Math.PI) + 1; // 螺线圈数
	    var maxRadius = Math.min(width, height) / 2;
	    if (radius && radius >= 0 && radius <= 1) {
	      maxRadius = maxRadius * radius;
	    }

	    var d = Math.floor(maxRadius * (1 - innerRadius) / index);
	    var a = d / (Math.PI * 2); // 螺线系数

	    var x = {
	      start: startAngle,
	      end: endAngle
	    };
	    var y = {
	      start: innerRadius * maxRadius,
	      end: innerRadius * maxRadius + d * 0.99
	    };

	    this.a = a;
	    this.d = d;
	    this.x = x;
	    this.y = y;
	  };

	  Helix.prototype.getCenter = function getCenter() {
	    return this.center;
	  };

	  /**
	   * 将百分比数据变成屏幕坐标
	   * @param  {Object} point 归一化的点坐标
	   * @return {Object}       返回对应的屏幕坐标
	   */


	  Helix.prototype.convertPoint = function convertPoint(point) {
	    var a = this.a;
	    var center = this.center;
	    var x = void 0;
	    var y = void 0;

	    if (this.isTransposed) {
	      x = point.y;
	      y = point.x;
	    } else {
	      x = point.x;
	      y = point.y;
	    }

	    var thi = this.convertDim(x, 'x');
	    var r = a * thi;
	    var newY = this.convertDim(y, 'y');

	    return {
	      x: center.x + Math.cos(thi) * (r + newY),
	      y: center.y + Math.sin(thi) * (r + newY)
	    };
	  };

	  /**
	   * 将屏幕坐标点还原成百分比数据
	   * @param  {Object} point 屏幕坐标
	   * @return {Object}       返回对应的归一化后的数据
	   */


	  Helix.prototype.invertPoint = function invertPoint(point) {
	    var center = this.center;
	    var a = this.a;
	    var d = this.d + this.y.start;
	    var v = vec2.subtract([], [point.x, point.y], [center.x, center.y]);
	    var thi = vec2.angleTo(v, [1, 0], true);
	    var rMin = thi * a; // 坐标与原点的连线在第一圈上的交点，最小r值

	    if (vec2.length(v) < rMin) {
	      // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况
	      rMin = vec2.length(v);
	    }

	    var index = Math.floor((vec2.length(v) - rMin) / d); // 当前点位于第index圈
	    thi = 2 * index * Math.PI + thi;
	    var r = a * thi;
	    var newY = vec2.length(v) - r;
	    newY = Util.snapEqual(newY, 0) ? 0 : newY;

	    var x = this.invertDim(thi, 'x');
	    var y = this.invertDim(newY, 'y');
	    x = Util.snapEqual(x, 0) ? 0 : x;
	    y = Util.snapEqual(y, 0) ? 0 : y;

	    var rst = {};
	    rst.x = this.isTransposed ? y : x;
	    rst.y = this.isTransposed ? x : y;
	    return rst;
	  };

	  return Helix;
	}(Base);

	module.exports = Helix;

	/***/ }),
	/* 304 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of axis
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Axis = __webpack_require__(305);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Global = __webpack_require__(2);

	function formatTicks(ticks) {
	  var tmp = [];
	  if (ticks.length > 0) {
	    tmp = ticks.slice(0);
	    var first = tmp[0];
	    var last = tmp[tmp.length - 1];
	    if (first.value !== 0) {
	      tmp.unshift({
	        value: 0
	      });
	    }
	    if (last.value !== 1) {
	      tmp.push({
	        value: 1
	      });
	    }
	  }
	  return tmp;
	}

	function fillAxisTicks(ticks, isLinear, gridCentering) {
	  var result = [];
	  if (ticks.length < 1) return result;

	  if (ticks.length >= 2 && isLinear && gridCentering) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 0
	    });
	  }
	  if (ticks[0].value !== 0) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 0
	    });
	  }
	  result = result.concat(ticks);
	  if (result[result.length - 1].value !== 1) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 1
	    });
	  }
	  return result;
	}

	var AxisController = function () {
	  function AxisController(cfg) {
	    _classCallCheck(this, AxisController);

	    this.visible = true;
	    this.container = null;
	    this.coord = null;
	    this.options = null;
	    this.axes = [];
	    Util.mix(this, cfg);
	  }

	  AxisController.prototype._isHide = function _isHide(field) {
	    // 对应的坐标轴是否隐藏
	    var options = this.options;

	    if (options && options[field] === false) {
	      return true;
	    }
	    return false;
	  };

	  AxisController.prototype._getMiddleValue = function _getMiddleValue(curValue, ticks, index, isLinear) {
	    if (curValue === 0 && !isLinear) {
	      return 0;
	    }
	    if (curValue === 1) {
	      return 1;
	    }
	    var nextValue = ticks[index + 1].value;
	    if (!isLinear && nextValue === 1) {
	      return 1;
	    }
	    return (curValue + nextValue) / 2;
	  };

	  AxisController.prototype._getLineRange = function _getLineRange(coord, scale, dimType, index) {
	    var start = void 0;
	    var end = void 0;
	    var isVertical = void 0;
	    var field = scale.field;
	    var options = this.options;
	    var position = '';
	    if (options[field] && options[field].position) {
	      position = options[field].position;
	    }

	    if (dimType === 'x') {
	      // x轴的坐标轴,底部的横坐标
	      start = {
	        x: 0,
	        y: position === 'top' ? 1 : 0
	      };
	      end = {
	        x: 1,
	        y: position === 'top' ? 1 : 0
	      };
	      isVertical = false;
	    } else {
	      // y轴坐标轴
	      if (index) {
	        // 多轴的情况
	        start = {
	          x: position === 'left' ? 0 : 1,
	          y: 0
	        };
	        end = {
	          x: position === 'left' ? 0 : 1,
	          y: 1
	        };
	      } else {
	        // 单个y轴，或者第一个y轴
	        start = {
	          x: position === 'right' ? 1 : 0,
	          y: 0
	        };
	        end = {
	          x: position === 'right' ? 1 : 0,
	          y: 1
	        };
	      }
	      isVertical = true;
	    }

	    start = coord.convert(start);
	    end = coord.convert(end);

	    return {
	      start: start,
	      end: end,
	      isVertical: isVertical
	    };
	  };

	  AxisController.prototype._getLineCfg = function _getLineCfg(coord, scale, dimType, index) {
	    var factor = void 0;
	    var range = this._getLineRange(coord, scale, dimType, index);
	    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标
	    var start = range.start;
	    var end = range.end;
	    var center = coord.center;

	    if (coord.isTransposed) {
	      isVertical = !isVertical;
	    }

	    if (isVertical && start.x > center.x || !isVertical && start.y > center.y) {
	      factor = 1;
	    } else {
	      factor = -1;
	    }

	    return {
	      isVertical: isVertical,
	      factor: factor,
	      start: start,
	      end: end
	    };
	  };

	  // 获取圆弧坐标轴配置项信息


	  AxisController.prototype._getCircleCfg = function _getCircleCfg(coord) {
	    var circleCfg = {};
	    var rangeX = coord.x;
	    var rangeY = coord.y;
	    var isReflectY = rangeY.start > rangeY.end;
	    var start = void 0;
	    if (coord.isTransposed) {
	      start = {
	        x: isReflectY ? 0 : 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: isReflectY ? 0 : 1
	      };
	    }

	    start = coord.convert(start);
	    var center = coord.circleCentre;
	    var startVector = [start.x - center.x, start.y - center.y];
	    var normalVector = [1, 0];
	    var startAngle = void 0;
	    if (start.y > center.y) {
	      startAngle = vec2.angle(startVector, normalVector);
	    } else {
	      startAngle = vec2.angle(startVector, normalVector) * -1;
	    }
	    var endAngle = startAngle + (rangeX.end - rangeX.start);

	    circleCfg.startAngle = startAngle;
	    circleCfg.endAngle = endAngle;
	    circleCfg.center = center;
	    circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));
	    circleCfg.inner = coord.innerRadius || 0;
	    return circleCfg;
	  };

	  AxisController.prototype._getRadiusCfg = function _getRadiusCfg(coord) {
	    var startAngle = coord.x.start;
	    var factor = startAngle < 0 ? -1 : 1;
	    var start = void 0;
	    var end = void 0;
	    if (coord.isTransposed) {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 0,
	        y: 1
	      };
	    }
	    return {
	      factor: factor,
	      start: coord.convert(start),
	      end: coord.convert(end)
	    };
	  };

	  // 确定坐标轴的位置


	  AxisController.prototype._getAxisPosition = function _getAxisPosition(coord, dimType, index, field) {
	    var position = '';
	    // 用户自己定义了 position
	    var options = this.options;
	    if (options[field] && options[field].position) {
	      position = options[field].position;
	    } else {
	      var coordType = coord.type;
	      if (coord.isRect) {
	        if (dimType === 'x') {
	          position = 'bottom';
	        } else if (dimType === 'y') {
	          if (index) {
	            position = 'right';
	          } else {
	            position = 'left';
	          }
	        }
	      } else if (coordType === 'helix') {
	        position = 'helix';
	      } else if (dimType === 'x') {
	        position = coord.isTransposed ? 'radius' : 'circle';
	      } else {
	        position = coord.isTransposed ? 'circle' : 'radius';
	      }
	    }

	    return position;
	  };

	  // 获取坐标轴构成的配置信息


	  AxisController.prototype._getAxisDefaultCfg = function _getAxisDefaultCfg(coord, scale, type, position) {
	    var self = this;
	    var cfg = {};
	    var options = self.options;
	    var field = scale.field;

	    cfg = Util.deepMix({}, Global.axis[position], cfg, options[field]);
	    if (cfg.title) {
	      Util.deepMix(cfg, {
	        title: {
	          text: scale.alias || field
	        }
	      });
	    }

	    cfg.ticks = scale.getTicks();

	    if (coord.isPolar && !scale.isCategory) {
	      if (type === 'x' && Math.abs(coord.endAngle - coord.startAngle) === Math.PI * 2) {
	        cfg.ticks.pop();
	      }
	    }

	    cfg.coord = coord;
	    if (cfg.label && Util.isNil(cfg.label.autoRotate)) {
	      cfg.label.autoRotate = true; // 允许自动旋转，避免重叠
	    }

	    if (options.hasOwnProperty('xField') && options.xField.hasOwnProperty('grid')) {
	      if (cfg.position === 'left') {
	        Util.deepMix(cfg, options.xField);
	      }
	    }

	    return cfg;
	  };

	  // 确定坐标轴的配置信息


	  AxisController.prototype._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType) {
	    var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	    var viewId = arguments[5];

	    var self = this;
	    var position = self._getAxisPosition(coord, dimType, index, scale.field);
	    var cfg = self._getAxisDefaultCfg(coord, scale, dimType, position);
	    if (!Util.isEmpty(cfg.grid) && verticalScale) {
	      // 生成 gridPoints
	      var gridPoints = [];
	      var tickValues = [];
	      var verticalTicks = formatTicks(verticalScale.getTicks());
	      // 没有垂直的坐标点时不会只栅格
	      if (verticalTicks.length) {
	        var ticks = fillAxisTicks(cfg.ticks, scale.isLinear, cfg.grid.align === 'center');
	        Util.each(ticks, function (tick, idx) {
	          tickValues.push(tick.tickValue);
	          var subPoints = [];
	          var value = tick.value;
	          if (cfg.grid.align === 'center') {
	            value = self._getMiddleValue(value, ticks, idx, scale.isLinear);
	          }
	          if (!Util.isNil(value)) {
	            var rangeX = coord.x;
	            var rangeY = coord.y;
	            Util.each(verticalTicks, function (verticalTick) {
	              var x = dimType === 'x' ? value : verticalTick.value;
	              var y = dimType === 'x' ? verticalTick.value : value;
	              var point = coord.convert({
	                x: x,
	                y: y
	              });
	              if (coord.isPolar) {
	                var center = coord.circleCentre;
	                if (rangeY.start > rangeY.end) {
	                  y = 1 - y;
	                }
	                point.flag = rangeX.start > rangeX.end ? 0 : 1;
	                point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	              }
	              subPoints.push(point);
	            });
	            gridPoints.push({
	              _id: viewId + '-' + dimType + index + '-grid-' + tick.tickValue,
	              points: subPoints
	            });
	          }
	        });
	      }
	      cfg.grid.items = gridPoints;
	      cfg.grid.tickValues = tickValues;
	    }
	    cfg.type = scale.type;
	    return cfg;
	  };

	  AxisController.prototype._getHelixCfg = function _getHelixCfg(coord) {
	    var helixCfg = {};
	    var a = coord.a;
	    var startAngle = coord.startAngle;
	    var endAngle = coord.endAngle;
	    var index = 100;
	    var crp = [];
	    for (var i = 0; i <= index; i++) {
	      var point = coord.convert({
	        x: i / 100,
	        y: 0
	      });
	      crp.push(point.x);
	      crp.push(point.y);
	    }
	    var axisStart = coord.convert({
	      x: 0,
	      y: 0
	    });
	    helixCfg.a = a;
	    helixCfg.startAngle = startAngle;
	    helixCfg.endAngle = endAngle;
	    helixCfg.crp = crp;
	    helixCfg.axisStart = axisStart;
	    helixCfg.center = coord.center;
	    helixCfg.inner = coord.y.start; // 内半径
	    return helixCfg;
	  };

	  AxisController.prototype._drawAxis = function _drawAxis(coord, scale, verticalScale, dimType, viewId, xAxis, index) {
	    var container = this.container;
	    var C = void 0; // 坐标轴类
	    var appendCfg = void 0; // 每个坐标轴 start end 等绘制边界的信息

	    if (coord.type === 'cartesian') {
	      C = Axis.Line;
	      appendCfg = this._getLineCfg(coord, scale, dimType, index);
	    } else if (coord.type === 'helix' && dimType === 'x') {
	      C = Axis.Helix;
	      appendCfg = this._getHelixCfg(coord);
	    } else if (dimType === 'x') {
	      C = Axis.Circle;
	      appendCfg = this._getCircleCfg(coord);
	    } else {
	      C = Axis.Line;
	      appendCfg = this._getRadiusCfg(coord);
	    }
	    var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index, viewId);
	    cfg = Util.mix({}, cfg, appendCfg);

	    if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {
	      cfg.circle = xAxis;
	    }
	    cfg._id = viewId + '-' + dimType;
	    if (!Util.isNil(index)) {
	      cfg._id = viewId + '-' + dimType + index;
	    }

	    var axis = container.addGroup(C, cfg);
	    this.axes.push(axis);
	    return axis;
	  };

	  AxisController.prototype.createAxis = function createAxis(xScale, yScales, viewId) {
	    var self = this;
	    var coord = this.coord;
	    var coordType = coord.type;

	    // theta坐标系默认不绘制坐标轴
	    if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {
	      var xAxis = void 0;
	      if (xScale && !self._isHide(xScale.field)) {
	        xAxis = self._drawAxis(coord, xScale, yScales[0], 'x', viewId); // 绘制 x 轴
	      }
	      if (!Util.isEmpty(yScales) && coordType !== 'helix') {
	        Util.each(yScales, function (yScale, index) {
	          if (!self._isHide(yScale.field)) {
	            self._drawAxis(coord, yScale, xScale, 'y', viewId, xAxis, index);
	          }
	        });
	      }
	    }
	  };

	  AxisController.prototype.changeVisible = function changeVisible(visible) {
	    var axes = this.axes;
	    Util.each(axes, function (axis) {
	      axis.set('visible', visible);
	    });
	  };

	  AxisController.prototype.clear = function clear() {
	    var axes = this.axes;
	    Util.each(axes, function (axis) {
	      axis.remove();
	    });
	    this.axes = [];
	  };

	  return AxisController;
	}();

	module.exports = AxisController;

	/***/ }),
	/* 305 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of axis
	 * @author sima.zhang
	 */
	module.exports = {
	  Line: __webpack_require__(306), // 基础的直线坐标轴
	  Circle: __webpack_require__(308), // 极坐标下
	  Helix: __webpack_require__(309), // 螺旋坐标轴
	  PolyLine: __webpack_require__(310) // 多线段组成的坐标轴
	};

	/***/ }),
	/* 306 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the radius axis of polar coordinate and axis of cartesian coordinate
	 * @author sima.zhang
	 */
	var Base = __webpack_require__(39);
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil;

	var vec2 = MatrixUtil.vec2;

	var Line = function (_Base) {
	  _inherits(Line, _Base);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      x: null, // @type {Number} 距离初始位置的x轴偏移量,仅对于左侧、右侧的纵向坐标有效
	      y: null, // @type {Number} 距离初始位置的y轴偏移量，仅对顶部、底部的横向坐标轴有效
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      isVertical: false,
	      start: null, // @type {Object} 起点
	      end: null // @type {Object} 终点
	    });
	  };

	  Line.prototype._getAvgLabelLength = function _getAvgLabelLength(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    return labels[1].attr('x') - labels[0].attr('x');
	  };

	  /**
	   * 获取距离坐标轴的向量
	   * @override
	   * @param  {Number} offset 偏移值
	   * @return {Array}        返回二维向量
	   */


	  Line.prototype.getSideVector = function getSideVector(offset) {
	    var self = this;
	    var factor = self.get('factor');
	    var isVertical = self.get('isVertical');
	    var start = self.get('start');
	    var end = self.get('end');
	    var axisVector = self.getAxisVector();
	    var normal = vec2.normalize([], axisVector);
	    var direction = false;
	    if (isVertical && start.y < end.y || !isVertical && start.x > end.x) {
	      direction = true;
	    }
	    var verticalVector = vec2.vertical([], normal, direction);
	    return vec2.scale([], verticalVector, offset * factor);
	  };

	  Line.prototype.getAxisVector = function getAxisVector() {
	    var start = this.get('start');
	    var end = this.get('end');
	    return [end.x - start.x, end.y - start.y];
	  };

	  Line.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    return path;
	  };

	  Line.prototype.getTickEnd = function getTickEnd(start, value) {
	    var self = this;
	    var offsetVector = self.getSideVector(value);
	    return {
	      x: start.x + offsetVector[0],
	      y: start.y + offsetVector[1]
	    };
	  };

	  Line.prototype.getTickPoint = function getTickPoint(tickValue) {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var rangeX = end.x - start.x;
	    var rangeY = end.y - start.y;
	    return {
	      x: start.x + rangeX * tickValue,
	      y: start.y + rangeY * tickValue
	    };
	  };

	  Line.prototype.renderTitle = function renderTitle() {
	    var self = this;
	    var title = self.get('title');
	    var offsetPoint = self.getTickPoint(0.5);
	    var titleOffset = title.offset;
	    if (Util.isNil(titleOffset)) {
	      // 没有指定 offset 则自动计算
	      titleOffset = 20;
	      var labelsGroup = self.get('labelsGroup');
	      if (labelsGroup) {
	        var labelLength = self.getMaxLabelWidth(labelsGroup);
	        var labelOffset = self.get('label').offset || self.get('_labelOffset');
	        titleOffset += labelLength + labelOffset;
	      }
	    }

	    var textStyle = title.textStyle;
	    var cfg = Util.mix({}, textStyle);
	    if (title.text) {
	      var vector = self.getAxisVector(); // 坐标轴方向的向量
	      if (title.autoRotate && Util.isNil(textStyle.rotate)) {
	        // 自动旋转并且用户没有指定标题的旋转角度
	        var angle = 0;
	        if (!Util.snapEqual(vector[1], 0)) {
	          // 所有水平坐标轴，文本不转置
	          var v1 = [1, 0];
	          var v2 = [vector[0], vector[1]];
	          angle = vec2.angleTo(v2, v1, true);
	        }

	        cfg.rotate = angle * (180 / Math.PI);
	      } else if (!Util.isNil(textStyle.rotate)) {
	        // 用户设置了旋转角度就以用户设置的为准
	        cfg.rotate = textStyle.rotate / 180 * Math.PI; // 将角度转换为弧度
	      }

	      var sideVector = self.getSideVector(titleOffset);
	      var point = void 0;
	      var position = title.position;
	      if (position === 'start') {
	        point = {
	          x: this.get('start').x + sideVector[0],
	          y: this.get('start').y + sideVector[1]
	        };
	      } else if (position === 'end') {
	        point = {
	          x: this.get('end').x + sideVector[0],
	          y: this.get('end').y + sideVector[1]
	        };
	      } else {
	        point = {
	          x: offsetPoint.x + sideVector[0],
	          y: offsetPoint.y + sideVector[1]
	        };
	      }

	      cfg.x = point.x;
	      cfg.y = point.y;
	      cfg.text = title.text;

	      var titleShape = self.addShape('Text', {
	        zIndex: 2,
	        attrs: cfg
	      });
	      titleShape.name = 'axis-title';
	      self.get('appendInfo') && titleShape.setSilent('appendInfo', self.get('appendInfo'));
	    }
	  };

	  Line.prototype.autoRotateLabels = function autoRotateLabels() {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var title = self.get('title');
	    if (labelsGroup) {
	      var offset = self.get('label').offset;
	      var append = 12;
	      var titleOffset = title ? title.offset : 48;
	      if (titleOffset < 0) {
	        // 如果是负的的话就不旋转
	        return;
	      }
	      var vector = self.getAxisVector(); // 坐标轴的向量，仅处理水平或者垂直的场景
	      var angle = void 0;
	      var maxWidth = void 0;
	      if (Util.snapEqual(vector[0], 0) && title && title.text) {
	        // 坐标轴垂直，由于不知道边距，只能防止跟title重合，如果title不存在，则不自动旋转
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if (maxWidth > titleOffset - offset - append) {
	          angle = Math.acos((titleOffset - offset - append) / maxWidth) * -1;
	        }
	      } else if (Util.snapEqual(vector[1], 0) && labelsGroup.getCount() > 1) {
	        // 坐标轴水平，不考虑边距，根据最长的和平均值进行翻转
	        var avgWidth = Math.abs(self._getAvgLabelLength(labelsGroup));
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if (maxWidth > avgWidth) {
	          angle = Math.asin((titleOffset - offset - append) * 1.25 / maxWidth);
	        }
	      }

	      if (angle) {
	        var factor = self.get('factor');
	        Util.each(labelsGroup.get('children'), function (label) {
	          label.rotateAtStart(angle);
	          if (Util.snapEqual(vector[1], 0)) {
	            if (factor > 0) {
	              label.attr('textAlign', 'left');
	            } else {
	              label.attr('textAlign', 'right');
	            }
	          }
	        });
	      }
	    }
	  };

	  return Line;
	}(Base);

	module.exports = Line;

	/***/ }),
	/* 307 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the grid of axis
	 * @author sima.zhang
	 */
	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Util = __webpack_require__(0);

	var Grid = function (_Group) {
	  _inherits(Grid, _Group);

	  function Grid() {
	    _classCallCheck(this, Grid);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Grid.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 1,
	      /**
	       * 栅格线的类型
	       *  - line 不封闭的线
	       *  - polygon 封闭的多边形
	       * @type {String}
	       */
	      type: 'line',
	      /**
	       * 线的样式配置
	       * @type {Object}
	       */
	      lineStyle: null,
	      /**
	       * 线集合的配置
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 为网格设置交替的背景色，指定一个值则先渲染奇数层，两个值则交替渲染
	       * @type {String | Array}
	       */
	      alternateColor: null,
	      matrix: null,
	      /**
	       * 是否隐藏第一条网格线，默认为 false
	       * @type {Boolean}
	       */
	      hideFirstLine: false,
	      /**
	       * 是否隐藏最后一条网格线，默认为 false
	       * @type {Boolean}
	       */
	      hideLastLine: false,
	      /**
	       * 0基线不在轴线上时，是否强调0基线
	       * @type {Boolean}
	       */
	      hightLightZero: true,
	      /**
	       * 0基线样式
	       * @type {Object}
	       */
	      zeroLineStyle: { stroke: '#000', lineDash: [0, 0] }
	    };
	  };

	  Grid.prototype._renderUI = function _renderUI() {
	    _Group.prototype._renderUI.call(this);
	    this._drawLines();
	  };

	  Grid.prototype._drawLines = function _drawLines() {
	    var self = this;
	    var lineStyle = self.get('lineStyle');
	    var items = self.get('items');
	    if (items && items.length) {
	      self._precessItems(items);
	      self._drawGridLines(items, lineStyle);
	    }
	  };

	  Grid.prototype._precessItems = function _precessItems(items) {
	    var self = this;
	    var preItem = void 0;
	    Util.each(items, function (item, index) {
	      if (preItem && self.get('alternateColor')) {
	        self._drawAlternativeBg(item, preItem, index);
	      }
	      preItem = item;
	    });
	  };

	  Grid.prototype._drawGridLines = function _drawGridLines(items, lineStyle) {
	    var self = this;
	    var type = this.get('type');

	    var gridLine = void 0;
	    var path = void 0;
	    var cfg = void 0;
	    var points = void 0;
	    var itemsLength = items.length;

	    if (type === 'line' || type === 'polygon') {
	      Util.each(items, function (item, idx) {
	        if (self.get('hideFirstLine') && idx === 0) {
	          // 不展示第一条网格线
	          return;
	        }
	        if (self.get('hideLastLine') && idx === itemsLength - 1) {
	          // 不展示最后一条网格线
	          return;
	        }

	        points = item.points;
	        path = [];
	        if (type === 'line') {
	          path.push(['M', points[0].x, points[0].y]);
	          path.push(['L', points[points.length - 1].x, points[points.length - 1].y]);
	        } else {
	          Util.each(points, function (point, index) {
	            if (index === 0) {
	              path.push(['M', point.x, point.y]);
	            } else {
	              path.push(['L', point.x, point.y]);
	            }
	          });
	        }

	        if (self._drawZeroLine(type, idx)) {
	          cfg = Util.mix({}, self.get('zeroLineStyle'), {
	            path: path
	          });
	        } else {
	          cfg = Util.mix({}, lineStyle, {
	            path: path
	          });
	        }

	        gridLine = self.addShape('path', {
	          attrs: cfg
	        });
	        gridLine.name = 'axis-grid';
	        gridLine._id = item._id;
	        gridLine.set('coord', self.get('coord'));
	        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
	      });
	    } else {
	      Util.each(items, function (item, idx) {
	        if (self.get('hideFirstLine') && idx === 0) {
	          // 不展示第一条网格线
	          return;
	        }
	        if (self.get('hideLastLine') && idx === itemsLength - 1) {
	          // 不展示最后一条网格线
	          return;
	        }

	        points = item.points;
	        path = [];
	        Util.each(points, function (point, index) {
	          var radius = point.radius;
	          if (index === 0) {
	            path.push(['M', point.x, point.y]);
	          } else {
	            path.push(['A', radius, radius, 0, 0, point.flag, point.x, point.y]);
	          }
	        });
	        cfg = Util.mix({}, lineStyle, {
	          path: path
	        });
	        gridLine = self.addShape('path', {
	          attrs: cfg
	        });
	        gridLine.name = 'axis-grid';
	        gridLine._id = item._id;
	        gridLine.set('coord', self.get('coord'));
	        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
	      });
	    }
	  };

	  Grid.prototype._drawZeroLine = function _drawZeroLine(type, idx) {
	    var self = this;
	    var tickValues = self.get('tickValues');
	    if (type === 'line' && tickValues) {
	      if (tickValues[idx] === 0 && self.get('hightLightZero')) {
	        return true;
	      }
	    }
	    return false;
	  };

	  Grid.prototype._drawAlternativeBg = function _drawAlternativeBg(item, preItem, index) {
	    var self = this;
	    var alternateColor = self.get('alternateColor');
	    var attrs = void 0;
	    var oddColor = void 0;
	    var evenColor = void 0;

	    if (Util.isString(alternateColor)) {
	      oddColor = alternateColor;
	    } else if (Util.isArray(alternateColor)) {
	      oddColor = alternateColor[0];
	      evenColor = alternateColor[1];
	    }

	    if (index % 2 === 0) {
	      if (evenColor) {
	        attrs = self._getBackItem(preItem.points, item.points, evenColor);
	      }
	    } else if (oddColor) {
	      attrs = self._getBackItem(preItem.points, item.points, oddColor);
	    }

	    var shape = self.addShape('Path', {
	      attrs: attrs
	    });
	    shape.name = 'axis-grid-rect';
	    shape._id = item._id && item._id.replace('grid', 'grid-rect');
	    shape.set('coord', self.get('coord'));
	    self.get('appendInfo') && shape.setSilent('appendInfo', self.get('appendInfo'));
	  };

	  Grid.prototype._getBackItem = function _getBackItem(start, end, bgColor) {
	    var path = [];
	    var type = this.get('type');

	    if (type === 'line') {
	      path.push(['M', start[0].x, start[0].y]);
	      path.push(['L', start[start.length - 1].x, start[start.length - 1].y]);
	      path.push(['L', end[end.length - 1].x, end[end.length - 1].y]);
	      path.push(['L', end[0].x, end[0].y]);
	      path.push(['Z']);
	    } else if (type === 'polygon') {
	      Util.each(start, function (subItem, index) {
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['L', subItem.x, subItem.y]);
	        }
	      });
	      for (var i = end.length - 1; i >= 0; i--) {
	        path.push(['L', end[i].x, end[i].y]);
	      }
	      path.push(['Z']);
	    } else {
	      var flag = start[0].flag;
	      Util.each(start, function (subItem, index) {
	        var radius = subItem.radius;
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['A', radius, radius, 0, 0, subItem.flag, subItem.x, subItem.y]);
	        }
	      });
	      for (var j = end.length - 1; j >= 0; j--) {
	        var endSubItem = end[j];
	        var endRadius = endSubItem.radius;
	        if (j === end.length - 1) {
	          path.push(['M', endSubItem.x, endSubItem.y]);
	        } else {
	          path.push(['A', endRadius, endRadius, 0, 0, flag === 1 ? 0 : 1, endSubItem.x, endSubItem.y]);
	        }
	      }
	    }

	    return {
	      fill: bgColor,
	      path: path
	    };
	  };

	  return Grid;
	}(Group);

	module.exports = Grid;

	/***/ }),
	/* 308 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the circle axis of polar coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Circle = function (_Base) {
	  _inherits(Circle, _Base);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      /**
	       * 坐标轴的类型
	       * @type {String}
	       */
	      type: 'circle',
	      /**
	       * 指定刻度之间的间距
	       * @type {Number}
	       */
	      tickInterval: null,
	      /**
	       * 开始弧度
	       * @type {Number}
	       */
	      startAngle: -Math.PI / 2,
	      /**
	       * 结束弧度
	       * @type {Number}
	       */
	      endAngle: Math.PI * 3 / 2,
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      /**
	       * 默认文本距离轴线的距离
	       * @type {Number}
	       */
	      _labelOffset: 5
	    });
	  };

	  Circle.prototype.parseTick = function parseTick(tick, index, length) {
	    return {
	      text: tick,
	      value: index / length
	    };
	  };

	  Circle.prototype._getCirclePoint = function _getCirclePoint(angle, radius) {
	    var self = this;
	    var center = self.get('center');
	    radius = radius || self.get('radius');
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Circle.prototype.getTickPoint = function getTickPoint(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getCirclePoint(angle);
	  };

	  Circle.prototype.getSideVector = function getSideVector(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = [point.x - center.x, point.y - center.y];
	    if (!Util.isNil(offset)) {
	      var vecLen = vec2.length(vector);
	      vec2.scale(vector, vector, offset / vecLen);
	    }
	    return vector;
	  };

	  Circle.prototype.getSidePoint = function getSidePoint(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);

	    return {
	      x: point.x + vector[0],
	      y: point.y + vector[1]
	    };
	  };

	  Circle.prototype.getTickEnd = function getTickEnd(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.length;
	    return self.getSidePoint(start, length);
	  };

	  Circle.prototype.getTextAnchor = function getTextAnchor(vector) {
	    var align = void 0;
	    if (Util.snapEqual(vector[0], 0)) {
	      align = 'center';
	    } else if (vector[0] > 0) {
	      align = 'left';
	    } else if (vector[0] < 0) {
	      align = 'right';
	    }
	    return align;
	  };

	  Circle.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var center = self.get('center');
	    var x = center.x;
	    var y = center.y;
	    var rx = self.get('radius');
	    var ry = rx;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var inner = self.get('inner');

	    var path = [];
	    if (Math.abs(endAngle - startAngle) === Math.PI * 2) {
	      path = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
	    } else {
	      var startPoint = self._getCirclePoint(startAngle);
	      var endPoint = self._getCirclePoint(endAngle);
	      var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;
	      var sweep = startAngle > endAngle ? 0 : 1;
	      if (!inner) {
	        path = [['M', x, y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', x, y]];
	      } else {
	        var innerStartVector = self.getSideVector(inner * rx, startPoint);
	        var innerEndVector = self.getSideVector(inner * rx, endPoint);
	        var innerStartPoint = {
	          x: innerStartVector[0] + x,
	          y: innerStartVector[1] + y
	        };
	        var innerEndPoint = {
	          x: innerEndVector[0] + x,
	          y: innerEndVector[1] + y
	        };

	        path = [['M', innerStartPoint.x, innerStartPoint.y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', innerEndPoint.x, innerEndPoint.y], ['A', rx * inner, ry * inner, 0, large, Math.abs(sweep - 1), innerStartPoint.x, innerStartPoint.y]];
	      }
	    }
	    return path;
	  };

	  Circle.prototype.addLabel = function addLabel(tick, point, index) {
	    var self = this;
	    var offset = self.get('label').offset || self.get('_labelOffset') || 0.001;
	    point = self.getSidePoint(point, offset);
	    _Base.prototype.addLabel.call(this, tick, point, index);
	  };

	  Circle.prototype.autoRotateLabels = function autoRotateLabels() {
	    var self = this;
	    var ticks = self.get('ticks');
	    var labelsGroup = self.get('labelsGroup');
	    if (labelsGroup && ticks.length > 12) {
	      // 小于12个文本时文本不旋转
	      var radius = self.get('radius');
	      var startAngle = self.get('startAngle');
	      var endAngle = self.get('endAngle');
	      var totalAngle = endAngle - startAngle;
	      var avgAngle = totalAngle / (ticks.length - 1);
	      var avgWidth = Math.sin(avgAngle / 2) * radius * 2;
	      var maxLength = self.getMaxLabelWidth(labelsGroup);
	      Util.each(labelsGroup.get('children'), function (label, index) {
	        var tick = ticks[index];
	        var angle = tick.value * totalAngle + startAngle;
	        var mode = angle % (Math.PI * 2);
	        if (maxLength < avgWidth) {
	          // 文本的最大宽度大于
	          if (mode <= 0) {
	            angle = angle + Math.PI;
	          }
	          if (mode > Math.PI) {
	            angle = angle - Math.PI;
	          }
	          angle = angle - Math.PI / 2;
	          label.attr('textAlign', 'center');
	        } else {
	          if (mode > Math.PI / 2) {
	            angle = angle - Math.PI;
	          } else if (mode < Math.PI / 2 * -1) {
	            angle = angle + Math.PI;
	          }
	        }
	        label.rotateAtStart(angle);
	      });
	    }
	  };

	  return Circle;
	}(Base);

	module.exports = Circle;

	/***/ }),
	/* 309 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the helix axis of helix coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil,
	    PathUtil = _require.PathUtil;

	var vec2 = MatrixUtil.vec2;

	var Helix = function (_Base) {
	  _inherits(Helix, _Base);

	  function Helix() {
	    _classCallCheck(this, Helix);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'helix',
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      startAngle: 1.25 * Math.PI,
	      endAngle: 7.25 * Math.PI,
	      // 螺旋系数
	      a: 0,
	      // 画布中心坐标
	      center: null,
	      // 坐标轴绘制起点
	      axisStart: null,
	      // 坐标轴的n个坐标点
	      crp: []
	    });
	  };

	  Helix.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var crp = self.get('crp');
	    var axisStart = self.get('axisStart');
	    var path = PathUtil.catmullRomToBezier(crp);
	    path.unshift(['M', axisStart.x, axisStart.y]);
	    return path;
	  };

	  Helix.prototype.getTickPoint = function getTickPoint(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getHelixPoint(angle);
	  };

	  Helix.prototype._getHelixPoint = function _getHelixPoint(angle) {
	    var self = this;
	    var center = self.get('center');
	    var a = self.get('a'); // 螺线系数
	    var radius = a * angle + self.get('inner'); // 螺线方程
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Helix.prototype.getSideVector = function getSideVector(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = [point.x - center.x, point.y - center.y];
	    if (offset) {
	      var vecLen = vec2.length(vector);
	      vec2.scale(vector, vector, offset / vecLen);
	    }
	    return vector;
	  };

	  Helix.prototype.getSidePoint = function getSidePoint(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);

	    return {
	      x: point.x + vector[0],
	      y: point.y + vector[1]
	    };
	  };

	  Helix.prototype.getTickEnd = function getTickEnd(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.length;
	    return self.getSidePoint(start, length);
	  };

	  return Helix;
	}(Base);

	module.exports = Helix;

	/***/ }),
	/* 310 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the axis of map coodinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil,
	    PathUtil = _require.PathUtil;

	var vec2 = MatrixUtil.vec2;

	var Polyline = function (_Base) {
	  _inherits(Polyline, _Base);

	  function Polyline() {
	    _classCallCheck(this, Polyline);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Polyline.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'polyline'
	    });
	  };

	  Polyline.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var tickPoints = self.get('tickPoints');
	    var start = self.get('start');
	    var end = self.get('end');
	    var points = [];
	    points.push(start.x);
	    points.push(start.y);
	    Util.each(tickPoints, function (tick) {
	      points.push(tick.x);
	      points.push(tick.y);
	    });
	    points.push(end.x);
	    points.push(end.y);

	    var path = PathUtil.catmullRomToBezier(points);
	    path.unshift(['M', start.x, start.y]);
	    return path;
	  };

	  Polyline.prototype.getTickPoint = function getTickPoint(value, index) {
	    var tickPoints = this.get('tickPoints');
	    return tickPoints[index];
	  };

	  Polyline.prototype.getTickEnd = function getTickEnd(start, value, index) {
	    var self = this;
	    var lineAttrs = self.get('tickLine');
	    var tickLength = value ? value : lineAttrs.length;
	    var offsetVector = self.getSideVector(tickLength, start, index);
	    return {
	      x: start.x + offsetVector[0],
	      y: start.y + offsetVector[1]
	    };
	  };

	  Polyline.prototype.getSideVector = function getSideVector(offset, point, index) {
	    var self = this;
	    var preTickPoint = void 0;
	    if (index === 0) {
	      preTickPoint = self.get('start');
	    } else {
	      var tickPoints = self.get('tickPoints');
	      preTickPoint = tickPoints[index - 1];
	    }

	    var vector = [point.x - preTickPoint.x, point.y - preTickPoint.y];
	    var normal = vec2.normalize([], vector);
	    var verticalVector = vec2.vertical([], normal, false);
	    return vec2.scale([], verticalVector, offset);
	  };

	  return Polyline;
	}(Base);

	module.exports = Polyline;

	/***/ }),
	/* 311 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Guide = __webpack_require__(312);
	var Global = __webpack_require__(2);

	var GuideController = function () {
	  function GuideController(cfg) {
	    _classCallCheck(this, GuideController);

	    this.guides = [];
	    this.options = [];
	    this.xScales = null;
	    this.yScales = null;
	    this.view = null;
	    this.frontGroup = null;
	    this.backGroup = null;
	    Util.mix(this, cfg);
	  }

	  GuideController.prototype._creatGuides = function _creatGuides() {
	    var self = this;
	    var options = this.options;
	    var xScales = this.xScales;
	    var yScales = this.yScales;
	    var view = this.view;
	    if (this.backContainer && view) {
	      this.backGroup = this.backContainer.addGroup({
	        viewId: view.get('_id')
	      });
	    }
	    if (this.frontContainer && view) {
	      this.frontGroup = this.frontContainer.addGroup({
	        viewId: view.get('_id')
	      });
	    }
	    options.forEach(function (option) {
	      var type = option.type;
	      var config = Util.deepMix({
	        xScales: xScales,
	        yScales: yScales,
	        view: view
	      }, Global.guide[type], option);
	      type = Util.upperFirst(type);
	      var guide = new Guide[type](config);
	      self.guides.push(guide);
	    });

	    return self.guides;
	  };

	  GuideController.prototype.line = function line() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'line'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.arc = function arc() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'arc'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.text = function text() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'text'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.image = function image() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'image'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.region = function region() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'region'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.regionFilter = function regionFilter() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'regionFilter'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.html = function html() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'html'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.render = function render(coord) {
	    var _this = this;

	    var self = this;
	    var guides = self._creatGuides();
	    var container = self.backGroup || this.backContainer;

	    Util.each(guides, function (guide) {
	      if (guide.top) {
	        // 默认 guide 绘制到 backPlot，用户也可以声明 top: true，显示在最上层
	        container = self.frontGroup || _this.frontContainer;
	      }
	      guide.render(coord, container);
	    });
	  };

	  GuideController.prototype.clear = function clear() {
	    this.options = [];
	    this.reset();
	  };

	  GuideController.prototype.changeVisible = function changeVisible(visible) {
	    var guides = this.guides;
	    Util.each(guides, function (guide) {
	      guide.setVisible(visible);
	    });
	  };

	  GuideController.prototype.reset = function reset() {
	    var guides = this.guides;
	    Util.each(guides, function (guide) {
	      guide.remove();
	    });
	    this.guides = [];
	    this.backGroup && this.backGroup.remove();
	    this.frontGroup && this.frontGroup.remove();
	  };

	  return GuideController;
	}();

	module.exports = GuideController;

	/***/ }),
	/* 312 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of guide
	 * @author sima.zhang
	 */
	module.exports = {
	  Line: __webpack_require__(313),
	  Text: __webpack_require__(314),
	  Image: __webpack_require__(315),
	  Region: __webpack_require__(316),
	  RegionFilter: __webpack_require__(317),
	  Html: __webpack_require__(318),
	  Arc: __webpack_require__(319)
	};

	/***/ }),
	/* 313 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the line guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Line = function (_Base) {
	  _inherits(Line, _Base);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'line',
	      /**
	       * 辅助线的起点位置
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助线的终点位置
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助线的图形样式
	       * @type {Object}
	       */
	      lineStyle: {
	        stroke: '#000',
	        lineWidth: 1
	      },
	      /**
	       * 辅助文本配置
	       * @type {Object}
	       */
	      text: {
	        position: 'end', // 文本的显示位置： start / center / end / 百分比
	        autoRotate: true, // 文本是否沿着辅助线的方向自动旋转
	        style: {
	          fill: '#999',
	          fontSize: 12,
	          fontWeight: 500,
	          fontFamily: 'sans-serif'
	        }, // 辅助文本的样式
	        content: null // 辅助文本的文字
	      }
	    });
	  };

	  Line.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var guideLineGroup = group.addGroup();

	    self._drawLines(start, end, guideLineGroup);
	    if (this.text && this.text.content) {
	      self._drawText(start, end, guideLineGroup);
	    }
	    self.el = guideLineGroup;
	  };

	  Line.prototype._drawLines = function _drawLines(start, end, group) {
	    var path = [['M', start.x, start.y], ['L', end.x, end.y]];
	    var guideLine = group.addShape('Path', {
	      attrs: Util.mix({
	        path: path
	      }, this.lineStyle)
	    });
	    guideLine.name = 'guide-line';
	    this.appendInfo && guideLine.setSilent('appendInfo', this.appendInfo);
	  };

	  Line.prototype._drawText = function _drawText(start, end, group) {
	    var textCfg = this.text;
	    var position = textCfg.position;
	    var textStyle = textCfg.style;

	    var percent = void 0;
	    if (position === 'start') {
	      percent = 0;
	    } else if (position === 'center') {
	      percent = 0.5;
	    } else if (Util.isString(position) && position.indexOf('%') !== -1) {
	      percent = parseInt(position, 10) / 100;
	    } else if (Util.isNumber(position)) {
	      percent = position;
	    } else {
	      percent = 1;
	    }

	    if (percent > 1 || percent < 0) {
	      percent = 1;
	    }

	    var cfg = {
	      x: start.x + (end.x - start.x) * percent,
	      y: start.y + (end.y - start.y) * percent
	    };

	    if (textCfg.offsetX) {
	      // 设置了偏移量
	      cfg.x += textCfg.offsetX;
	    }

	    if (textCfg.offsetY) {
	      // 设置了偏移量
	      cfg.y += textCfg.offsetY;
	    }

	    cfg.text = textCfg.content;
	    cfg = Util.mix({}, cfg, textStyle);
	    if (textCfg.autoRotate && Util.isNil(textStyle.rotate)) {
	      // 自动旋转且用户没有设置旋转角度
	      var angle = vec2.angleTo([end.x - start.x, end.y - start.y], [1, 0], 1);
	      cfg.rotate = angle;
	    } else if (!Util.isNil(textStyle.rotate)) {
	      // 用户设置了旋转角度
	      cfg.rotate = textStyle.rotate * Math.PI / 180;
	    }

	    var shape = group.addShape('Text', {
	      attrs: cfg
	    });
	    shape.name = 'guide-line-text';
	    this.appendInfo && shape.setSilent('appendInfo', this.appendInfo);
	  };

	  return Line;
	}(Base);

	module.exports = Line;

	/***/ }),
	/* 314 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the text guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Text = function (_Base) {
	  _inherits(Text, _Base);

	  function Text() {
	    _classCallCheck(this, Text);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Text.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'text',
	      /**
	       * 辅助文本的位置
	       * @type {Object | Function | Array}
	       */
	      position: null,
	      /**
	       * 辅助文本的显示文字
	       * @type {String}
	       */
	      content: null,
	      /**
	       * 辅助文本的样式配置
	       * @type {Object}
	       */
	      style: {
	        fill: '#999',
	        fontSize: 12,
	        fontWeight: 500,
	        textAlign: 'center'
	      },
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null,
	      top: true
	    });
	  };

	  Text.prototype.render = function render(coord, group) {
	    var self = this;
	    var position = self.position;
	    var point = self.parsePoint(coord, position);
	    var textStyle = Util.mix({}, this.style);

	    if (self.offsetX) {
	      point.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      point.y += self.offsetY;
	    }

	    if (textStyle.rotate) {
	      textStyle.rotate = textStyle.rotate * Math.PI / 180; // 将角度转换为弧度
	    }

	    var guideText = group.addShape('Text', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        text: self.content
	      }, textStyle, point)
	    });
	    guideText.name = 'guide-text';
	    self.appendInfo && guideText.setSilent('appendInfo', self.appendInfo);
	    self.el = guideText;
	  };

	  return Text;
	}(Base);

	module.exports = Text;

	/***/ }),
	/* 315 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the image guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Image = function (_Base) {
	  _inherits(Image, _Base);

	  function Image() {
	    _classCallCheck(this, Image);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Image.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'image',
	      zIndex: 1,
	      /**
	       * 辅助图片的起点位置
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助图片的终点位置
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助图片的地址
	       * @type {Strinf}
	       */
	      src: null,
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null
	    });
	  };

	  Image.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);

	    var cfg = {
	      x: start.x,
	      y: start.y
	    };
	    cfg.img = self.src;

	    if (!self.end) {
	      // 如果咩有指定结束点，则 start 为图片的左上角坐标
	      if (self.width) {
	        cfg.width = self.width;
	      }

	      if (self.height) {
	        cfg.height = self.height;
	      }
	    } else {
	      var end = self.parsePoint(coord, self.end);
	      // cfg.width = Math.abs(end.x - start.x);
	      // cfg.height = Math.abs(start.y - end.y);
	      cfg.width = end.x - start.x;
	      cfg.height = end.y - start.y;
	    }

	    if (self.offsetX) {
	      cfg.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      cfg.y += self.offsetY;
	    }

	    var imgGuide = group.addShape('Image', {
	      zIndex: 1,
	      attrs: cfg
	    });
	    imgGuide.name = 'guide-image';
	    self.appendInfo && imgGuide.setSilent('appendInfo', self.appendInfo);
	    self.el = imgGuide;
	  };

	  return Image;
	}(Base);

	module.exports = Image;

	/***/ }),
	/* 316 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the region guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Region = function (_Base) {
	  _inherits(Region, _Base);

	  function Region() {
	    _classCallCheck(this, Region);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Region.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'region',
	      zIndex: 1,
	      start: null,
	      end: null,
	      style: {
	        lineWidth: 0,
	        fill: '#CCD7EB',
	        opacity: 0.4
	      }
	    });
	  };

	  Region.prototype.render = function render(coord, group) {
	    var self = this;
	    var rectStyle = self.style;
	    var path = self._getPath(coord);

	    var regionGroup = group.addShape('path', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        path: path
	      }, rectStyle)
	    });
	    regionGroup.name = 'guide-region';
	    self.appendInfo && regionGroup.setSilent('appendInfo', self.appendInfo);
	    self.el = regionGroup;
	  };

	  Region.prototype._getPath = function _getPath(coord) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    path.push(['L', start.x, end.y]);
	    path.push(['z']);
	    return path;
	  };

	  return Region;
	}(Base);

	module.exports = Region;

	/***/ }),
	/* 317 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the region guide
	 * @author Ye Liu liuye10@yahoo.com
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var RegionFilter = function (_Base) {
	  _inherits(RegionFilter, _Base);

	  function RegionFilter() {
	    _classCallCheck(this, RegionFilter);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  RegionFilter.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'regionFilter',
	      zIndex: 1,
	      top: true,
	      start: null,
	      end: null,
	      color: null,
	      style: {
	        opacity: 1
	      }
	    });
	  };

	  RegionFilter.prototype.render = function render(coord, group) {
	    var self = this;
	    var view = self.view;
	    var layer = group.addGroup();
	    view.once('afterpaint', function () {
	      self._drawShapes(view, layer);
	      var clip = self._drawClip(coord, group);
	      layer.attr({ clip: clip });
	    });

	    self.appendInfo && layer.setSilent('appendInfo', self.appendInfo);
	    self.el = layer;
	  };

	  RegionFilter.prototype._drawShapes = function _drawShapes(view, layer) {
	    var self = this;
	    var output = [];
	    var geoms = view.getAllGeoms();
	    geoms.map(function (geom) {
	      var shapes = geom.getShapes();
	      shapes.map(function (shape) {
	        var shapeType = shape.type;
	        var shapeAttr = Util.cloneDeep(shape.get('attrs'));
	        self._adjustDisplay(shapeAttr);
	        var s = layer.addShape(shapeType, {
	          attrs: shapeAttr
	        });
	        output.push(s);
	        return shape;
	      });
	      return geom;
	    });
	    return output;
	  };

	  RegionFilter.prototype._drawClip = function _drawClip(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var c = group.addShape('rect', {
	      attrs: {
	        x: start.x,
	        y: start.y,
	        width: end.x - start.x,
	        height: end.y - start.y,
	        opacity: 1
	      }
	    });
	    return c;
	  };

	  RegionFilter.prototype._adjustDisplay = function _adjustDisplay(attr) {
	    var self = this;
	    var color = self.color;
	    if (attr.fill) {
	      attr.fill = color;
	    }
	    attr.stroke = color;
	  };

	  return RegionFilter;
	}(Base);

	module.exports = RegionFilter;

	/***/ }),
	/* 318 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the html guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var Base = __webpack_require__(9);

	var Html = function (_Base) {
	  _inherits(Html, _Base);

	  function Html() {
	    _classCallCheck(this, Html);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Html.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'html',
	      zIndex: 7,
	      /**
	       * dom 显示位置点
	       * @type {Object | Array}
	       */
	      position: null,
	      /**
	       * 水平方向对齐方式，可取值 'left'、'middle'、'right'
	       * @type {String}
	       */
	      alignX: 'middle',
	      /**
	       * 垂直方向对齐方式，可取值 'top'、'middle'、'bottom'
	       * @type {String}
	       */
	      alignY: 'middle',
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null,
	      /**
	      * html内容
	      *@type {String | Function}
	      */
	      html: null
	    });
	  };

	  Html.prototype.render = function render(coord, group) {
	    var self = this;
	    var position = self.parsePoint(coord, self.position);

	    var parentNode = group.get('canvas').get('el').parentNode;
	    var wrapperNode = DomUtil.createDom('<div class="g-guide"></div>');
	    parentNode.appendChild(wrapperNode);

	    var html = self.html;
	    if (Util.isFunction(html)) {
	      html = html(self.xScales, self.yScales);
	    }
	    var htmlNode = DomUtil.createDom(html);
	    wrapperNode.appendChild(htmlNode);
	    self._setDomPosition(wrapperNode, htmlNode, position);
	    self.el = wrapperNode;
	  };

	  Html.prototype._setDomPosition = function _setDomPosition(parentDom, childDom, point) {
	    var self = this;
	    var alignX = self.alignX;
	    var alignY = self.alignY;
	    var domWidth = DomUtil.getOuterWidth(childDom);
	    var domHeight = DomUtil.getOuterHeight(childDom);

	    var position = {
	      x: point.x,
	      y: point.y
	    };

	    if (alignX === 'middle' && alignY === 'top') {
	      position.x -= Util.round(domWidth / 2);
	    } else if (alignX === 'middle' && alignY === 'bottom') {
	      position.x -= Util.round(domWidth / 2);
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'left' && alignY === 'bottom') {
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'left' && alignY === 'middle') {
	      position.y -= Util.round(domHeight / 2);
	    } else if (alignX === 'left' && alignY === 'top') {
	      position.x = point.x;
	      position.y = point.y;
	    } else if (alignX === 'right' && alignY === 'bottom') {
	      position.x -= Util.round(domWidth);
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'right' && alignY === 'middle') {
	      position.x -= Util.round(domWidth);
	      position.y -= Util.round(domHeight / 2);
	    } else if (alignX === 'right' && alignY === 'top') {
	      position.x -= Util.round(domWidth);
	    } else {
	      // 默认位于中心点
	      position.x -= Util.round(domWidth / 2);
	      position.y -= Util.round(domHeight / 2);
	    }

	    if (self.offsetX) {
	      position.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      position.y += self.offsetY;
	    }

	    DomUtil.modifyCSS(parentDom, {
	      position: 'absolute',
	      top: Math.round(position.y) + 'px',
	      left: Math.round(position.x) + 'px',
	      visibility: 'visible',
	      zIndex: self.zIndex
	    });
	  };

	  Html.prototype.remove = function remove() {
	    var self = this;
	    var el = self.el;
	    if (el) {
	      el.parentNode.removeChild(el);
	    }
	  };

	  return Html;
	}(Base);

	module.exports = Html;

	/***/ }),
	/* 319 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the arc guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Arc = function (_Base) {
	  _inherits(Arc, _Base);

	  function Arc() {
	    _classCallCheck(this, Arc);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Arc.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'arc',
	      /**
	       * 辅助弧线的起始点
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助弧线的终止点
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助文本的样式配置
	       * @type {Object}
	       */
	      style: {
	        stroke: '#999',
	        lineWidth: 1
	      }
	    });
	  };

	  Arc.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var coordCenter = coord.getCenter();
	    var radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));
	    var startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);
	    var endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);

	    var arcShape = group.addShape('arc', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        x: coordCenter.x,
	        y: coordCenter.y,
	        r: radius,
	        startAngle: startAngle,
	        endAngle: endAngle
	      }, self.style)
	    });
	    arcShape.name = 'guide-arc';
	    self.appendInfo && arcShape.setSilent('appendInfo', self.appendInfo);
	    self.el = arcShape;
	  };

	  return Arc;
	}(Base);

	module.exports = Arc;

	/***/ }),
	/* 320 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Legend = __webpack_require__(321);
	var Shape = __webpack_require__(10);

	var FIELD_ORIGIN = '_origin';
	var MARKER_SIZE = 4.5;
	var requireAnimationFrameFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

	function _snapEqual(v1, v2, scale) {
	  var isEqual = void 0;
	  if (Util.isNil(scale)) {
	    return false;
	  }
	  v1 = scale.translate(v1);
	  v2 = scale.translate(v2);
	  if (scale.isCategory) {
	    isEqual = v1 === v2;
	  } else {
	    isEqual = Math.abs(v1 - v2) <= 1;
	  }
	  return isEqual;
	}

	function findGeom(geoms, value) {
	  var rst = void 0;
	  Util.each(geoms, function (geom) {
	    if (geom.get('visible')) {
	      var yScale = geom.getYScale();
	      if (yScale.field === value) {
	        rst = geom;
	        return;
	      }
	    }
	  });

	  return rst;
	}

	var LegendController = function () {
	  function LegendController(cfg) {
	    _classCallCheck(this, LegendController);

	    this.options = {};
	    Util.mix(this, cfg);
	    this.clear();
	    var chart = this.chart;
	    this.container = chart.get('frontPlot');
	    this.plotRange = chart.get('plotRange');
	  }

	  LegendController.prototype.clear = function clear() {
	    var legends = this.legends;
	    this.backRange = null;
	    Util.each(legends, function (legendItems) {
	      Util.each(legendItems, function (legend) {
	        legend.remove();
	      });
	    });
	    this.legends = {};
	  };

	  // 获取坐标轴等背景元素占的范围，防止遮挡坐标轴


	  LegendController.prototype.getBackRange = function getBackRange() {
	    var backRange = this.backRange;
	    if (!backRange) {
	      backRange = this.chart.get('backPlot').getBBox();
	      if (backRange.minX === Infinity) {
	        // 如果背景不占宽高，则直接使用 plotRange
	        var plotRange = this.plotRange;
	        backRange = {
	          minX: plotRange.tl.x,
	          minY: plotRange.tl.y,
	          maxX: plotRange.br.x,
	          maxY: plotRange.br.y
	        };
	      }
	      this.backRange = backRange;
	    }
	    return backRange;
	  };

	  LegendController.prototype._isFieldInView = function _isFieldInView(field, value, view) {
	    var flag = false;
	    var scales = view.get('scales');
	    var fieldScale = scales[field];
	    if (fieldScale && fieldScale.values) {
	      flag = Util.inArray(fieldScale.values, value);
	    }

	    return flag;
	  };

	  LegendController.prototype._bindClickEvent = function _bindClickEvent(legend, scale, filterVals) {
	    var self = this;
	    var chart = self.chart;
	    var views = chart.get('views');
	    var field = scale.field;
	    var options = self.options;

	    legend.on('itemclick', function (ev) {
	      if (options.onClick) {
	        // 用户自定义了图例点击事件
	        options.onClick(ev);
	      } else {
	        var item = ev.item;
	        var checked = ev.checked;
	        var isSingeSelected = legend.get('selectedMode') === 'single'; // 图例的选中模式
	        var clickedValue = item.dataValue; // import: 需要取该图例项原始的数值

	        if (checked) {
	          filterVals.push(clickedValue);
	          if (self._isFieldInView(field, clickedValue, chart)) {
	            chart.filter(field, function (field) {
	              return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
	            });
	          }
	          Util.each(views, function (view) {
	            if (self._isFieldInView(field, clickedValue, view)) {
	              view.filter(field, function (field) {
	                return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
	              });
	            }
	          });
	        } else if (!isSingeSelected) {
	          Util.Array.remove(filterVals, clickedValue);

	          if (self._isFieldInView(field, clickedValue, chart)) {
	            chart.filter(field, function (field) {
	              return Util.inArray(filterVals, field);
	            });
	          }
	          Util.each(views, function (view) {
	            if (self._isFieldInView(field, clickedValue, view)) {
	              view.filter(field, function (field) {
	                return Util.inArray(filterVals, field);
	              });
	            }
	          });
	        }
	        chart.set('keepLegend', true); // 图例不重新渲染
	        chart.set('keepPadding', true); // 边框不重新计算
	        chart.repaint();
	        chart.set('keepPadding', false);
	        chart.set('keepLegend', false);
	      }
	    });
	  };

	  LegendController.prototype._filterLabels = function _filterLabels(shape, geom, visible) {
	    if (shape.get('gLabel')) {
	      shape.get('gLabel').set('visible', visible);
	    } else {
	      var labelCfg = geom.get('labelCfg');
	      if (labelCfg && labelCfg.fields && labelCfg.fields.length > 0) {
	        var xScale = geom.getXScale();
	        var yScale = geom.getYScale();
	        var xField = xScale.field;
	        var yField = yScale.field;
	        var shapeData = shape.get('origin')._origin;
	        var labelContainer = geom.get('labelContainer');
	        var labels = labelContainer.get('labelsGroup').get('children');
	        Util.each(labels, function (label) {
	          var labelData = label.get('origin') || [];
	          if (labelData[xField] === shapeData[xField] && labelData[yField] === shapeData[yField]) {
	            label.set('visible', visible);
	            shape.set('gLabel', label);
	          }
	        });
	      }
	    }
	  };

	  LegendController.prototype._bindFilterEvent = function _bindFilterEvent(legend, scale) {
	    var self = this;
	    var chart = this.chart;
	    var field = scale.field;
	    legend.on('itemfilter', function (ev) {
	      var range = ev.range;
	      chart.filterShape(function (obj, shape, geom) {
	        if (obj[field]) {
	          var filtered = obj[field] >= range[0] && obj[field] <= range[1];
	          // shape 带 label，则还需要隐藏 label
	          self._filterLabels(shape, geom, filtered);
	          return filtered;
	        }
	        return true;
	      });
	      var geoms = chart.getAllGeoms() || [];

	      var _loop = function _loop(i) {
	        var geom = geoms[i];
	        if (geom.get('type') === 'heatmap') {
	          requireAnimationFrameFn(function () {
	            geom.drawWithRange(range);
	          });
	        }
	      };

	      for (var i = 0; i < geoms.length; i++) {
	        _loop(i);
	      }
	    });
	  };

	  LegendController.prototype._getShapeData = function _getShapeData(shape) {
	    var originData = shape.get('origin');

	    if (Util.isArray(originData)) {
	      originData = originData[0];
	    }
	    return originData[FIELD_ORIGIN];
	  };

	  LegendController.prototype._bindHoverEvent = function _bindHoverEvent(legend, field) {
	    var self = this;
	    var chart = self.chart;
	    var geoms = chart.getAllGeoms();
	    var options = self.options;
	    var canvas = chart.get('canvas');
	    legend.on('itemhover', function (ev) {
	      var value = ev.item.value;
	      var pre = self.pre;
	      if (!pre) {
	        Util.each(geoms, function (geom) {
	          var shapeContainer = geom.get('shapeContainer');
	          var shapes = geom.getShapes();
	          var activeShapes = [];
	          if (field) {
	            var scale = geom.get('scales')[field];
	            Util.each(shapes, function (shape) {
	              var origin = self._getShapeData(shape);
	              if (origin && _snapEqual(origin[field], value, scale)) {
	                activeShapes.push(shape);
	              }
	            });
	          } else if (geom.getYScale().field === value) {
	            activeShapes = shapes;
	          }

	          if (!Util.isEmpty(activeShapes)) {
	            ev.shapes = activeShapes;
	            ev.geom = geom;
	            if (options.onHover) {
	              options.onHover(ev);
	              shapeContainer.sort();
	              canvas.draw();
	            } else {
	              geom.setShapesActived(activeShapes);
	            }
	          }
	        });
	        self.pre = value;
	      } else if (pre === value) {
	        return;
	      }
	    });

	    legend.on('itemunhover', function () {
	      self.pre = null;
	      Util.each(geoms, function (geom) {
	        if (geom.get('activeShapes')) {
	          geom.clearActivedShapes();
	          canvas.draw();
	        }
	      });
	    });
	  };

	  LegendController.prototype._isFiltered = function _isFiltered(scale, values, value) {
	    if (!scale.isCategory) {
	      return true;
	    }
	    var rst = false;
	    value = scale.invert(value);
	    Util.each(values, function (val) {
	      rst = rst || scale.getText(val) === scale.getText(value);
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  };

	  LegendController.prototype._alignLegend = function _alignLegend(legend, pre, region, position) {
	    var self = this;
	    var container = self.container;
	    var canvas = container.get('canvas');
	    var width = canvas.get('width');
	    var height = canvas.get('height');
	    var totalRegion = self.totalRegion;
	    var plotRange = self.plotRange;
	    var backRange = self.getBackRange(); // 背景占得范围
	    var offsetX = legend.get('offsetX') || 0;
	    var offsetY = legend.get('offsetY') || 0;
	    // const offset = Util.isNil(legend.get('offset')) ? MARGIN : legend.get('offset');
	    var legendHeight = legend.getHeight();
	    var legendWidth = legend.getWidth();
	    var borderMargin = Global.legend.margin;
	    var innerMargin = Global.legend.legendMargin;
	    var legendNum = self.legends[position].length;
	    var posArray = position.split('-');

	    var x = 0;
	    var y = 0;
	    var tempoRegion = legendNum > 1 ? totalRegion : region;

	    if (posArray[0] === 'left' || posArray[0] === 'right') {
	      height = plotRange.br.y;
	      x = self._getXAlign(posArray[0], width, region, backRange, legendWidth, borderMargin);
	      if (pre) {
	        y = pre.get('y') + pre.getHeight() + innerMargin;
	      } else {
	        y = self._getYAlignVertical(posArray[1], height, tempoRegion, backRange, 0, borderMargin, canvas.get('height'));
	      }
	    } else if (posArray[0] === 'top' || posArray[0] === 'bottom') {
	      y = self._getYAlignHorizontal(posArray[0], height, region, backRange, legendHeight, borderMargin);
	      if (pre) {
	        var preWidth = pre.getWidth();
	        x = pre.get('x') + preWidth + innerMargin;
	      } else {
	        x = self._getXAlign(posArray[1], width, tempoRegion, backRange, 0, borderMargin);
	        if (posArray[1] === 'right') x = plotRange.br.x - tempoRegion.totalWidth;
	      }
	    }

	    legend.move(x + offsetX, y + offsetY);
	  };

	  LegendController.prototype._getXAlign = function _getXAlign(pos, width, region, backRange, legendWidth, borderMargin) {
	    var x = pos === 'left' ? backRange.minX - legendWidth - borderMargin[3] : backRange.maxX + borderMargin[1];
	    if (pos === 'center') {
	      x = (width - region.totalWidth) / 2;
	    }
	    return x;
	  };

	  LegendController.prototype._getYAlignHorizontal = function _getYAlignHorizontal(pos, height, region, backRange, legendHeight, borderMargin) {
	    var y = pos === 'top' ? backRange.minY - legendHeight - borderMargin[0] : backRange.maxY + borderMargin[2];
	    return y;
	  };

	  LegendController.prototype._getYAlignVertical = function _getYAlignVertical(pos, height, region, backRange, legendHeight, borderMargin, canvasHeight) {
	    var y = pos === 'top' ? backRange.minY - legendHeight - borderMargin[0] : height - region.totalHeight;
	    if (pos === 'center') {
	      y = (canvasHeight - region.totalHeight) / 2;
	    }
	    return y;
	  };

	  LegendController.prototype._getSubRegion = function _getSubRegion(legends) {
	    var maxWidth = 0;
	    var maxHeight = 0;
	    var totalWidth = 0;
	    var totalHeight = 0;
	    Util.each(legends, function (legend) {
	      var width = legend.getWidth();
	      var height = legend.getHeight();
	      if (maxWidth < width) {
	        maxWidth = width;
	      }
	      totalWidth += width;
	      if (maxHeight < height) {
	        maxHeight = height;
	      }
	      totalHeight += height;
	    });
	    return {
	      maxWidth: maxWidth,
	      totalWidth: totalWidth,
	      maxHeight: maxHeight,
	      totalHeight: totalHeight
	    };
	  };

	  LegendController.prototype._getRegion = function _getRegion() {
	    var self = this;
	    var legends = self.legends;
	    var innerMargin = Global.legend.legendMargin;
	    var subs = [];
	    var totalWidth = 0;
	    var totalHeight = 0;
	    Util.each(legends, function (legendItems) {
	      var subRegion = self._getSubRegion(legendItems);
	      subs.push(subRegion);
	      totalWidth += subRegion.totalWidth + innerMargin;
	      totalHeight += subRegion.totalHeight + innerMargin;
	    });
	    return {
	      totalWidth: totalWidth,
	      totalHeight: totalHeight,
	      subs: subs
	    };
	  };

	  LegendController.prototype._addCategroyLegend = function _addCategroyLegend(scale, attr, geom, filterVals, position) {
	    var self = this;
	    var field = scale.field;
	    var legendOptions = self.options;
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var container = self.container;
	    var items = [];
	    var ticks = scale.getTicks();

	    var isByAttr = true;
	    var shapeType = geom.get('shapeType') || 'point';
	    var shape = geom.getDefaultValue('shape') || 'circle';
	    if (legendOptions[field] && legendOptions[field].marker) {
	      // 用户为 field 对应的图例定义了 marker
	      shape = legendOptions[field].marker;
	      shapeType = 'point';
	      isByAttr = false;
	    } else if (legendOptions.marker) {
	      shape = legendOptions.marker;
	      shapeType = 'point';
	      isByAttr = false;
	    }

	    var chart = self.chart;
	    var canvas = chart.get('canvas');
	    var plotRange = self.plotRange;
	    var posArray = position.split('-');
	    var maxLength = posArray[0] === 'right' || posArray[0] === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');
	    Util.each(ticks, function (tick) {
	      var text = tick.text;
	      var name = text;
	      var scaleValue = tick.value;
	      var value = scale.invert(scaleValue);
	      var cfg = {
	        isInCircle: geom.isInCircle()
	      };
	      var checked = filterVals ? self._isFiltered(scale, filterVals, scaleValue) : true;

	      var colorAttr = geom.getAttr('color');
	      var shapeAttr = geom.getAttr('shape');
	      if (colorAttr) {
	        // 存在颜色映射
	        if (colorAttr.callback && colorAttr.callback.length > 1) {
	          // 多参数映射，阻止程序报错
	          var restArgs = Array(colorAttr.callback.length - 1).fill('');
	          cfg.color = colorAttr.mapping.apply(colorAttr, [value].concat(restArgs)).join('') || Global.defaultColor;
	        } else {
	          cfg.color = colorAttr.mapping(value).join('') || Global.defaultColor;
	        }
	      }
	      if (isByAttr && shapeAttr) {
	        // 存在形状映射
	        if (shapeAttr.callback && shapeAttr.callback.length > 1) {
	          // 多参数映射，阻止程序报错
	          var _restArgs = Array(shapeAttr.callback.length - 1).fill('');
	          shape = shapeAttr.mapping.apply(shapeAttr, [value].concat(_restArgs)).join('');
	        } else {
	          shape = shapeAttr.mapping(value).join('');
	        }
	      }

	      var shapeObject = Shape.getShapeFactory(shapeType);
	      var marker = shapeObject.getMarkerCfg(shape, cfg);

	      if (Util.isFunction(shape)) {
	        marker.symbol = shape;
	      }

	      items.push({
	        value: name, // 图例项显示文本的内容
	        dataValue: value, // 图例项对应原始数据中的数值
	        checked: checked,
	        marker: marker
	      });
	    });

	    var legendCfg = Util.deepMix({}, Global.legend[posArray[0]], legendOptions[field] || legendOptions, {
	      viewId: chart.get('_id'),
	      maxLength: maxLength,
	      items: items
	    });
	    if (legendCfg.title) {
	      Util.deepMix(legendCfg, {
	        title: {
	          text: scale.alias || scale.field
	        }
	      });
	    }

	    var legend = void 0;
	    if (self._isTailLegend(legendOptions, geom)) {
	      legendCfg.chart = self.chart;
	      legendCfg.geom = geom;
	      legend = container.addGroup(Legend.Tail, legendCfg);
	    } else {
	      legend = container.addGroup(Legend.Category, legendCfg);
	    }
	    self._bindClickEvent(legend, scale, filterVals);
	    legends[position].push(legend);
	    return legend;
	  };

	  LegendController.prototype._addContinuousLegend = function _addContinuousLegend(scale, attr, position) {
	    var self = this;
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var container = self.container;
	    var field = scale.field;
	    var ticks = scale.getTicks();
	    var items = [];
	    var legend = void 0;
	    var minValue = void 0;
	    var maxValue = void 0;

	    Util.each(ticks, function (tick) {
	      var scaleValue = tick.value;
	      var invertValue = scale.invert(scaleValue);
	      var attrValue = attr.mapping(invertValue).join('');

	      items.push({
	        value: tick.tickValue, // tick.text
	        attrValue: attrValue,
	        scaleValue: scaleValue
	      });
	      if (scaleValue === 0) {
	        minValue = true;
	      }
	      if (scaleValue === 1) {
	        maxValue = true;
	      }
	    });

	    if (!minValue) {
	      items.push({
	        value: scale.min,
	        attrValue: attr.mapping(0).join(''),
	        scaleValue: 0
	      });
	    }
	    if (!maxValue) {
	      items.push({
	        value: scale.max,
	        attrValue: attr.mapping(1).join(''),
	        scaleValue: 1
	      });
	    }

	    var options = self.options;

	    var posArray = position.split('-');
	    var defaultCfg = Global.legend[posArray[0]];
	    if (options && options.slidable === false || options[field] && options[field].slidable === false) {
	      defaultCfg = Util.mix({}, defaultCfg, Global.legend.gradient);
	    }

	    var legendCfg = Util.deepMix({}, defaultCfg, options[field] || options, {
	      items: items,
	      attr: attr,
	      numberFormatter: scale.formatter
	    });
	    if (legendCfg.title) {
	      Util.deepMix(legendCfg, {
	        title: {
	          text: scale.alias || scale.field
	        }
	      });
	    }

	    if (attr.type === 'color') {
	      legend = container.addGroup(Legend.Color, legendCfg);
	    } else if (attr.type === 'size') {
	      legend = container.addGroup(Legend.Size, legendCfg);
	    }
	    self._bindFilterEvent(legend, scale);
	    legends[position].push(legend);
	    return legend;
	  };

	  LegendController.prototype._isTailLegend = function _isTailLegend(opt, geom) {
	    if (opt.hasOwnProperty('attachLast') && opt.attachLast) {
	      var geomType = geom.get('type');
	      if (geomType === 'line' || geomType === 'lineStack' || geomType === 'area' || geomType === 'areaStack') return true;
	    }
	    return false;
	  };

	  LegendController.prototype._adjustPosition = function _adjustPosition(position, isTailLegend) {
	    var pos = void 0;
	    if (isTailLegend) {
	      pos = 'right-top';
	    } else if (Util.isArray(position)) {
	      pos = String(position[0]) + '-' + String(position[1]);
	    } else {
	      var posArr = position.split('-');
	      if (posArr.length === 1) {
	        // 只用了left/right/bottom/top一个位置定位
	        if (posArr[0] === 'left') pos = 'left-bottom';
	        if (posArr[0] === 'right') pos = 'right-bottom';
	        if (posArr[0] === 'top') pos = 'top-center';
	        if (posArr[0] === 'bottom') pos = 'bottom-center';
	      } else {
	        pos = position;
	      }
	    }
	    return pos;
	  };

	  LegendController.prototype.addLegend = function addLegend(scale, attr, geom, filterVals) {
	    var self = this;
	    var legendOptions = self.options;
	    var field = scale.field;
	    var fieldOption = legendOptions[field];

	    if (fieldOption === false) {
	      // 如果不显示此图例
	      return null;
	    }

	    if (fieldOption && fieldOption.custom) {
	      self.addCustomLegend(field);
	    } else {
	      var position = legendOptions.position || Global.defaultLegendPosition;
	      position = self._adjustPosition(position, self._isTailLegend(legendOptions, geom));
	      if (fieldOption && fieldOption.position) {
	        // 如果对某个图例单独设置 position，则对 position 重新赋值
	        position = fieldOption.position;
	      }

	      var legend = void 0;
	      if (scale.isLinear) {
	        legend = self._addContinuousLegend(scale, attr, position);
	      } else {
	        legend = self._addCategroyLegend(scale, attr, geom, filterVals, position);
	      }
	      self._bindHoverEvent(legend, field);
	    }
	  };

	  /**
	   * 自定义图例
	   * @param {string} field 自定义图例的数据字段名，可以为空
	   */


	  LegendController.prototype.addCustomLegend = function addCustomLegend(field) {
	    var self = this;
	    var chart = self.chart;
	    var container = self.container;
	    var legendOptions = self.options;

	    if (field) {
	      legendOptions = legendOptions[field];
	    }

	    var position = legendOptions.position || Global.defaultLegendPosition;
	    position = self._adjustPosition(position);
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var items = legendOptions.items;
	    if (!items) {
	      return;
	    }

	    var geoms = chart.getAllGeoms();
	    Util.each(items, function (item) {
	      var geom = findGeom(geoms, item.value);
	      if (!Util.isObject(item.marker)) {
	        item.marker = {
	          symbol: item.marker ? item.marker : 'circle',
	          fill: item.fill,
	          radius: MARKER_SIZE
	        };
	      } else {
	        item.marker.radius = item.marker.radius || MARKER_SIZE;
	      }
	      item.checked = Util.isNil(item.checked) ? true : item.checked;
	      item.geom = geom;
	    });

	    var canvas = chart.get('canvas');
	    var plotRange = self.plotRange;
	    var posArray = position.split('-');
	    var maxLength = posArray[0] === 'right' || posArray[0] === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');

	    var legendCfg = Util.deepMix({}, Global.legend[posArray[0]], legendOptions, {
	      maxLength: maxLength,
	      items: items
	    });

	    var legend = container.addGroup(Legend.Category, legendCfg);
	    legends[position].push(legend);

	    legend.on('itemclick', function (ev) {
	      if (legendOptions.onClick) {
	        // 用户自定义了图例点击事件
	        legendOptions.onClick(ev);
	      }
	    });

	    self._bindHoverEvent(legend);
	  };

	  LegendController.prototype.alignLegends = function alignLegends() {
	    var self = this;
	    var legends = self.legends;
	    var totalRegion = self._getRegion(legends);
	    self.totalRegion = totalRegion;
	    var i = 0;
	    Util.each(legends, function (legendItems, position) {
	      var region = /* self._getRegion(legendItems)*/totalRegion.subs[i];
	      Util.each(legendItems, function (legend, index) {
	        var pre = legendItems[index - 1];
	        if (!(legend.get('useHtml') && !legend.get('autoPosition'))) {
	          self._alignLegend(legend, pre, region, position);
	        }
	      });
	      i++;
	    });

	    return this;
	  };

	  return LegendController;
	}();

	module.exports = LegendController;

	/***/ }),
	/* 321 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The entry of legend
	 * @author sima.zhang
	 */
	module.exports = {
	  Category: __webpack_require__(110), // 分类图例
	  Tail: __webpack_require__(322), // 尾部跟随图例
	  Color: __webpack_require__(323), // 颜色图例
	  Size: __webpack_require__(325) // 大小图例
	};

	/***/ }),
	/* 322 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of tail legend
	 * @author Ye Liu
	 */

	var Util = __webpack_require__(0);
	var Category = __webpack_require__(110);

	var Tail = function (_Category) {
	  _inherits(Tail, _Category);

	  function Tail() {
	    _classCallCheck(this, Tail);

	    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
	  }

	  Tail.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Category.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type标识
	       * @type {String}
	       */
	      type: 'tail-legend',
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical'
	    });
	  };

	  Tail.prototype._addItemMarker = function _addItemMarker(item, itemGroup) {
	    var unCheckColor = this.get('unCheckColor');
	    var markerAttrs = Util.mix({}, item.marker, {
	      x: item.marker.radius,
	      y: 0
	    });

	    if (!item.checked) {
	      if (markerAttrs.fill) {
	        markerAttrs.fill = unCheckColor;
	      }
	      if (markerAttrs.stroke) {
	        markerAttrs.stroke = unCheckColor;
	      }
	    }

	    var markerShape = itemGroup.addShape('marker', {
	      type: 'marker',
	      attrs: markerAttrs
	    });
	    markerShape.attr('cursor', 'pointer');
	    markerShape.name = 'legend-marker';

	    return markerShape;
	  };

	  Tail.prototype._addItemText = function _addItemText(item, itemGroup, startX) {
	    var self = this;
	    var unCheckColor = self.get('unCheckColor');
	    var textStyle = self.get('textStyle');
	    var textAttrs = Util.mix({}, textStyle, {
	      x: startX,
	      y: 0,
	      text: self._formatItemValue(item.value)
	    });
	    if (!item.checked) {
	      Util.mix(textAttrs, {
	        fill: unCheckColor
	      });
	    }
	    var textShape = itemGroup.addShape('text', {
	      attrs: textAttrs
	    });
	    textShape.attr('cursor', 'pointer');
	    textShape.name = 'legend-text';
	    self.get('appendInfo') && textShape.setSilent('appendInfo', this.get('appendInfo'));
	  };

	  Tail.prototype._addItemWrapper = function _addItemWrapper(item, itemGroup, x, y) {
	    var self = this;
	    var bbox = itemGroup.getBBox();
	    var itemWidth = self.get('itemWidth');
	    var wrapperShape = itemGroup.addShape('rect', {
	      attrs: {
	        x: x,
	        y: y - bbox.height / 2,
	        fill: '#fff',
	        fillOpacity: 0,
	        width: itemWidth || bbox.width,
	        height: bbox.height
	      }
	    });
	    wrapperShape.attr('cursor', 'pointer');
	    wrapperShape.setSilent('origin', item); // 保存图例项相关的数据，便于事件操作
	    wrapperShape.name = 'legend-item';
	    this.get('appendInfo') && wrapperShape.setSilent('appendInfo', this.get('appendInfo'));
	  };

	  Tail.prototype._addItem = function _addItem(item) {
	    var self = this;
	    var itemsGroup = self.get('itemsGroup');
	    var x = 0;
	    var y = 0;
	    var itemGroup = itemsGroup.addGroup({
	      x: x,
	      y: y,
	      value: item.value,
	      scaleValue: item.scaleValue,
	      checked: item.checked
	    });
	    itemGroup.translate(x, y);
	    itemGroup.setSilent('viewId', itemsGroup.get('viewId'));
	    var wordSpace = this.get('_wordSpaceing');
	    var startX = 0;
	    // 如果有marker添加marker
	    if (item.marker) {
	      var markerShape = self._addItemMarker(item, itemGroup);
	      startX += markerShape.getBBox().width + wordSpace;
	    }
	    // text
	    self._addItemText(item, itemGroup, startX);
	    // 添加一个包围矩形，用于事件支持
	    self._addItemWrapper(item, itemGroup, x, y);
	    itemGroup.name = 'legendGroup';
	    return itemGroup;
	  };

	  Tail.prototype._adjust = function _adjust() {
	    var self = this;
	    var geom = self.get('geom');
	    if (geom) {
	      var dataArray = self.get('geom').get('dataArray');
	      var groups = this.get('itemsGroup').get('children');
	      var index = 0;
	      Util.each(groups, function (groupItem) {
	        var dArray = dataArray[index];
	        var lastY = dArray[dArray.length - 1].y;
	        if (Util.isArray(lastY)) {
	          lastY = lastY[1];
	        }
	        var groupHeight = groupItem.getBBox().height;
	        var x = groupItem.get('x');
	        groupItem.translate(x, lastY - groupHeight);
	        index++;
	      });
	    }
	  };

	  Tail.prototype._renderUI = function _renderUI() {
	    var self = this;
	    if (!self.get('useHtml')) {
	      // super._renderUI();
	      self._renderItems();
	      self.get('autoWrap') && self._adjustItems(); // 默认自动换行
	      self._renderBack();
	    } else {
	      // 使用 html 渲染图例
	      self._renderHTML();
	    }
	    var chart = self.get('chart');
	    chart.once('afterpaint', function () {
	      self._adjust();
	    });
	  };

	  return Tail;
	}(Category);

	module.exports = Tail;

	/***/ }),
	/* 323 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of the gradient color legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Continuous = __webpack_require__(112);
	var ColorUtil = __webpack_require__(63); // TODO： 这个 Util 是否可换个位置

	var Color = function (_Continuous) {
	  _inherits(Color, _Continuous);

	  function Color() {
	    _classCallCheck(this, Color);

	    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
	  }

	  Color.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'color-legend',
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical',
	      labelOffset: 15,
	      lineStyle: {
	        lineWidth: 1,
	        stroke: '#fff'
	      }
	    });
	  };

	  Color.prototype._renderSliderShape = function _renderSliderShape() {
	    var slider = this.get('slider');
	    var backgroundElement = slider.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var layout = this.get('layout');
	    var items = this.get('items');
	    var fill = '';
	    var rgbColor = void 0;

	    if (layout === 'vertical') {
	      fill += 'l (90) ';
	      Util.each(items, function (v) {
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
	      });
	    } else {
	      fill += 'l (0) ';
	      Util.each(items, function (v) {
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += v.scaleValue + ':' + rgbColor + ' ';
	      });
	    }
	    return this._addBackground(backgroundElement, 'Rect', {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      fill: fill,
	      strokeOpacity: 0
	    });
	  };

	  Color.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var titleShape = this.get('titleShape');
	    var titleGap = this.get('titleGap');
	    titleGap = titleShape ? titleShape.getBBox().height + titleGap : titleGap;
	    var width = this.get('width');
	    var height = this.get('height');
	    var layout = this.get('layout');
	    var items = this.get('items');
	    var fill = '';
	    var rgbColor = void 0;

	    var path = [];
	    var bgGroup = this.addGroup();

	    if (layout === 'vertical') {
	      fill += 'l (90) ';
	      Util.each(items, function (v, index) {
	        if (index !== 0 && index !== items.length - 1) {
	          path.push(['M', 0, height - v.scaleValue * height]);
	          path.push(['L', width, height - v.scaleValue * height]);
	        }

	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
	        bgGroup.addShape('text', {
	          attrs: Util.mix({}, {
	            x: width + self.get('labelOffset') / 2,
	            y: height - v.scaleValue * height,
	            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
	          }, self.get('textStyle'), {
	            textAlign: 'start'
	          })
	        });
	      });
	    } else {
	      fill += 'l (0) ';
	      Util.each(items, function (v, index) {
	        if (index !== 0 && index !== items.length - 1) {
	          path.push(['M', v.scaleValue * width, 0]);
	          path.push(['L', v.scaleValue * width, height]);
	        }
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += v.scaleValue + ':' + rgbColor + ' ';
	        bgGroup.addShape('text', {
	          attrs: Util.mix({}, {
	            x: v.scaleValue * width,
	            y: height + self.get('labelOffset'),
	            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
	          }, self.get('textStyle'))
	        });
	      });
	    }
	    bgGroup.addShape('rect', {
	      attrs: {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height,
	        fill: fill,
	        strokeOpacity: 0
	      }
	    });

	    bgGroup.addShape('path', {
	      attrs: Util.mix({
	        path: path
	      }, this.get('lineStyle'))
	    });

	    bgGroup.move(0, titleGap);
	  };

	  return Color;
	}(Continuous);

	module.exports = Color;

	/***/ }),
	/* 324 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of slider
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    Group = _require.Group,
	    DomUtil = _require.DomUtil;

	var Slider = function (_Group) {
	  _inherits(Slider, _Group);

	  function Slider() {
	    _classCallCheck(this, Slider);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Slider.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 范围
	       * @type {Array}
	       */
	      range: null,
	      /**
	       * 中滑块属性
	       * @type {ATTRS}
	       */
	      middleAttr: null,
	      /**
	       * 背景
	       * @type {G-Element}
	       */
	      backgroundElement: null,
	      /**
	       * 下滑块
	       * @type {G-Element}
	       */
	      minHandleElement: null,
	      /**
	       * 上滑块
	       * @type {G-Element}
	       */
	      maxHandleElement: null,
	      /**
	       * 中块
	       * @type {G-Element}
	       */
	      middleHandleElement: null,
	      /**
	       * 当前的激活的元素
	       * @type {G-Element}
	       */
	      currentTarget: null,
	      /**
	       * 布局方式： horizontal，vertical
	       * @type {String}
	       */
	      layout: 'vertical',
	      /**
	       * 宽
	       * @type {Number}
	       */
	      width: null,
	      /**
	       * 高
	       * @type {Number}
	       */
	      height: null,
	      /**
	       * 当前的PageX
	       * @type {Number}
	       */
	      pageX: null,
	      /**
	       * 当前的PageY
	       * @type {Number}
	       */
	      pageY: null
	    };
	  };

	  Slider.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var layout = this.get('layout');
	    var backgroundElement = this.get('backgroundElement');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.addShape('rect', {
	      attrs: this.get('middleAttr')
	    });
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';

	    this.add([backgroundElement, minHandleElement, maxHandleElement]);
	    this.set('middleHandleElement', middleHandleElement);
	    backgroundElement.set('zIndex', 0);
	    middleHandleElement.set('zIndex', 1);
	    minHandleElement.set('zIndex', 2);
	    maxHandleElement.set('zIndex', 2);
	    middleHandleElement.attr('cursor', trigerCursor);
	    minHandleElement.attr('cursor', trigerCursor);
	    maxHandleElement.attr('cursor', trigerCursor);
	    this.sort();
	  };

	  Slider.prototype._renderUI = function _renderUI() {
	    if (this.get('layout') === 'horizontal') {
	      this._renderHorizontal();
	    } else {
	      this._renderVertical();
	    }
	  };

	  Slider.prototype._transform = function _transform(layout) {
	    var range = this.get('range');
	    var minRatio = range[0] / 100;
	    var maxRatio = range[1] / 100;
	    var width = this.get('width');
	    var height = this.get('height');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.get('middleHandleElement');

	    minHandleElement.initTransform();
	    maxHandleElement.initTransform();

	    if (layout === 'horizontal') {
	      middleHandleElement.attr({
	        x: width * minRatio,
	        y: 0,
	        width: (maxRatio - minRatio) * width,
	        height: height
	      });
	      minHandleElement.translate(minRatio * width, height);
	      maxHandleElement.translate(maxRatio * width, height);
	    } else {
	      middleHandleElement.attr({
	        x: 0,
	        y: height * (1 - maxRatio),
	        width: width,
	        height: (maxRatio - minRatio) * height
	      });
	      minHandleElement.translate(width / 2, (1 - minRatio) * height);
	      maxHandleElement.translate(width / 2, (1 - maxRatio) * height);
	    }
	  };

	  Slider.prototype._renderHorizontal = function _renderHorizontal() {
	    this._transform('horizontal');
	  };

	  Slider.prototype._renderVertical = function _renderVertical() {
	    this._transform('vertical');
	  };

	  Slider.prototype._bindUI = function _bindUI() {
	    this.on('mousedown', Util.wrapBehavior(this, '_onMouseDown'));
	  };

	  Slider.prototype._isElement = function _isElement(target, name) {
	    // 判断是否是该元素
	    var element = this.get(name);
	    if (target === element) {
	      return true;
	    }
	    if (element.isGroup) {
	      var elementChildren = element.get('children');
	      return elementChildren.indexOf(target) > -1;
	    }
	    return false;
	  };

	  Slider.prototype._getRange = function _getRange(diff, range) {
	    var rst = diff + range;
	    rst = rst > 100 ? 100 : rst;
	    rst = rst < 0 ? 0 : rst;
	    return rst;
	  };

	  Slider.prototype._updateStatus = function _updateStatus(dim, ev) {
	    var totalLength = dim === 'x' ? this.get('width') : this.get('height');
	    dim = Util.upperFirst(dim);
	    var range = this.get('range');
	    var page = this.get('page' + dim);
	    var currentTarget = this.get('currentTarget');
	    var rangeStash = this.get('rangeStash');
	    var layout = this.get('layout');
	    var sign = layout === 'vertical' ? -1 : 1;
	    var currentPage = ev['page' + dim];
	    var diffPage = currentPage - page;
	    var diffRange = diffPage / totalLength * 100 * sign;
	    var diffStashRange = void 0;

	    if (range[1] <= range[0]) {
	      if (this._isElement(currentTarget, 'minHandleElement') || this._isElement(currentTarget, 'maxHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	        range[1] = this._getRange(diffRange, range[0]);
	      }
	    } else {
	      if (this._isElement(currentTarget, 'minHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	      }
	      if (this._isElement(currentTarget, 'maxHandleElement')) {
	        range[1] = this._getRange(diffRange, range[1]);
	      }
	    }

	    if (this._isElement(currentTarget, 'middleHandleElement')) {
	      diffStashRange = rangeStash[1] - rangeStash[0];
	      range[0] = this._getRange(diffRange, range[0]);
	      range[1] = range[0] + diffStashRange;
	      if (range[1] > 100) {
	        range[1] = 100;
	        range[0] = range[1] - diffStashRange;
	      }
	    }

	    this.emit('sliderchange', {
	      range: range
	    });

	    this.set('page' + dim, currentPage);
	    this._renderUI();
	    this.get('canvas').draw(); // need delete
	    return;
	  };

	  Slider.prototype._onMouseDown = function _onMouseDown(ev) {
	    var currentTarget = ev.currentTarget;
	    var originEvent = ev.event;
	    var range = this.get('range');
	    originEvent.stopPropagation();
	    originEvent.preventDefault();
	    this.set('pageX', originEvent.pageX);
	    this.set('pageY', originEvent.pageY);
	    this.set('currentTarget', currentTarget);
	    this.set('rangeStash', [range[0], range[1]]);
	    this._bindCanvasEvents();
	  };

	  Slider.prototype._bindCanvasEvents = function _bindCanvasEvents() {
	    var containerDOM = this.get('canvas').get('containerDOM');
	    this.onMouseMoveListener = DomUtil.addEventListener(containerDOM, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
	    this.onMouseUpListener = DomUtil.addEventListener(containerDOM, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
	  };

	  Slider.prototype._onCanvasMouseMove = function _onCanvasMouseMove(ev) {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._updateStatus('x', ev);
	    } else {
	      this._updateStatus('y', ev);
	    }
	  };

	  Slider.prototype._onCanvasMouseUp = function _onCanvasMouseUp() {
	    this._removeDocumentEvents();
	  };

	  Slider.prototype._removeDocumentEvents = function _removeDocumentEvents() {
	    this.onMouseMoveListener.remove();
	    this.onMouseUpListener.remove();
	  };

	  return Slider;
	}(Group);

	module.exports = Slider;

	/***/ }),
	/* 325 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of the size legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Continuous = __webpack_require__(112);
	var CIRCLE_GAP = 8;

	var Size = function (_Continuous) {
	  _inherits(Size, _Continuous);

	  function Size() {
	    _classCallCheck(this, Size);

	    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
	  }

	  Size.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'size-legend',
	      width: 100,
	      height: 200,
	      _circleStyle: {
	        stroke: '#4E7CCC',
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      textStyle: {
	        fill: '#333',
	        textAlign: 'start',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      }
	    });
	  };

	  Size.prototype._renderSliderShape = function _renderSliderShape() {
	    var slider = this.get('slider');
	    var backgroundElement = slider.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var inRange = this.get('inRange');
	    var layout = this.get('layout');
	    var points = layout === 'vertical' ? [[0, 0], [width, 0], [width, height]] : [[0, height], [width, 0], [width, height]];

	    return this._addBackground(backgroundElement, 'Polygon', Util.mix({
	      points: points
	    }, inRange));
	  };

	  Size.prototype._addCircle = function _addCircle(x, y, r, text, maxWidth) {
	    var group = this.addGroup();
	    var circleStyle = this.get('_circleStyle');
	    var textStyle = this.get('textStyle');
	    var titleShape = this.get('titleShape');
	    var titleGap = this.get('titleGap');
	    if (titleShape) {
	      titleGap += titleShape.getBBox().height;
	    }

	    group.addShape('circle', {
	      attrs: Util.mix({
	        x: x,
	        y: y + titleGap,
	        r: r === 0 ? 1 : r
	      }, circleStyle)
	    });
	    group.addShape('text', {
	      attrs: Util.mix({
	        x: maxWidth + 5,
	        y: y + titleGap,
	        text: text === 0 ? '0' : text
	      }, textStyle)
	    });
	  };

	  Size.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var minRadius = this.get('firstItem').attrValue * 1;
	    var maxRadius = this.get('lastItem').attrValue * 1;
	    var medianRadius = (minRadius + maxRadius) / 2;
	    self._addCircle(maxRadius, maxRadius, maxRadius, medianRadius, 2 * maxRadius);
	    self._addCircle(maxRadius, maxRadius * 2 + CIRCLE_GAP + medianRadius, medianRadius, (minRadius + medianRadius) / 2, 2 * maxRadius);
	    self._addCircle(maxRadius, (maxRadius + CIRCLE_GAP + medianRadius) * 2 + minRadius, minRadius, minRadius, 2 * maxRadius);
	  };

	  return Size;
	}(Continuous);

	module.exports = Size;

	/***/ }),
	/* 326 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of tooltip
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Tooltip = __webpack_require__(327);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var Vector2 = MatrixUtil.vec2;

	var TYPE_SHOW_MARKERS = ['line', 'area', 'path', 'areaStack']; // 默认展示 tooltip marker 的几何图形
	var TYPE_SHOW_CROSSHAIRS = ['line', 'area']; // 默认展示十字瞄准线的几何图形

	// TODO FIXME this is HARD CODING
	var IGNORE_TOOLTIP_ITEM_PROPERTIES = ['marker', 'showMarker'];

	function _indexOfArray(items, item) {
	  var rst = -1;
	  Util.each(items, function (sub, index) {
	    var isEqual = true;
	    for (var key in item) {
	      if (item.hasOwnProperty(key) && IGNORE_TOOLTIP_ITEM_PROPERTIES.indexOf(key) === -1) {
	        if (!Util.isObject(item[key]) && item[key] !== sub[key]) {
	          isEqual = false;
	          break;
	        }
	      }
	    }
	    if (isEqual) {
	      rst = index;
	      return false;
	    }
	  });
	  return rst;
	}

	// 判断是否有样式
	function _hasClass(dom, className) {
	  if (!dom) {
	    return false;
	  }
	  var cls = '';
	  if (!dom.className) return false;
	  if (!Util.isNil(dom.className.baseVal)) {
	    cls = dom.className.baseVal;
	  } else {
	    cls = dom.className;
	  }
	  return cls.indexOf(className) !== -1;
	}

	function _isParent(dom, cls) {
	  var parent = dom.parentNode;
	  var rst = false;
	  while (parent && parent !== document.body) {
	    if (_hasClass(parent, cls)) {
	      rst = true;
	      break;
	    }
	    parent = parent.parentNode;
	  }
	  return rst;
	}

	// 去除重复的值, 去除不同图形相同数据，只展示一份即可
	function _uniqItems(items) {
	  var tmp = [];
	  Util.each(items, function (item) {
	    var index = _indexOfArray(tmp, item);
	    if (index === -1) {
	      tmp.push(item);
	    } else {
	      tmp[index] = item;
	    }
	  });
	  return tmp;
	}

	var TooltipController = function () {
	  function TooltipController(cfg) {
	    _classCallCheck(this, TooltipController);

	    Util.assign(this, cfg);
	    this.timeStamp = 0;
	  }

	  TooltipController.prototype._normalizeEvent = function _normalizeEvent(event) {
	    var chart = this.chart;
	    var canvas = this._getCanvas();
	    var point = canvas.getPointByClient(event.clientX, event.clientY);
	    var pixelRatio = canvas.get('pixelRatio');
	    point.x = point.x / pixelRatio;
	    point.y = point.y / pixelRatio;
	    var views = chart.getViewsByPoint(point);
	    point.views = views;
	    return point;
	  };

	  TooltipController.prototype._getCanvas = function _getCanvas() {
	    return this.chart.get('canvas');
	  };

	  TooltipController.prototype._getTriggerEvent = function _getTriggerEvent() {
	    var options = this.options;
	    var triggerOn = options.triggerOn;
	    var eventName = void 0;

	    if (!triggerOn || triggerOn === 'mousemove') {
	      eventName = 'plotmove';
	    } else if (triggerOn === 'click') {
	      eventName = 'plotclick';
	    } else if (triggerOn === 'none') {
	      eventName = null;
	    }

	    return eventName;
	  };

	  TooltipController.prototype._getDefaultTooltipCfg = function _getDefaultTooltipCfg() {
	    var self = this;
	    var options = self.options;
	    var defaultCfg = Util.mix({}, Global.tooltip);
	    var chart = self.chart;
	    var geoms = chart.getAllGeoms().filter(function (geom) {
	      return geom.get('visible');
	    });
	    var shapes = [];
	    Util.each(geoms, function (geom) {
	      var type = geom.get('type');
	      var adjusts = geom.get('adjusts');
	      var isSymmetric = false;
	      if (adjusts) {
	        Util.each(adjusts, function (adjust) {
	          if (adjust.type === 'symmetric' || adjust.type === 'Symmetric') {
	            isSymmetric = true;
	            return false;
	          }
	        });
	      }
	      if (Util.indexOf(shapes, type) === -1 && !isSymmetric) {
	        shapes.push(type);
	      }
	    });

	    var crosshairsCfg = void 0;
	    if (geoms.length && geoms[0].get('coord') && geoms[0].get('coord').type === 'cartesian' && shapes.length === 1) {
	      if (shapes[0] === 'interval' && options.shared !== false) {
	        // 直角坐标系下 interval 的 crosshair 为矩形背景框
	        crosshairsCfg = {
	          zIndex: 0, // 矩形背景框不可覆盖 geom
	          crosshairs: Global.tooltipCrosshairsRect
	        };
	      } else if (Util.indexOf(TYPE_SHOW_CROSSHAIRS, shapes[0]) > -1) {
	        crosshairsCfg = {
	          crosshairs: Global.tooltipCrosshairsLine
	        };
	      }
	    }

	    return Util.mix(defaultCfg, crosshairsCfg, {
	      isTransposed: geoms.length && geoms[0].get('coord') ? geoms[0].get('coord').isTransposed : false
	    });
	  };

	  TooltipController.prototype._bindEvent = function _bindEvent() {
	    var chart = this.chart;
	    var triggerEvent = this._getTriggerEvent();
	    if (triggerEvent) {
	      chart.on(triggerEvent, Util.wrapBehavior(this, 'onMouseMove'));
	      chart.on('plotleave', Util.wrapBehavior(this, 'onMouseOut'));
	    }
	  };

	  TooltipController.prototype._offEvent = function _offEvent() {
	    var chart = this.chart;
	    var triggerEvent = this._getTriggerEvent();
	    if (triggerEvent) {
	      chart.off(triggerEvent, Util.getWrapBehavior(this, 'onMouseMove'));
	      chart.off('plotleave', Util.getWrapBehavior(this, 'onMouseOut'));
	    }
	  };

	  TooltipController.prototype._setTooltip = function _setTooltip(point, items, markersItems, target) {
	    var self = this;
	    var tooltip = self.tooltip;
	    var prePoint = self.prePoint;
	    if (!prePoint || prePoint.x !== point.x || prePoint.y !== point.y) {
	      items = _uniqItems(items);
	      self.prePoint = point;

	      var chart = self.chart;
	      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	      if (!tooltip.get('visible')) {
	        chart.emit('tooltip:show', {
	          x: x,
	          y: y,
	          tooltip: tooltip
	        });
	      }
	      var first = items[0];
	      var title = first.title || first.name;
	      if (tooltip.isContentChange(title, items)) {
	        chart.emit('tooltip:change', {
	          tooltip: tooltip,
	          x: x,
	          y: y,
	          items: items
	        });
	        // bugfix: when set the title in the tooltip:change event does not take effect.
	        title = items[0].title || items[0].name;
	        tooltip.setContent(title, items);
	        if (!Util.isEmpty(markersItems)) {
	          if (self.options.hideMarkers === true) {
	            // 不展示 tooltip marker
	            tooltip.set('markerItems', markersItems); // 用于 tooltip 辅助线的定位
	          } else {
	            tooltip.setMarkers(markersItems, Global.tooltipMarker);
	          }
	        } else {
	          tooltip.clearMarkers();
	        }
	      }
	      tooltip.setPosition(x, y, target);
	      tooltip.show();
	    }
	  };

	  TooltipController.prototype.hideTooltip = function hideTooltip() {
	    var tooltip = this.tooltip;
	    var chart = this.chart;
	    var canvas = this._getCanvas();
	    this.prePoint = null;
	    tooltip.hide();
	    chart.emit('tooltip:hide', {
	      tooltip: tooltip
	    });
	    canvas.draw();
	  };

	  TooltipController.prototype.onMouseMove = function onMouseMove(ev) {
	    if (Util.isEmpty(ev.views)) {
	      return;
	    }

	    var lastTimeStamp = this.timeStamp;
	    var timeStamp = +new Date();
	    var point = {
	      x: ev.x,
	      y: ev.y
	    };
	    if (timeStamp - lastTimeStamp > 16) {
	      var target = void 0;
	      if (ev.shape && Util.inArray(['point', 'interval', 'polygon', 'schema'], ev.shape.name)) {
	        target = ev.shape;
	      }
	      this.showTooltip(point, ev.views, target);
	      this.timeStamp = timeStamp;
	    }
	  };

	  TooltipController.prototype.onMouseOut = function onMouseOut(ev) {
	    var tooltip = this.tooltip;
	    var canvas = this._getCanvas();
	    if (!tooltip.get('visible')) {
	      return;
	    }
	    if (ev && ev.target !== canvas) {
	      return;
	    }
	    if (ev && ev.toElement && (_hasClass(ev.toElement, 'g2-tooltip') || _isParent(ev.toElement, 'g2-tooltip'))) {
	      return;
	    }
	    this.hideTooltip();
	  };

	  TooltipController.prototype.renderTooltip = function renderTooltip() {
	    var self = this;
	    if (self.tooltip) {
	      // tooltip 对象已经创建
	      return;
	    }
	    var chart = self.chart;
	    var canvas = self._getCanvas();
	    var defaultCfg = self._getDefaultTooltipCfg();
	    var options = self.options;
	    options = Util.deepMix({
	      plotRange: chart.get('plotRange'),
	      capture: false,
	      canvas: canvas,
	      frontPlot: chart.get('frontPlot'),
	      backPlot: chart.get('backPlot')
	    }, defaultCfg, options);
	    if (options.crosshairs && options.crosshairs.type === 'rect') {
	      options.zIndex = 0; // toolip 背景框不可遮盖住 geom，防止用户配置了 crosshairs
	    }

	    options.visible = false;
	    if (options.shared === false && Util.isNil(options.position)) {
	      options.position = 'top';
	    }

	    var tooltip = new Tooltip(options);
	    self.tooltip = tooltip;

	    var triggerEvent = self._getTriggerEvent();
	    if (!tooltip.get('enterable') && triggerEvent === 'plotmove') {
	      // 鼠标不允许进入 tooltip 容器
	      var tooltipContainer = tooltip.get('container');
	      if (tooltipContainer) {
	        tooltipContainer.onmousemove = function (e) {
	          // 避免 tooltip 频繁闪烁
	          var eventObj = self._normalizeEvent(e);
	          chart.emit(triggerEvent, eventObj);
	        };
	      }
	    }
	    self._bindEvent();
	  };

	  TooltipController.prototype.showTooltip = function showTooltip(point, views, target) {
	    var self = this;
	    if (Util.isEmpty(views) || !point) {
	      return;
	    }
	    if (!this.tooltip) {
	      this.renderTooltip(); // 如果一开始 tooltip 关闭，用户重新调用的时候需要先生成 tooltip
	    }
	    var options = self.options;
	    var markersItems = [];
	    var items = [];

	    Util.each(views, function (view) {
	      if (!view.get('tooltipEnable')) {
	        // 如果不显示tooltip，则跳过
	        return true;
	      }
	      var geoms = view.get('geoms');
	      var coord = view.get('coord');
	      Util.each(geoms, function (geom) {
	        var type = geom.get('type');
	        if (geom.get('visible') && geom.get('tooltipCfg') !== false) {
	          var dataArray = geom.get('dataArray');
	          if (geom.isShareTooltip() || options.shared === false && Util.inArray(['area', 'line', 'path'], type)) {
	            Util.each(dataArray, function (obj) {
	              var tmpPoint = geom.findPoint(point, obj);
	              if (tmpPoint) {
	                var subItems = geom.getTipItems(tmpPoint, options.title);
	                if (Util.indexOf(TYPE_SHOW_MARKERS, type) !== -1) {
	                  Util.each(subItems, function (v) {
	                    var point = v.point;
	                    if (point && point.x && point.y) {
	                      // hotfix: make sure there is no null value
	                      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	                      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	                      point = coord.applyMatrix(x, y, 1);
	                      v.x = point[0];
	                      v.y = point[1];
	                      v.showMarker = true;
	                      markersItems.push(v);
	                    }
	                  });
	                }
	                items = items.concat(subItems);
	              }
	            });
	          } else {
	            var geomContainer = geom.get('shapeContainer');
	            var canvas = geomContainer.get('canvas');
	            var pixelRatio = canvas.get('pixelRatio');
	            var shape = geomContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
	            if (shape && shape.get('visible') && shape.get('origin')) {
	              items = geom.getTipItems(shape.get('origin'), options.title);
	            }
	          }
	        }
	      });

	      Util.each(items, function (item) {
	        var point = item.point;
	        var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	        var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	        point = coord.applyMatrix(x, y, 1);
	        item.x = point[0];
	        item.y = point[1];
	      });
	    });

	    if (items.length) {
	      var first = items[0];

	      // bugfix: multiple tooltip items with different titles
	      if (!items.every(function (item) {
	        return item.title === first.title;
	      })) {
	        var nearestItem = first;
	        var nearestDistance = Infinity;
	        items.forEach(function (item) {
	          var distance = Vector2.distance([point.x, point.y], [item.x, item.y]);
	          if (distance < nearestDistance) {
	            nearestDistance = distance;
	            nearestItem = item;
	          }
	        });
	        items = items.filter(function (item) {
	          return item.title === nearestItem.title;
	        });
	        markersItems = markersItems.filter(function (item) {
	          return item.title === nearestItem.title;
	        });
	      }

	      if (options.shared === false && items.length > 1) {
	        var snapItem = items[0];
	        var min = Math.abs(point.y - snapItem.y);
	        Util.each(items, function (aItem) {
	          if (Math.abs(point.y - aItem.y) <= min) {
	            snapItem = aItem;
	            min = Math.abs(point.y - aItem.y);
	          }
	        });
	        if (snapItem && snapItem.x && snapItem.y) {
	          markersItems = [snapItem];
	        }
	        items = [snapItem];
	      }
	      // 3.0 采用当前鼠标位置作为 tooltip 的参考点
	      // if (!Util.isEmpty(markersItems)) {
	      //   point = markersItems[0];
	      // }
	      self._setTooltip(point, items, markersItems, target);
	    } else {
	      self.hideTooltip();
	    }
	  };

	  TooltipController.prototype.clear = function clear() {
	    var tooltip = this.tooltip;
	    tooltip && tooltip.destroy();
	    this.tooltip = null;
	    this.prePoint = null;
	    this._offEvent();
	  };

	  return TooltipController;
	}();

	module.exports = TooltipController;

	/***/ }),
	/* 327 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of tooltip
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(58);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var CONTAINER_CLASS = 'g2-tooltip';
	var TITLE_CLASS = 'g2-tooltip-title';
	var LIST_CLASS = 'g2-tooltip-list';
	var MARKER_CLASS = 'g2-tooltip-marker';
	var LIST_ITEM_CLASS = 'g2-tooltip-list-item';

	function find(dom, cls) {
	  return dom.getElementsByClassName(cls)[0];
	}

	function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	  var width = el.clientWidth;
	  var height = el.clientHeight;
	  var gap = 20;

	  if (x + width + gap > viewWidth) {
	    x -= width + gap;
	    x = x < 0 ? 0 : x;
	  } else {
	    x += gap;
	  }
	  if (y + height + gap > viewHeight) {
	    y -= height + gap;
	    y = x < 0 ? 0 : y;
	  } else {
	    y += gap;
	  }
	  return [x, y];
	}

	function calcTooltipPosition(x, y, position, dom, target) {
	  var domWidth = dom.clientWidth;
	  var domHeight = dom.clientHeight;
	  var rectWidth = 0;
	  var rectHeight = 0;
	  var gap = 20;

	  if (target) {
	    var rect = target.getBBox();
	    rectWidth = rect.width;
	    rectHeight = rect.height;
	    x = rect.x;
	    y = rect.y;
	    gap = 5;
	  }
	  switch (position) {
	    case 'inside':
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'top':
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y - domHeight - gap;
	      break;
	    case 'left':
	      x = x - domWidth - gap;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'right':
	      x = x + rectWidth + gap;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'bottom':
	    default:
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y + rectHeight + gap;
	      break;
	  }
	  return [x, y];
	}

	function confineTooltipPosition(x, y, el, plotRange) {
	  var gap = 20;
	  var width = el.clientWidth;
	  var height = el.clientHeight;
	  if (x + width > plotRange.tr.x) {
	    x -= width + 2 * gap;
	  }

	  if (x < plotRange.tl.x) {
	    x = plotRange.tl.x;
	  }

	  if (y + height > plotRange.bl.y) {
	    y -= height + 2 * gap;
	  }

	  if (y < plotRange.tl.y) {
	    y = plotRange.tl.y;
	  }

	  return [x, y];
	}

	var Tooltip = function (_Base) {
	  _inherits(Tooltip, _Base);

	  Tooltip.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 右下角坐标
	       * @type {Number}
	       */
	      x: 0,
	      /**
	       * y 右下角坐标
	       * @type {Number}
	       */
	      y: 0,
	      /**
	       * tooltip 记录项
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 是否展示 title
	       * @type {Boolean}
	       */
	      showTitle: true,
	      /**
	       * tooltip 辅助线配置
	       * @type {Object}
	       */
	      crosshairs: null,
	      /**
	       * 视图范围
	       * @type {Object}
	       */
	      plotRange: null,
	      /**
	       * x轴上，移动到位置的偏移量
	       * @type {Number}
	       */
	      offset: 10,
	      /**
	       * 时间戳
	       * @type {Number}
	       */
	      timeStamp: 0,
	      /**
	       * tooltip 容器模板
	       * @type {String}
	       */
	      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<div class="' + TITLE_CLASS + '"></div>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
	      /**
	       * tooltip 列表项模板
	       * @type {String}
	       */
	      itemTpl: '<li data-index={index}>' + '<span style="background-color:{color};" class=' + MARKER_CLASS + '></span>' + '{name}: {value}</li>',
	      /**
	       * 将 tooltip 展示在指定区域内
	       * @type {Boolean}
	       */
	      inPlot: true,
	      /**
	       * tooltip 内容跟随鼠标移动
	       * @type {Boolean}
	       */
	      follow: true,
	      /**
	       * 是否允许鼠标停留在 tooltip 上，默认不允许
	       * @type {Boolean}
	       */
	      enterable: false
	    };
	  };

	  Tooltip.prototype._initTooltipWrapper = function _initTooltipWrapper() {
	    var self = this;
	    var containerTpl = self.get('containerTpl');
	    var outterNode = self.get('canvas').get('el').parentNode;
	    var container = void 0;
	    if (/^\#/.test(containerTpl)) {
	      // 如果传入 dom 节点的 id
	      var id = containerTpl.replace('#', '');
	      container = document.getElementById(id);
	    } else {
	      container = DomUtil.createDom(containerTpl);
	      DomUtil.modifyCSS(container, self.get(CONTAINER_CLASS));
	      outterNode.appendChild(container);
	      outterNode.style.position = 'relative';
	    }
	    self.set('container', container);
	  };

	  Tooltip.prototype._init = function _init() {
	    var crosshairs = this.get('crosshairs');
	    var frontPlot = this.get('frontPlot');
	    var backPlot = this.get('backPlot');
	    var crosshairsGroup = void 0;

	    if (crosshairs) {
	      if (crosshairs.type === 'rect') {
	        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsRect, crosshairs));
	        crosshairsGroup = backPlot.addGroup({
	          zIndex: 0
	        });
	      } else {
	        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsLine, crosshairs));
	        crosshairsGroup = frontPlot.addGroup();
	      }
	    }

	    this.set('crosshairsGroup', crosshairsGroup);
	    this._initTooltipWrapper();
	  };

	  function Tooltip(cfg) {
	    _classCallCheck(this, Tooltip);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init(); // 初始化属性

	    if (_this.get('items')) {
	      _this._renderTooltip();
	    }
	    _this._renderCrosshairs();
	    return _this;
	  }

	  Tooltip.prototype._clearDom = function _clearDom() {
	    var container = this.get('container');
	    var titleDom = find(container, TITLE_CLASS);
	    var listDom = find(container, LIST_CLASS);
	    if (titleDom) {
	      titleDom.innerHTML = '';
	    }
	    if (listDom) {
	      listDom.innerHTML = '';
	    }
	  };

	  Tooltip.prototype._addItem = function _addItem(item, index) {
	    var itemTpl = this.get('itemTpl'); // TODO: 有可能是个回调函数

	    var itemDiv = Util.substitute(itemTpl, Util.mix({
	      index: index
	    }, item));

	    var itemDOM = DomUtil.createDom(itemDiv);
	    DomUtil.modifyCSS(itemDOM, this.get(LIST_ITEM_CLASS));
	    var markerDom = find(itemDOM, MARKER_CLASS);
	    if (markerDom) {
	      DomUtil.modifyCSS(markerDom, this.get(MARKER_CLASS));
	    }

	    return itemDOM;
	  };

	  Tooltip.prototype._renderTooltip = function _renderTooltip() {
	    var self = this;
	    var showTitle = self.get('showTitle');
	    var titleContent = self.get('titleContent');
	    var container = self.get('container');
	    var titleDom = find(container, TITLE_CLASS);
	    var listDom = find(container, LIST_CLASS);
	    var items = self.get('items');
	    self._clearDom();

	    if (titleDom && showTitle) {
	      DomUtil.modifyCSS(titleDom, self.get(TITLE_CLASS));
	      titleDom.innerHTML = titleContent;
	    }

	    if (listDom) {
	      DomUtil.modifyCSS(listDom, self.get(LIST_CLASS));
	      Util.each(items, function (item, index) {
	        listDom.appendChild(self._addItem(item, index));
	      });
	    }
	  };

	  Tooltip.prototype._clearCrosshairsGroup = function _clearCrosshairsGroup() {
	    var crosshairsGroup = this.get('crosshairsGroup');
	    this.set('crossLineShapeX', null);
	    this.set('crossLineShapeY', null);
	    this.set('crosshairsRectShape', null);
	    crosshairsGroup.clear();
	  };

	  Tooltip.prototype._renderCrosshairs = function _renderCrosshairs() {
	    var crosshairs = this.get('crosshairs');
	    var canvas = this.get('canvas');
	    var plotRange = this.get('plotRange');
	    var isTransposed = this.get('isTransposed');
	    if (crosshairs) {
	      this._clearCrosshairsGroup();
	      switch (crosshairs.type) {
	        case 'x':
	          this._renderHorizontalLine(canvas, plotRange);
	          break;
	        case 'y':
	          this._renderVerticalLine(canvas, plotRange);
	          break;
	        case 'cross':
	          this._renderHorizontalLine(canvas, plotRange);
	          this._renderVerticalLine(canvas, plotRange);
	          break;
	        case 'rect':
	          this._renderBackground(canvas, plotRange);
	          break;
	        default:
	          isTransposed ? this._renderHorizontalLine(canvas, plotRange) : this._renderVerticalLine(canvas, plotRange);
	      }
	    }
	  };

	  Tooltip.prototype._addCrossLineShape = function _addCrossLineShape(attrs, type) {
	    var crosshairsGroup = this.get('crosshairsGroup');
	    var shape = crosshairsGroup.addShape('line', {
	      capture: false,
	      attrs: attrs
	    });
	    shape.hide();
	    this.set('crossLineShape' + type, shape);
	    return shape;
	  };

	  Tooltip.prototype._renderVerticalLine = function _renderVerticalLine(canvas, plotRange) {
	    var _get = this.get('crosshairs'),
	        style = _get.style;

	    var attrs = Util.mix({
	      x1: 0,
	      y1: plotRange ? plotRange.bl.y : canvas.get('height'),
	      x2: 0,
	      y2: plotRange ? plotRange.tl.y : 0
	    }, style);

	    this._addCrossLineShape(attrs, 'Y');
	  };

	  Tooltip.prototype._renderHorizontalLine = function _renderHorizontalLine(canvas, plotRange) {
	    var _get2 = this.get('crosshairs'),
	        style = _get2.style;

	    var attrs = Util.mix({
	      x1: plotRange ? plotRange.bl.x : canvas.get('width'),
	      y1: 0,
	      x2: plotRange ? plotRange.br.x : 0,
	      y2: 0
	    }, style);

	    this._addCrossLineShape(attrs, 'X');
	  };

	  Tooltip.prototype._renderBackground = function _renderBackground(canvas, plotRange) {
	    var _get3 = this.get('crosshairs'),
	        style = _get3.style;

	    var crosshairsGroup = this.get('crosshairsGroup');
	    var attrs = Util.mix({
	      x: plotRange ? plotRange.tl.x : 0,
	      y: plotRange ? plotRange.tl.y : canvas.get('height'),
	      width: plotRange ? plotRange.br.x - plotRange.bl.x : canvas.get('width'),
	      height: plotRange ? Math.abs(plotRange.tl.y - plotRange.bl.y) : canvas.get('height')
	    }, style);

	    var shape = crosshairsGroup.addShape('rect', {
	      attrs: attrs
	    });
	    shape.hide();
	    this.set('crosshairsRectShape', shape);
	    return shape;
	  };

	  Tooltip.prototype.isContentChange = function isContentChange(title, items) {
	    var titleContent = this.get('titleContent');
	    var lastItems = this.get('items');
	    var isChanged = !(title === titleContent && lastItems.length === items.length);
	    if (!isChanged) {
	      Util.each(items, function (item, index) {
	        var preItem = lastItems[index];
	        for (var key in item) {
	          if (item.hasOwnProperty(key)) {
	            if (!Util.isObject(item[key]) && item[key] !== preItem[key]) {
	              isChanged = true;
	              break;
	            }
	          }
	        }
	        // isChanged = (item.value !== preItem.value) || (item.color !== preItem.color) || (item.name !== preItem.name) || (item.title !== preItem.title);
	        if (isChanged) {
	          return false;
	        }
	      });
	    }

	    return isChanged;
	  };

	  Tooltip.prototype.setContent = function setContent(title, items) {
	    // const isChange = this.isContentChange(title, items);
	    // if (isChange) {
	    // 在外面进行判断是否内容发生改变
	    var timeStamp = +new Date();
	    this.set('items', items);
	    this.set('titleContent', title);
	    this.set('timeStamp', timeStamp);
	    this._renderTooltip();
	    // }
	    return this;
	  };

	  Tooltip.prototype.setMarkers = function setMarkers(markerItems, markerCfg) {
	    var self = this;
	    var markerGroup = self.get('markerGroup');
	    var frontPlot = self.get('frontPlot');
	    if (!markerGroup) {
	      markerGroup = frontPlot.addGroup({
	        zIndex: 1,
	        capture: false // 不进行拾取
	      });
	      self.set('markerGroup', markerGroup);
	    } else {
	      markerGroup.clear();
	    }
	    Util.each(markerItems, function (item) {
	      markerGroup.addShape('marker', {
	        color: item.color,
	        attrs: Util.mix({}, markerCfg, {
	          x: item.x,
	          y: item.y
	        })
	      });
	    });
	    this.set('markerItems', markerItems);
	  };

	  Tooltip.prototype.clearMarkers = function clearMarkers() {
	    var markerGroup = this.get('markerGroup');
	    markerGroup && markerGroup.clear();
	  };

	  Tooltip.prototype.setPosition = function setPosition(x, y, target) {
	    var container = this.get('container');
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var endx = x;
	    var endy = y;
	    // const outterNode = this.get('canvas').get('el').parentNode;
	    var outterNode = this.get('canvas').get('el');
	    var viewWidth = DomUtil.getWidth(outterNode);
	    var viewHeight = DomUtil.getHeight(outterNode);
	    var offset = this.get('offset');

	    var position = void 0;
	    if (this.get('position')) {
	      position = calcTooltipPosition(x, y, this.get('position'), container, target);
	      x = position[0];
	      y = position[1];
	    } else if (!this.get('position')) {
	      position = refixTooltipPosition(x, y, container, viewWidth, viewHeight);
	      x = position[0];
	      y = position[1];
	    }

	    if (this.get('inPlot')) {
	      // tooltip 必须限制在绘图区域内
	      var plotRange = this.get('plotRange');
	      position = confineTooltipPosition(x, y, container, plotRange);
	      x = position[0];
	      y = position[1];
	    }

	    if (this.get('x') !== x || this.get('y') !== y) {
	      var markerItems = this.get('markerItems');
	      if (!Util.isEmpty(markerItems)) {
	        endx = markerItems[0].x;
	        endy = markerItems[0].y;
	      }
	      if (crossLineShapeY) {
	        // 第一次进入时，画布需要单独绘制，所以需要先设定corss的位置
	        crossLineShapeY.move(endx, 0);
	      }
	      if (crossLineShapeX) {
	        crossLineShapeX.move(0, endy);
	      }

	      if (crosshairsRectShape) {
	        // 绘制矩形辅助框，只在直角坐标系下生效
	        var isTransposed = this.get('isTransposed');
	        var items = this.get('items');
	        var firstItem = items[0];
	        var lastItem = items[items.length - 1];
	        var dim = isTransposed ? 'y' : 'x';
	        var attr = isTransposed ? 'height' : 'width';
	        var startDim = firstItem[dim];
	        if (items.length > 1 && firstItem[dim] > lastItem[dim]) {
	          startDim = lastItem[dim];
	        }

	        if (this.get('crosshairs').width) {
	          // 用户定义了 width
	          crosshairsRectShape.attr(dim, startDim - this.get('crosshairs').width / 2);
	          crosshairsRectShape.attr(attr, this.get('crosshairs').width);
	        } else {
	          if (Util.isArray(firstItem.point[dim]) && !firstItem.size) {
	            // 直方图
	            var width = firstItem.point[dim][1] - firstItem.point[dim][0];
	            crosshairsRectShape.attr(dim, firstItem.point[dim][0]);
	            crosshairsRectShape.attr(attr, width);
	          } else {
	            offset = 3 * firstItem.size / 4;
	            crosshairsRectShape.attr(dim, startDim - offset);

	            if (items.length === 1) {
	              crosshairsRectShape.attr(attr, 3 * firstItem.size / 2);
	            } else {
	              crosshairsRectShape.attr(attr, Math.abs(lastItem[dim] - firstItem[dim]) + 2 * offset);
	            }
	          }
	        }
	      }

	      var follow = this.get('follow');
	      container.style.left = follow ? x + 'px' : 0;
	      container.style.top = follow ? y + 'px' : 0;
	    }
	  };

	  Tooltip.prototype.show = function show() {
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var markerGroup = this.get('markerGroup');
	    var container = this.get('container');
	    var canvas = this.get('canvas');
	    crossLineShapeX && crossLineShapeX.show();
	    crossLineShapeY && crossLineShapeY.show();
	    crosshairsRectShape && crosshairsRectShape.show();
	    markerGroup && markerGroup.show();
	    _Base.prototype.show.call(this);
	    container.style.visibility = 'visible';
	    // canvas.sort();
	    canvas.draw();
	  };

	  Tooltip.prototype.hide = function hide() {
	    var self = this;
	    var container = self.get('container');
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var markerGroup = self.get('markerGroup');
	    var canvas = self.get('canvas');
	    container.style.visibility = 'hidden';
	    crossLineShapeX && crossLineShapeX.hide();
	    crossLineShapeY && crossLineShapeY.hide();
	    crosshairsRectShape && crosshairsRectShape.hide();
	    markerGroup && markerGroup.hide();
	    _Base.prototype.hide.call(this);
	    canvas.draw();
	  };

	  Tooltip.prototype.destroy = function destroy() {
	    var self = this;
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var markerGroup = self.get('markerGroup');
	    var crosshairsRectShape = self.get('crosshairsRectShape');
	    var container = self.get('container');
	    var containerTpl = self.get('containerTpl');

	    if (container && !/^\#/.test(containerTpl)) {
	      container.parentNode.removeChild(container);
	    }

	    crossLineShapeX && crossLineShapeX.remove();
	    crossLineShapeY && crossLineShapeY.remove();
	    markerGroup && markerGroup.remove();
	    crosshairsRectShape && crosshairsRectShape.remove();
	    // super.remove();
	    _Base.prototype.destroy.call(this);
	  };

	  return Tooltip;
	}(Base);

	module.exports = Tooltip;

	/***/ }),
	/* 328 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of chart's events
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');

	  // hotfix: if both shapes have no data，just compare shapes.
	  if (Util.isNil(shape1Origin) && Util.isNil(shape2Origin)) {
	    return Util.isEqual(shape1, shape2);
	  }

	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function registerData(eventObj) {
	  if (eventObj.shape && eventObj.shape.get('origin')) {
	    eventObj.data = eventObj.shape.get('origin');
	  }
	}

	var EventController = function () {
	  function EventController(cfg) {
	    _classCallCheck(this, EventController);

	    this.view = null;
	    this.canvas = null;
	    Util.assign(this, cfg);

	    this._init();
	  }

	  EventController.prototype._init = function _init() {
	    this.pixelRatio = this.canvas.get('pixelRatio');
	  };

	  EventController.prototype._getShapeEventObj = function _getShapeEventObj(ev) {
	    return {
	      x: ev.x / this.pixelRatio,
	      y: ev.y / this.pixelRatio,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement || ev.event.relatedTarget
	    };
	  };

	  EventController.prototype._getShape = function _getShape(x, y) {
	    var view = this.view;
	    var container = view.get('canvas');
	    return container.getShape(x, y);
	  };

	  EventController.prototype._getPointInfo = function _getPointInfo(ev) {
	    var view = this.view;
	    var point = {
	      x: ev.x / this.pixelRatio,
	      y: ev.y / this.pixelRatio
	    };
	    var views = view.getViewsByPoint(point);
	    point.views = views;
	    return point;
	  };

	  EventController.prototype._getEventObj = function _getEventObj(ev, point, views) {
	    return {
	      x: point.x,
	      y: point.y,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement || ev.event.relatedTarget, // 目标元素
	      views: views
	    };
	  };

	  EventController.prototype.bindEvents = function bindEvents() {
	    var canvas = this.canvas;
	    canvas.on('mousedown', Util.wrapBehavior(this, 'onDown'));
	    canvas.on('mousemove', Util.wrapBehavior(this, 'onMove'));
	    canvas.on('mouseleave', Util.wrapBehavior(this, 'onOut'));
	    canvas.on('mouseup', Util.wrapBehavior(this, 'onUp'));
	    canvas.on('click', Util.wrapBehavior(this, 'onClick'));
	    canvas.on('dblclick', Util.wrapBehavior(this, 'onClick'));
	    canvas.on('touchstart', Util.wrapBehavior(this, 'onTouchstart'));
	    canvas.on('touchmove', Util.wrapBehavior(this, 'onTouchmove'));
	    canvas.on('touchend', Util.wrapBehavior(this, 'onTouchend'));
	  };

	  EventController.prototype._triggerShapeEvent = function _triggerShapeEvent(shape, eventName, eventObj) {
	    if (shape && shape.name && !shape.get('destroyed')) {
	      var view = this.view;
	      if (view.isShapeInView(shape)) {
	        var name = shape.name + ':' + eventName;
	        eventObj.view = view;
	        eventObj.appendInfo = shape.get('appendInfo'); // appendInfo is defined by user
	        view.emit(name, eventObj);
	        var parent = view.get('parent');
	        if (parent) {
	          // chart 上也需要抛出该事件，本期先不抛出
	          parent.emit(name, eventObj);
	        }
	      }
	    }
	  };

	  EventController.prototype.onDown = function onDown(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    registerData(eventObj);
	    view.emit('mousedown', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'mousedown', eventObj);
	  };

	  EventController.prototype.onMove = function onMove(ev) {
	    var self = this;
	    var view = self.view;
	    var currentShape = self.currentShape;
	    // 如果图形被销毁，则设置当前 shape 为空
	    if (currentShape && currentShape.get('destroyed')) {
	      currentShape = null;
	      self.currentShape = null;
	    }
	    var shape = self._getShape(ev.x, ev.y);
	    var eventObj = self._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('mousemove', eventObj);
	    self._triggerShapeEvent(shape, 'mousemove', eventObj);

	    if (currentShape && !isSameShape(currentShape, shape)) {
	      var leaveObj = self._getShapeEventObj(ev);
	      leaveObj.shape = currentShape;
	      leaveObj.toShape = shape;
	      registerData(leaveObj);
	      self._triggerShapeEvent(currentShape, 'mouseleave', leaveObj);
	    }

	    if (shape && !isSameShape(currentShape, shape)) {
	      var enterObj = self._getShapeEventObj(ev);
	      enterObj.shape = shape;
	      enterObj.fromShape = currentShape;
	      registerData(enterObj);
	      self._triggerShapeEvent(shape, 'mouseenter', enterObj);
	    }
	    self.currentShape = shape;

	    var point = self._getPointInfo(ev);
	    var preViews = self.curViews || [];

	    if (preViews.length === 0 && point.views.length) {
	      view.emit('plotenter', self._getEventObj(ev, point, point.views));
	    }
	    // if (preViews.length && point.views.length === 0) {
	    //   view.emit('plotleave', self._getEventObj(ev, point, preViews));
	    // }

	    if (point.views.length) {
	      eventObj = self._getEventObj(ev, point, point.views);
	      eventObj.shape = shape;
	      registerData(eventObj);
	      view.emit('plotmove', eventObj);
	    }

	    self.curViews = point.views;
	  };

	  EventController.prototype.onOut = function onOut(ev) {
	    var self = this;
	    var view = self.view;
	    var point = self._getPointInfo(ev);
	    var preViews = self.curViews || [];
	    var evtObj = self._getEventObj(ev, point, preViews);
	    if (point.views.length === 0 && (!evtObj.toElement || evtObj.toElement.tagName !== 'CANVAS')) {
	      view.emit('plotleave', evtObj);
	    }
	  };

	  EventController.prototype.onUp = function onUp(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    view.emit('mouseup', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'mouseup', eventObj);
	  };

	  EventController.prototype.onClick = function onClick(ev) {
	    var self = this;
	    var view = self.view;
	    var shape = self._getShape(ev.x, ev.y);
	    var shapeEventObj = self._getShapeEventObj(ev);
	    shapeEventObj.shape = shape;
	    registerData(shapeEventObj);
	    view.emit('click', shapeEventObj);
	    self._triggerShapeEvent(shape, ev.type, shapeEventObj);
	    self.currentShape = shape;

	    var point = self._getPointInfo(ev);
	    var views = point.views;
	    if (!Util.isEmpty(views)) {
	      var eventObj = self._getEventObj(ev, point, views);
	      if (self.currentShape) {
	        var _shape = self.currentShape;
	        eventObj.shape = _shape;
	        registerData(eventObj);
	        // eventObj.data = shape.get('origin');
	      }
	      view.emit('plotclick', eventObj);
	      if (ev.type === 'dblclick') {
	        view.emit('plotdblclick', eventObj);
	        view.emit('dblclick', shapeEventObj);
	      }
	    }
	  };

	  EventController.prototype.onTouchstart = function onTouchstart(ev) {
	    var view = this.view;
	    var shape = this._getShape(ev.x, ev.y);
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('touchstart', eventObj);
	    this._triggerShapeEvent(shape, 'touchstart', eventObj);
	    this.currentShape = shape;
	  };

	  EventController.prototype.onTouchmove = function onTouchmove(ev) {
	    var view = this.view;
	    var shape = this._getShape(ev.x, ev.y);
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('touchmove', eventObj);
	    this._triggerShapeEvent(shape, 'touchmove', eventObj);
	    this.currentShape = shape;
	  };

	  EventController.prototype.onTouchend = function onTouchend(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    registerData(eventObj);
	    view.emit('touchend', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'touchend', eventObj);
	  };

	  EventController.prototype.clearEvents = function clearEvents() {
	    var canvas = this.canvas;
	    canvas.off('mousemove', Util.getWrapBehavior(this, 'onMove'));
	    canvas.off('mouseleave', Util.getWrapBehavior(this, 'onOut'));
	    canvas.off('mousedown', Util.getWrapBehavior(this, 'onDown'));
	    canvas.off('mouseup', Util.getWrapBehavior(this, 'onUp'));
	    canvas.off('click', Util.getWrapBehavior(this, 'onClick'));
	    canvas.off('dblclick', Util.getWrapBehavior(this, 'onClick'));
	    canvas.off('touchstart', Util.getWrapBehavior(this, 'onTouchstart'));
	    canvas.off('touchmove', Util.getWrapBehavior(this, 'onTouchmove'));
	    canvas.off('touchend', Util.getWrapBehavior(this, 'onTouchend'));
	  };

	  return EventController;
	}();

	module.exports = EventController;

	/***/ }),
	/* 329 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The entry of chart's animation
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Animate = __webpack_require__(64);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil;

	var mat3 = MatrixUtil.mat3;

	// 获取图组内所有的shapes

	function getShapes(container, viewId) {
	  var shapes = [];
	  if (container.get('animate') === false) {
	    return [];
	  }
	  var children = container.get('children');
	  Util.each(children, function (child) {
	    if (child.isGroup) {
	      shapes = shapes.concat(getShapes(child, viewId));
	    } else if (child.isShape && child._id) {
	      var id = child._id;
	      id = id.split('-')[0];
	      if (id === viewId) {
	        shapes.push(child);
	      }
	    }
	  });

	  return shapes;
	}

	function cache(shapes) {
	  var rst = {};
	  Util.each(shapes, function (shape) {
	    if (!shape._id || shape.isClip) return;
	    var id = shape._id;
	    rst[id] = {
	      _id: id,
	      type: shape.get('type'),
	      attrs: Util.cloneDeep(shape.__attrs), // 原始属性
	      name: shape.name,
	      index: shape.get('index'),
	      animateCfg: shape.get('animateCfg'),
	      coord: shape.get('coord')
	    };
	  });
	  return rst;
	}

	function getAnimate(geomType, coord, animationType, animationName) {
	  var result = void 0;
	  if (animationName) {
	    result = Animate.Action[animationType][animationName];
	  } else {
	    result = Animate.getAnimation(geomType, coord, animationType);
	  }
	  return result;
	}

	function getAnimateCfg(geomType, animationType, animateCfg) {
	  var defaultCfg = Animate.getAnimateCfg(geomType, animationType);
	  if (animateCfg && animateCfg[animationType]) {
	    return Util.deepMix({}, defaultCfg, animateCfg[animationType]);
	  }
	  return defaultCfg;
	}

	function addAnimate(cache, shapes, canvas, isUpdate) {
	  var animate = void 0;
	  var animateCfg = void 0;
	  var canvasDrawn = false;

	  if (isUpdate) {
	    // Step: leave -> update -> enter
	    var updateShapes = []; // 存储的是 shapes
	    var newShapes = []; // 存储的是 shapes
	    Util.each(shapes, function (shape) {
	      var result = cache[shape._id];
	      if (!result) {
	        newShapes.push(shape);
	      } else {
	        shape.setSilent('cacheShape', result);
	        updateShapes.push(shape);
	        delete cache[shape._id];
	      }
	    });

	    Util.each(cache, function (deletedShape) {
	      var name = deletedShape.name,
	          coord = deletedShape.coord,
	          _id = deletedShape._id,
	          attrs = deletedShape.attrs,
	          index = deletedShape.index,
	          type = deletedShape.type;

	      animateCfg = getAnimateCfg(name, 'leave', deletedShape.animateCfg);
	      animate = getAnimate(name, coord, 'leave', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        var tempShape = canvas.addShape(type, {
	          attrs: attrs,
	          index: index
	        });
	        tempShape._id = _id;
	        tempShape.name = name;
	        if (coord && name !== 'label') {
	          var tempShapeMatrix = tempShape.getMatrix();
	          var finalMatrix = mat3.multiply([], tempShapeMatrix, coord.matrix);
	          tempShape.setMatrix(finalMatrix);
	        }
	        canvasDrawn = true;
	        animate(tempShape, animateCfg, coord);
	      }
	    });

	    Util.each(updateShapes, function (updateShape) {
	      var name = updateShape.name;
	      var coord = updateShape.get('coord');
	      var cacheAttrs = updateShape.get('cacheShape').attrs;
	      // 判断如果属性相同的话就不进行变换
	      if (!Util.isEqual(cacheAttrs, updateShape.__attrs)) {
	        animateCfg = getAnimateCfg(name, 'update', updateShape.get('animateCfg'));
	        animate = getAnimate(name, coord, 'update', animateCfg.animation);
	        if (Util.isFunction(animate)) {
	          animate(updateShape, animateCfg, coord);
	        } else {
	          var endState = Util.cloneDeep(updateShape.__attrs);
	          // updateShape.__attrs = cacheAttrs;
	          updateShape.attr(cacheAttrs);
	          updateShape.animate(endState, animateCfg.duration, animateCfg.easing, function () {
	            updateShape.setSilent('cacheShape', null);
	          });
	        }
	        canvasDrawn = true;
	      }
	    });

	    Util.each(newShapes, function (newShape) {
	      var name = newShape.name;
	      var coord = newShape.get('coord');

	      animateCfg = getAnimateCfg(name, 'enter', newShape.get('animateCfg'));
	      animate = getAnimate(name, coord, 'enter', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(newShape, animateCfg, coord);
	        canvasDrawn = true;
	      }
	    });
	  } else {
	    Util.each(shapes, function (shape) {
	      var name = shape.name;
	      var coord = shape.get('coord');
	      animateCfg = getAnimateCfg(name, 'appear', shape.get('animateCfg'));
	      animate = getAnimate(name, coord, 'appear', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(shape, animateCfg, coord);
	        canvasDrawn = true;
	      }
	    });
	  }
	  return canvasDrawn;
	}

	module.exports = {
	  execAnimation: function execAnimation(view, isUpdate) {
	    var viewContainer = view.get('middlePlot');
	    var axisContainer = view.get('backPlot');
	    var viewId = view.get('_id');
	    var canvas = view.get('canvas');
	    var caches = canvas.get(viewId + 'caches') || [];
	    if (caches.length === 0) {
	      isUpdate = false;
	    }
	    var shapes = getShapes(viewContainer, viewId);
	    var axisShapes = getShapes(axisContainer, viewId);
	    var cacheShapes = shapes.concat(axisShapes);
	    canvas.setSilent(viewId + 'caches', cache(cacheShapes));
	    var drawn = void 0;
	    if (isUpdate) {
	      drawn = addAnimate(caches, cacheShapes, canvas, isUpdate);
	    } else {
	      drawn = addAnimate(caches, shapes, canvas, isUpdate);
	    }
	    if (!drawn) {
	      canvas.draw();
	    }
	  }
	};

	/***/ }),
	/* 330 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of canvas plot
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var AUTO_STR = 'auto';

	var PlotBack = function (_Group) {
	  _inherits(PlotBack, _Group);

	  function PlotBack() {
	    _classCallCheck(this, PlotBack);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  PlotBack.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'plotBack',
	      /**
	       * 画布边距
	       * @type {Number | Array | Object | "auto"}
	       */
	      padding: null,
	      /**
	       * 大背景
	       * @type {Object}
	       */
	      background: null,
	      /**
	       * 绘图区域范围
	       * @type {Object}
	       */
	      plotRange: null,
	      /**
	       * 绘图区域背景
	       * @type {Object}
	       */
	      plotBackground: null
	    };
	  };

	  PlotBack.prototype._beforeRenderUI = function _beforeRenderUI() {
	    this._calculateRange();
	  };

	  PlotBack.prototype._renderUI = function _renderUI() {
	    this._renderBackground();
	    this._renderPlotBackground();
	  };

	  PlotBack.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var background = self.get('background');
	    if (background) {
	      var canvas = this.get('canvas');
	      var width = self.get('width') || canvas.get('width');
	      var height = self.get('height') || canvas.get('height');
	      var cfg = {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height
	      };

	      var rect = self.get('backgroundShape');
	      if (!rect) {
	        rect = this.addShape('rect', {
	          attrs: Util.mix(cfg, background)
	        });
	        this.set('backgroundShape', rect);
	      } else {
	        rect.attr(cfg);
	      }
	    } else {
	      return;
	    }
	  };

	  PlotBack.prototype._renderPlotBackground = function _renderPlotBackground() {
	    var self = this;
	    var plotBackground = self.get('plotBackground');
	    if (plotBackground) {
	      var plotRange = self.get('plotRange');
	      var width = plotRange.br.x - plotRange.bl.x;
	      var height = plotRange.br.y - plotRange.tr.y;
	      var tl = plotRange.tl;
	      var cfg = {
	        x: tl.x,
	        y: tl.y,
	        width: width,
	        height: height
	      };
	      var plotBackShape = self.get('plotBackShape');
	      if (!plotBackShape) {
	        if (plotBackground.image) {
	          cfg.img = plotBackground.image;
	          plotBackShape = self.addShape('image', {
	            attrs: cfg
	          });
	        } else {
	          // 矩形
	          Util.mix(cfg, plotBackground);
	          plotBackShape = self.addShape('rect', {
	            attrs: cfg
	          });
	        }
	        self.set('plotBackShape', plotBackShape);
	      } else {
	        plotBackShape.attr(cfg);
	      }
	    } else {
	      return;
	    }
	  };

	  PlotBack.prototype._convert = function _convert(val, isHorizontal) {
	    if (Util.isString(val)) {
	      if (val === AUTO_STR) {
	        val = 0;
	      } else if (val.indexOf('%') !== -1) {
	        var canvas = this.get('canvas');
	        var width = this.get('width') || canvas.get('width');
	        var height = this.get('height') || canvas.get('height');
	        val = parseInt(val, 10) / 100;
	        val = isHorizontal ? val * width : val * height;
	      }
	    }

	    return val;
	  };

	  PlotBack.prototype._calculateRange = function _calculateRange() {
	    var self = this;
	    var plotRange = self.get('plotRange');
	    if (Util.isNil(plotRange)) {
	      plotRange = {};
	    }

	    var padding = self.get('padding');
	    var canvas = this.get('canvas');
	    var width = self.get('width') || canvas.get('width');
	    var height = self.get('height') || canvas.get('height');

	    var allPadding = Util.toAllPadding(padding);

	    var top = self._convert(allPadding[0], false);
	    var right = self._convert(allPadding[1], true);
	    var bottom = self._convert(allPadding[2], false);
	    var left = self._convert(allPadding[3], true);

	    var minX = Math.min(left, width - right);
	    var maxX = Math.max(left, width - right);
	    var minY = Math.min(height - bottom, top);
	    var maxY = Math.max(height - bottom, top);

	    plotRange.tl = {
	      x: minX,
	      y: minY
	    }; // top-left

	    plotRange.tr = {
	      x: maxX,
	      y: minY
	    }; // top-right

	    plotRange.bl = {
	      x: minX,
	      y: maxY
	    }; // bottom-left

	    plotRange.br = {
	      x: maxX,
	      y: maxY
	    }; // bottom-right

	    plotRange.cc = {
	      x: (maxX + minX) / 2,
	      y: (maxY + minY) / 2
	    };

	    this.set('plotRange', plotRange);
	  };

	  PlotBack.prototype.repaint = function repaint() {
	    this._calculateRange();
	    this._renderBackground();
	    this._renderPlotBackground();
	    return this;
	  };

	  return PlotBack;
	}(Group);

	module.exports = PlotBack;

	/***/ }),
	/* 331 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview track g2
	 * @author dxq613@gmail.com
	 */
	var Global = __webpack_require__(2);
	var SERVER_URL = 'https://kcart.alipay.com/web/bi.do';

	// 延迟发送请求
	setTimeout(function () {
	  if (Global.trackable) {
	    var image = new Image();
	    var newObj = {
	      pg: document.URL,
	      r: new Date().getTime(),
	      g2: true,
	      version: Global.version,
	      page_type: 'syslog'
	    };
	    var d = encodeURIComponent(JSON.stringify([newObj]));
	    image.src = SERVER_URL + '?BIProfile=merge&d=' + d;
	  }
	}, 3000);

	/***/ }),
	/* 332 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["c"] = hue;
	/* harmony export (immutable) */ __webpack_exports__["b"] = gamma;
	/* harmony export (immutable) */ __webpack_exports__["a"] = nogamma;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(372);


	function linear(a, d) {
	  return function (t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function (a, b) {
	    return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	}

	/***/ }),
	/* 333 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分割数据用于处理存在 null 值的折线图、区域图
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);

	module.exports = {
	  splitData: function splitData(data) {
	    if (!data.length) return [];
	    var arr = [];
	    var tmp = [];
	    var yScale = this.getYScale();
	    var yDim = yScale.field;
	    var yValue = void 0;
	    Util.each(data, function (obj) {
	      yValue = obj._origin ? obj._origin[yDim] : obj[yDim];
	      if (Global.connectNulls) {
	        // 如果忽视 Null 直接连接节点，则将 value = null 的数据过滤掉
	        if (!Util.isNil(yValue)) {
	          tmp.push(obj);
	        }
	      } else {
	        if (Util.isArray(yValue) && Util.isNil(yValue[0]) || Util.isNil(yValue)) {
	          if (tmp.length) {
	            arr.push(tmp);
	            tmp = [];
	          }
	        } else {
	          tmp.push(obj);
	        }
	      }
	    });
	    if (tmp.length) {
	      arr.push(tmp);
	    }
	    return arr;
	  }
	};

	/***/ }),
	/* 334 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 需要计算所占x轴上的宽度的辅助类
	 * @author sima.zhang1990@gmail.com
	 * @author dxq613@gmail.com
	 */

	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	// 已经排序后的数据查找距离最小的
	function findMinDistance(arr, scale) {
	  var count = arr.length;
	  // 日期类型的 values 经常上文本类型，所以需要转换一下
	  if (Util.isString(arr[0])) {
	    arr = arr.map(function (v) {
	      return scale.translate(v);
	    });
	  }
	  var distance = arr[1] - arr[0];
	  for (var i = 2; i < count; i++) {
	    var tmp = arr[i] - arr[i - 1];
	    if (distance > tmp) {
	      distance = tmp;
	    }
	  }
	  return distance;
	}

	var SizeMixin = {
	  getDefalutSize: function getDefalutSize() {
	    var defaultSize = this.get('defaultSize');
	    if (!defaultSize) {
	      var coord = this.get('coord');
	      var xScale = this.getXScale();
	      var xValues = xScale.values;
	      var dataArray = this.get('dataArray');
	      var count = void 0;
	      if (xScale.isLinear && xValues.length > 1) {
	        xValues.sort();
	        var interval = findMinDistance(xValues, xScale);
	        count = (xScale.max - xScale.min) / interval;
	        if (xValues.length > count) {
	          count = xValues.length;
	        }
	      } else {
	        count = xValues.length;
	      }
	      var range = xScale.range;
	      var normalizeSize = 1 / count;
	      var widthRatio = 1;

	      if (this.isInCircle()) {
	        if (coord.isTransposed && count > 1) {
	          // 极坐标下多层环图
	          widthRatio = Global.widthRatio.multiplePie;
	        } else {
	          widthRatio = Global.widthRatio.rose;
	        }
	        /* if (dataArray.length > 1) {
	          normalizeSize *= (range[1] - range[0]);
	        } */
	      } else {
	        if (xScale.isLinear) {
	          normalizeSize *= range[1] - range[0];
	        }
	        widthRatio = Global.widthRatio.column; // 柱状图要除以2
	      }
	      normalizeSize *= widthRatio;
	      if (this.hasAdjust('dodge')) {
	        var dodgeCount = this._getDodgeCount(dataArray);
	        normalizeSize = normalizeSize / dodgeCount;
	      }
	      defaultSize = normalizeSize;
	      this.set('defaultSize', defaultSize);
	    }
	    return defaultSize;
	  },
	  _getDodgeCount: function _getDodgeCount(dataArray) {
	    var adjusts = this.get('adjusts');
	    var dodgeBy = void 0;
	    var count = dataArray.length;
	    Util.each(adjusts, function (adjust) {
	      if (adjust.type === 'dodge') {
	        dodgeBy = adjust.dodgeBy;
	      }
	    });

	    if (dodgeBy) {
	      var mergeData = Util.Array.merge(dataArray);
	      var values = Util.Array.values(mergeData, dodgeBy);
	      count = values.length;
	    }

	    return count;
	  },
	  getDimWidth: function getDimWidth(dimName) {
	    var coord = this.get('coord');
	    var start = coord.convertPoint({
	      x: 0,
	      y: 0
	    });
	    var end = coord.convertPoint({
	      x: dimName === 'x' ? 1 : 0,
	      y: dimName === 'x' ? 0 : 1
	    });
	    var width = 0;
	    if (start && end) {
	      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
	    }
	    return width;
	  },
	  _getWidth: function _getWidth() {
	    var coord = this.get('coord');
	    var width = void 0; // x轴的长度
	    if (this.isInCircle() && !coord.isTransposed) {
	      // 极坐标下 width 为弧长
	      width = (coord.endAngle - coord.startAngle) * coord.radius;
	    } else {
	      width = this.getDimWidth('x'); // 不需要判断transpose
	    }
	    return width;
	  },
	  _toNormalizedSize: function _toNormalizedSize(size) {
	    var width = this._getWidth();
	    return size / width;
	  },
	  _toCoordSize: function _toCoordSize(normalizeSize) {
	    var width = this._getWidth();
	    return width * normalizeSize;
	  },
	  getNormalizedSize: function getNormalizedSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      size = this.getDefalutSize();
	    } else {
	      size = this._toNormalizedSize(size);
	    }
	    return size;
	  },
	  getSize: function getSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      var normalizeSize = this.getDefalutSize();
	      size = this._toCoordSize(normalizeSize);
	    }
	    return size;
	  }
	};

	module.exports = SizeMixin;

	/***/ }),
	/* 335 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 路径图，无序的线图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var SplitMixin = __webpack_require__(333);
	var Util = __webpack_require__(0);

	var Path = function (_GeomBase) {
	  _inherits(Path, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Path.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'path';
	    cfg.shapeType = 'line';
	    return cfg;
	  };

	  function Path(cfg) {
	    _classCallCheck(this, Path);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SplitMixin);
	    return _this;
	  }

	  Path.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var cfg = _GeomBase.prototype.getDrawCfg.call(this, obj);
	    cfg.isStack = this.hasStack();
	    return cfg;
	  };

	  Path.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    var splitArray = this.splitData(data);

	    var cfg = this.getDrawCfg(data[0]);
	    cfg.origin = data; // path,line 等图的origin 是整个序列
	    Util.each(splitArray, function (subData, splitedIndex) {
	      if (!Util.isEmpty(subData)) {
	        cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	        cfg.points = subData;
	        var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
	        self.appendShapeInfo(geomShape, index + splitedIndex);
	      }
	    });
	  };

	  return Path;
	}(GeomBase);

	GeomBase.Path = Path;

	module.exports = Path;

	/***/ }),
	/* 336 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(348);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__namespaces__ = __webpack_require__(349);



	function creatorInherit(name) {
	  return function () {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] && document.documentElement.namespaceURI === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] ? document.createElement(name) : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function () {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);
	  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
	});

	/***/ }),
	/* 337 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	});

	/***/ }),
	/* 338 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  return a = +a, b -= a, function (t) {
	    return a + b * t;
	  };
	});

	/***/ }),
	/* 339 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = tweenValue;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = { name: name, value: value }, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	});

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function (node) {
	    return Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(node, id).value[name];
	  };
	}

	/***/ }),
	/* 340 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview facets of chart
	 * @author dxq613@gmail.com
	 */

	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	var assign = Util.assign;
	var isNil = Util.isNil;
	var isArray = Util.isArray;
	var cloneDeep = Util.cloneDeep;

	// 绑定事件
	var wrapBehavior = Util.wrapBehavior;

	// 获取绑定的事件
	var getWrapBehavior = Util.getWrapBehavior;

	var Base = function () {
	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      chart: null,
	      group: null,

	      /**
	       * 是否默认显示每个分面的title
	       * @type {Boolean}
	       */
	      showTitle: true,

	      /**
	       * 是否自动修改坐标轴的信息
	       * @type {Boolean}
	       */
	      autoSetAxis: true,

	      /**
	       * View 的内边框
	       * @type {Number|Array}
	       */
	      padding: 10,

	      /**
	       * 遍历每个view 的回调函数
	       * @type {Function}
	       */
	      eachView: null,

	      /**
	       * 分面的字段名列表
	       * @type {Array}
	       */
	      fields: [],

	      /**
	       * 列值的的标题
	       * @type {Object}
	       */
	      colTitle: {
	        offsetY: -15,
	        style: {
	          fontSize: 14,
	          textAlign: 'center',
	          fill: '#666',
	          fontFamily: Global.fontFamily
	        }
	      },
	      rowTitle: {
	        offsetX: 15,
	        style: {
	          fontSize: 14,
	          textAlign: 'center',
	          rotate: 90,
	          fill: '#666',
	          fontFamily: Global.fontFamily
	        }
	      }
	    };
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var defaultCfg = this.getDefaultCfg();
	    assign(this, defaultCfg, cfg);
	    this.init();
	  }

	  Base.prototype.init = function init() {
	    if (!this.chart) {
	      throw new Error('Facets Error: please specify the chart!');
	    }
	    this._bindEvent();
	    this.initContainer();
	    if (this.chart.get('data')) {
	      this.initViews();
	    }
	  };

	  Base.prototype.initContainer = function initContainer() {
	    var chart = this.chart;
	    var frontPlot = chart.get('frontPlot');
	    var group = frontPlot.addGroup();
	    this.group = group;
	  };

	  Base.prototype.initViews = function initViews() {
	    var chart = this.chart;
	    var data = chart.get('data');
	    var eachView = this.eachView;
	    var facets = this.generateFacets(data);
	    for (var i = 0; i < facets.length; i++) {
	      var facet = facets[i];
	      var region = facet.region;
	      var view = chart.view({
	        start: region.start,
	        end: region.end,
	        padding: this.padding
	      });
	      view.source(facet.data);
	      this.beforeProcessView(view, facet);
	      if (eachView) {
	        eachView(view, facet);
	      }
	      this.afterProcessView(view, facet);
	      facet.view = view;
	    }
	    this.facets = facets;
	  };

	  /**
	   * 处理 view 前
	   * @protected
	   */


	  Base.prototype.beforeProcessView = function beforeProcessView() /* view, facet */{};

	  /**
	   * 处理view
	   * @param {Object} view 视图
	   * @param {Object} facet 分面信息
	   * @protected
	   */


	  Base.prototype.afterProcessView = function afterProcessView(view, facet) {
	    if (this.autoSetAxis) {
	      this.processAxis(view, facet);
	    }
	  };

	  Base.prototype.processAxis = function processAxis(view, facet) {
	    var viewOptions = view.get('options');
	    var geoms = view.get('geoms');
	    if ((!viewOptions.coord.type || viewOptions.coord.type === 'rect') && geoms.length) {
	      var field = geoms[0].get('attrOptions').position.field;
	      var fields = isArray(field) ? field : field.split('*').map(function (str) {
	        return str.trim();
	      });
	      var xField = fields[0];
	      var yField = fields[1];
	      if (isNil(viewOptions.axes)) {
	        viewOptions.axes = {};
	      }
	      var axes = viewOptions.axes;
	      if (axes !== false) {
	        if (xField && axes[xField] !== false) {
	          axes[xField] = axes[xField] || {};
	          this.setXAxis(xField, axes, facet);
	        }
	        if (yField && axes[yField] !== false) {
	          axes[yField] = axes[yField] || {};
	          this.setYAxis(yField, axes, facet);
	        }
	      }
	    }
	  };

	  Base.prototype.setXAxis = function setXAxis() /* xField, axes, facet */{};

	  Base.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

	  // 默认显示各列的标题


	  Base.prototype.renderTitle = function renderTitle(view, facet) {
	    this.drawColTitle(view, facet);
	  };

	  Base.prototype.getScaleText = function getScaleText(field, value, view) {
	    var rst = void 0;
	    if (field) {
	      var scales = view.get('scales');
	      var scale = scales[field];
	      if (!scale) {
	        scale = view.createScale(field);
	      }
	      rst = scale.getText(value);
	    } else {
	      rst = value;
	    }
	    return rst;
	  };

	  Base.prototype.drawColTitle = function drawColTitle(view, facet) {
	    var text = this.getScaleText(facet.colField, facet.colValue, view);
	    var colTextCfg = assign({
	      position: ['50%', '0%'],
	      content: text
	    }, this.colTitle);
	    view.guide().text(colTextCfg);
	  };

	  Base.prototype.drawRowTitle = function drawRowTitle(view, facet) {
	    var text = this.getScaleText(facet.rowField, facet.rowValue, view);
	    var rowTextCfg = assign({
	      position: ['100%', '50%'],
	      content: text
	    }, cloneDeep(this.rowTitle));

	    view.guide().text(rowTextCfg);
	  };

	  /**
	   * 数据过滤器
	   * @protected
	   * @param {Array} conditions 过滤条件
	   * @return {Function} 过滤函数
	   */


	  Base.prototype.getFilter = function getFilter(conditions) {
	    var filter = function filter(obj) {
	      var filtered = true;
	      conditions.forEach(function (cond) {
	        var field = cond.field;
	        var value = cond.value;
	        // const values = cond.values;
	        var tmp = true;
	        if (!isNil(value) && field) {
	          tmp = obj[field] === value;
	        }
	        filtered = filtered && tmp;
	      });
	      return filtered;
	    };
	    return filter;
	  };

	  /**
	   * 获取字段对应的值
	   * @protected
	   * @param  {String} field 字段名
	   * @param  {Array} data 数据
	   * @return {Array} 字段对应的值
	   */


	  Base.prototype.getFieldValues = function getFieldValues(field, data) {
	    var rst = [];
	    var tmpMap = {};
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[field];
	      if (!isNil(value) && !tmpMap[value]) {
	        rst.push(value);
	        tmpMap[value] = true;
	      }
	    }
	    return rst;
	  };

	  Base.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
	    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
	    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

	    var start = {
	      x: xWidth * xIndex,
	      y: yWidth * yIndex
	    };

	    var end = {
	      x: start.x + xWidth,
	      y: start.y + yWidth
	    };

	    return {
	      start: start,
	      end: end
	    };
	  };

	  /**
	   * 生成分面
	   * @protected
	   * @return {Array} 多个分面集合
	   */


	  Base.prototype.generateFacets = function generateFacets() /* data */{
	    return [];
	  };

	  Base.prototype._bindEvent = function _bindEvent() {
	    var chart = this.chart;
	    chart.on('afterchangedata', wrapBehavior(this, 'onDataChange'));
	    chart.on('beforeclear', wrapBehavior(this, 'onClear'));
	    chart.on('beforedestroy', wrapBehavior(this, 'destroy'));
	    chart.on('beforepaint', wrapBehavior(this, 'onPaint'));
	    chart.on('setdata', wrapBehavior(this, 'onDataChange'));
	  };

	  Base.prototype._clearEvent = function _clearEvent() {
	    var chart = this.chart;
	    if (chart) {
	      chart.off('afterchangedata', getWrapBehavior(this, 'onDataChange'));
	      chart.off('beforeclear', getWrapBehavior(this, 'onClear'));
	      chart.off('beforedestroy', getWrapBehavior(this, 'destroy'));
	      chart.off('beforepaint', getWrapBehavior(this, 'onPaint'));
	      chart.off('setdata', getWrapBehavior(this, 'onDataChange'));
	    }
	  };

	  Base.prototype._clearFacets = function _clearFacets() {
	    var facets = this.facets;
	    var chart = this.chart;
	    if (facets) {
	      for (var i = 0; i < facets.length; i++) {
	        var facet = facets[i];
	        chart.removeView(facet.view);
	      }
	    }
	    this.facets = null;
	  };

	  Base.prototype.onClear = function onClear() {
	    this.onRemove();
	  };

	  Base.prototype.onPaint = function onPaint() {
	    if (this.showTitle) {
	      var facets = this.facets;
	      for (var i = 0; i < facets.length; i++) {
	        var facet = facets[i];
	        var view = facet.view;
	        this.renderTitle(view, facet);
	      }
	    }
	  };

	  Base.prototype.onDataChange = function onDataChange() {
	    this._clearFacets();
	    this.initViews();
	  };

	  Base.prototype.onRemove = function onRemove() {
	    this._clearFacets();
	    this._clearEvent();
	    this.group && this.group.remove();
	    this.chart = null;
	    this.facets = null;
	    this.group = null;
	  };

	  Base.prototype.destroy = function destroy() {
	    this.onRemove();
	    this.destroyed = true;
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 341 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// const Global = require('../global');
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var View = __webpack_require__(116);
	var G2 = __webpack_require__(62);

	var assign = Util.assign;

	var Interaction = function () {
	  Interaction.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      startEvent: 'mousedown',
	      processingEvent: 'mousemove',
	      endEvent: 'mouseup',
	      resetEvent: 'dblclick'
	    };
	  };

	  Interaction.prototype._start = function _start(ev) {
	    var me = this;
	    me.preStart && me.preStart(ev);
	    me.start(ev);
	    me.onStart && me.onStart(ev);
	  };

	  Interaction.prototype._process = function _process(ev) {
	    var me = this;
	    me.preProcess && me.preProcess(ev);
	    me.process(ev);
	    me.onProcess && me.onProcess(ev);
	  };

	  Interaction.prototype._end = function _end(ev) {
	    var me = this;
	    me.preEnd && me.preEnd(ev);
	    me.end(ev);
	    me.onEnd && me.onEnd(ev);
	  };

	  Interaction.prototype._reset = function _reset(ev) {
	    var me = this;
	    me.preReset && me.preReset(ev);
	    me.reset(ev);
	    me.onReset && me.onReset(ev);
	  };

	  Interaction.prototype.start = function start() {
	    // TODO override
	  };

	  Interaction.prototype.process = function process() {
	    // TODO override
	  };

	  Interaction.prototype.end = function end() {
	    // TODO override
	  };

	  Interaction.prototype.reset = function reset() {
	    // TODO override
	  };

	  function Interaction(cfg, view) {
	    _classCallCheck(this, Interaction);

	    var me = this;
	    var defaultCfg = me.getDefaultCfg();
	    assign(me, defaultCfg, cfg);
	    me.view = view;
	    me.canvas = view.get('canvas');
	    me._bindEvents();
	  }

	  Interaction.prototype._bindEvents = function _bindEvents() {
	    var me = this;
	    var canvas = me.canvas;
	    var canvasDOM = canvas.get('canvasDOM');
	    me._clearEvents();
	    me._onStartListener = DomUtil.addEventListener(canvasDOM, me.startEvent, Util.wrapBehavior(me, '_start'));
	    me._onProcessingListener = DomUtil.addEventListener(canvasDOM, me.processingEvent, Util.wrapBehavior(me, '_process'));
	    me._onEndListener = DomUtil.addEventListener(canvasDOM, me.endEvent, Util.wrapBehavior(me, '_end'));
	    me._onResetListener = DomUtil.addEventListener(canvasDOM, me.resetEvent, Util.wrapBehavior(me, '_reset'));
	  };

	  Interaction.prototype._clearEvents = function _clearEvents() {
	    var me = this;
	    me._onStartListener && me._onStartListener.remove();
	    me._onProcessingListener && me._onProcessingListener.remove();
	    me._onEndListener && me._onEndListener.remove();
	    me._onResetListener && me._onResetListener.remove();
	  };

	  Interaction.prototype.destroy = function destroy() {
	    this._clearEvents();
	  };

	  return Interaction;
	}();

	G2._Interactions = {};
	G2.registerInteraction = function (type, constructor) {
	  G2._Interactions[type] = constructor;
	};
	G2.getInteraction = function (type) {
	  return G2._Interactions[type];
	};

	View.prototype.getInteractions = function () {
	  var me = this;
	  if (!me._interactions) {
	    me._interactions = {};
	  }
	  return me._interactions;
	};

	View.prototype.setInteraction = function (type, interact) {
	  var me = this;
	  var interactions = me.getInteractions();
	  interactions[type] = interactions[type] || [];
	  interactions[type].push(interact);
	};

	View.prototype.clearInteraction = function (type) {
	  var me = this;
	  var interactions = me.getInteractions();
	  if (type) {
	    (interactions[type] || []).forEach(function (interact) {
	      interact.destroy();
	    });
	    delete interactions[type];
	  } else {
	    Util.each(interactions, function (collection, key) {
	      (collection || []).forEach(function (interact) {
	        interact.destroy();
	      });
	      delete interactions[key];
	    });
	  }
	};
	View.prototype.interact = function (type, cfg) {
	  var me = this;
	  var Ctor = G2.getInteraction(type);
	  var interact = new Ctor(cfg, me);
	  me.setInteraction(type, interact);
	  return me;
	};

	module.exports = Interaction;

	/***/ }),
	/* 342 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview interval geometry
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(334);
	__webpack_require__(343);

	var Interval = function (_GeomBase) {
	  _inherits(Interval, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Interval.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'interval';
	    cfg.shapeType = 'interval';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Interval(cfg) {
	    _classCallCheck(this, Interval);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SizeMixin);
	    return _this;
	  }

	  Interval.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  Interval.prototype.clearInner = function clearInner() {
	    _GeomBase.prototype.clearInner.call(this);
	    this.set('defaultSize', null);
	  };

	  return Interval;
	}(GeomBase);

	var IntervalStack = function (_Interval) {
	  _inherits(IntervalStack, _Interval);

	  function IntervalStack() {
	    _classCallCheck(this, IntervalStack);

	    return _possibleConstructorReturn(this, _Interval.apply(this, arguments));
	  }

	  IntervalStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return IntervalStack;
	}(Interval);

	var IntervalDodge = function (_Interval2) {
	  _inherits(IntervalDodge, _Interval2);

	  function IntervalDodge() {
	    _classCallCheck(this, IntervalDodge);

	    return _possibleConstructorReturn(this, _Interval2.apply(this, arguments));
	  }

	  IntervalDodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval2.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'dodge' }];
	    return cfg;
	  };

	  return IntervalDodge;
	}(Interval);

	var IntervalSymmetric = function (_Interval3) {
	  _inherits(IntervalSymmetric, _Interval3);

	  function IntervalSymmetric() {
	    _classCallCheck(this, IntervalSymmetric);

	    return _possibleConstructorReturn(this, _Interval3.apply(this, arguments));
	  }

	  IntervalSymmetric.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval3.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'symmetric' }];
	    return cfg;
	  };

	  return IntervalSymmetric;
	}(Interval);

	Interval.Stack = IntervalStack;
	Interval.Dodge = IntervalDodge;
	Interval.Symmetric = IntervalSymmetric;

	GeomBase.Interval = Interval;
	GeomBase.IntervalStack = IntervalStack;
	GeomBase.IntervalDodge = IntervalDodge;
	GeomBase.IntervalSymmetric = IntervalSymmetric;

	module.exports = Interval;

	/***/ }),
	/* 343 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview interval shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var PathUtil = __webpack_require__(22);
	var GPathUtil = __webpack_require__(1).PathUtil;
	var Global = __webpack_require__(2);

	// 获取柱状图的几个点
	function getRectPoints(cfg, isPyramid) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var width = cfg.size;
	  // 有3种情况，
	  // 1. y，x都不是数组
	  // 2. y是数组，x不是
	  // 3. x是数组，y不是
	  var ymin = y0;
	  var ymax = y;
	  if (Util.isArray(y)) {
	    ymax = y[1];
	    ymin = y[0];
	  }

	  var xmin = void 0;
	  var xmax = void 0;
	  if (Util.isArray(x)) {
	    xmin = x[0];
	    xmax = x[1];
	  } else {
	    xmin = x - width / 2;
	    xmax = x + width / 2;
	  }

	  var points = [];
	  points.push({
	    x: xmin,
	    y: ymin
	  }, {
	    x: xmin,
	    y: ymax
	  });

	  if (isPyramid) {
	    points.push({
	      x: xmax,
	      y: (ymax + ymin) / 2
	    });
	  } else {
	    points.push({
	      x: xmax,
	      y: ymax
	    }, {
	      x: xmax,
	      y: ymin
	    });
	  }

	  return points;
	}

	function getRectPath(points) {
	  var path = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    if (point) {
	      var action = i === 0 ? 'M' : 'L';
	      path.push([action, point.x, point.y]);
	    }
	  }
	  var first = points[0];
	  path.push(['L', first.x, first.y]);
	  path.push(['z']);
	  return path;
	}

	function getLinePoints(cfg) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var points = [];

	  if (Util.isArray(y)) {
	    Util.each(y, function (yItem, idx) {
	      points.push({
	        x: Util.isArray(x) ? x[idx] : x,
	        y: yItem
	      });
	    });
	  } else {
	    points.push({
	      x: x,
	      y: y
	    }, {
	      x: x,
	      y: y0
	    });
	  }

	  return points;
	}

	function getTickPoints(cfg) {
	  var x = cfg.x;
	  var y = Util.isArray(cfg.y) ? cfg.y[1] : cfg.y;
	  var y0 = Util.isArray(cfg.y) ? cfg.y[0] : cfg.y0;

	  var barWidth = cfg.size;
	  var points = [];

	  points.push({
	    x: x - barWidth / 2,
	    y: y
	  }, {
	    x: x + barWidth / 2,
	    y: y
	  }, {
	    x: x,
	    y: y
	  }, {
	    x: x,
	    y: y0
	  }, {
	    x: x - barWidth / 2,
	    y: y0
	  }, {
	    x: x + barWidth / 2,
	    y: y0
	  });

	  return points;
	}

	function getTickPath(points) {
	  var path = [];
	  path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y]);
	  return path;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.interval;
	  var attrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowInterval;
	  var attrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getFunnelPath(cfg, isFunnel) {
	  var path = [];
	  var points = cfg.points;
	  var nextPoints = cfg.nextPoints;
	  if (!Util.isNil(nextPoints)) {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);
	  } else if (isFunnel) {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);
	  } else {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[2].x, points[2].y], ['Z']);
	  }

	  return path;
	}

	function getThetaCfg(point, coord) {
	  var r = coord.getRadius();
	  var inner = coord.innerRadius;
	  var startAngle = void 0;
	  var endAngle = void 0;
	  var ir = r * inner;
	  var startPoint = void 0;
	  var endPoint = void 0;

	  if (!Util.isArray(point.x) && Util.isArray(point.y)) {
	    point.x = [point.x, point.x]; // 如果x是一个值，y是数组，将x转成数组
	  }
	  if (Util.isArray(point.x)) {
	    startPoint = {
	      x: point.x[0],
	      y: point.y[0]
	    };
	    endPoint = {
	      x: point.x[1],
	      y: point.y[1]
	    };
	    startAngle = PathUtil.getPointAngle(coord, startPoint);
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	    if (endAngle <= startAngle) {
	      // 考虑占比百分百的情形
	      endAngle = endAngle + Math.PI * 2;
	    }
	  } else {
	    endPoint = point;
	    startAngle = coord.startAngle;
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	  }
	  return {
	    r: r,
	    ir: ir,
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}

	// 获取选中时的样式，当前仅支持饼图
	function _getSelectedCfg(type, cfg) {
	  var geom = cfg.geom;
	  var coord = geom.get('coord');
	  var point = cfg.point;
	  var r = 7.5;
	  var selectedCfg = void 0;
	  if (coord && coord.type === 'theta') {
	    var thetaCfg = getThetaCfg(point, coord);
	    var middleAngle = (thetaCfg.endAngle - thetaCfg.startAngle) / 2 + thetaCfg.startAngle;
	    var x = r * Math.cos(middleAngle);
	    var y = r * Math.sin(middleAngle);
	    selectedCfg = {
	      transform: [['t', x, y]]
	    };
	  }
	  return Util.mix({}, selectedCfg);
	}

	var Interval = Shape.registerFactory('interval', {
	  defaultShapeType: 'rect',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    if (!type || Util.inArray(['rect', 'funnel', 'pyramid'], type)) {
	      // 透明度降低 0.15
	      var fillOpacity = cfg.fillOpacity || cfg.opacity || 1;
	      return {
	        fillOpacity: fillOpacity - 0.15
	      };
	    }
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  },
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return getRectPoints(pointInfo);
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    return _getSelectedCfg(type, cfg);
	  }
	});

	// 默认柱状图
	Shape.registerShape('interval', 'rect', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getFillAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	// 空心柱状图
	Shape.registerShape('interval', 'hollowRect', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getLineAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	// 线形柱状图
	Shape.registerShape('interval', 'line', {
	  getPoints: function getPoints(pointInfo) {
	    return getLinePoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    attrs.lineWidth = cfg.size || 1; // size 就是线的宽度
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'line',
	      radius: 5
	    }, lineCfg);
	  }
	});

	// 钉子形的柱状图
	Shape.registerShape('interval', 'tick', {
	  getPoints: function getPoints(pointInfo) {
	    return getTickPoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getTickPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'tick',
	      radius: 5
	    }, lineCfg);
	  }
	});

	// 漏斗图
	Shape.registerShape('interval', 'funnel', {
	  getPoints: function getPoints(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, true);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, funnelCfg);
	  }
	});

	// 金字塔图
	Shape.registerShape('interval', 'pyramid', {
	  getPoints: function getPoints(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo, true);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, false);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, funnelCfg);
	  }
	});

	// 水波图
	/**
	 * 用贝塞尔曲线模拟正弦波
	 * Using Bezier curves to fit sine wave.
	 * There is 4 control points for each curve of wave,
	 * which is at 1/4 wave length of the sine wave.
	 *
	 * The control points for a wave from (a) to (d) are a-b-c-d:
	 *          c *----* d
	 *     b *
	 *       |
	 * ... a * ..................
	 *
	 * whose positions are a: (0, 0), b: (0.5, 0.5), c: (1, 1), d: (PI / 2, 1)
	 *
	 * @param {number} x          x position of the left-most point (a)
	 * @param {number} stage      0-3, stating which part of the wave it is
	 * @param {number} waveLength wave length of the sine wave
	 * @param {number} amplitude  wave amplitude
	 * @return {Array} 正弦片段曲线
	 */
	function getWaterWavePositions(x, stage, waveLength, amplitude) {
	  if (stage === 0) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2, amplitude / 2], [x + 1 / 2 * waveLength / Math.PI, amplitude], [x + waveLength / 4, amplitude]];
	  } else if (stage === 1) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2), amplitude], [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1), amplitude / 2], [x + waveLength / 4, 0]];
	  } else if (stage === 2) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2, -amplitude / 2], [x + 1 / 2 * waveLength / Math.PI, -amplitude], [x + waveLength / 4, -amplitude]];
	  }
	  return [[x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2), -amplitude], [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1), -amplitude / 2], [x + waveLength / 4, 0]];
	}
	/**
	 * 获取水波路径
	 * @param  {number} radius          半径
	 * @param  {number} waterLevel      水位
	 * @param  {number} waveLength      波长
	 * @param  {number} phase           相位
	 * @param  {number} amplitude       震幅
	 * @param  {number} cx              圆心x
	 * @param  {number} cy              圆心y
	 * @return {Array}  path            路径
	 * @reference http://gitlab.alipay-inc.com/datavis/g6/blob/1.2.0/src/graph/utils/path.js#L135
	 */
	function getWaterWavePath(radius, waterLevel, waveLength, phase, amplitude, cx, cy) {
	  var curves = Math.ceil(2 * radius / waveLength * 4) * 2;
	  var path = [];

	  // map phase to [-Math.PI * 2, 0]
	  while (phase < -Math.PI * 2) {
	    phase += Math.PI * 2;
	  }
	  while (phase > 0) {
	    phase -= Math.PI * 2;
	  }
	  phase = phase / Math.PI / 2 * waveLength;

	  var left = cx - radius + phase - radius * 2;
	  /**
	   * top-left corner as start point
	   *
	   * draws this point
	   *  |
	   * \|/
	   *  ~~~~~~~~
	   *  |      |
	   *  +------+
	   */
	  path.push(['M', left, waterLevel]);

	  /**
	   * top wave
	   *
	   * ~~~~~~~~ <- draws this sine wave
	   * |      |
	   * +------+
	   */
	  var waveRight = 0;
	  for (var c = 0; c < curves; ++c) {
	    var stage = c % 4;
	    var pos = getWaterWavePositions(c * waveLength / 4, stage, waveLength, amplitude);
	    path.push(['C', pos[0][0] + left, -pos[0][1] + waterLevel, pos[1][0] + left, -pos[1][1] + waterLevel, pos[2][0] + left, -pos[2][1] + waterLevel]);

	    if (c === curves - 1) {
	      waveRight = pos[2][0];
	    }
	  }

	  /**
	   * top-right corner
	   *
	   *                       ~~~~~~~~
	   * 3. draws this line -> |      | <- 1. draws this line
	   *                       +------+
	   *                          ^
	   *                          |
	   *                  2. draws this line
	   */
	  path.push(['L', waveRight + left, cy + radius]);
	  path.push(['L', left, cy + radius]);
	  path.push(['L', left, waterLevel]);
	  return path;
	}

	/**
	 * 添加水波
	 * @param {number} x           中心x
	 * @param {number} y           中心y
	 * @param {number} level       水位等级 0～1
	 * @param {number} waveCount   水波数
	 * @param {number} colors      色值
	 * @param {number} group       图组
	 * @param {number} clip        用于剪切的图形
	 * @param {number} radius      绘制图形的高度
	 */
	function addWaterWave(x, y, level, waveCount, colors, group, clip, radius) {
	  var bbox = clip.getBBox();
	  var width = bbox.maxX - bbox.minX;
	  var height = bbox.maxY - bbox.minY;
	  var duration = 5000;
	  var delayDiff = 300;
	  for (var i = 0; i < waveCount; i++) {
	    var wave = group.addShape('path', {
	      attrs: {
	        path: getWaterWavePath(radius, bbox.minY + height * level, width / 4, 0, width / 64, x, y),
	        fill: colors[i],
	        clip: clip
	      }
	    });
	    wave.animate({
	      transform: [['t', width / 2, 0]],
	      repeat: true
	    }, duration - i * delayDiff);
	  }
	}

	Shape.registerShape('interval', 'liquid-fill-gauge', {
	  draw: function draw(cfg, container) {
	    var self = this;
	    var cy = 0.5;
	    var sumX = 0;
	    var minX = Infinity;
	    Util.each(cfg.points, function (p) {
	      if (p.x < minX) {
	        minX = p.x;
	      }
	      sumX += p.x;
	    });
	    var cx = sumX / cfg.points.length;
	    var cp = self.parsePoint({ x: cx, y: cy });
	    var minP = self.parsePoint({ x: minX, y: 0.5 });
	    var xWidth = cp.x - minP.x;
	    var radius = Math.min(xWidth, minP.y);
	    var attrs = getFillAttrs(cfg);
	    var clipCircle = container.addShape('circle', {
	      attrs: {
	        x: cp.x,
	        y: cp.y,
	        r: radius
	      }
	    });
	    addWaterWave(cp.x, cp.y, cfg.y / (2 * cp.y), 1, [attrs.fill], container, clipCircle, radius * 4);
	    return container.addShape('circle', {
	      attrs: Util.mix(getLineAttrs(cfg), {
	        x: cp.x,
	        y: cp.y,
	        r: radius + radius / 8
	      })
	    });
	  }
	});

	var pathMetaCache = {};
	Shape.registerShape('interval', 'liquid-fill-path', {
	  draw: function draw(cfg, container) {
	    var self = this;
	    var attrs = Util.mix({}, getFillAttrs(cfg));
	    var path = cfg.shape[1];

	    var cy = 0.5;
	    var sumX = 0;
	    var minX = Infinity;
	    Util.each(cfg.points, function (p) {
	      if (p.x < minX) {
	        minX = p.x;
	      }
	      sumX += p.x;
	    });
	    var cx = sumX / cfg.points.length;
	    var cp = self.parsePoint({ x: cx, y: cy });
	    var minP = self.parsePoint({ x: minX, y: 0.5 });
	    var xWidth = cp.x - minP.x;
	    var radius = Math.min(xWidth, minP.y);

	    var pathMeta = void 0;
	    if (pathMetaCache[path]) {
	      pathMeta = pathMetaCache[path];
	    } else {
	      var segments = GPathUtil.parsePathString(path);
	      pathMetaCache[path] = pathMeta = {
	        segments: segments
	      };
	    }
	    var transform = [];
	    if (attrs.rotate) {
	      transform.push(['r', attrs.rotate / 180 * Math.PI]);
	      delete attrs.rotate;
	    }
	    var shape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        fillOpacity: 0,
	        path: pathMeta.segments
	      })
	    });
	    var bbox = Util.cloneDeep(shape.getBBox());
	    var rangeX = bbox.maxX - bbox.minX;
	    var rangeY = bbox.maxY - bbox.minY;
	    var range = Math.max(rangeX, rangeY);
	    var scale = radius * 2 / range;
	    shape.transform(transform.concat([['s', scale, scale]]));
	    var dw = scale * rangeX / 2; // (bbox.maxX - bbox.minX) / 2;
	    var dh = scale * rangeY / 2; // (bbox.maxY - bbox.minY) / 2;
	    shape.transform([['t', cp.x - dw, cp.y - dh]]);
	    addWaterWave(cp.x, cp.y, cfg.y / (2 * cp.y), 1, [attrs.fill], container, shape, minP.y * 4);

	    var keyShape = container.addShape('path', {
	      attrs: Util.mix(getLineAttrs(cfg), {
	        path: pathMeta.segments
	      })
	    });
	    keyShape.transform(transform.concat([['s', scale, scale], ['t', cp.x - dw, cp.y - dh]]));
	    return keyShape;
	  }
	});

	Shape.registerShape('interval', 'top-line', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var style = cfg.style || {};
	    var linePath = [['M', cfg.points[1].x, cfg.points[1].y], ['L', cfg.points[2].x, cfg.points[2].y]];
	    var lineAttrs = {
	      stroke: style.stroke || 'white',
	      lineWidth: style.lineWidth || 1,
	      path: this.parsePath(linePath)
	    };
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    delete attrs.stroke; // 不在柱子上绘制线
	    var rectShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        zIndex: 0,
	        path: path
	      })
	    });
	    container.addShape('path', {
	      zIndex: 1,
	      attrs: lineAttrs
	    });
	    return rectShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getFillAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	module.exports = Interval;

	/***/ }),
	/* 344 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 线图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Path = __webpack_require__(335);
	__webpack_require__(345);

	var Line = function (_Path) {
	  _inherits(Line, _Path);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Path.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Path.prototype.getDefaultCfg.call(this);
	    cfg.type = 'line';
	    cfg.sortable = true;
	    return cfg;
	  };

	  return Line;
	}(Path);

	var LineStack = function (_Line) {
	  _inherits(LineStack, _Line);

	  function LineStack() {
	    _classCallCheck(this, LineStack);

	    return _possibleConstructorReturn(this, _Line.apply(this, arguments));
	  }

	  LineStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Line.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return LineStack;
	}(Line);

	Line.Stack = LineStack;

	GeomBase.Line = Line;
	GeomBase.LineStack = LineStack;

	module.exports = Line;

	/***/ }),
	/* 345 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var PathUtil = __webpack_require__(22);
	var ShapeUtil = __webpack_require__(118);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);
	var DOT_ARR = [1, 1];
	var DASH_ARR = [5.5, 1];

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getMarkerAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: 2,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity,
	    radius: 6
	  }, cfg.style);
	  return shapeCfg;
	}

	// 获取带有上下区间的 path
	function getRangePath(points, smooth, isInCircle, cfg) {
	  var topPoints = [];
	  var isStack = cfg.isStack;
	  var bottomPoints = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    var tmp = ShapeUtil.splitPoints(point);
	    bottomPoints.push(tmp[0]);
	    topPoints.push(tmp[1]);
	  }
	  var topPath = getSinglePath(topPoints, smooth, isInCircle, cfg);
	  var bottomPath = getSinglePath(bottomPoints, smooth, isInCircle, cfg);
	  if (isStack) {
	    return topPath;
	  }
	  return topPath.concat(bottomPath);
	}

	// 单条 path
	function getSinglePath(points, smooth, isInCircle, cfg) {
	  var path = void 0;
	  if (!smooth) {
	    path = PathUtil.getLinePath(points, false);
	    if (isInCircle) {
	      path.push(['Z']);
	    }
	  } else {
	    // 直角坐标系下绘制曲线时限制最大值、最小值
	    var constraint = cfg.constraint;
	    if (isInCircle && points.length) {
	      points.push({ x: points[0].x, y: points[0].y });
	    }
	    path = PathUtil.getSplinePath(points, false, constraint);
	  }

	  return path;
	}
	// get line path
	function getPath(cfg, smooth) {
	  var path = void 0;
	  var points = cfg.points;
	  var isInCircle = cfg.isInCircle;
	  var first = points[0];
	  if (Util.isArray(first.y)) {
	    path = getRangePath(points, smooth, isInCircle, cfg);
	  } else {
	    path = getSinglePath(points, smooth, isInCircle, cfg);
	  }
	  return path;
	}

	function _interpPoints(points, fn) {
	  var tmpPoints = [];
	  Util.each(points, function (point, index) {
	    var nextPoint = points[index + 1];
	    tmpPoints.push(point);
	    if (nextPoint) {
	      tmpPoints = tmpPoints.concat(fn(point, nextPoint));
	    }
	  });
	  return tmpPoints;
	}
	// 插值的图形path，不考虑null
	function _getInterPath(points) {
	  var path = [];
	  Util.each(points, function (point, index) {
	    var subPath = index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];
	    path.push(subPath);
	  });
	  return path;
	}
	// 插值的图形
	function _getInterPointShapeCfg(cfg, fn) {
	  var points = _interpPoints(cfg.points, fn);
	  return _getInterPath(points);
	}

	function _markerFn(x, y, r, ctx) {
	  ctx.moveTo(x - r, y);
	  ctx.lineTo(x + r, y);
	}

	function _smoothMarkerFn(x, y, r, ctx) {
	  ctx.moveTo(x - r, y);
	  ctx.arcTo(x - r / 2, y - r / 2, x, y, r / 2);
	  ctx.lineTo(x, y);
	  ctx.arcTo(x + r / 2, y + r / 2, x + r, y - r / 2, r / 2);
	}
	// get marker cfg
	function _getMarkerCfg(cfg, smooth) {
	  return Util.mix({
	    symbol: smooth ? _smoothMarkerFn : _markerFn
	  }, getMarkerAttrs(cfg));
	}

	function _getInterMarkerCfg(cfg, fn) {
	  return Util.mix({
	    symbol: fn
	  }, getMarkerAttrs(cfg));
	}

	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var point = cfg.points[0];
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}

	// regist line geom
	var Line = Shape.registerFactory('line', {
	  // 默认的shape
	  defaultShapeType: 'line',
	  /* getMarkerCfg(type, cfg) {
	    const lineObj = Line[type] || Line.line;
	    return lineObj.getMarkerCfg(cfg);
	  }, */
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  },

	  // 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = void 0;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.draw(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  }
	});

	// draw line shape
	Shape.registerShape('line', 'line', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 点线 ···
	Shape.registerShape('line', 'dot', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        lineDash: DOT_ARR
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});

	// 断线 - - -
	Shape.registerShape('line', 'dash', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix({
	        path: path,
	        lineDash: DASH_ARR
	      }, attrs)
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = tmp.lineDash || DASH_ARR;
	    return tmp;
	  }
	});

	// draw smooth line shape
	Shape.registerShape('line', 'smooth', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var coord = this._coord;
	    // 曲线的限制
	    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
	    var path = getPath(cfg, true);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg, true);
	  }
	});

	Shape.registerShape('line', 'hv', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: nextPoint.x,
	        y: point.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - r - 1, y - 2.5);
	      ctx.lineTo(x, y - 2.5);
	      ctx.lineTo(x, y + 2.5);
	      ctx.lineTo(x + r + 1, y + 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'vh', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: point.x,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - r - 1, y + 2.5);
	      ctx.lineTo(x, y + 2.5);
	      ctx.lineTo(x, y - 2.5);
	      ctx.lineTo(x + r + 1, y - 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'hvh', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      var middlex = (nextPoint.x - point.x) / 2 + point.x;
	      tmp.push({
	        x: middlex,
	        y: point.y
	      });
	      tmp.push({
	        x: middlex,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - (r + 1), y + 2.5);
	      ctx.lineTo(x - r / 2, y + 2.5);
	      ctx.lineTo(x - r / 2, y - 2.5);
	      ctx.lineTo(x + r / 2, y - 2.5);
	      ctx.lineTo(x + r / 2, y + 2.5);
	      ctx.lineTo(x + r + 1, y + 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'vhv', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      var middley = (nextPoint.y - point.y) / 2 + point.y;
	      tmp.push({
	        x: point.x,
	        y: middley
	      });
	      tmp.push({
	        x: nextPoint.x,
	        y: middley
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      // 宽 13px，高 8px
	      ctx.moveTo(x - 5, y + 2.5);
	      ctx.lineTo(x - 5, y);
	      ctx.lineTo(x, y);
	      ctx.lineTo(x, y - 3);
	      ctx.lineTo(x, y + 3);
	      ctx.lineTo(x + 6.5, y + 3);
	    });
	  }
	});

	Line.spline = Line.smooth;

	module.exports = Line;

	/***/ }),
	/* 346 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 点图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	__webpack_require__(347);

	var Point = function (_GeomBase) {
	  _inherits(Point, _GeomBase);

	  function Point() {
	    _classCallCheck(this, Point);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Point.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'point';
	    cfg.shapeType = 'point';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Point.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
	    var self = this;
	    var shape = obj.shape;
	    var cfg = self.getDrawCfg(obj);
	    var geomShape = void 0;
	    if (Util.isArray(obj.y)) {
	      var hasAdjust = self.hasStack();
	      Util.each(obj.y, function (y, idx) {
	        cfg.y = y;
	        cfg.yIndex = idx;
	        if (!hasAdjust || idx !== 0) {
	          geomShape = shapeFactory.drawShape(shape, cfg, container);
	          self.appendShapeInfo(geomShape, index + idx);
	        }
	      });
	    } else if (!Util.isNil(obj.y)) {
	      geomShape = shapeFactory.drawShape(shape, cfg, container);
	      self.appendShapeInfo(geomShape, index);
	    }
	  };

	  return Point;
	}(GeomBase);

	var PointJitter = function (_Point) {
	  _inherits(PointJitter, _Point);

	  function PointJitter() {
	    _classCallCheck(this, PointJitter);

	    return _possibleConstructorReturn(this, _Point.apply(this, arguments));
	  }

	  PointJitter.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Point.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'jitter' }];
	    return cfg;
	  };

	  return PointJitter;
	}(Point);

	var PointStack = function (_Point2) {
	  _inherits(PointStack, _Point2);

	  function PointStack() {
	    _classCallCheck(this, PointStack);

	    return _possibleConstructorReturn(this, _Point2.apply(this, arguments));
	  }

	  PointStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Point2.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return PointStack;
	}(Point);

	Point.Jitter = PointJitter;
	Point.Stack = PointStack;

	GeomBase.Point = Point;
	GeomBase.PointJitter = PointJitter;
	GeomBase.PointStack = PointStack;

	module.exports = Point;

	/***/ }),
	/* 347 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview point shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var ShapeUtil = __webpack_require__(118);
	var Global = __webpack_require__(2);
	var Shape = __webpack_require__(10);
	// const svgpath = require('svgpath');

	var _require = __webpack_require__(1),
	    Marker = _require.Marker,
	    PathUtil = _require.PathUtil;

	var SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];
	var HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line', 'pointerLine', 'pointerArrow'];
	var SQRT_3 = Math.sqrt(3);

	// 增加marker
	Util.mix(Marker.Symbols, {
	  hexagon: function hexagon(x, y, r, ctx) {
	    var diffX = r / 2 * SQRT_3;
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x + diffX, y - r / 2);
	    ctx.lineTo(x + diffX, y + r / 2);
	    ctx.lineTo(x, y + r);
	    ctx.lineTo(x - diffX, y + r / 2);
	    ctx.lineTo(x - diffX, y - r / 2);
	    ctx.closePath();
	  },
	  bowtie: function bowtie(x, y, r, ctx) {
	    var diffY = r - 1.5;
	    ctx.moveTo(x - r, y - diffY);
	    ctx.lineTo(x + r, y + diffY);
	    ctx.lineTo(x + r, y - diffY);
	    ctx.lineTo(x - r, y + diffY);
	    ctx.closePath();
	  },
	  cross: function cross(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.moveTo(x + r, y - r);
	    ctx.lineTo(x - r, y + r);
	  },
	  tick: function tick(x, y, r, ctx) {
	    ctx.moveTo(x - r / 2, y - r);
	    ctx.lineTo(x + r / 2, y - r);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	    ctx.moveTo(x - r / 2, y + r);
	    ctx.lineTo(x + r / 2, y + r);
	  },
	  plus: function plus(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  },
	  hyphen: function hyphen(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	  },
	  line: function line(x, y, r, ctx) {
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  }
	});

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.point;
	  var pointAttrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    fillOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowPoint;
	  var pointAttrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}

	var Point = Shape.registerFactory('point', {
	  defaultShapeType: 'hollowCircle',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    // 点放大 + 颜色加亮
	    var radius = cfg.radius;
	    var color = void 0;
	    if (type && (type.indexOf('hollow') === 0 || Util.indexOf(HOLLOW_SHAPES, type) !== -1) || !type) {
	      color = cfg.stroke || cfg.strokeStyle;
	    } else {
	      color = cfg.fill || cfg.fillStyle;
	    }

	    return {
	      radius: radius + 1,
	      shadowBlur: radius,
	      shadowColor: color,
	      stroke: color,
	      strokeOpacity: 1,
	      lineWidth: 1
	    };
	  },
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  }
	});

	function getRectPath(cfg) {
	  var x = cfg.points[0].x;
	  var y = cfg.points[0].y;
	  var w = cfg.size[0];
	  var h = cfg.size[1];
	  var path = [['M', x - 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y + 0.5 * h], ['L', x - 0.5 * w, y + 0.5 * h], ['z']];
	  return path;
	}

	// 用于桑基图的节点
	Shape.registerShape('point', 'rect', {
	  draw: function draw(cfg, container) {
	    var rectAttrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg);
	    path = this.parsePath(path);
	    var gShape = container.addShape('path', {
	      attrs: Util.mix(rectAttrs, {
	        path: path
	      })
	    });
	    return gShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var attrs = getFillAttrs(cfg);
	    attrs.symbol = 'rect';
	    attrs.radius = 4.5;
	    return attrs;
	  }
	});

	// 添加shapes
	Util.each(SHAPES, function (shape) {
	  Shape.registerShape('point', shape, {
	    draw: function draw(cfg, container) {
	      // cfg.points = this.parsePoints(cfg.points);
	      var attrs = getFillAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getFillAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	  // 添加该 shape 对应的 hollowShape
	  Shape.registerShape('point', 'hollow' + Util.upperFirst(shape), {
	    draw: function draw(cfg, container) {
	      // cfg.points = this.parsePoints(cfg.points);
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	});

	// 添加 hollowShapes
	Util.each(HOLLOW_SHAPES, function (shape) {
	  Shape.registerShape('point', shape, {
	    draw: function draw(cfg, container) {
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	});

	// image
	Shape.registerShape('point', 'image', {
	  draw: function draw(cfg, container) {
	    cfg.points = this.parsePoints(cfg.points);
	    return container.addShape('image', {
	      attrs: {
	        x: cfg.points[0].x - cfg.size / 2,
	        y: cfg.points[0].y - cfg.size,
	        width: cfg.size,
	        height: cfg.size,
	        img: cfg.shape[1]
	      }
	    });
	  }
	});

	// const pathRangeCache = {};
	// function getUnifiedPath(path, cfg) {
	//   let pathRange;
	//   if (pathRangeCache[path]) {
	//     pathRange = pathRangeCache[path];
	//   } else {
	//     const segments = PathUtil.parsePathString(path);
	//     const nums = Util.flatten(segments).filter(num => Util.isNumber(num));
	//     pathRangeCache[path] = pathRange = Math.max.apply(null, nums) - Math.min.apply(null, nums);
	//   }
	//
	//   const size = cfg.size || 10;
	//   const scale = size / pathRange;
	//   const transformed = svgpath(path)
	//     .scale(scale)
	//     .translate(cfg.x, cfg.y);
	//   if (cfg.style && cfg.style.rotate) {
	//     transformed.rotate(cfg.style.rotate, cfg.x, cfg.y);
	//   }
	//   return PathUtil.parsePathString(transformed.toString());
	// }

	// path
	var pathMetaCache = {};
	Shape.registerShape('point', 'path', {
	  draw: function draw(cfg, container) {
	    var attrs = Util.mix({}, getLineAttrs(cfg), getFillAttrs(cfg));
	    var path = cfg.shape[1];
	    var size = cfg.size || 10;
	    var pathMeta = void 0;
	    if (pathMetaCache[path]) {
	      pathMeta = pathMetaCache[path];
	    } else {
	      var segments = PathUtil.parsePathString(path);
	      var nums = Util.flatten(segments).filter(function (num) {
	        return Util.isNumber(num);
	      });
	      pathMetaCache[path] = pathMeta = {
	        range: Math.max.apply(null, nums) - Math.min.apply(null, nums),
	        segments: segments
	      };
	    }
	    var scale = size / pathMeta.range;
	    var transform = [];

	    if (attrs.rotate) {
	      transform.push(['r', attrs.rotate / 180 * Math.PI]);
	      delete attrs.rotate;
	    }
	    var shape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: pathMeta.segments
	      })
	    });
	    transform.push(['s', scale, scale], ['t', cfg.x, cfg.y]);
	    shape.transform(transform);
	    return shape;
	  }
	});

	module.exports = Point;

	/***/ }),
	/* 348 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespaces__ = __webpack_require__(349);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var prefix = name += "",
	      i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */].hasOwnProperty(prefix) ? { space: __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */][prefix], local: name } : name;
	});

	/***/ }),
	/* 349 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return xhtml; });
	var xhtml = "http://www.w3.org/1999/xhtml";

	/* harmony default export */ __webpack_exports__["a"] = ({
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	});

	/***/ }),
	/* 350 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function none() {}

	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	  return selector == null ? none : function () {
	    return this.querySelector(selector);
	  };
	});

	/***/ }),
	/* 351 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (node) {
	    return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
	    node.document && node // node is a Window
	    || node.defaultView; // node is a Document
	});

	/***/ }),
	/* 352 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return event; });
	/* harmony export (immutable) */ __webpack_exports__["a"] = customEvent;
	var filterEvents = {};

	var event = null;

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!("onmouseenter" in element)) {
	    filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function (event) {
	    var related = event.relatedTarget;
	    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function (event1) {
	    var event0 = event; // Events can be reentrant (e.g., focus).
	    event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      event = event0;
	    }
	  };
	}

	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return { type: t, name: name };
	  });
	}

	function onRemove(typename) {
	  return function () {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function (d, i, group) {
	    var on = this.__on,
	        o,
	        listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = { type: typename.type, name: typename.name, value: value, listener: listener, capture: capture };
	    if (!on) this.__on = [o];else on.push(o);
	  };
	}

	/* harmony default export */ __webpack_exports__["b"] = (function (typename, value, capture) {
	  var typenames = parseTypenames(typename + ""),
	      i,
	      n = typenames.length,
	      t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) {
	    this.each(on(typenames[i], value, capture));
	  }return this;
	});

	function customEvent(event1, listener, that, args) {
	  var event0 = event;
	  event1.sourceEvent = event;
	  event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    event = event0;
	  }
	}

	/***/ }),
	/* 353 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_on__ = __webpack_require__(352);


	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var current = __WEBPACK_IMPORTED_MODULE_0__selection_on__["c" /* event */],
	      source;
	  while (source = current.sourceEvent) {
	    current = source;
	  }return current;
	});

	/***/ }),
	/* 354 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = now;
	/* harmony export (immutable) */ __webpack_exports__["a"] = Timer;
	/* harmony export (immutable) */ __webpack_exports__["c"] = timer;
	/* unused harmony export timerFlush */
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var frame = 0,
	    // is an animation frame pending?
	timeout = 0,
	    // is a timeout pending?
	interval = 0,
	    // are any timers active?
	pokeDelay = 1000,
	    // how frequently we check for clock skew
	taskHead,
	    taskTail,
	    clockLast = 0,
	    clockNow = 0,
	    clockSkew = 0,
	    clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	    setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	  setTimeout(f, 17);
	};

	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call = this._time = this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function restart(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function stop() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer();
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead,
	      e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(),
	      delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0,
	      t1 = taskHead,
	      t2,
	      time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	/***/ }),
	/* 355 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(356);
	/* unused harmony reexport interpolate */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(373);
	/* unused harmony reexport interpolateArray */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(359);
	/* unused harmony reexport interpolateBasis */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(371);
	/* unused harmony reexport interpolateBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(374);
	/* unused harmony reexport interpolateDate */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(338);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(375);
	/* unused harmony reexport interpolateObject */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(436);
	/* unused harmony reexport interpolateRound */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(376);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(437);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(440);
	/* unused harmony reexport interpolateZoom */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(370);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"]; });
	/* unused harmony reexport interpolateRgbBasis */
	/* unused harmony reexport interpolateRgbBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(441);
	/* unused harmony reexport interpolateHsl */
	/* unused harmony reexport interpolateHslLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(442);
	/* unused harmony reexport interpolateLab */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(443);
	/* unused harmony reexport interpolateHcl */
	/* unused harmony reexport interpolateHclLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(444);
	/* unused harmony reexport interpolateCubehelix */
	/* unused harmony reexport interpolateCubehelixLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(445);
	/* unused harmony reexport quantize */


















	/***/ }),
	/* 356 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(370);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(373);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(374);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(338);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(375);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(376);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(372);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };










	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	    var t = typeof b === "undefined" ? "undefined" : _typeof(b),
	        c;
	    return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b) : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */] : t === "string" ? (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */] : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */] : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */] : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */] : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
	});

	/***/ }),
	/* 357 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = Color;
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return _darker; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return _brighter; });
	/* harmony export (immutable) */ __webpack_exports__["e"] = color;
	/* harmony export (immutable) */ __webpack_exports__["h"] = rgbConvert;
	/* harmony export (immutable) */ __webpack_exports__["g"] = rgb;
	/* harmony export (immutable) */ __webpack_exports__["b"] = Rgb;
	/* unused harmony export hslConvert */
	/* harmony export (immutable) */ __webpack_exports__["f"] = hsl;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);


	function Color() {}

	var _darker = 0.7;

	var _brighter = 1 / _darker;


	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex3 = /^#([0-9a-f]{3})$/,
	    reHex6 = /^#([0-9a-f]{6})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
	  displayable: function displayable() {
	    return this.rgb().displayable();
	  },
	  toString: function toString() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb();
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function rgb() {
	    return this;
	  },
	  displayable: function displayable() {
	    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  toString: function toString() {
	    var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl();
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	  },
	  displayable: function displayable() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	}

	/***/ }),
	/* 358 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = extend;
	/* harmony default export */ __webpack_exports__["a"] = (function (constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	});

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) {
	    prototype[key] = definition[key];
	  }return prototype;
	}

	/***/ }),
	/* 359 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = basis;
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1,
	      t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
	}

	/* harmony default export */ __webpack_exports__["b"] = (function (values) {
	  var n = values.length - 1;
	  return function (t) {
	    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	});

	/***/ }),
	/* 360 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	    return typeof selector === "string" ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[document.querySelector(selector)]], [document.documentElement]) : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[selector]], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
	});

	/***/ }),
	/* 361 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function empty() {
	  return [];
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	  return selector == null ? empty : function () {
	    return this.querySelectorAll(selector);
	  };
	});

	/***/ }),
	/* 362 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var matcher = function matcher(selector) {
	  return function () {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
	    matcher = function matcher(selector) {
	      return function () {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	/* harmony default export */ __webpack_exports__["a"] = (matcher);

	/***/ }),
	/* 363 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = EnterNode;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(364);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(60);



	/* harmony default export */ __webpack_exports__["b"] = (function () {
	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._enter || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
	});

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function appendChild(child) {
	    return this._parent.insertBefore(child, this._next);
	  },
	  insertBefore: function insertBefore(child, next) {
	    return this._parent.insertBefore(child, next);
	  },
	  querySelector: function querySelector(selector) {
	    return this._parent.querySelector(selector);
	  },
	  querySelectorAll: function querySelectorAll(selector) {
	    return this._parent.querySelectorAll(selector);
	  }
	};

	/***/ }),
	/* 364 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (update) {
	  return new Array(update.length);
	});

	/***/ }),
	/* 365 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = styleValue;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(351);


	function styleRemove(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function () {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
	});

	function styleValue(node, name) {
	  return node.style.getPropertyValue(name) || Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	/***/ }),
	/* 366 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_selection_index__ = __webpack_require__(426);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_transition_index__ = __webpack_require__(113);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return __WEBPACK_IMPORTED_MODULE_1__src_transition_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_active__ = __webpack_require__(472);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "active", function() { return __WEBPACK_IMPORTED_MODULE_2__src_active__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_interrupt__ = __webpack_require__(367);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "interrupt", function() { return __WEBPACK_IMPORTED_MODULE_3__src_interrupt__["a"]; });





	/***/ }),
	/* 367 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_schedule__ = __webpack_require__(61);


	/* harmony default export */ __webpack_exports__["a"] = (function (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) {
	      empty = false;continue;
	    }
	    active = schedule.state > __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["d" /* STARTING */] && schedule.state < __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["b" /* ENDING */];
	    schedule.state = __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["a" /* ENDED */];
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	});

	/***/ }),
	/* 368 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(354);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"]; });
	/* unused harmony reexport timerFlush */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(430);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(431);
	/* unused harmony reexport interval */






	/***/ }),
	/* 369 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deg2rad; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return rad2deg; });
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	/***/ }),
	/* 370 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export rgbBasis */
	/* unused harmony export rgbBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(359);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(371);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(332);





	/* harmony default export */ __webpack_exports__["a"] = ((function rgbGamma(y) {
	  var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

	  function rgb(start, end) {
	    var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb.gamma = rgbGamma;

	  return rgb;
	})(1));

	function rgbSpline(spline) {
	  return function (colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i,
	        color;
	    for (i = 0; i < n; ++i) {
	      color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
	      r[i] = color.r || 0;
	      g[i] = color.g || 0;
	      b[i] = color.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color.opacity = 1;
	    return function (t) {
	      color.r = r(t);
	      color.g = g(t);
	      color.b = b(t);
	      return color + "";
	    };
	  };
	}

	var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
	var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);

	/***/ }),
	/* 371 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(359);


	/* harmony default export */ __webpack_exports__["a"] = (function (values) {
	  var n = values.length;
	  return function (t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
	  };
	});

	/***/ }),
	/* 372 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (x) {
	  return function () {
	    return x;
	  };
	});

	/***/ }),
	/* 373 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(356);


	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) {
	    x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
	  }for (; i < nb; ++i) {
	    c[i] = b[i];
	  }return function (t) {
	    for (i = 0; i < na; ++i) {
	      c[i] = x[i](t);
	    }return c;
	  };
	});

	/***/ }),
	/* 374 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var d = new Date();
	  return a = +a, b -= a, function (t) {
	    return d.setTime(a + b * t), d;
	  };
	});

	/***/ }),
	/* 375 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(356);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
	  if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function (t) {
	    for (k in i) {
	      c[k] = i[k](t);
	    }return c;
	  };
	});

	/***/ }),
	/* 376 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(338);


	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function () {
	    return b;
	  };
	}

	function one(b) {
	  return function (t) {
	    return b(t) + "";
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0,
	      // scan index for next number in b
	  am,
	      // current match in a
	  bm,
	      // current match in b
	  bs,
	      // string preceding current number in b, if any
	  i = -1,
	      // index in s
	  s = [],
	      // string constants and placeholders
	  q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) {
	      // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) {
	      // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else {
	      // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({ i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm) });
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	    for (var i = 0, o; i < b; ++i) {
	      s[(o = q[i]).i] = o.x(t);
	    }return s.join("");
	  });
	});

	/***/ }),
	/* 377 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(355);



	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	    var c;
	    return (typeof b === "number" ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["a" /* interpolateNumber */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */] : (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */]) : __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["c" /* interpolateString */])(a, b);
	});

	/***/ }),
	/* 378 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 分面的基类
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);

	/**
	 * 矩形的 facet 有以下属性：
	 * - colField 列的字段
	 * - rowField 行的字段
	 * - colValue 列字段的值
	 * - rowValue 行字段的值
	 * - cols 列数
	 * - rows 行数
	 * - colIndex 列的序号
	 * - rowIndex 行的序号
	 */

	/**
	 * 用于生成分面的类
	 * @class Facets.Rect
	 */

	var Rect = function (_Base) {
	  _inherits(Rect, _Base);

	  function Rect() {
	    _classCallCheck(this, Rect);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Rect.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'rect';
	    return cfg;
	  };

	  Rect.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    // var defs = self.defs;
	    var rst = [];
	    var rows = 1;
	    var cols = 1;
	    var colField = fields[0];
	    var rowField = fields[1];
	    var colValues = [''];
	    var rowValues = [''];
	    if (colField) {
	      colValues = self.getFieldValues(colField, data);
	      cols = colValues.length;
	    }
	    if (rowField) {
	      rowValues = self.getFieldValues(rowField, data);
	      rows = rowValues.length;
	    }

	    // 获取每个维度对应的frame
	    colValues.forEach(function (xVal, xIndex) {
	      rowValues.forEach(function (yVal, yIndex) {
	        var conditions = [{ field: colField, value: xVal, values: colValues }, { field: rowField, value: yVal, values: rowValues }];
	        var filter = self.getFilter(conditions);
	        var subData = data.filter(filter);
	        var facet = {
	          type: self.type,
	          colValue: xVal,
	          rowValue: yVal,
	          colField: colField,
	          rowField: rowField,
	          colIndex: xIndex,
	          rowIndex: yIndex,
	          cols: cols,
	          rows: rows,
	          data: subData,
	          region: self.getRegion(rows, cols, xIndex, yIndex)
	        };
	        rst.push(facet);
	      });
	    });

	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  Rect.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].title = null;
	      axes[xField].label = null;
	    } else if (facet.colIndex !== parseInt((facet.cols - 1) / 2)) {
	      axes[xField].title = null;
	    }
	  };
	  // 设置 y 坐标轴的文本、title 是否显示


	  Rect.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    } else if (facet.rowIndex !== parseInt((facet.rows - 1) / 2)) {
	      axes[yField].title = null;
	    }
	  };

	  Rect.prototype.renderTitle = function renderTitle(view, facet) {
	    if (facet.rowIndex === 0) {
	      this.drawColTitle(view, facet);
	    }
	    if (facet.colIndex === facet.cols - 1) {
	      this.drawRowTitle(view, facet);
	    }
	  };

	  return Rect;
	}(Base);

	module.exports = Rect;

	/***/ }),
	/* 379 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview list facets, support cols
	 */

	var Base = __webpack_require__(340);

	/**
	 * 用于生成分面的类
	 * @class Facets.List
	 */

	var List = function (_Base) {
	  _inherits(List, _Base);

	  function List() {
	    _classCallCheck(this, List);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  List.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'list';
	    cfg.cols = null; // 用户不设置时就显示一行
	    return cfg;
	  };

	  List.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var colField = fields[0];
	    if (!colField) {
	      throw 'Please specify for the field for facet!';
	    }
	    var colValues = self.getFieldValues(colField, data);
	    var count = colValues.length;
	    var cols = self.cols || count;
	    var rows = parseInt((count + cols - 1) / cols);
	    var rst = [];
	    colValues.forEach(function (xVal, index) {
	      var row = parseInt(index / cols);
	      var col = index % cols;
	      var conditions = [{ field: colField, value: xVal, values: colValues }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      var facet = {
	        type: self.type,
	        count: count,
	        colValue: xVal,
	        colField: colField,
	        rowField: null,
	        rowValue: xVal,
	        colIndex: col,
	        rowIndex: row,
	        cols: cols,
	        rows: rows,
	        data: subData,
	        region: self.getRegion(rows, cols, col, row)
	      };
	      rst.push(facet);
	    });
	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  List.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.rowIndex !== facet.rows - 1 && facet.cols * facet.rowIndex + facet.colIndex + 1 + facet.cols <= facet.count) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  List.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  return List;
	}(Base);

	module.exports = List;

	/***/ }),
	/* 380 */
	/***/ (function(module, exports, __webpack_require__) {

	var G2 = __webpack_require__(62);

	// geoms
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(385);
	__webpack_require__(342);
	__webpack_require__(344);
	__webpack_require__(335);
	__webpack_require__(346);
	__webpack_require__(386);
	__webpack_require__(388);
	__webpack_require__(390);

	// facets
	__webpack_require__(474);

	// interaction
	__webpack_require__(479);

	module.exports = G2;

	/***/ }),
	/* 381 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 面积图
	 * @author dxq613@gmail.com
	 */

	var GeomBase = __webpack_require__(16);
	var SplitMixin = __webpack_require__(333);
	var Util = __webpack_require__(0);
	__webpack_require__(382);

	var Area = function (_GeomBase) {
	  _inherits(Area, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Area.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'area';
	    cfg.shapeType = 'area';
	    cfg.generatePoints = true;
	    cfg.sortable = true;
	    return cfg;
	  };

	  function Area(cfg) {
	    _classCallCheck(this, Area);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SplitMixin);
	    return _this;
	  }

	  Area.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    var cfg = this.getDrawCfg(data[0]);
	    var splitArray = this.splitData(data);

	    cfg.origin = data; // path,line,area 等图的origin 是整个序列
	    Util.each(splitArray, function (subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	      var points = subData.map(function (obj) {
	        return obj.points;
	      });
	      cfg.points = points;
	      var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
	      self.appendShapeInfo(geomShape, index + splitedIndex);
	    });
	  };

	  return Area;
	}(GeomBase);

	var AreaStack = function (_Area) {
	  _inherits(AreaStack, _Area);

	  function AreaStack() {
	    _classCallCheck(this, AreaStack);

	    return _possibleConstructorReturn(this, _Area.apply(this, arguments));
	  }

	  AreaStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Area.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return AreaStack;
	}(Area);

	Area.Stack = AreaStack;

	GeomBase.Area = Area;
	GeomBase.AreaStack = AreaStack;

	module.exports = Area;

	/***/ }),
	/* 382 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview area shape
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var PathUtil = __webpack_require__(22);
	var Global = __webpack_require__(2);

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowArea;
	  var lineAttrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return lineAttrs;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.area;
	  var areaAttrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return areaAttrs;
	}

	function getPath(cfg, smooth, shape) {
	  var path = [];
	  var pointsArr = [];
	  var topLinePoints = []; // area 区域上部分
	  var bottomLinePoints = []; // area 区域下部分
	  var isInCircle = cfg.isInCircle;
	  Util.each(cfg.points, function (point) {
	    topLinePoints.push(point[1]);
	    bottomLinePoints.push(point[0]);
	  });
	  // if (!isInCircle) {
	  bottomLinePoints = bottomLinePoints.reverse();
	  // }
	  pointsArr.push(topLinePoints, bottomLinePoints);
	  Util.each(pointsArr, function (points, index) {
	    var subPath = [];
	    points = shape.parsePoints(points);
	    var p1 = points[0];
	    if (isInCircle) {
	      points.push({ x: p1.x, y: p1.y });
	    }
	    if (smooth) {
	      subPath = PathUtil.getSplinePath(points, false, cfg.constraint);
	    } else {
	      subPath = PathUtil.getLinePath(points, false);
	    }

	    if (index > 0) {
	      subPath[0][0] = 'L';
	    }
	    path = path.concat(subPath);
	  });
	  path.push(['Z']);
	  return path;
	}

	// get marker cfg
	function _getMarkerCfg(cfg) {
	  return {
	    symbol: function symbol(x, y, r, ctx) {
	      // 11px * 9px
	      ctx.save();
	      ctx.lineWidth = 2;
	      ctx.strokeStyle = ctx.fillStyle;
	      ctx.moveTo(x - 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y - 4);
	      ctx.stroke();
	      ctx.restore();
	      ctx.moveTo(x - 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y + 4);
	      ctx.lineTo(x - 5.5, y + 4);
	      ctx.closePath();
	    },

	    radius: 5,
	    fill: cfg.color,
	    fillOpacity: 0.3
	  };
	}

	// 鼠标悬浮触发active状态
	function _getActiveCfg(type, cfg) {
	  if (type === 'line' || type === 'smoothLine') {
	    // 线加粗
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  }
	  var opacity = cfg.fillOpacity || cfg.opacity || 1;
	  return {
	    fillOpacity: opacity - 0.15,
	    strokeOpacity: opacity - 0.15
	  };
	}

	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var coord = shapeObj._coord;
	  var point = coord.convertPoint(cfg.points[0][1]);
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}

	var Area = Shape.registerFactory('area', {
	  defaultShapeType: 'area',
	  /**
	   * @override
	   * @protected
	   * 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	   * 单点则补上y0点
	   */
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    var x = pointInfo.x;
	    var y = pointInfo.y;
	    var y0 = pointInfo.y0;
	    y = Util.isArray(y) ? y : [y0, y];

	    Util.each(y, function (yItem) {
	      points.push({
	        x: x,
	        y: yItem
	      });
	    });
	    return points;
	  },

	  // 获取激活的图形属性
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    return _getActiveCfg(type, cfg);
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = void 0;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.draw(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	// 默认：填充区域图
	Shape.registerShape('area', 'area', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getPath(cfg, false, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 填充平滑区域图
	Shape.registerShape('area', 'smooth', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var coord = this._coord;
	    // 曲线的限制
	    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
	    var path = getPath(cfg, true, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 封闭的折线
	Shape.registerShape('area', 'line', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, false, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 封闭的平滑线
	Shape.registerShape('area', 'smoothLine', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, true, this);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	Area.spline = Area.smooth;

	module.exports = Area;

	/***/ }),
	/* 383 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 边，用于关系图的边
	 * @author dxq613@gmail.com
	 */

	var GeomBase = __webpack_require__(16);
	__webpack_require__(384);

	var Edge = function (_GeomBase) {
	  _inherits(Edge, _GeomBase);

	  function Edge() {
	    _classCallCheck(this, Edge);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Edge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'edge';
	    cfg.shapeType = 'edge';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  return Edge;
	}(GeomBase);

	GeomBase.Edge = Edge;

	module.exports = Edge;

	/***/ }),
	/* 384 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 边的 shape
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var ShapeUtil = __webpack_require__(118);
	var Global = __webpack_require__(2);
	var PathUtil = __webpack_require__(22);
	var CORNER_PERCENT = 1 / 3;

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.edge;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	var Edge = Shape.registerFactory('edge', {
	  defaultShapeType: 'line',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  }
	});

	function getCPath(from, to) {
	  var points = [];
	  points.push({
	    x: from.x,
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2
	  });

	  points.push({
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2,
	    x: to.x
	  });
	  points.push(to);
	  var sub = ['C'];

	  Util.each(points, function (point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}

	function getQPath(to, center) {
	  var points = [];
	  points.push({
	    x: center.x,
	    y: center.y
	  });
	  points.push(to);

	  var sub = ['Q'];
	  Util.each(points, function (point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}

	function createSmoothPath(from, to) {
	  var sub = getCPath(from, to);
	  var path = [['M', from.x, from.y]];

	  path.push(sub);
	  return path;
	}

	function createArcPath(from, to, center) {
	  var sub = getQPath(to, center);
	  var path = [['M', from.x, from.y]];
	  path.push(sub);
	  return path;
	}

	function createArcWeightPath(points, center) {
	  var arc1 = getQPath(points[1], center);
	  var arc2 = getQPath(points[3], center);
	  var path = [['M', points[0].x, points[0].y]];
	  path.push(arc2);
	  path.push(['L', points[3].x, points[3].y]);
	  path.push(['L', points[2].x, points[2].y]);
	  path.push(arc1);
	  path.push(['L', points[1].x, points[1].y]);
	  path.push(['L', points[0].x, points[0].y]);
	  path.push(['Z']);
	  return path;
	}

	function createRectPath(from, to) {
	  var points = [];
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: from.x
	  });
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: to.x
	  });
	  points.push(to);
	  var path = [['M', from.x, from.y]];
	  Util.each(points, function (point) {
	    path.push(['L', point.x, point.y]);
	  });
	  return path;
	}

	Shape.registerShape('edge', 'line', {
	  draw: function draw(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var attrCfg = getAttrs(cfg);
	    var path = PathUtil.getLinePath(points);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('edge', 'vhv', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createRectPath(points[0], points[1]);
	    path = this.parsePath(path);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('edge', 'smooth', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createSmoothPath(points[0], points[1]);
	    path = this.parsePath(path);

	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	//  弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线
	Shape.registerShape('edge', 'arc', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var type = points.length > 2 ? 'weight' : 'normal';
	    var attrCfg = getAttrs(cfg);
	    var line = void 0;
	    var path = void 0;
	    if (cfg.isInCircle) {
	      var center = {
	        x: 0,
	        y: 1
	      };
	      if (type === 'normal') {
	        path = createArcPath(points[0], points[1], center);
	      } else {
	        attrCfg.fill = attrCfg.stroke;
	        path = createArcWeightPath(points, center);
	      }
	      path = this.parsePath(path);
	      line = container.addShape('path', {
	        attrs: Util.mix(attrCfg, {
	          path: path
	        })
	      });
	    } else {
	      if (type === 'normal') {
	        points = this.parsePoints(points);
	        line = container.addShape('arc', {
	          attrs: Util.mix(attrCfg, {
	            x: (points[1].x + points[0].x) / 2,
	            y: points[0].y,
	            r: Math.abs(points[1].x - points[0].x) / 2,
	            startAngle: Math.PI,
	            endAngle: Math.PI * 2
	          })
	        });
	      } else {
	        path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];
	        var c1 = getCPath(points[1], points[3]);
	        var c2 = getCPath(points[2], points[0]);
	        path.push(c1);
	        path.push(['L', points[3].x, points[3].y]);
	        path.push(['L', points[2].x, points[2].y]);
	        path.push(c2);
	        path.push(['Z']);
	        path = this.parsePath(path);
	        attrCfg.fill = attrCfg.stroke;
	        line = container.addShape('path', {
	          attrs: Util.mix(attrCfg, {
	            path: path
	          })
	        });
	      }
	    }
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Edge;

	/***/ }),
	/* 385 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview heatmap
	 * @author leungwensen@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var colorUtil = __webpack_require__(63);
	var Util = __webpack_require__(0);

	var ORIGIN_FIELD = '_origin';
	var SHADOW_CANVAS = 'shadowCanvas';
	var VALUE_RANGE = 'valueRange';
	var IMAGE_SHAPE = 'imageShape';
	var MAPPED_DATA = 'mappedData';
	var GRAY_SCALE_BLURRED_CANVAS = 'grayScaleBlurredCanvas';
	var HEATMAP_SIZE = 'heatmapSize';

	var paletteCache = {};

	var Heatmap = function (_GeomBase) {
	  _inherits(Heatmap, _GeomBase);

	  function Heatmap() {
	    _classCallCheck(this, Heatmap);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * get default configuration
	   * @protected
	   * @return {Object} configuration
	   */
	  Heatmap.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'heatmap';
	    // cfg.shapeType = 'heatmap';
	    return cfg;
	  };

	  Heatmap.prototype._prepareRange = function _prepareRange() {
	    var self = this;

	    var data = self.get(MAPPED_DATA);
	    var colorAttr = self.getAttr('color');
	    var colorField = colorAttr.field;

	    var min = Infinity;
	    var max = -Infinity;
	    data.forEach(function (row) {
	      var value = row[ORIGIN_FIELD][colorField];
	      if (value > max) {
	        max = value;
	      }
	      if (value < min) {
	        min = value;
	      }
	    });
	    if (min === max) {
	      min = max - 1;
	    }

	    var range = [min, max];
	    self.set(VALUE_RANGE, range);
	  };

	  Heatmap.prototype._prepareSize = function _prepareSize() {
	    var self = this;
	    var radius = self.getDefaultValue('size');
	    if (!Util.isNumber(radius)) {
	      radius = self._getDefaultSize();
	    }
	    var styleOptions = self.get('styleOptions');
	    var blur = styleOptions && Util.isObject(styleOptions.style) ? styleOptions.style.blur : null;
	    if (!Util.isFinite(blur)) {
	      blur = radius / 2;
	    }
	    self.set(HEATMAP_SIZE, {
	      blur: blur,
	      radius: radius
	    });
	  };

	  Heatmap.prototype._getDefaultSize = function _getDefaultSize() {
	    var self = this;
	    var position = self.getAttr('position');
	    var coord = self.get('coord');
	    var radius = Math.min(coord.width / (position.scales[0].ticks.length * 4), coord.height / (position.scales[1].ticks.length * 4));
	    return radius;
	  };

	  Heatmap.prototype._colorize = function _colorize(img) {
	    var self = this;
	    var colorAttr = self.getAttr('color');
	    var pixels = img.data;
	    for (var i = 3; i < pixels.length; i += 4) {
	      var alpha = pixels[i]; // get gradient color from opacity value
	      if (alpha) {
	        var palette = void 0;
	        if (paletteCache[alpha]) {
	          palette = paletteCache[alpha];
	        } else {
	          palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
	          paletteCache[alpha] = palette;
	        }
	        // const palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
	        pixels[i - 3] = palette[0];
	        pixels[i - 2] = palette[1];
	        pixels[i - 1] = palette[2];
	        pixels[i] = alpha;
	      }
	    }
	  };

	  Heatmap.prototype._prepareGreyScaleBlurredCircle = function _prepareGreyScaleBlurredCircle(r, blur) {
	    var self = this;
	    var circleCanvas = self.get(GRAY_SCALE_BLURRED_CANVAS);
	    if (!circleCanvas) {
	      circleCanvas = document.createElement('canvas');
	      self.set(GRAY_SCALE_BLURRED_CANVAS, circleCanvas);
	    }
	    var r2 = r + blur;
	    var ctx = circleCanvas.getContext('2d');
	    circleCanvas.width = circleCanvas.height = r2 * 2;
	    ctx.clearRect(0, 0, circleCanvas.width, circleCanvas.height);
	    // ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
	    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
	    ctx.shadowBlur = blur;
	    ctx.shadowColor = 'black';

	    ctx.beginPath();
	    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);
	    ctx.closePath();
	    ctx.fill();
	  };

	  Heatmap.prototype._drawGrayScaleBlurredCircle = function _drawGrayScaleBlurredCircle(x, y, r, alpha, ctx) {
	    var self = this;
	    var circleCanvas = self.get(GRAY_SCALE_BLURRED_CANVAS);
	    ctx.globalAlpha = alpha;
	    ctx.drawImage(circleCanvas, x - r, y - r);
	  };

	  Heatmap.prototype._getShadowCanvasCtx = function _getShadowCanvasCtx() {
	    var self = this;
	    var canvas = self.get(SHADOW_CANVAS);
	    if (!canvas) {
	      canvas = document.createElement('canvas');
	      self.set(SHADOW_CANVAS, canvas);
	    }

	    var _self$get = self.get('coord'),
	        width = _self$get.width,
	        height = _self$get.height;

	    canvas.width = width;
	    canvas.height = height;
	    return canvas.getContext('2d');
	  };

	  Heatmap.prototype._clearShadowCanvasCtx = function _clearShadowCanvasCtx() {
	    var ctx = this._getShadowCanvasCtx();
	    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	  };

	  Heatmap.prototype._getImageShape = function _getImageShape() {
	    var self = this;
	    var imageShape = self.get(IMAGE_SHAPE);
	    if (imageShape) {
	      return imageShape;
	    }
	    var container = self.get('container');
	    imageShape = container.addShape('Image', {});
	    self.set(IMAGE_SHAPE, imageShape);
	    return imageShape;
	  };

	  Heatmap.prototype.drawWithRange = function drawWithRange(range) {
	    var self = this;

	    // canvas size

	    var _self$get2 = self.get('coord'),
	        start = _self$get2.start,
	        end = _self$get2.end,
	        width = _self$get2.width,
	        height = _self$get2.height;

	    // value, range, etc


	    var valueField = self.getAttr('color').field;
	    var size = self.get(HEATMAP_SIZE);

	    // prepare shadow canvas context
	    self._clearShadowCanvasCtx();
	    var ctx = self._getShadowCanvasCtx();

	    // filter data
	    var data = self.get(MAPPED_DATA);
	    if (range) {
	      data = data.filter(function (row) {
	        return row[ORIGIN_FIELD][valueField] <= range[1] && row[ORIGIN_FIELD][valueField] >= range[0];
	      });
	    }

	    // step1. draw points with shadow
	    var scale = self._getScale(valueField);
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var cfg = self.getDrawCfg(obj);
	      var alpha = scale.scale(obj[ORIGIN_FIELD][valueField]);
	      self._drawGrayScaleBlurredCircle(cfg.x - start.x, cfg.y - end.y, size.radius + size.blur, alpha, ctx);
	    }

	    // step2. convert pixels
	    var colored = ctx.getImageData(0, 0, width, height);
	    self._clearShadowCanvasCtx();
	    self._colorize(colored);
	    ctx.putImageData(colored, 0, 0);
	    var imageShape = self._getImageShape();
	    imageShape.attr('x', start.x);
	    imageShape.attr('y', end.y);
	    imageShape.attr('width', width);
	    imageShape.attr('height', height);
	    imageShape.attr('img', ctx.canvas);
	  };

	  Heatmap.prototype.draw = function draw(data /* , container, shapeFactory, index */) {
	    var self = this;
	    self.set(MAPPED_DATA, data);

	    self._prepareRange();
	    self._prepareSize();

	    var size = self.get(HEATMAP_SIZE);
	    self._prepareGreyScaleBlurredCircle(size.radius, size.blur);

	    var range = self.get(VALUE_RANGE);
	    self.drawWithRange(range);
	    // super.draw(data, container, shapeFactory, index);
	  };

	  return Heatmap;
	}(GeomBase);

	GeomBase.Heatmap = Heatmap;

	module.exports = Heatmap;

	/***/ }),
	/* 386 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 多边形
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	__webpack_require__(387);

	var Polygon = function (_GeomBase) {
	  _inherits(Polygon, _GeomBase);

	  function Polygon() {
	    _classCallCheck(this, Polygon);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Polygon.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'polygon';
	    cfg.shapeType = 'polygon';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Polygon.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    var self = this;
	    var x = cfg.x;
	    var y = cfg.y;
	    var temp = void 0;
	    if (!(Util.isArray(x) && Util.isArray(y))) {
	      // x y 都是数组时，不做处理
	      var xScale = self.getXScale();
	      var yScale = self.getYScale();
	      var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;
	      var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;
	      var xOffset = 0.5 * 1 / xCount;
	      var yOffset = 0.5 * 1 / yCount;
	      if (xScale.isCategory && yScale.isCategory) {
	        // 如果x,y都是分类
	        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];
	        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];
	      } else if (Util.isArray(x)) {
	        // x 是数组
	        temp = x;
	        x = [temp[0], temp[0], temp[1], temp[1]];
	        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];
	      } else if (Util.isArray(y)) {
	        // y 是数组
	        temp = y;
	        y = [temp[0], temp[1], temp[1], temp[0]];
	        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];
	      }
	      cfg.x = x;
	      cfg.y = y;
	    }
	    return cfg;
	  };

	  return Polygon;
	}(GeomBase);

	GeomBase.Polygon = Polygon;

	module.exports = Polygon;

	/***/ }),
	/* 387 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 # @author liuye10@yahoo.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.polygon;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getHollowAttrs(cfg) {
	  var defaultCfg = Global.shape.hollowPolygon;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getPath(points) {
	  var flag = points[0];
	  var i = 1;

	  var path = [['M', flag.x, flag.y]];

	  while (i < points.length) {
	    var c = points[i];
	    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {
	      path.push(['L', c.x, c.y]);
	      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {
	        flag = points[i + 1];
	        path.push(['Z']);
	        path.push(['M', flag.x, flag.y]);
	        i++;
	      }
	    }
	    i++;
	  }

	  if (!Util.isEqual(path[path.length - 1], flag)) {
	    path.push(['L', flag.x, flag.y]);
	  }

	  path.push(['Z']);

	  return path;
	}

	// regist line geom
	var Polygon = Shape.registerFactory('polygon', {
	  defaultShapeType: 'polygon',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    Util.each(pointInfo.x, function (subX, index) {
	      var subY = pointInfo.y[index];
	      points.push({
	        x: subX,
	        y: subY
	      });
	    });
	    return points;
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 1;
	    if (type === 'hollow') {
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }

	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      // lineWidth,
	      fillOpacity: opacity - 0.08
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	Shape.registerShape('polygon', 'polygon', {
	  draw: function draw(cfg, container) {
	    if (!Util.isEmpty(cfg.points)) {
	      var attrs = getAttrs(cfg);
	      var path = getPath(cfg.points);
	      path = this.parsePath(path);
	      return container.addShape('path', {
	        attrs: Util.mix(attrs, {
	          path: path
	        })
	      });
	    }
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('polygon', 'hollow', {
	  draw: function draw(cfg, container) {
	    if (!Util.isEmpty(cfg.points)) {
	      var attrs = getHollowAttrs(cfg);
	      var path = getPath(cfg.points);
	      path = this.parsePath(path);

	      return container.addShape('path', {
	        attrs: Util.mix(attrs, {
	          path: path
	        })
	      });
	    }
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Polygon;

	/***/ }),
	/* 388 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 自定义图形
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(334);
	__webpack_require__(389);

	var Schema = function (_GeomBase) {
	  _inherits(Schema, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Schema.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'schema';
	    cfg.shapeType = 'schema';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Schema(cfg) {
	    _classCallCheck(this, Schema);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SizeMixin);
	    return _this;
	  }

	  Schema.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  return Schema;
	}(GeomBase);

	var SchemaDodge = function (_Schema) {
	  _inherits(SchemaDodge, _Schema);

	  function SchemaDodge() {
	    _classCallCheck(this, SchemaDodge);

	    return _possibleConstructorReturn(this, _Schema.apply(this, arguments));
	  }

	  SchemaDodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Schema.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'dodge' }];
	    return cfg;
	  };

	  return SchemaDodge;
	}(Schema);

	Schema.Dodge = SchemaDodge;

	GeomBase.Schema = Schema;
	GeomBase.SchemaDodge = SchemaDodge;

	module.exports = Schema;

	/***/ }),
	/* 389 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自定义的 shape
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	function _parseValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  var min = value[0]; // 最小值
	  var max = value[value.length - 1]; // 最大值
	  var min1 = value.length > 1 ? value[1] : min;
	  var max1 = value.length > 3 ? value[3] : max;
	  var median = value.length > 2 ? value[2] : min1;

	  return {
	    min: min, // 最小值
	    max: max, // 最大值
	    min1: min1,
	    max1: max1,
	    median: median
	  };
	}

	function addPoints(from, to) {
	  Util.each(from, function (subArr) {
	    to.push({
	      x: subArr[0],
	      y: subArr[1]
	    });
	  });
	}

	function getAttrs(cfg) {
	  var defaultAttrs = Global.shape.schema;
	  var attrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.schema;
	  var attrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getBoxPoints(x, y, width) {
	  var points = [];
	  var pointsArray = void 0;
	  var obj = void 0;
	  if (Util.isArray(y)) {
	    // 2维
	    obj = _parseValue(y);
	    pointsArray = [[x - width / 2, obj.max], [x + width / 2, obj.max], [x, obj.max], [x, obj.max1], [x - width / 2, obj.min1], [x - width / 2, obj.max1], [x + width / 2, obj.max1], [x + width / 2, obj.min1], [x, obj.min1], [x, obj.min], [x - width / 2, obj.min], [x + width / 2, obj.min], [x - width / 2, obj.median], [x + width / 2, obj.median]];
	  } else {
	    // 只有一个维度
	    y = y || 0.5;
	    obj = _parseValue(x);
	    pointsArray = [[obj.min, y - width / 2], [obj.min, y + width / 2], [obj.min, y], [obj.min1, y], [obj.min1, y - width / 2], [obj.min1, y + width / 2], [obj.max1, y + width / 2], [obj.max1, y - width / 2], [obj.max1, y], [obj.max, y], [obj.max, y - width / 2], [obj.max, y + width / 2], [obj.median, y - width / 2], [obj.median, y + width / 2]];
	  }
	  addPoints(pointsArray, points);
	  return points;
	}

	function _sortValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  // 从大到小排序
	  var sorted = value.sort(function (a, b) {
	    return a < b ? 1 : -1;
	  });

	  var length = sorted.length;
	  if (length < 4) {
	    var min = sorted[length - 1];
	    for (var i = 0; i < 4 - length; i++) {
	      sorted.push(min);
	    }
	  }

	  return sorted;
	}

	// 获取K线图的points
	function getCandlePoints(x, y, width) {
	  var yValues = _sortValue(y);
	  var points = [{
	    x: x,
	    y: yValues[0]
	  }, {
	    x: x,
	    y: yValues[1]
	  }, {
	    x: x - width / 2,
	    y: yValues[2]
	  }, {
	    x: x - width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[3]
	  }]; // 按照顺时针连接
	  return points;
	}

	function getBoxPath(points) {
	  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['L', points[6].x, points[6].y], ['L', points[7].x, points[7].y], ['L', points[4].x, points[4].y], // 封闭 z
	  ['Z'], ['M', points[8].x, points[8].y], ['L', points[9].x, points[9].y], ['M', points[10].x, points[10].y], ['L', points[11].x, points[11].y], ['M', points[12].x, points[12].y], ['L', points[13].x, points[13].y]];
	  return path;
	}

	function getCandlePath(points) {
	  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['L', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['Z'], ['M', points[6].x, points[6].y], ['L', points[7].x, points[7].y]];
	  return path;
	}

	var Schema = Shape.registerFactory('schema', {
	  defaultShapeType: '',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    if (type === 'box') {
	      var lineWidth = cfg.lineWidth || 1;
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }
	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      fillOpacity: opacity - 0.15,
	      strokeOpacity: opacity - 0.15
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	// 箱线图
	Shape.registerShape('schema', 'box', {
	  getPoints: function getPoints(pointInfo) {
	    return getBoxPoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getBoxPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return {
	      symbol: function symbol(x, y, r, ctx) {
	        var yValues = [y - 6, y - 3, y, y + 3, y + 6];
	        var points = getBoxPoints(x, yValues, r);
	        ctx.moveTo(points[0].x + 1, points[0].y);
	        ctx.lineTo(points[1].x - 1, points[1].y);
	        ctx.moveTo(points[2].x, points[2].y);
	        ctx.lineTo(points[3].x, points[3].y);
	        ctx.moveTo(points[4].x, points[4].y);
	        ctx.lineTo(points[5].x, points[5].y);
	        ctx.lineTo(points[6].x, points[6].y);
	        ctx.lineTo(points[7].x, points[7].y);
	        ctx.lineTo(points[4].x, points[4].y);
	        ctx.closePath();
	        ctx.moveTo(points[8].x, points[8].y);
	        ctx.lineTo(points[9].x, points[9].y);
	        ctx.moveTo(points[10].x + 1, points[10].y);
	        ctx.lineTo(points[11].x - 1, points[11].y);
	        ctx.moveTo(points[12].x, points[12].y);
	        ctx.lineTo(points[13].x, points[13].y);
	      },

	      radius: 6,
	      lineWidth: 1,
	      stroke: cfg.color
	    };
	  }
	});

	// K线
	Shape.registerShape('schema', 'candle', {
	  getPoints: function getPoints(pointInfo) {
	    return getCandlePoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getCandlePath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return {
	      symbol: function symbol(x, y, r, ctx) {
	        y = [y + 7.5, y + 3, y - 3, y - 7.5];
	        var points = getCandlePoints(x, y, r);
	        ctx.moveTo(points[0].x, points[0].y);
	        ctx.lineTo(points[1].x, points[1].y);
	        ctx.moveTo(points[2].x, points[2].y);
	        ctx.lineTo(points[3].x, points[3].y);
	        ctx.lineTo(points[4].x, points[4].y);
	        ctx.lineTo(points[5].x, points[5].y);
	        ctx.closePath();
	        ctx.moveTo(points[6].x, points[6].y);
	        ctx.lineTo(points[7].x, points[7].y);
	      },

	      lineWidth: 1,
	      stroke: cfg.color,
	      fill: cfg.color,
	      radius: 6
	    };
	  }
	});

	module.exports = Schema;

	/***/ }),
	/* 390 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Venn Diagram
	 * @author leungwensen@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Attr = __webpack_require__(117);
	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(391),
	    venn = _require.venn,
	    scaleSolution = _require.scaleSolution,
	    circlePath = _require.circlePath,
	    intersectionAreaPath = _require.intersectionAreaPath,
	    computeTextCentres = _require.computeTextCentres;

	__webpack_require__(473);

	function parseFields(field) {
	  if (Util.isArray(field)) {
	    return field;
	  }
	  if (Util.isString(field)) {
	    return field.split('*');
	  }
	  return [field];
	}

	var Venn = function (_GeomBase) {
	  _inherits(Venn, _GeomBase);

	  function Venn() {
	    _classCallCheck(this, Venn);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * get default configuration
	   * @protected
	   * @return {Object} configuration
	   */
	  Venn.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'venn';
	    cfg.shapeType = 'venn';
	    cfg.generatePoints = true;
	    // super.draw(data, container, shapeFactory, index);
	    return cfg;
	  };

	  Venn.prototype._initAttrs = function _initAttrs() {
	    var self = this;
	    var view = self.get('view');
	    var attrs = this.get('attrs');
	    var attrOptions = self.get('attrOptions');
	    var labelCfg = self.get('labelCfg');
	    var data = self.get('data');
	    var sizeField = attrOptions.size ? attrOptions.size.field : 'size';
	    var labelField = labelCfg ? labelCfg.fields[0] : 'sets';
	    self.set('labelCfg', null);
	    // prepare data
	    data.forEach(function (row) {
	      row.sets = row[labelField];
	      row.size = row[sizeField];
	    });
	    var solution = venn(data);
	    // scaling
	    var coord = self.get('coord');
	    var xRange = [Math.min(coord.x.end, coord.x.start), Math.max(coord.x.end, coord.x.start)];
	    var yRange = [Math.min(coord.y.end, coord.y.start), Math.max(coord.y.end, coord.y.start)];
	    var width = xRange[1] - xRange[0];
	    var height = yRange[1] - yRange[0];
	    var styleOptions = self.get('styleOptions');
	    var padding = styleOptions && Util.isObject(styleOptions.style) ? styleOptions.style.padding : 0;
	    if (!Util.isFinite(padding)) {
	      padding = 0;
	    }
	    var circles = scaleSolution(solution, width, height, padding);
	    var textCenters = computeTextCentres(circles, data);
	    data.forEach(function (row) {
	      var sets = row.sets;
	      var id = sets.join(',');
	      row.id = id;
	      if (sets.length === 1) {
	        var circle = circles[id];
	        row.path = circlePath(circle.x, circle.y, circle.radius);
	        Util.assign(row, circle);
	      } else {
	        var setCircles = sets.map(function (set) {
	          return circles[set];
	        });
	        var path = intersectionAreaPath(setCircles);
	        if (!/[zZ]$/.test(path)) {
	          path += 'Z';
	        }
	        row.path = path;
	        var center = textCenters[id] || { x: 0, y: 0 };
	        Util.assign(row, center);
	      }
	    });
	    // x, y scales
	    view.set('data', data);
	    self.set('data', data);
	    self.set('dataArray', data);
	    self.position('x*y');

	    // init attrs
	    for (var type in attrOptions) {
	      if (attrOptions.hasOwnProperty(type)) {
	        var option = attrOptions[type];
	        var className = Util.upperFirst(type);
	        var fields = parseFields(option.field);
	        if (type === 'position') {
	          option.coord = coord;
	        }
	        var scales = [];
	        for (var i = 0; i < fields.length; i++) {
	          var field = fields[i];
	          var scale = self._createScale(field, data);
	          if (type === 'color' && Util.isNil(option.values)) {
	            // 设置 color 的默认色值
	            if (scale.values.length <= 8) {
	              option.values = Global.colors;
	            } else if (scale.values.length <= 16) {
	              option.values = Global.colors_16;
	            } else {
	              option.values = Global.colors_24;
	            }

	            if (Util.isNil(option.values)) {
	              option.values = Global.colors; // 防止主题没有声明诸如 colors_pie 的属性
	            }
	          }
	          scales.push(scale);
	        }
	        if (type === 'position') {
	          scales[0].change({
	            nice: false,
	            min: xRange[0],
	            max: xRange[1]
	          });
	          scales[1].change({
	            nice: false,
	            min: yRange[0],
	            max: yRange[1]
	          });
	        }
	        option.scales = scales;
	        var attr = new Attr[className](option);
	        attrs[type] = attr;
	      }
	    }
	  };

	  Venn.prototype.paint = function paint() {
	    _GeomBase.prototype.paint.call(this);
	    var self = this;
	    var dataArray = self.get('dataArray');
	    var shapeContainer = self.get('shapeContainer');
	    // add labels
	    dataArray.forEach(function (row) {
	      var cfg = self.getDrawCfg(row[0]);
	      var origin = cfg.origin._origin;
	      shapeContainer.addShape('text', {
	        attrs: Util.mix({}, {
	          x: origin.x,
	          y: origin.y,
	          text: origin.label || '',
	          fontSize: 18,
	          fill: cfg.shape === 'hollow' ? cfg.color : '#666',
	          textAlign: 'center',
	          textBaseline: 'middle'
	        }, cfg.style ? cfg.style.textStyle : {})
	      });
	    });
	  };

	  return Venn;
	}(GeomBase);

	GeomBase.Venn = Venn;

	module.exports = Venn;

	/***/ }),
	/* 391 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(59), __webpack_require__(366)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(59), __webpack_require__(366)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.venn = {}, global.d3, global.d3);
	})(this, function (exports, d3Selection, d3Transition) {
	    'use strict';

	    var SMALL = 1e-10;

	    /** Returns the intersection area of a bunch of circles (where each circle
	     is an object having an x,y and radius property) */
	    function intersectionArea(circles, stats) {
	        // get all the intersection points of the circles
	        var intersectionPoints = getIntersectionPoints(circles);

	        // filter out points that aren't included in all the circles
	        var innerPoints = intersectionPoints.filter(function (p) {
	            return containedInCircles(p, circles);
	        });

	        var arcArea = 0,
	            polygonArea = 0,
	            arcs = [],
	            i;

	        // if we have intersection points that are within all the circles,
	        // then figure out the area contained by them
	        if (innerPoints.length > 1) {
	            // sort the points by angle from the center of the polygon, which lets
	            // us just iterate over points to get the edges
	            var center = getCenter(innerPoints);
	            for (i = 0; i < innerPoints.length; ++i) {
	                var p = innerPoints[i];
	                p.angle = Math.atan2(p.x - center.x, p.y - center.y);
	            }
	            innerPoints.sort(function (a, b) {
	                return b.angle - a.angle;
	            });

	            // iterate over all points, get arc between the points
	            // and update the areas
	            var p2 = innerPoints[innerPoints.length - 1];
	            for (i = 0; i < innerPoints.length; ++i) {
	                var p1 = innerPoints[i];

	                // polygon area updates easily ...
	                polygonArea += (p2.x + p1.x) * (p1.y - p2.y);

	                // updating the arc area is a little more involved
	                var midPoint = { x: (p1.x + p2.x) / 2,
	                    y: (p1.y + p2.y) / 2 },
	                    arc = null;

	                for (var j = 0; j < p1.parentIndex.length; ++j) {
	                    if (p2.parentIndex.indexOf(p1.parentIndex[j]) > -1) {
	                        // figure out the angle halfway between the two points
	                        // on the current circle
	                        var circle = circles[p1.parentIndex[j]],
	                            a1 = Math.atan2(p1.x - circle.x, p1.y - circle.y),
	                            a2 = Math.atan2(p2.x - circle.x, p2.y - circle.y);

	                        var angleDiff = a2 - a1;
	                        if (angleDiff < 0) {
	                            angleDiff += 2 * Math.PI;
	                        }

	                        // and use that angle to figure out the width of the
	                        // arc
	                        var a = a2 - angleDiff / 2,
	                            width = distance(midPoint, {
	                            x: circle.x + circle.radius * Math.sin(a),
	                            y: circle.y + circle.radius * Math.cos(a)
	                        });

	                        // clamp the width to the largest is can actually be
	                        // (sometimes slightly overflows because of FP errors)
	                        if (width > circle.radius * 2) {
	                            width = circle.radius * 2;
	                        }

	                        // pick the circle whose arc has the smallest width
	                        if (arc === null || arc.width > width) {
	                            arc = { circle: circle,
	                                width: width,
	                                p1: p1,
	                                p2: p2 };
	                        }
	                    }
	                }

	                if (arc !== null) {
	                    arcs.push(arc);
	                    arcArea += circleArea(arc.circle.radius, arc.width);
	                    p2 = p1;
	                }
	            }
	        } else {
	            // no intersection points, is either disjoint - or is completely
	            // overlapped. figure out which by examining the smallest circle
	            var smallest = circles[0];
	            for (i = 1; i < circles.length; ++i) {
	                if (circles[i].radius < smallest.radius) {
	                    smallest = circles[i];
	                }
	            }

	            // make sure the smallest circle is completely contained in all
	            // the other circles
	            var disjoint = false;
	            for (i = 0; i < circles.length; ++i) {
	                if (distance(circles[i], smallest) > Math.abs(smallest.radius - circles[i].radius)) {
	                    disjoint = true;
	                    break;
	                }
	            }

	            if (disjoint) {
	                arcArea = polygonArea = 0;
	            } else {
	                arcArea = smallest.radius * smallest.radius * Math.PI;
	                arcs.push({ circle: smallest,
	                    p1: { x: smallest.x, y: smallest.y + smallest.radius },
	                    p2: { x: smallest.x - SMALL, y: smallest.y + smallest.radius },
	                    width: smallest.radius * 2 });
	            }
	        }

	        polygonArea /= 2;
	        if (stats) {
	            stats.area = arcArea + polygonArea;
	            stats.arcArea = arcArea;
	            stats.polygonArea = polygonArea;
	            stats.arcs = arcs;
	            stats.innerPoints = innerPoints;
	            stats.intersectionPoints = intersectionPoints;
	        }

	        return arcArea + polygonArea;
	    }

	    /** returns whether a point is contained by all of a list of circles */
	    function containedInCircles(point, circles) {
	        for (var i = 0; i < circles.length; ++i) {
	            if (distance(point, circles[i]) > circles[i].radius + SMALL) {
	                return false;
	            }
	        }
	        return true;
	    }

	    /** Gets all intersection points between a bunch of circles */
	    function getIntersectionPoints(circles) {
	        var ret = [];
	        for (var i = 0; i < circles.length; ++i) {
	            for (var j = i + 1; j < circles.length; ++j) {
	                var intersect = circleCircleIntersection(circles[i], circles[j]);
	                for (var k = 0; k < intersect.length; ++k) {
	                    var p = intersect[k];
	                    p.parentIndex = [i, j];
	                    ret.push(p);
	                }
	            }
	        }
	        return ret;
	    }

	    /** Circular segment area calculation. See http://mathworld.wolfram.com/CircularSegment.html */
	    function circleArea(r, width) {
	        return r * r * Math.acos(1 - width / r) - (r - width) * Math.sqrt(width * (2 * r - width));
	    }

	    /** euclidean distance between two points */
	    function distance(p1, p2) {
	        return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
	    }

	    /** Returns the overlap area of two circles of radius r1 and r2 - that
	    have their centers separated by distance d. Simpler faster
	    circle intersection for only two circles */
	    function circleOverlap(r1, r2, d) {
	        // no overlap
	        if (d >= r1 + r2) {
	            return 0;
	        }

	        // completely overlapped
	        if (d <= Math.abs(r1 - r2)) {
	            return Math.PI * Math.min(r1, r2) * Math.min(r1, r2);
	        }

	        var w1 = r1 - (d * d - r2 * r2 + r1 * r1) / (2 * d),
	            w2 = r2 - (d * d - r1 * r1 + r2 * r2) / (2 * d);
	        return circleArea(r1, w1) + circleArea(r2, w2);
	    }

	    /** Given two circles (containing a x/y/radius attributes),
	    returns the intersecting points if possible.
	    note: doesn't handle cases where there are infinitely many
	    intersection points (circles are equivalent):, or only one intersection point*/
	    function circleCircleIntersection(p1, p2) {
	        var d = distance(p1, p2),
	            r1 = p1.radius,
	            r2 = p2.radius;

	        // if to far away, or self contained - can't be done
	        if (d >= r1 + r2 || d <= Math.abs(r1 - r2)) {
	            return [];
	        }

	        var a = (r1 * r1 - r2 * r2 + d * d) / (2 * d),
	            h = Math.sqrt(r1 * r1 - a * a),
	            x0 = p1.x + a * (p2.x - p1.x) / d,
	            y0 = p1.y + a * (p2.y - p1.y) / d,
	            rx = -(p2.y - p1.y) * (h / d),
	            ry = -(p2.x - p1.x) * (h / d);

	        return [{ x: x0 + rx, y: y0 - ry }, { x: x0 - rx, y: y0 + ry }];
	    }

	    /** Returns the center of a bunch of points */
	    function getCenter(points) {
	        var center = { x: 0, y: 0 };
	        for (var i = 0; i < points.length; ++i) {
	            center.x += points[i].x;
	            center.y += points[i].y;
	        }
	        center.x /= points.length;
	        center.y /= points.length;
	        return center;
	    }

	    /** finds the zeros of a function, given two starting points (which must
	     * have opposite signs */
	    function bisect(f, a, b, parameters) {
	        parameters = parameters || {};
	        var maxIterations = parameters.maxIterations || 100,
	            tolerance = parameters.tolerance || 1e-10,
	            fA = f(a),
	            fB = f(b),
	            delta = b - a;

	        if (fA * fB > 0) {
	            throw "Initial bisect points must have opposite signs";
	        }

	        if (fA === 0) return a;
	        if (fB === 0) return b;

	        for (var i = 0; i < maxIterations; ++i) {
	            delta /= 2;
	            var mid = a + delta,
	                fMid = f(mid);

	            if (fMid * fA >= 0) {
	                a = mid;
	            }

	            if (Math.abs(delta) < tolerance || fMid === 0) {
	                return mid;
	            }
	        }
	        return a + delta;
	    }

	    // need some basic operations on vectors, rather than adding a dependency,
	    // just define here
	    function zeros(x) {
	        var r = new Array(x);for (var i = 0; i < x; ++i) {
	            r[i] = 0;
	        }return r;
	    }
	    function zerosM(x, y) {
	        return zeros(x).map(function () {
	            return zeros(y);
	        });
	    }

	    function dot(a, b) {
	        var ret = 0;
	        for (var i = 0; i < a.length; ++i) {
	            ret += a[i] * b[i];
	        }
	        return ret;
	    }

	    function norm2(a) {
	        return Math.sqrt(dot(a, a));
	    }

	    function scale(ret, value, c) {
	        for (var i = 0; i < value.length; ++i) {
	            ret[i] = value[i] * c;
	        }
	    }

	    function weightedSum(ret, w1, v1, w2, v2) {
	        for (var j = 0; j < ret.length; ++j) {
	            ret[j] = w1 * v1[j] + w2 * v2[j];
	        }
	    }

	    /** minimizes a function using the downhill simplex method */
	    function nelderMead(f, x0, parameters) {
	        parameters = parameters || {};

	        var maxIterations = parameters.maxIterations || x0.length * 200,
	            nonZeroDelta = parameters.nonZeroDelta || 1.05,
	            zeroDelta = parameters.zeroDelta || 0.001,
	            minErrorDelta = parameters.minErrorDelta || 1e-6,
	            minTolerance = parameters.minErrorDelta || 1e-5,
	            rho = parameters.rho !== undefined ? parameters.rho : 1,
	            chi = parameters.chi !== undefined ? parameters.chi : 2,
	            psi = parameters.psi !== undefined ? parameters.psi : -0.5,
	            sigma = parameters.sigma !== undefined ? parameters.sigma : 0.5,
	            maxDiff;

	        // initialize simplex.
	        var N = x0.length,
	            simplex = new Array(N + 1);
	        simplex[0] = x0;
	        simplex[0].fx = f(x0);
	        simplex[0].id = 0;
	        for (var i = 0; i < N; ++i) {
	            var point = x0.slice();
	            point[i] = point[i] ? point[i] * nonZeroDelta : zeroDelta;
	            simplex[i + 1] = point;
	            simplex[i + 1].fx = f(point);
	            simplex[i + 1].id = i + 1;
	        }

	        function updateSimplex(value) {
	            for (var i = 0; i < value.length; i++) {
	                simplex[N][i] = value[i];
	            }
	            simplex[N].fx = value.fx;
	        }

	        var sortOrder = function sortOrder(a, b) {
	            return a.fx - b.fx;
	        };

	        var centroid = x0.slice(),
	            reflected = x0.slice(),
	            contracted = x0.slice(),
	            expanded = x0.slice();

	        for (var iteration = 0; iteration < maxIterations; ++iteration) {
	            simplex.sort(sortOrder);

	            if (parameters.history) {
	                // copy the simplex (since later iterations will mutate) and
	                // sort it to have a consistent order between iterations
	                var sortedSimplex = simplex.map(function (x) {
	                    var state = x.slice();
	                    state.fx = x.fx;
	                    state.id = x.id;
	                    return state;
	                });
	                sortedSimplex.sort(function (a, b) {
	                    return a.id - b.id;
	                });

	                parameters.history.push({ x: simplex[0].slice(),
	                    fx: simplex[0].fx,
	                    simplex: sortedSimplex });
	            }

	            maxDiff = 0;
	            for (i = 0; i < N; ++i) {
	                maxDiff = Math.max(maxDiff, Math.abs(simplex[0][i] - simplex[1][i]));
	            }

	            if (Math.abs(simplex[0].fx - simplex[N].fx) < minErrorDelta && maxDiff < minTolerance) {
	                break;
	            }

	            // compute the centroid of all but the worst point in the simplex
	            for (i = 0; i < N; ++i) {
	                centroid[i] = 0;
	                for (var j = 0; j < N; ++j) {
	                    centroid[i] += simplex[j][i];
	                }
	                centroid[i] /= N;
	            }

	            // reflect the worst point past the centroid  and compute loss at reflected
	            // point
	            var worst = simplex[N];
	            weightedSum(reflected, 1 + rho, centroid, -rho, worst);
	            reflected.fx = f(reflected);

	            // if the reflected point is the best seen, then possibly expand
	            if (reflected.fx < simplex[0].fx) {
	                weightedSum(expanded, 1 + chi, centroid, -chi, worst);
	                expanded.fx = f(expanded);
	                if (expanded.fx < reflected.fx) {
	                    updateSimplex(expanded);
	                } else {
	                    updateSimplex(reflected);
	                }
	            }

	            // if the reflected point is worse than the second worst, we need to
	            // contract
	            else if (reflected.fx >= simplex[N - 1].fx) {
	                    var shouldReduce = false;

	                    if (reflected.fx > worst.fx) {
	                        // do an inside contraction
	                        weightedSum(contracted, 1 + psi, centroid, -psi, worst);
	                        contracted.fx = f(contracted);
	                        if (contracted.fx < worst.fx) {
	                            updateSimplex(contracted);
	                        } else {
	                            shouldReduce = true;
	                        }
	                    } else {
	                        // do an outside contraction
	                        weightedSum(contracted, 1 - psi * rho, centroid, psi * rho, worst);
	                        contracted.fx = f(contracted);
	                        if (contracted.fx < reflected.fx) {
	                            updateSimplex(contracted);
	                        } else {
	                            shouldReduce = true;
	                        }
	                    }

	                    if (shouldReduce) {
	                        // if we don't contract here, we're done
	                        if (sigma >= 1) break;

	                        // do a reduction
	                        for (i = 1; i < simplex.length; ++i) {
	                            weightedSum(simplex[i], 1 - sigma, simplex[0], sigma, simplex[i]);
	                            simplex[i].fx = f(simplex[i]);
	                        }
	                    }
	                } else {
	                    updateSimplex(reflected);
	                }
	        }

	        simplex.sort(sortOrder);
	        return { fx: simplex[0].fx,
	            x: simplex[0] };
	    }

	    /// searches along line 'pk' for a point that satifies the wolfe conditions
	    /// See 'Numerical Optimization' by Nocedal and Wright p59-60
	    /// f : objective function
	    /// pk : search direction
	    /// current: object containing current gradient/loss
	    /// next: output: contains next gradient/loss
	    /// returns a: step size taken
	    function wolfeLineSearch(f, pk, current, next, a, c1, c2) {
	        var phi0 = current.fx,
	            phiPrime0 = dot(current.fxprime, pk),
	            phi = phi0,
	            phi_old = phi0,
	            phiPrime = phiPrime0,
	            a0 = 0;

	        a = a || 1;
	        c1 = c1 || 1e-6;
	        c2 = c2 || 0.1;

	        function zoom(a_lo, a_high, phi_lo) {
	            for (var iteration = 0; iteration < 16; ++iteration) {
	                a = (a_lo + a_high) / 2;
	                weightedSum(next.x, 1.0, current.x, a, pk);
	                phi = next.fx = f(next.x, next.fxprime);
	                phiPrime = dot(next.fxprime, pk);

	                if (phi > phi0 + c1 * a * phiPrime0 || phi >= phi_lo) {
	                    a_high = a;
	                } else {
	                    if (Math.abs(phiPrime) <= -c2 * phiPrime0) {
	                        return a;
	                    }

	                    if (phiPrime * (a_high - a_lo) >= 0) {
	                        a_high = a_lo;
	                    }

	                    a_lo = a;
	                    phi_lo = phi;
	                }
	            }

	            return 0;
	        }

	        for (var iteration = 0; iteration < 10; ++iteration) {
	            weightedSum(next.x, 1.0, current.x, a, pk);
	            phi = next.fx = f(next.x, next.fxprime);
	            phiPrime = dot(next.fxprime, pk);
	            if (phi > phi0 + c1 * a * phiPrime0 || iteration && phi >= phi_old) {
	                return zoom(a0, a, phi_old);
	            }

	            if (Math.abs(phiPrime) <= -c2 * phiPrime0) {
	                return a;
	            }

	            if (phiPrime >= 0) {
	                return zoom(a, a0, phi);
	            }

	            phi_old = phi;
	            a0 = a;
	            a *= 2;
	        }

	        return a;
	    }

	    function conjugateGradient(f, initial, params) {
	        // allocate all memory up front here, keep out of the loop for perfomance
	        // reasons
	        var current = { x: initial.slice(), fx: 0, fxprime: initial.slice() },
	            next = { x: initial.slice(), fx: 0, fxprime: initial.slice() },
	            yk = initial.slice(),
	            pk,
	            temp,
	            a = 1,
	            maxIterations;

	        params = params || {};
	        maxIterations = params.maxIterations || initial.length * 20;

	        current.fx = f(current.x, current.fxprime);
	        pk = current.fxprime.slice();
	        scale(pk, current.fxprime, -1);

	        for (var i = 0; i < maxIterations; ++i) {
	            a = wolfeLineSearch(f, pk, current, next, a);

	            // todo: history in wrong spot?
	            if (params.history) {
	                params.history.push({ x: current.x.slice(),
	                    fx: current.fx,
	                    fxprime: current.fxprime.slice(),
	                    alpha: a });
	            }

	            if (!a) {
	                // faiiled to find point that satifies wolfe conditions.
	                // reset direction for next iteration
	                scale(pk, current.fxprime, -1);
	            } else {
	                // update direction using Polak–Ribiere CG method
	                weightedSum(yk, 1, next.fxprime, -1, current.fxprime);

	                var delta_k = dot(current.fxprime, current.fxprime),
	                    beta_k = Math.max(0, dot(yk, next.fxprime) / delta_k);

	                weightedSum(pk, beta_k, pk, -1, next.fxprime);

	                temp = current;
	                current = next;
	                next = temp;
	            }

	            if (norm2(current.fxprime) <= 1e-5) {
	                break;
	            }
	        }

	        if (params.history) {
	            params.history.push({ x: current.x.slice(),
	                fx: current.fx,
	                fxprime: current.fxprime.slice(),
	                alpha: a });
	        }

	        return current;
	    }

	    /** given a list of set objects, and their corresponding overlaps.
	    updates the (x, y, radius) attribute on each set such that their positions
	    roughly correspond to the desired overlaps */
	    function venn(areas, parameters) {
	        parameters = parameters || {};
	        parameters.maxIterations = parameters.maxIterations || 500;
	        var initialLayout = parameters.initialLayout || bestInitialLayout;
	        var loss = parameters.lossFunction || lossFunction;

	        // add in missing pairwise areas as having 0 size
	        areas = addMissingAreas(areas);

	        // initial layout is done greedily
	        var circles = initialLayout(areas, parameters);

	        // transform x/y coordinates to a vector to optimize
	        var initial = [],
	            setids = [],
	            setid;
	        for (setid in circles) {
	            if (circles.hasOwnProperty(setid)) {
	                initial.push(circles[setid].x);
	                initial.push(circles[setid].y);
	                setids.push(setid);
	            }
	        }

	        // optimize initial layout from our loss function
	        var solution = nelderMead(function (values) {
	            var current = {};
	            for (var i = 0; i < setids.length; ++i) {
	                var setid = setids[i];
	                current[setid] = { x: values[2 * i],
	                    y: values[2 * i + 1],
	                    radius: circles[setid].radius
	                    // size : circles[setid].size
	                };
	            }
	            return loss(current, areas);
	        }, initial, parameters);

	        // transform solution vector back to x/y points
	        var positions = solution.x;
	        for (var i = 0; i < setids.length; ++i) {
	            setid = setids[i];
	            circles[setid].x = positions[2 * i];
	            circles[setid].y = positions[2 * i + 1];
	        }

	        return circles;
	    }

	    var SMALL$1 = 1e-10;

	    /** Returns the distance necessary for two circles of radius r1 + r2 to
	    have the overlap area 'overlap' */
	    function distanceFromIntersectArea(r1, r2, overlap) {
	        // handle complete overlapped circles
	        if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL$1) {
	            return Math.abs(r1 - r2);
	        }

	        return bisect(function (distance$$1) {
	            return circleOverlap(r1, r2, distance$$1) - overlap;
	        }, 0, r1 + r2);
	    }

	    /** Missing pair-wise intersection area data can cause problems:
	     treating as an unknown means that sets will be laid out overlapping,
	     which isn't what people expect. To reflect that we want disjoint sets
	     here, set the overlap to 0 for all missing pairwise set intersections */
	    function addMissingAreas(areas) {
	        areas = areas.slice();

	        // two circle intersections that aren't defined
	        var ids = [],
	            pairs = {},
	            i,
	            j,
	            a,
	            b;
	        for (i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                ids.push(area.sets[0]);
	            } else if (area.sets.length == 2) {
	                a = area.sets[0];
	                b = area.sets[1];
	                pairs[[a, b]] = true;
	                pairs[[b, a]] = true;
	            }
	        }
	        ids.sort(function (a, b) {
	            return a > b;
	        });

	        for (i = 0; i < ids.length; ++i) {
	            a = ids[i];
	            for (j = i + 1; j < ids.length; ++j) {
	                b = ids[j];
	                if (!([a, b] in pairs)) {
	                    areas.push({ 'sets': [a, b],
	                        'size': 0 });
	                }
	            }
	        }
	        return areas;
	    }

	    /// Returns two matrices, one of the euclidean distances between the sets
	    /// and the other indicating if there are subset or disjoint set relationships
	    function getDistanceMatrices(areas, sets, setids) {
	        // initialize an empty distance matrix between all the points
	        var distances = zerosM(sets.length, sets.length),
	            constraints = zerosM(sets.length, sets.length);

	        // compute required distances between all the sets such that
	        // the areas match
	        areas.filter(function (x) {
	            return x.sets.length == 2;
	        }).map(function (current) {
	            var left = setids[current.sets[0]],
	                right = setids[current.sets[1]],
	                r1 = Math.sqrt(sets[left].size / Math.PI),
	                r2 = Math.sqrt(sets[right].size / Math.PI),
	                distance$$1 = distanceFromIntersectArea(r1, r2, current.size);

	            distances[left][right] = distances[right][left] = distance$$1;

	            // also update constraints to indicate if its a subset or disjoint
	            // relationship
	            var c = 0;
	            if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {
	                c = 1;
	            } else if (current.size <= 1e-10) {
	                c = -1;
	            }
	            constraints[left][right] = constraints[right][left] = c;
	        });

	        return { distances: distances, constraints: constraints };
	    }

	    /// computes the gradient and loss simulatenously for our constrained MDS optimizer
	    function constrainedMDSGradient(x, fxprime, distances, constraints) {
	        var loss = 0,
	            i;
	        for (i = 0; i < fxprime.length; ++i) {
	            fxprime[i] = 0;
	        }

	        for (i = 0; i < distances.length; ++i) {
	            var xi = x[2 * i],
	                yi = x[2 * i + 1];
	            for (var j = i + 1; j < distances.length; ++j) {
	                var xj = x[2 * j],
	                    yj = x[2 * j + 1],
	                    dij = distances[i][j],
	                    constraint = constraints[i][j];

	                var squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),
	                    distance$$1 = Math.sqrt(squaredDistance),
	                    delta = squaredDistance - dij * dij;

	                if (constraint > 0 && distance$$1 <= dij || constraint < 0 && distance$$1 >= dij) {
	                    continue;
	                }

	                loss += 2 * delta * delta;

	                fxprime[2 * i] += 4 * delta * (xi - xj);
	                fxprime[2 * i + 1] += 4 * delta * (yi - yj);

	                fxprime[2 * j] += 4 * delta * (xj - xi);
	                fxprime[2 * j + 1] += 4 * delta * (yj - yi);
	            }
	        }
	        return loss;
	    }

	    /// takes the best working variant of either constrained MDS or greedy
	    function bestInitialLayout(areas, params) {
	        var initial = greedyLayout(areas, params);
	        var loss = params.lossFunction || lossFunction;

	        // greedylayout is sufficient for all 2/3 circle cases. try out
	        // constrained MDS for higher order problems, take its output
	        // if it outperforms. (greedy is aesthetically better on 2/3 circles
	        // since it axis aligns)
	        if (areas.length >= 8) {
	            var constrained = constrainedMDSLayout(areas, params),
	                constrainedLoss = loss(constrained, areas),
	                greedyLoss = loss(initial, areas);

	            if (constrainedLoss + 1e-8 < greedyLoss) {
	                initial = constrained;
	            }
	        }
	        return initial;
	    }

	    /// use the constrained MDS variant to generate an initial layout
	    function constrainedMDSLayout(areas, params) {
	        params = params || {};
	        var restarts = params.restarts || 10;

	        // bidirectionally map sets to a rowid  (so we can create a matrix)
	        var sets = [],
	            setids = {},
	            i;
	        for (i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                setids[area.sets[0]] = sets.length;
	                sets.push(area);
	            }
	        }

	        var matrices = getDistanceMatrices(areas, sets, setids),
	            distances = matrices.distances,
	            constraints = matrices.constraints;

	        // keep distances bounded, things get messed up otherwise.
	        // TODO: proper preconditioner?
	        var norm = norm2(distances.map(norm2)) / distances.length;
	        distances = distances.map(function (row) {
	            return row.map(function (value) {
	                return value / norm;
	            });
	        });

	        var obj = function obj(x, fxprime) {
	            return constrainedMDSGradient(x, fxprime, distances, constraints);
	        };

	        var best, current;
	        for (i = 0; i < restarts; ++i) {
	            var initial = zeros(distances.length * 2).map(Math.random);

	            current = conjugateGradient(obj, initial, params);
	            if (!best || current.fx < best.fx) {
	                best = current;
	            }
	        }
	        var positions = best.x;

	        // translate rows back to (x,y,radius) coordinates
	        var circles = {};
	        for (i = 0; i < sets.length; ++i) {
	            var set = sets[i];
	            circles[set.sets[0]] = {
	                x: positions[2 * i] * norm,
	                y: positions[2 * i + 1] * norm,
	                radius: Math.sqrt(set.size / Math.PI)
	            };
	        }

	        if (params.history) {
	            for (i = 0; i < params.history.length; ++i) {
	                scale(params.history[i].x, norm);
	            }
	        }
	        return circles;
	    }

	    /** Lays out a Venn diagram greedily, going from most overlapped sets to
	    least overlapped, attempting to position each new set such that the
	    overlapping areas to already positioned sets are basically right */
	    function greedyLayout(areas, params) {
	        var loss = params && params.lossFunction ? params.lossFunction : lossFunction;
	        // define a circle for each set
	        var circles = {},
	            setOverlaps = {},
	            set;
	        for (var i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                set = area.sets[0];
	                circles[set] = { x: 1e10, y: 1e10,
	                    rowid: circles.length,
	                    size: area.size,
	                    radius: Math.sqrt(area.size / Math.PI) };
	                setOverlaps[set] = [];
	            }
	        }
	        areas = areas.filter(function (a) {
	            return a.sets.length == 2;
	        });

	        // map each set to a list of all the other sets that overlap it
	        for (i = 0; i < areas.length; ++i) {
	            var current = areas[i];
	            var weight = current.hasOwnProperty('weight') ? current.weight : 1.0;
	            var left = current.sets[0],
	                right = current.sets[1];

	            // completely overlapped circles shouldn't be positioned early here
	            if (current.size + SMALL$1 >= Math.min(circles[left].size, circles[right].size)) {
	                weight = 0;
	            }

	            setOverlaps[left].push({ set: right, size: current.size, weight: weight });
	            setOverlaps[right].push({ set: left, size: current.size, weight: weight });
	        }

	        // get list of most overlapped sets
	        var mostOverlapped = [];
	        for (set in setOverlaps) {
	            if (setOverlaps.hasOwnProperty(set)) {
	                var size = 0;
	                for (i = 0; i < setOverlaps[set].length; ++i) {
	                    size += setOverlaps[set][i].size * setOverlaps[set][i].weight;
	                }

	                mostOverlapped.push({ set: set, size: size });
	            }
	        }

	        // sort by size desc
	        function sortOrder(a, b) {
	            return b.size - a.size;
	        }
	        mostOverlapped.sort(sortOrder);

	        // keep track of what sets have been laid out
	        var positioned = {};
	        function isPositioned(element) {
	            return element.set in positioned;
	        }

	        // adds a point to the output
	        function positionSet(point, index) {
	            circles[index].x = point.x;
	            circles[index].y = point.y;
	            positioned[index] = true;
	        }

	        // add most overlapped set at (0,0)
	        positionSet({ x: 0, y: 0 }, mostOverlapped[0].set);

	        // get distances between all points. TODO, necessary?
	        // answer: probably not
	        // var distances = venn.getDistanceMatrices(circles, areas).distances;
	        for (i = 1; i < mostOverlapped.length; ++i) {
	            var setIndex = mostOverlapped[i].set,
	                overlap = setOverlaps[setIndex].filter(isPositioned);
	            set = circles[setIndex];
	            overlap.sort(sortOrder);

	            if (overlap.length === 0) {
	                // this shouldn't happen anymore with addMissingAreas
	                throw "ERROR: missing pairwise overlap information";
	            }

	            var points = [];
	            for (var j = 0; j < overlap.length; ++j) {
	                // get appropriate distance from most overlapped already added set
	                var p1 = circles[overlap[j].set],
	                    d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);

	                // sample positions at 90 degrees for maximum aesthetics
	                points.push({ x: p1.x + d1, y: p1.y });
	                points.push({ x: p1.x - d1, y: p1.y });
	                points.push({ y: p1.y + d1, x: p1.x });
	                points.push({ y: p1.y - d1, x: p1.x });

	                // if we have at least 2 overlaps, then figure out where the
	                // set should be positioned analytically and try those too
	                for (var k = j + 1; k < overlap.length; ++k) {
	                    var p2 = circles[overlap[k].set],
	                        d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);

	                    var extraPoints = circleCircleIntersection({ x: p1.x, y: p1.y, radius: d1 }, { x: p2.x, y: p2.y, radius: d2 });

	                    for (var l = 0; l < extraPoints.length; ++l) {
	                        points.push(extraPoints[l]);
	                    }
	                }
	            }

	            // we have some candidate positions for the set, examine loss
	            // at each position to figure out where to put it at
	            var bestLoss = 1e50,
	                bestPoint = points[0];
	            for (j = 0; j < points.length; ++j) {
	                circles[setIndex].x = points[j].x;
	                circles[setIndex].y = points[j].y;
	                var localLoss = loss(circles, areas);
	                if (localLoss < bestLoss) {
	                    bestLoss = localLoss;
	                    bestPoint = points[j];
	                }
	            }

	            positionSet(bestPoint, setIndex);
	        }

	        return circles;
	    }

	    /** Given a bunch of sets, and the desired overlaps between these sets - computes
	    the distance from the actual overlaps to the desired overlaps. Note that
	    this method ignores overlaps of more than 2 circles */
	    function lossFunction(sets, overlaps) {
	        var output = 0;

	        function getCircles(indices) {
	            return indices.map(function (i) {
	                return sets[i];
	            });
	        }

	        for (var i = 0; i < overlaps.length; ++i) {
	            var area = overlaps[i],
	                overlap;
	            if (area.sets.length == 1) {
	                continue;
	            } else if (area.sets.length == 2) {
	                var left = sets[area.sets[0]],
	                    right = sets[area.sets[1]];
	                overlap = circleOverlap(left.radius, right.radius, distance(left, right));
	            } else {
	                overlap = intersectionArea(getCircles(area.sets));
	            }

	            var weight = area.hasOwnProperty('weight') ? area.weight : 1.0;
	            output += weight * (overlap - area.size) * (overlap - area.size);
	        }

	        return output;
	    }

	    // orientates a bunch of circles to point in orientation
	    function orientateCircles(circles, orientation, orientationOrder) {
	        if (orientationOrder === null) {
	            circles.sort(function (a, b) {
	                return b.radius - a.radius;
	            });
	        } else {
	            circles.sort(orientationOrder);
	        }

	        var i;
	        // shift circles so largest circle is at (0, 0)
	        if (circles.length > 0) {
	            var largestX = circles[0].x,
	                largestY = circles[0].y;

	            for (i = 0; i < circles.length; ++i) {
	                circles[i].x -= largestX;
	                circles[i].y -= largestY;
	            }
	        }

	        if (circles.length == 2) {
	            // if the second circle is a subset of the first, arrange so that
	            // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120
	            var dist = distance(circles[0], circles[1]);
	            if (dist < Math.abs(circles[1].radius - circles[0].radius)) {
	                circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;
	                circles[1].y = circles[0].y;
	            }
	        }

	        // rotate circles so that second largest is at an angle of 'orientation'
	        // from largest
	        if (circles.length > 1) {
	            var rotation = Math.atan2(circles[1].x, circles[1].y) - orientation,
	                c = Math.cos(rotation),
	                s = Math.sin(rotation),
	                x,
	                y;

	            for (i = 0; i < circles.length; ++i) {
	                x = circles[i].x;
	                y = circles[i].y;
	                circles[i].x = c * x - s * y;
	                circles[i].y = s * x + c * y;
	            }
	        }

	        // mirror solution if third solution is above plane specified by
	        // first two circles
	        if (circles.length > 2) {
	            var angle = Math.atan2(circles[2].x, circles[2].y) - orientation;
	            while (angle < 0) {
	                angle += 2 * Math.PI;
	            }
	            while (angle > 2 * Math.PI) {
	                angle -= 2 * Math.PI;
	            }
	            if (angle > Math.PI) {
	                var slope = circles[1].y / (1e-10 + circles[1].x);
	                for (i = 0; i < circles.length; ++i) {
	                    var d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);
	                    circles[i].x = 2 * d - circles[i].x;
	                    circles[i].y = 2 * d * slope - circles[i].y;
	                }
	            }
	        }
	    }

	    function disjointCluster(circles) {
	        // union-find clustering to get disjoint sets
	        circles.map(function (circle) {
	            circle.parent = circle;
	        });

	        // path compression step in union find
	        function find(circle) {
	            if (circle.parent !== circle) {
	                circle.parent = find(circle.parent);
	            }
	            return circle.parent;
	        }

	        function union(x, y) {
	            var xRoot = find(x),
	                yRoot = find(y);
	            xRoot.parent = yRoot;
	        }

	        // get the union of all overlapping sets
	        for (var i = 0; i < circles.length; ++i) {
	            for (var j = i + 1; j < circles.length; ++j) {
	                var maxDistance = circles[i].radius + circles[j].radius;
	                if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {
	                    union(circles[j], circles[i]);
	                }
	            }
	        }

	        // find all the disjoint clusters and group them together
	        var disjointClusters = {},
	            setid;
	        for (i = 0; i < circles.length; ++i) {
	            setid = find(circles[i]).parent.setid;
	            if (!(setid in disjointClusters)) {
	                disjointClusters[setid] = [];
	            }
	            disjointClusters[setid].push(circles[i]);
	        }

	        // cleanup bookkeeping
	        circles.map(function (circle) {
	            delete circle.parent;
	        });

	        // return in more usable form
	        var ret = [];
	        for (setid in disjointClusters) {
	            if (disjointClusters.hasOwnProperty(setid)) {
	                ret.push(disjointClusters[setid]);
	            }
	        }
	        return ret;
	    }

	    function getBoundingBox(circles) {
	        var minMax = function minMax(d) {
	            var hi = Math.max.apply(null, circles.map(function (c) {
	                return c[d] + c.radius;
	            })),
	                lo = Math.min.apply(null, circles.map(function (c) {
	                return c[d] - c.radius;
	            }));
	            return { max: hi, min: lo };
	        };

	        return { xRange: minMax('x'), yRange: minMax('y') };
	    }

	    function normalizeSolution(solution, orientation, orientationOrder) {
	        if (orientation === null) {
	            orientation = Math.PI / 2;
	        }

	        // work with a list instead of a dictionary, and take a copy so we
	        // don't mutate input
	        var circles = [],
	            i,
	            setid;
	        for (setid in solution) {
	            if (solution.hasOwnProperty(setid)) {
	                var previous = solution[setid];
	                circles.push({ x: previous.x,
	                    y: previous.y,
	                    radius: previous.radius,
	                    setid: setid });
	            }
	        }

	        // get all the disjoint clusters
	        var clusters = disjointCluster(circles);

	        // orientate all disjoint sets, get sizes
	        for (i = 0; i < clusters.length; ++i) {
	            orientateCircles(clusters[i], orientation, orientationOrder);
	            var bounds = getBoundingBox(clusters[i]);
	            clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);
	            clusters[i].bounds = bounds;
	        }
	        clusters.sort(function (a, b) {
	            return b.size - a.size;
	        });

	        // orientate the largest at 0,0, and get the bounds
	        circles = clusters[0];
	        var returnBounds = circles.bounds;

	        var spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;

	        function addCluster(cluster, right, bottom) {
	            if (!cluster) return;

	            var bounds = cluster.bounds,
	                xOffset,
	                yOffset,
	                centreing;

	            if (right) {
	                xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;
	            } else {
	                xOffset = returnBounds.xRange.max - bounds.xRange.max;
	                centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;
	                if (centreing < 0) xOffset += centreing;
	            }

	            if (bottom) {
	                yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;
	            } else {
	                yOffset = returnBounds.yRange.max - bounds.yRange.max;
	                centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;
	                if (centreing < 0) yOffset += centreing;
	            }

	            for (var j = 0; j < cluster.length; ++j) {
	                cluster[j].x += xOffset;
	                cluster[j].y += yOffset;
	                circles.push(cluster[j]);
	            }
	        }

	        var index = 1;
	        while (index < clusters.length) {
	            addCluster(clusters[index], true, false);
	            addCluster(clusters[index + 1], false, true);
	            addCluster(clusters[index + 2], true, true);
	            index += 3;

	            // have one cluster (in top left). lay out next three relative
	            // to it in a grid
	            returnBounds = getBoundingBox(circles);
	        }

	        // convert back to solution form
	        var ret = {};
	        for (i = 0; i < circles.length; ++i) {
	            ret[circles[i].setid] = circles[i];
	        }
	        return ret;
	    }

	    /** Scales a solution from venn.venn or venn.greedyLayout such that it fits in
	    a rectangle of width/height - with padding around the borders. also
	    centers the diagram in the available space at the same time */
	    function scaleSolution(solution, width, height, padding) {
	        var circles = [],
	            setids = [];
	        for (var setid in solution) {
	            if (solution.hasOwnProperty(setid)) {
	                setids.push(setid);
	                circles.push(solution[setid]);
	            }
	        }

	        width -= 2 * padding;
	        height -= 2 * padding;

	        var bounds = getBoundingBox(circles),
	            xRange = bounds.xRange,
	            yRange = bounds.yRange;

	        if (xRange.max == xRange.min || yRange.max == yRange.min) {
	            console.log("not scaling solution: zero size detected");
	            return solution;
	        }

	        var xScaling = width / (xRange.max - xRange.min),
	            yScaling = height / (yRange.max - yRange.min),
	            scaling = Math.min(yScaling, xScaling),


	        // while we're at it, center the diagram too
	        xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,
	            yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;

	        var scaled = {};
	        for (var i = 0; i < circles.length; ++i) {
	            var circle = circles[i];
	            scaled[setids[i]] = {
	                radius: scaling * circle.radius,
	                x: padding + xOffset + (circle.x - xRange.min) * scaling,
	                y: padding + yOffset + (circle.y - yRange.min) * scaling
	            };
	        }

	        return scaled;
	    }

	    /*global console:true*/

	    function VennDiagram() {
	        var width = 600,
	            height = 350,
	            padding = 15,
	            duration = 1000,
	            orientation = Math.PI / 2,
	            normalize = true,
	            wrap = true,
	            styled = true,
	            fontSize = null,
	            orientationOrder = null,


	        // mimic the behaviour of d3.scale.category10 from the previous
	        // version of d3
	        colourMap = {},


	        // so this is the same as d3.schemeCategory10, which is only defined in d3 4.0
	        // since we can support older versions of d3 as long as we don't force this,
	        // I'm hackily redefining below. TODO: remove this and change to d3.schemeCategory10
	        colourScheme = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"],
	            colourIndex = 0,
	            colours = function colours(key) {
	            if (key in colourMap) {
	                return colourMap[key];
	            }
	            var ret = colourMap[key] = colourScheme[colourIndex];
	            colourIndex += 1;
	            if (colourIndex >= colourScheme.length) {
	                colourIndex = 0;
	            }
	            return ret;
	        },
	            layoutFunction = venn,
	            loss = lossFunction;

	        function chart(selection) {
	            var data = selection.datum();

	            // handle 0-sized sets by removing from input
	            var toremove = {};
	            data.forEach(function (datum) {
	                if (datum.size == 0 && datum.sets.length == 1) {
	                    toremove[datum.sets[0]] = 1;
	                }
	            });
	            data = data.filter(function (datum) {
	                return !datum.sets.some(function (set) {
	                    return set in toremove;
	                });
	            });

	            var circles = {};
	            var textCentres = {};

	            if (data.length > 0) {
	                var solution = layoutFunction(data, { lossFunction: loss });

	                if (normalize) {
	                    solution = normalizeSolution(solution, orientation, orientationOrder);
	                }

	                circles = scaleSolution(solution, width, height, padding);
	                textCentres = computeTextCentres(circles, data);
	            }

	            // Figure out the current label for each set. These can change
	            // and D3 won't necessarily update (fixes https://github.com/benfred/venn.js/issues/103)
	            var labels = {};
	            data.forEach(function (datum) {
	                if (datum.label) {
	                    labels[datum.sets] = datum.label;
	                }
	            });

	            function label(d) {
	                if (d.sets in labels) {
	                    return labels[d.sets];
	                }
	                if (d.sets.length == 1) {
	                    return '' + d.sets[0];
	                }
	            }

	            // create svg if not already existing
	            selection.selectAll("svg").data([circles]).enter().append("svg");

	            var svg = selection.select("svg").attr("width", width).attr("height", height);

	            // to properly transition intersection areas, we need the
	            // previous circles locations. load from elements
	            var previous = {},
	                hasPrevious = false;
	            svg.selectAll(".venn-area path").each(function (d) {
	                var path = d3Selection.select(this).attr("d");
	                if (d.sets.length == 1 && path) {
	                    hasPrevious = true;
	                    previous[d.sets[0]] = circleFromPath(path);
	                }
	            });

	            // interpolate intersection area paths between previous and
	            // current paths
	            var pathTween = function pathTween(d) {
	                return function (t) {
	                    var c = d.sets.map(function (set) {
	                        var start = previous[set],
	                            end = circles[set];
	                        if (!start) {
	                            start = { x: width / 2, y: height / 2, radius: 1 };
	                        }
	                        if (!end) {
	                            end = { x: width / 2, y: height / 2, radius: 1 };
	                        }
	                        return { 'x': start.x * (1 - t) + end.x * t,
	                            'y': start.y * (1 - t) + end.y * t,
	                            'radius': start.radius * (1 - t) + end.radius * t };
	                    });
	                    return intersectionAreaPath(c);
	                };
	            };

	            // update data, joining on the set ids
	            var nodes = svg.selectAll(".venn-area").data(data, function (d) {
	                return d.sets;
	            });

	            // create new nodes
	            var enter = nodes.enter().append('g').attr("class", function (d) {
	                return "venn-area venn-" + (d.sets.length == 1 ? "circle" : "intersection");
	            }).attr("data-venn-sets", function (d) {
	                return d.sets.join("_");
	            });

	            var enterPath = enter.append("path"),
	                enterText = enter.append("text").attr("class", "label").text(function (d) {
	                return label(d);
	            }).attr("text-anchor", "middle").attr("dy", ".35em").attr("x", width / 2).attr("y", height / 2);

	            // apply minimal style if wanted
	            if (styled) {
	                enterPath.style("fill-opacity", "0").filter(function (d) {
	                    return d.sets.length == 1;
	                }).style("fill", function (d) {
	                    return colours(d.sets);
	                }).style("fill-opacity", ".25");

	                enterText.style("fill", function (d) {
	                    return d.sets.length == 1 ? colours(d.sets) : "#444";
	                });
	            }

	            // update existing, using pathTween if necessary
	            var update = selection;
	            if (hasPrevious) {
	                update = selection.transition("venn").duration(duration);
	                update.selectAll("path").attrTween("d", pathTween);
	            } else {
	                update.selectAll("path").attr("d", function (d) {
	                    return intersectionAreaPath(d.sets.map(function (set) {
	                        return circles[set];
	                    }));
	                });
	            }

	            var updateText = update.selectAll("text").filter(function (d) {
	                return d.sets in textCentres;
	            }).text(function (d) {
	                return label(d);
	            }).attr("x", function (d) {
	                return Math.floor(textCentres[d.sets].x);
	            }).attr("y", function (d) {
	                return Math.floor(textCentres[d.sets].y);
	            });

	            if (wrap) {
	                if (hasPrevious) {
	                    // d3 4.0 uses 'on' for events on transitions,
	                    // but d3 3.0 used 'each' instead. switch appropiately
	                    if ('on' in updateText) {
	                        updateText.on("end", wrapText(circles, label));
	                    } else {
	                        updateText.each("end", wrapText(circles, label));
	                    }
	                } else {
	                    updateText.each(wrapText(circles, label));
	                }
	            }

	            // remove old
	            var exit = nodes.exit().transition('venn').duration(duration).remove();
	            exit.selectAll("path").attrTween("d", pathTween);

	            var exitText = exit.selectAll("text").attr("x", width / 2).attr("y", height / 2);

	            // if we've been passed a fontSize explicitly, use it to
	            // transition
	            if (fontSize !== null) {
	                enterText.style("font-size", "0px");
	                updateText.style("font-size", fontSize);
	                exitText.style("font-size", "0px");
	            }

	            return { 'circles': circles,
	                'textCentres': textCentres,
	                'nodes': nodes,
	                'enter': enter,
	                'update': update,
	                'exit': exit };
	        }

	        chart.wrap = function (_) {
	            if (!arguments.length) return wrap;
	            wrap = _;
	            return chart;
	        };

	        chart.width = function (_) {
	            if (!arguments.length) return width;
	            width = _;
	            return chart;
	        };

	        chart.height = function (_) {
	            if (!arguments.length) return height;
	            height = _;
	            return chart;
	        };

	        chart.padding = function (_) {
	            if (!arguments.length) return padding;
	            padding = _;
	            return chart;
	        };

	        chart.colours = function (_) {
	            if (!arguments.length) return colours;
	            colours = _;
	            return chart;
	        };

	        chart.fontSize = function (_) {
	            if (!arguments.length) return fontSize;
	            fontSize = _;
	            return chart;
	        };

	        chart.duration = function (_) {
	            if (!arguments.length) return duration;
	            duration = _;
	            return chart;
	        };

	        chart.layoutFunction = function (_) {
	            if (!arguments.length) return layoutFunction;
	            layoutFunction = _;
	            return chart;
	        };

	        chart.normalize = function (_) {
	            if (!arguments.length) return normalize;
	            normalize = _;
	            return chart;
	        };

	        chart.styled = function (_) {
	            if (!arguments.length) return styled;
	            styled = _;
	            return chart;
	        };

	        chart.orientation = function (_) {
	            if (!arguments.length) return orientation;
	            orientation = _;
	            return chart;
	        };

	        chart.orientationOrder = function (_) {
	            if (!arguments.length) return orientationOrder;
	            orientationOrder = _;
	            return chart;
	        };

	        chart.lossFunction = function (_) {
	            if (!arguments.length) return loss;
	            loss = _;
	            return chart;
	        };

	        return chart;
	    }
	    // sometimes text doesn't fit inside the circle, if thats the case lets wrap
	    // the text here such that it fits
	    // todo: looks like this might be merged into d3 (
	    // https://github.com/mbostock/d3/issues/1642),
	    // also worth checking out is
	    // http://engineering.findthebest.com/wrapping-axis-labels-in-d3-js/
	    // this seems to be one of those things that should be easy but isn't
	    function wrapText(circles, labeller) {
	        return function () {
	            var text = d3Selection.select(this),
	                data = text.datum(),
	                width = circles[data.sets[0]].radius || 50,
	                label = labeller(data) || '';

	            var words = label.split(/\s+/).reverse(),
	                maxLines = 3,
	                minChars = (label.length + words.length) / maxLines,
	                word = words.pop(),
	                line = [word],
	                joined,
	                lineNumber = 0,
	                lineHeight = 1.1,
	                // ems
	            tspan = text.text(null).append("tspan").text(word);

	            while (true) {
	                word = words.pop();
	                if (!word) break;
	                line.push(word);
	                joined = line.join(" ");
	                tspan.text(joined);
	                if (joined.length > minChars && tspan.node().getComputedTextLength() > width) {
	                    line.pop();
	                    tspan.text(line.join(" "));
	                    line = [word];
	                    tspan = text.append("tspan").text(word);
	                    lineNumber++;
	                }
	            }

	            var initial = 0.35 - lineNumber * lineHeight / 2,
	                x = text.attr("x"),
	                y = text.attr("y");

	            text.selectAll("tspan").attr("x", x).attr("y", y).attr("dy", function (d, i) {
	                return initial + i * lineHeight + "em";
	            });
	        };
	    }

	    function circleMargin(current, interior, exterior) {
	        var margin = interior[0].radius - distance(interior[0], current),
	            i,
	            m;
	        for (i = 1; i < interior.length; ++i) {
	            m = interior[i].radius - distance(interior[i], current);
	            if (m <= margin) {
	                margin = m;
	            }
	        }

	        for (i = 0; i < exterior.length; ++i) {
	            m = distance(exterior[i], current) - exterior[i].radius;
	            if (m <= margin) {
	                margin = m;
	            }
	        }
	        return margin;
	    }

	    // compute the center of some circles by maximizing the margin of
	    // the center point relative to the circles (interior) after subtracting
	    // nearby circles (exterior)
	    function computeTextCentre(interior, exterior) {
	        // get an initial estimate by sampling around the interior circles
	        // and taking the point with the biggest margin
	        var points = [],
	            i;
	        for (i = 0; i < interior.length; ++i) {
	            var c = interior[i];
	            points.push({ x: c.x, y: c.y });
	            points.push({ x: c.x + c.radius / 2, y: c.y });
	            points.push({ x: c.x - c.radius / 2, y: c.y });
	            points.push({ x: c.x, y: c.y + c.radius / 2 });
	            points.push({ x: c.x, y: c.y - c.radius / 2 });
	        }
	        var initial = points[0],
	            margin = circleMargin(points[0], interior, exterior);
	        for (i = 1; i < points.length; ++i) {
	            var m = circleMargin(points[i], interior, exterior);
	            if (m >= margin) {
	                initial = points[i];
	                margin = m;
	            }
	        }

	        // maximize the margin numerically
	        var solution = nelderMead(function (p) {
	            return -1 * circleMargin({ x: p[0], y: p[1] }, interior, exterior);
	        }, [initial.x, initial.y], { maxIterations: 500, minErrorDelta: 1e-10 }).x;
	        var ret = { x: solution[0], y: solution[1] };

	        // check solution, fallback as needed (happens if fully overlapped
	        // etc)
	        var valid = true;
	        for (i = 0; i < interior.length; ++i) {
	            if (distance(ret, interior[i]) > interior[i].radius) {
	                valid = false;
	                break;
	            }
	        }

	        for (i = 0; i < exterior.length; ++i) {
	            if (distance(ret, exterior[i]) < exterior[i].radius) {
	                valid = false;
	                break;
	            }
	        }

	        if (!valid) {
	            if (interior.length == 1) {
	                ret = { x: interior[0].x, y: interior[0].y };
	            } else {
	                var areaStats = {};
	                intersectionArea(interior, areaStats);

	                if (areaStats.arcs.length === 0) {
	                    ret = { 'x': 0, 'y': -1000, disjoint: true };
	                } else if (areaStats.arcs.length == 1) {
	                    ret = { 'x': areaStats.arcs[0].circle.x,
	                        'y': areaStats.arcs[0].circle.y };
	                } else if (exterior.length) {
	                    // try again without other circles
	                    ret = computeTextCentre(interior, []);
	                } else {
	                    // take average of all the points in the intersection
	                    // polygon. this should basically never happen
	                    // and has some issues:
	                    // https://github.com/benfred/venn.js/issues/48#issuecomment-146069777
	                    ret = getCenter(areaStats.arcs.map(function (a) {
	                        return a.p1;
	                    }));
	                }
	            }
	        }

	        return ret;
	    }

	    // given a dictionary of {setid : circle}, returns
	    // a dictionary of setid to list of circles that completely overlap it
	    function getOverlappingCircles(circles) {
	        var ret = {},
	            circleids = [];
	        for (var circleid in circles) {
	            circleids.push(circleid);
	            ret[circleid] = [];
	        }
	        for (var i = 0; i < circleids.length; i++) {
	            var a = circles[circleids[i]];
	            for (var j = i + 1; j < circleids.length; ++j) {
	                var b = circles[circleids[j]],
	                    d = distance(a, b);

	                if (d + b.radius <= a.radius + 1e-10) {
	                    ret[circleids[j]].push(circleids[i]);
	                } else if (d + a.radius <= b.radius + 1e-10) {
	                    ret[circleids[i]].push(circleids[j]);
	                }
	            }
	        }
	        return ret;
	    }

	    function computeTextCentres(circles, areas) {
	        var ret = {},
	            overlapped = getOverlappingCircles(circles);
	        for (var i = 0; i < areas.length; ++i) {
	            var area = areas[i].sets,
	                areaids = {},
	                exclude = {};
	            for (var j = 0; j < area.length; ++j) {
	                areaids[area[j]] = true;
	                var overlaps = overlapped[area[j]];
	                // keep track of any circles that overlap this area,
	                // and don't consider for purposes of computing the text
	                // centre
	                for (var k = 0; k < overlaps.length; ++k) {
	                    exclude[overlaps[k]] = true;
	                }
	            }

	            var interior = [],
	                exterior = [];
	            for (var setid in circles) {
	                if (setid in areaids) {
	                    interior.push(circles[setid]);
	                } else if (!(setid in exclude)) {
	                    exterior.push(circles[setid]);
	                }
	            }
	            var centre = computeTextCentre(interior, exterior);
	            ret[area] = centre;
	            if (centre.disjoint && areas[i].size > 0) {
	                console.log("WARNING: area " + area + " not represented on screen");
	            }
	        }
	        return ret;
	    }

	    // sorts all areas in the venn diagram, so that
	    // a particular area is on top (relativeTo) - and
	    // all other areas are so that the smallest areas are on top
	    function sortAreas(div, relativeTo) {

	        // figure out sets that are completly overlapped by relativeTo
	        var overlaps = getOverlappingCircles(div.selectAll("svg").datum());
	        var exclude = {};
	        for (var i = 0; i < relativeTo.sets.length; ++i) {
	            var check = relativeTo.sets[i];
	            for (var setid in overlaps) {
	                var overlap = overlaps[setid];
	                for (var j = 0; j < overlap.length; ++j) {
	                    if (overlap[j] == check) {
	                        exclude[setid] = true;
	                        break;
	                    }
	                }
	            }
	        }

	        // checks that all sets are in exclude;
	        function shouldExclude(sets) {
	            for (var i = 0; i < sets.length; ++i) {
	                if (!(sets[i] in exclude)) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        // need to sort div's so that Z order is correct
	        div.selectAll("g").sort(function (a, b) {
	            // highest order set intersections first
	            if (a.sets.length != b.sets.length) {
	                return a.sets.length - b.sets.length;
	            }

	            if (a == relativeTo) {
	                return shouldExclude(b.sets) ? -1 : 1;
	            }
	            if (b == relativeTo) {
	                return shouldExclude(a.sets) ? 1 : -1;
	            }

	            // finally by size
	            return b.size - a.size;
	        });
	    }

	    function circlePath(x, y, r) {
	        var ret = [];
	        ret.push("\nM", x, y);
	        ret.push("\nm", -r, 0);
	        ret.push("\na", r, r, 0, 1, 0, r * 2, 0);
	        ret.push("\na", r, r, 0, 1, 0, -r * 2, 0);
	        return ret.join(" ");
	    }

	    // inverse of the circlePath function, returns a circle object from an svg path
	    function circleFromPath(path) {
	        var tokens = path.split(' ');
	        return { 'x': parseFloat(tokens[1]),
	            'y': parseFloat(tokens[2]),
	            'radius': -parseFloat(tokens[4])
	        };
	    }

	    /** returns a svg path of the intersection area of a bunch of circles */
	    function intersectionAreaPath(circles) {
	        var stats = {};
	        intersectionArea(circles, stats);
	        var arcs = stats.arcs;

	        if (arcs.length === 0) {
	            return "M 0 0";
	        } else if (arcs.length == 1) {
	            var circle = arcs[0].circle;
	            return circlePath(circle.x, circle.y, circle.radius);
	        } else {
	            // draw path around arcs
	            var ret = ["\nM", arcs[0].p2.x, arcs[0].p2.y];
	            for (var i = 0; i < arcs.length; ++i) {
	                var arc = arcs[i],
	                    r = arc.circle.radius,
	                    wide = arc.width > r;
	                ret.push("\nA", r, r, 0, wide ? 1 : 0, 1, arc.p1.x, arc.p1.y);
	            }
	            return ret.join(" ");
	        }
	    }

	    exports.intersectionArea = intersectionArea;
	    exports.circleCircleIntersection = circleCircleIntersection;
	    exports.circleOverlap = circleOverlap;
	    exports.circleArea = circleArea;
	    exports.distance = distance;
	    exports.venn = venn;
	    exports.greedyLayout = greedyLayout;
	    exports.scaleSolution = scaleSolution;
	    exports.normalizeSolution = normalizeSolution;
	    exports.bestInitialLayout = bestInitialLayout;
	    exports.lossFunction = lossFunction;
	    exports.disjointCluster = disjointCluster;
	    exports.distanceFromIntersectArea = distanceFromIntersectArea;
	    exports.VennDiagram = VennDiagram;
	    exports.wrapText = wrapText;
	    exports.computeTextCentres = computeTextCentres;
	    exports.computeTextCentre = computeTextCentre;
	    exports.sortAreas = sortAreas;
	    exports.circlePath = circlePath;
	    exports.circleFromPath = circleFromPath;
	    exports.intersectionAreaPath = intersectionAreaPath;

	    Object.defineProperty(exports, '__esModule', { value: true });
	});

	/***/ }),
	/* 392 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__select__ = __webpack_require__(360);



	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  return Object(__WEBPACK_IMPORTED_MODULE_1__select__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name).call(document.documentElement));
	});

	/***/ }),
	/* 393 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(350);



	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
	});

	/***/ }),
	/* 394 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectorAll__ = __webpack_require__(361);



	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selectorAll__["a" /* default */])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, parents);
	});

	/***/ }),
	/* 395 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__matcher__ = __webpack_require__(362);



	/* harmony default export */ __webpack_exports__["a"] = (function (match) {
	  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_1__matcher__["a" /* default */])(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
	});

	/***/ }),
	/* 396 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__enter__ = __webpack_require__(363);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(397);




	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
	      exit[i] = node;
	    }
	  }
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function (d) {
	      data[++j] = d;
	    });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {}
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	});

	/***/ }),
	/* 397 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (x) {
	  return function () {
	    return x;
	  };
	});

	/***/ }),
	/* 398 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(364);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(60);



	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._exit || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
	});

	/***/ }),
	/* 399 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selection) {

	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](merges, this._parents);
	});

	/***/ }),
	/* 400 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	});

	/***/ }),
	/* 401 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (compare) {
	  if (!compare) compare = ascending;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](sortgroups, this._parents).order();
	});

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	/***/ }),
	/* 402 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	});

	/***/ }),
	/* 403 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var nodes = new Array(this.size()),
	      i = -1;
	  this.each(function () {
	    nodes[++i] = this;
	  });
	  return nodes;
	});

	/***/ }),
	/* 404 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 405 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var size = 0;
	  this.each(function () {
	    ++size;
	  });
	  return size;
	});

	/***/ }),
	/* 406 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return !this.node();
	});

	/***/ }),
	/* 407 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	});

	/***/ }),
	/* 408 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(348);


	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function () {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function () {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
	  }

	  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
	});

	/***/ }),
	/* 409 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function propertyRemove(name) {
	  return function () {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function () {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];else this[name] = v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
	});

	/***/ }),
	/* 410 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function add(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function remove(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function contains(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;
	  while (++i < n) {
	    list.add(names[i]);
	  }
	}

	function classedRemove(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;
	  while (++i < n) {
	    list.remove(names[i]);
	  }
	}

	function classedTrue(names) {
	  return function () {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function () {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function () {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()),
	        i = -1,
	        n = names.length;
	    while (++i < n) {
	      if (!list.contains(names[i])) return false;
	    }return true;
	  }

	  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
	});

	/***/ }),
	/* 411 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
	});

	/***/ }),
	/* 412 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function () {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
	});

	/***/ }),
	/* 413 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(raise);
	});

	/***/ }),
	/* 414 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(lower);
	});

	/***/ }),
	/* 415 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name);
	  return this.select(function () {
	    return this.appendChild(create.apply(this, arguments));
	  });
	});

	/***/ }),
	/* 416 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(350);



	function constantNull() {
	  return null;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, before) {
	  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(before);
	  return this.select(function () {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	});

	/***/ }),
	/* 417 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(remove);
	});

	/***/ }),
	/* 418 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function selection_cloneShallow() {
	  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
	}

	function selection_cloneDeep() {
	  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	});

	/***/ }),
	/* 419 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	    return arguments.length ? this.property("__data__", value) : this.node().__data__;
	});

	/***/ }),
	/* 420 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(351);


	function dispatchEvent(node, type, params) {
	  var window = Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (type, params) {
	  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
	});

	/***/ }),
	/* 421 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = local;
	var nextId = 0;

	function local() {
	  return new Local();
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local.prototype = {
	  constructor: Local,
	  get: function get(node) {
	    var id = this._;
	    while (!(id in node)) {
	      if (!(node = node.parentNode)) return;
	    }return node[id];
	  },
	  set: function set(node, value) {
	    return node[this._] = value;
	  },
	  remove: function remove(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function toString() {
	    return this._;
	  }
	};

	/***/ }),
	/* 422 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node) {
	  var event = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, event);
	});

	/***/ }),
	/* 423 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	    return typeof selector === "string" ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([document.querySelectorAll(selector)], [document.documentElement]) : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([selector == null ? [] : selector], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
	});

	/***/ }),
	/* 424 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touch);
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 425 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node, touches) {
	  if (touches == null) touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touches[i]);
	  }

	  return points;
	});

	/***/ }),
	/* 426 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interrupt__ = __webpack_require__(427);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transition__ = __webpack_require__(432);




	__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.interrupt = __WEBPACK_IMPORTED_MODULE_1__interrupt__["a" /* default */];
	__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.transition = __WEBPACK_IMPORTED_MODULE_2__transition__["a" /* default */];

	/***/ }),
	/* 427 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interrupt__ = __webpack_require__(367);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  return this.each(function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__interrupt__["a" /* default */])(this, name);
	  });
	});

	/***/ }),
	/* 428 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_dispatch__ = __webpack_require__(429);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_dispatch__["a"]; });


	/***/ }),
	/* 429 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var noop = { value: function value() {} };

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return { type: t, name: name };
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function on(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) {
	        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      }return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) {
	        _[t] = set(_[t], typename.name, null);
	      }
	    }

	    return this;
	  },
	  copy: function copy() {
	    var copy = {},
	        _ = this._;
	    for (var t in _) {
	      copy[t] = _[t].slice();
	    }return new Dispatch(copy);
	  },
	  call: function call(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
	      args[i] = arguments[i + 2];
	    }if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  },
	  apply: function apply(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  }
	};

	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({ name: name, value: callback });
	  return type;
	}

	/* harmony default export */ __webpack_exports__["a"] = (dispatch);

	/***/ }),
	/* 430 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(354);


	/* harmony default export */ __webpack_exports__["a"] = (function (callback, delay, time) {
	  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */]();
	  delay = delay == null ? 0 : +delay;
	  t.restart(function (elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	});

	/***/ }),
	/* 431 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(354);


	/* unused harmony default export */ var _unused_webpack_default_export = (function (callback, delay, time) {
	  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */](),
	      total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	});

	/***/ }),
	/* 432 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(61);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_ease__ = __webpack_require__(461);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_timer__ = __webpack_require__(368);





	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: __WEBPACK_IMPORTED_MODULE_2_d3_ease__["a" /* easeCubicInOut */]
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), defaultTiming;
	    }
	  }
	  return timing;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var id, timing;

	  if (name instanceof __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]) {
	    id = name._id, name = name._name;
	  } else {
	    id = Object(__WEBPACK_IMPORTED_MODULE_0__transition_index__["c" /* newId */])(), (timing = defaultTiming).time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        Object(__WEBPACK_IMPORTED_MODULE_1__transition_schedule__["e" /* default */])(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */](groups, this._parents, name, id);
	});

	/***/ }),
	/* 433 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(355);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(339);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(377);





	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, interpolate, value1) {
	  var value00, interpolate0;
	  return function () {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	  };
	}

	function attrConstantNS(fullname, interpolate, value1) {
	  var value00, interpolate0;
	  return function () {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	  };
	}

	function attrFunction(name, interpolate, value) {
	  var value00, value10, interpolate0;
	  return function () {
	    var value0,
	        value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS(fullname, interpolate, value) {
	  var value00, value10, interpolate0;
	  return function () {
	    var value0,
	        value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["namespace"])(name),
	      i = fullname === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["e" /* interpolateTransformSvg */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
	  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
	});

	/***/ }),
	/* 434 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = lab;
	/* unused harmony export Lab */
	/* harmony export (immutable) */ __webpack_exports__["b"] = hcl;
	/* unused harmony export Hcl */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(357);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(369);




	var Kn = 18,
	    Xn = 0.950470,
	    // D65 standard referent
	Yn = 1,
	    Zn = 1.088830,
	    t0 = 4 / 29,
	    t1 = 6 / 29,
	    t2 = 3 * t1 * t1,
	    t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function darker(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function rgb() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	    xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function darker(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function rgb() {
	    return labConvert(this).rgb();
	  }
	}));

	/***/ }),
	/* 435 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = cubehelix;
	/* unused harmony export Cubehelix */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(357);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(369);




	var A = -0.14861,
	    B = +1.78277,
	    C = -0.29227,
	    D = -0.90649,
	    E = +1.97294,
	    ED = E * D,
	    EB = E * B,
	    BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
	      // NaN if l=0 or l=1
	  h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
	  }
	}));

	/***/ }),
	/* 436 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony default export */ var _unused_webpack_default_export = (function (a, b) {
	  return a = +a, b -= a, function (t) {
	    return Math.round(a + b * t);
	  };
	});

	/***/ }),
	/* 437 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return interpolateTransformCss; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return interpolateTransformSvg; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(338);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(438);



	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
	      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function (a, b) {
	    var s = [],
	        // string constants and placeholders
	    q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function (t) {
	      var i = -1,
	          n = q.length,
	          o;
	      while (++i < n) {
	        s[(o = q[i]).i] = o.x(t);
	      }return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");

	/***/ }),
	/* 438 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = parseCss;
	/* harmony export (immutable) */ __webpack_exports__["b"] = parseSvg;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(439);


	var cssNode, cssRoot, cssView, svgNode;

	function parseCss(value) {
	  if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  value = value.matrix;
	  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	/***/ }),
	/* 439 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return identity; });
	var degrees = 180 / Math.PI;

	var identity = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	/* harmony default export */ __webpack_exports__["a"] = (function (a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	});

	/***/ }),
	/* 440 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var rho = Math.SQRT2,
	    rho2 = 2,
	    rho4 = 4,
	    epsilon2 = 1e-12;

	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}

	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}

	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}

	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	/* unused harmony default export */ var _unused_webpack_default_export = (function (p0, p1) {
	  var ux0 = p0[0],
	      uy0 = p0[1],
	      w0 = p0[2],
	      ux1 = p1[0],
	      uy1 = p1[1],
	      w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;

	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function i(t) {
	      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
	    };
	  }

	  // General case.
	  else {
	      var d1 = Math.sqrt(d2),
	          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / rho;
	      i = function i(t) {
	        var s = t * S,
	            coshr0 = cosh(r0),
	            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
	      };
	    }

	  i.duration = S * 1000;

	  return i;
	});

	/***/ }),
	/* 441 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export hslLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function hsl(hue) {
	  return function (start, end) {
	    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
	        s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  };
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 442 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export default */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function lab(start, end) {
	  var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
	      a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
	      b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
	      opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	  return function (t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}

	/***/ }),
	/* 443 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export hclLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function hcl(hue) {
	  return function (start, end) {
	    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
	        c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
	        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  };
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 444 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export cubehelixLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function cubehelix(hue) {
	  return function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix(start, end) {
	      var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
	          s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	          l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	          opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	      return function (t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix.gamma = cubehelixGamma;

	    return cubehelix;
	  }(1);
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 445 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony default export */ var _unused_webpack_default_export = (function (interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) {
	    samples[i] = interpolator(i / (n - 1));
	  }return samples;
	});

	/***/ }),
	/* 446 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);


	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["namespace"])(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	});

	/***/ }),
	/* 447 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function delayFunction(id, value) {
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).delay;
	});

	/***/ }),
	/* 448 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function durationFunction(id, value) {
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).duration;
	});

	/***/ }),
	/* 449 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).ease = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each(easeConstant(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).ease;
	});

	/***/ }),
	/* 450 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);



	/* harmony default export */ __webpack_exports__["a"] = (function (match) {
	  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["matcher"])(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, this._name, this._id);
	});

	/***/ }),
	/* 451 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(113);


	/* harmony default export */ __webpack_exports__["a"] = (function (transition) {
	  if (transition._id !== this._id) throw new Error();

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](merges, this._parents, this._name, this._id);
	});

	/***/ }),
	/* 452 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function (t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0,
	      on1,
	      sit = start(name) ? __WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */] : __WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */];
	  return function () {
	    var schedule = sit(this, id),
	        on = schedule.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule.on = on1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, listener) {
	  var id = this._id;

	  return arguments.length < 2 ? Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
	});

	/***/ }),
	/* 453 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function removeFunction(id) {
	  return function () {
	    var parent = this.parentNode;
	    for (var i in this.__transition) {
	      if (+i !== id) return;
	    }if (parent) parent.removeChild(this);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.on("end.remove", removeFunction(this._id));
	});

	/***/ }),
	/* 454 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(61);




	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selector"])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(subgroup[i], name, id, i, subgroup, Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id));
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, name, id);
	});

	/***/ }),
	/* 455 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(61);




	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selectorAll"])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select.call(node, node.__data__, i, group), child, inherit = Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, parents, name, id);
	});

	/***/ }),
	/* 456 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);


	var Selection = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.constructor;

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return new Selection(this._groups, this._parents);
	});

	/***/ }),
	/* 457 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(355);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(339);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(377);





	function styleRemove(name, interpolate) {
	    var value00, value10, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name),
	            value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name));
	        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	    };
	}

	function styleRemoveEnd(name) {
	    return function () {
	        this.style.removeProperty(name);
	    };
	}

	function styleConstant(name, interpolate, value1) {
	    var value00, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name);
	        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	    };
	}

	function styleFunction(name, interpolate, value) {
	    var value00, value10, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name),
	            value1 = value(this);
	        if (value1 == null) value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name));
	        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	    };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	    var i = (name += "") === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["d" /* interpolateTransformCss */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
	    return value == null ? this.styleTween(name, styleRemove(name, i)).on("end.style." + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === "function" ? styleFunction(name, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "style." + name, value)) : styleConstant(name, i, value + ""), priority);
	});

	/***/ }),
	/* 458 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	});

	/***/ }),
	/* 459 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tween__ = __webpack_require__(339);


	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return this.tween("text", typeof value === "function" ? textFunction(Object(__WEBPACK_IMPORTED_MODULE_0__tween__["b" /* tweenValue */])(this, "text", value)) : textConstant(value == null ? "" : value + ""));
	});

	/***/ }),
	/* 460 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__schedule__ = __webpack_require__(61);



	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var name = this._name,
	      id0 = this._id,
	      id1 = Object(__WEBPACK_IMPORTED_MODULE_0__index__["c" /* newId */])();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["f" /* get */])(node, id0);
	        Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["e" /* default */])(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](groups, this._parents, name, id1);
	});

	/***/ }),
	/* 461 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(462);
	/* unused harmony reexport easeLinear */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(463);
	/* unused harmony reexport easeQuad */
	/* unused harmony reexport easeQuadIn */
	/* unused harmony reexport easeQuadOut */
	/* unused harmony reexport easeQuadInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(464);
	/* unused harmony reexport easeCubic */
	/* unused harmony reexport easeCubicIn */
	/* unused harmony reexport easeCubicOut */
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(465);
	/* unused harmony reexport easePoly */
	/* unused harmony reexport easePolyIn */
	/* unused harmony reexport easePolyOut */
	/* unused harmony reexport easePolyInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(466);
	/* unused harmony reexport easeSin */
	/* unused harmony reexport easeSinIn */
	/* unused harmony reexport easeSinOut */
	/* unused harmony reexport easeSinInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(467);
	/* unused harmony reexport easeExp */
	/* unused harmony reexport easeExpIn */
	/* unused harmony reexport easeExpOut */
	/* unused harmony reexport easeExpInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(468);
	/* unused harmony reexport easeCircle */
	/* unused harmony reexport easeCircleIn */
	/* unused harmony reexport easeCircleOut */
	/* unused harmony reexport easeCircleInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(469);
	/* unused harmony reexport easeBounce */
	/* unused harmony reexport easeBounceIn */
	/* unused harmony reexport easeBounceOut */
	/* unused harmony reexport easeBounceInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(470);
	/* unused harmony reexport easeBack */
	/* unused harmony reexport easeBackIn */
	/* unused harmony reexport easeBackOut */
	/* unused harmony reexport easeBackInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(471);
	/* unused harmony reexport easeElastic */
	/* unused harmony reexport easeElasticIn */
	/* unused harmony reexport easeElasticOut */
	/* unused harmony reexport easeElasticInOut */




















	/***/ }),
	/* 462 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export linear */
	function linear(t) {
	  return +t;
	}

	/***/ }),
	/* 463 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export quadIn */
	/* unused harmony export quadOut */
	/* unused harmony export quadInOut */
	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	/***/ }),
	/* 464 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export cubicIn */
	/* unused harmony export cubicOut */
	/* harmony export (immutable) */ __webpack_exports__["a"] = cubicInOut;
	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	/***/ }),
	/* 465 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export polyIn */
	/* unused harmony export polyOut */
	/* unused harmony export polyInOut */
	var exponent = 3;

	var polyIn = function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	}(exponent);

	var polyOut = function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	}(exponent);

	var polyInOut = function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	}(exponent);

	/***/ }),
	/* 466 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export sinIn */
	/* unused harmony export sinOut */
	/* unused harmony export sinInOut */
	var pi = Math.PI,
	    halfPi = pi / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}

	/***/ }),
	/* 467 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export expIn */
	/* unused harmony export expOut */
	/* unused harmony export expInOut */
	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	/***/ }),
	/* 468 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export circleIn */
	/* unused harmony export circleOut */
	/* unused harmony export circleInOut */
	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	/***/ }),
	/* 469 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export bounceIn */
	/* unused harmony export bounceOut */
	/* unused harmony export bounceInOut */
	var b1 = 4 / 11,
	    b2 = 6 / 11,
	    b3 = 8 / 11,
	    b4 = 3 / 4,
	    b5 = 9 / 11,
	    b6 = 10 / 11,
	    b7 = 15 / 16,
	    b8 = 21 / 22,
	    b9 = 63 / 64,
	    b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	/***/ }),
	/* 470 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export backIn */
	/* unused harmony export backOut */
	/* unused harmony export backInOut */
	var overshoot = 1.70158;

	var backIn = function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	}(overshoot);

	var backOut = function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	}(overshoot);

	var backInOut = function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	}(overshoot);

	/***/ }),
	/* 471 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export elasticIn */
	/* unused harmony export elasticOut */
	/* unused harmony export elasticInOut */
	var tau = 2 * Math.PI,
	    amplitude = 1,
	    period = 0.3;

	var elasticIn = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticIn.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticIn;
	}(amplitude, period);

	var elasticOut = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticOut.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticOut;
	}(amplitude, period);

	var elasticInOut = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticInOut.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticInOut;
	}(amplitude, period);

	/***/ }),
	/* 472 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(61);



	var root = [null];

	/* harmony default export */ __webpack_exports__["a"] = (function (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;

	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > __WEBPACK_IMPORTED_MODULE_1__transition_schedule__["c" /* SCHEDULED */] && schedule.name === name) {
	        return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]([[node]], root, name, +i);
	      }
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 473 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview venn shapes
	 * @author leungwensen@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    PathUtil = _require.PathUtil;

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.venn;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getHollowAttrs(cfg) {
	  var defaultCfg = Global.shape.hollowVenn;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	// register venn geom
	var Venn = Shape.registerFactory('venn', {
	  defaultShapeType: 'venn',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    Util.each(pointInfo.x, function (subX, index) {
	      var subY = pointInfo.y[index];
	      points.push({
	        x: subX,
	        y: subY
	      });
	    });
	    return points;
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 1;
	    if (type === 'hollow') {
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }

	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      // lineWidth,
	      fillOpacity: opacity - 0.08
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	Shape.registerShape('venn', 'venn', {
	  draw: function draw(cfg, container) {
	    var origin = cfg.origin._origin;
	    var path = origin.path;
	    var attrs = getAttrs(cfg);
	    var segments = PathUtil.parsePathString(path);

	    var pathShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: segments
	      })
	    });
	    return pathShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('venn', 'hollow', {
	  draw: function draw(cfg, container) {
	    var origin = cfg.origin._origin;
	    var path = origin.path;
	    var attrs = getHollowAttrs(cfg);
	    var segments = PathUtil.parsePathString(path);

	    var pathShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: segments
	      })
	    });
	    return pathShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Venn;

	/***/ }),
	/* 474 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Facet 的入口
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Chart = __webpack_require__(115);
	var Facets = {};

	Facets.Rect = __webpack_require__(378);
	Facets.List = __webpack_require__(379);
	Facets.Circle = __webpack_require__(475);
	Facets.Tree = __webpack_require__(476);
	Facets.Mirror = __webpack_require__(477);
	Facets.Matrix = __webpack_require__(478);

	Chart.prototype.facet = function (type, cfg) {
	  var cls = Facets[Util.upperFirst(type)];
	  if (!cls) {
	    throw new Error('Not support such type of facets as: ' + type);
	  }
	  var preFacets = this.get('facets');
	  if (preFacets) {
	    preFacets.destroy();
	  }
	  cfg.chart = this;
	  var facets = new cls(cfg);
	  this.set('facets', facets);
	};

	module.exports = Facets;

	/***/ }),
	/* 475 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview circle facets
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);

	function getPoint(center, r, angle) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}

	var Circle = function (_Base) {
	  _inherits(Circle, _Base);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'circle';
	    return cfg;
	  };

	  Circle.prototype.getRegion = function getRegion(count, index) {
	    var r = 1 / 2; // 画布半径
	    var avgAngle = Math.PI * 2 / count;
	    var angle = -1 * Math.PI / 2 + avgAngle * index; // 当前分面所在的弧度
	    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));
	    var center = { x: 0.5, y: 0.5 }; // 画布圆心
	    var middle = getPoint(center, r - facetR, angle); // 分面的中心点
	    var startAngle = Math.PI * 5 / 4; // 右上角
	    var endAngle = Math.PI * 1 / 4; // 左下角

	    return {
	      start: getPoint(middle, facetR, startAngle),
	      end: getPoint(middle, facetR, endAngle)
	    };
	  };

	  Circle.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var field = fields[0];
	    if (!field) {
	      throw 'Please specify for the field for facet!';
	    }
	    var values = self.getFieldValues(field, data);
	    var count = values.length;
	    var rst = [];
	    values.forEach(function (value, index) {
	      var conditions = [{ field: field, value: value, values: values }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      var facet = {
	        type: self.type,
	        colValue: value,
	        colField: field,
	        colIndex: index,
	        cols: count,
	        rows: 1,
	        rowIndex: 0,
	        data: subData,
	        region: self.getRegion(count, index)
	      };
	      rst.push(facet);
	    });
	    return rst;
	  };

	  return Circle;
	}(Base);

	module.exports = Circle;

	/***/ }),
	/* 476 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview tree facets
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);
	var Util = __webpack_require__(0);

	var assign = Util.assign;

	var Tree = function (_Base) {
	  _inherits(Tree, _Base);

	  function Tree() {
	    _classCallCheck(this, Tree);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Tree.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'tree';
	    cfg.line = {
	      lineWidth: 1,
	      stroke: '#ddd'
	    };
	    cfg.lineSmooth = false;
	    return cfg;
	  };

	  Tree.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    if (!fields.length) {
	      throw 'Please specify for the fields for facet!';
	    }
	    var rst = [];
	    var root = self.getRootFacet(data);
	    // if (self.showRoot) {
	    rst.push(root);
	    // }
	    root.children = self.getChildFacets(data, 1, rst);
	    self.setRegion(rst);
	    return rst;
	  };

	  Tree.prototype.getRootFacet = function getRootFacet(data) {
	    var self = this;
	    var facet = {
	      type: self.type,
	      rows: self.getRows(),
	      rowIndex: 0,
	      colIndex: 0,
	      colValue: self.rootTitle,
	      data: data
	    };
	    return facet;
	  };

	  Tree.prototype.getRows = function getRows() {
	    return this.fields.length + 1;
	  };

	  // get child


	  Tree.prototype.getChildFacets = function getChildFacets(data, level, arr) {
	    var self = this;
	    var fields = self.fields;
	    var length = fields.length;
	    if (length < level) {
	      return;
	    }
	    var rst = [];
	    var field = fields[level - 1];
	    var values = self.getFieldValues(field, data);
	    values.forEach(function (value, index) {
	      var conditions = [{ field: field, value: value, values: values }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      if (subData.length) {
	        var facet = {
	          type: self.type,
	          colValue: value,
	          colField: field,
	          colIndex: index,
	          rows: self.getRows(),
	          rowIndex: level,
	          data: subData,
	          children: self.getChildFacets(subData, level + 1, arr)
	        };
	        rst.push(facet);
	        arr.push(facet);
	      }
	    });
	    return rst;
	  };

	  // 设置 region


	  Tree.prototype.setRegion = function setRegion(facets) {
	    var self = this;
	    self.forceColIndex(facets);
	    facets.forEach(function (facet) {
	      facet.region = self.getRegion(facet.rows, facet.cols, facet.colIndex, facet.rowIndex);
	    });
	  };

	  // set column index of facets


	  Tree.prototype.forceColIndex = function forceColIndex(facets) {
	    var self = this;
	    var leafs = [];
	    var index = 0;
	    facets.forEach(function (facet) {
	      if (self.isLeaf(facet)) {
	        leafs.push(facet);
	        facet.colIndex = index;
	        index++;
	      }
	    });

	    leafs.forEach(function (facet) {
	      facet.cols = leafs.length;
	    });
	    var maxLevel = self.fields.length;
	    for (var i = maxLevel - 1; i >= 0; i--) {
	      var levelFacets = self.getFacetsByLevel(facets, i);
	      // var yIndex = maxLevel - i;
	      for (var j = 0; j < levelFacets.length; j++) {
	        var facet = levelFacets[j];
	        if (!self.isLeaf(facet)) {
	          facet.originColIndex = facet.colIndex;
	          facet.colIndex = self.getRegionIndex(facet.children);
	          facet.cols = leafs.length;
	        }
	      }
	    }
	  };

	  // get facet use level


	  Tree.prototype.getFacetsByLevel = function getFacetsByLevel(facets, level) {
	    var rst = [];
	    facets.forEach(function (facet) {
	      if (facet.rowIndex === level) {
	        rst.push(facet);
	      }
	    });
	    return rst;
	  };

	  // set facets region


	  Tree.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
	    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
	    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

	    var start = {
	      x: xWidth * xIndex,
	      y: yWidth * yIndex
	    };

	    var end = {
	      x: start.x + xWidth,
	      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线
	    };
	    return {
	      start: start,
	      end: end
	    };
	  };

	  // if the facet has children , make it's column index in the middle of it's children


	  Tree.prototype.getRegionIndex = function getRegionIndex(children) {
	    var first = children[0];
	    var last = children[children.length - 1];
	    return (last.colIndex - first.colIndex) / 2 + first.colIndex;
	  };

	  // is  a leaf without children


	  Tree.prototype.isLeaf = function isLeaf(facet) {
	    return !facet.children || !facet.children.length;
	  };

	  Tree.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  Tree.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.originColIndex !== 0 && facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  // 绘制完成后


	  Tree.prototype.onPaint = function onPaint() {
	    _Base.prototype.onPaint.call(this);
	    this.group.clear();
	    if (this.facets && this.line) {
	      this.drawLines(this.facets, this.group);
	    }
	  };

	  Tree.prototype.drawLines = function drawLines(facets, group) {
	    var self = this;
	    var lineGroup = group.addGroup();
	    facets.forEach(function (facet) {
	      if (!self.isLeaf(facet)) {
	        var children = facet.children;
	        self._addFacetLines(facet, children, lineGroup);
	      }
	    });
	  };

	  // add lines with it's children


	  Tree.prototype._addFacetLines = function _addFacetLines(facet, children, group) {
	    var self = this;
	    var view = facet.view;
	    var region = view.getViewRegion();
	    var start = {
	      x: region.start.x + (region.end.x - region.start.x) / 2,
	      y: region.start.y
	    };

	    children.forEach(function (subFacet) {
	      var subRegion = subFacet.view.getViewRegion();
	      var end = {
	        x: subRegion.start.x + (subRegion.end.x - subRegion.start.x) / 2,
	        y: subRegion.end.y
	      };
	      var middle1 = {
	        x: start.x,
	        y: start.y + (end.y - start.y) / 2
	      };
	      var middle2 = {
	        x: end.x,
	        y: middle1.y
	      };
	      self._drawLine([start, middle1, middle2, end], group);
	    });
	  };

	  Tree.prototype._getPath = function _getPath(points) {
	    var self = this;
	    var path = [];
	    var smooth = self.lineSmooth;
	    if (smooth) {
	      path.push(['M', points[0].x, points[0].y]);
	      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);
	    } else {
	      points.forEach(function (point, index) {
	        if (index === 0) {
	          path.push(['M', point.x, point.y]);
	        } else {
	          path.push(['L', point.x, point.y]);
	        }
	      });
	    }

	    return path;
	  };

	  // draw line width points


	  Tree.prototype._drawLine = function _drawLine(points, group) {
	    var self = this;
	    var path = self._getPath(points);
	    var line = self.line;
	    group.addShape('path', {
	      attrs: assign({
	        path: path
	      }, line)
	    });
	  };

	  return Tree;
	}(Base);

	module.exports = Tree;

	/***/ }),
	/* 477 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview mirror facets
	 * @author dxq613@gmail.com
	 */

	var List = __webpack_require__(379);

	var Mirror = function (_List) {
	  _inherits(Mirror, _List);

	  function Mirror() {
	    _classCallCheck(this, Mirror);

	    return _possibleConstructorReturn(this, _List.apply(this, arguments));
	  }

	  Mirror.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _List.prototype.getDefaultCfg.call(this);
	    cfg.type = 'mirror';
	    this.transpose = false;
	    return cfg;
	  };

	  Mirror.prototype.init = function init() {
	    var self = this;
	    if (self.transpose) {
	      self.cols = 2;
	      self.rows = 1;
	    } else {
	      self.cols = 1;
	      self.rows = 2;
	    }
	    _List.prototype.init.call(this);
	  };

	  Mirror.prototype.beforeProcessView = function beforeProcessView(view, facet) {
	    if (this.transpose) {
	      if (facet.colIndex % 2 === 0) {
	        view.coord().transpose().scale(-1, 1);
	      } else {
	        view.coord().transpose();
	      }
	    } else {
	      if (facet.rowIndex % 2 !== 0) {
	        view.coord().scale(1, -1);
	      }
	    }
	  };

	  Mirror.prototype.renderTitle = function renderTitle(view, facet) {
	    if (this.transpose) {
	      this.drawColTitle(view, facet);
	    } else {
	      this.drawRowTitle(view, facet);
	    }
	  };

	  Mirror.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.colIndex === 1 || facet.rowIndex === 1) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  Mirror.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

	  return Mirror;
	}(List);

	module.exports = Mirror;

	/***/ }),
	/* 478 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Use matrices to compare different fields
	 * @author dxq613@gmail.com
	 */

	var Rect = __webpack_require__(378);

	var Matrix = function (_Rect) {
	  _inherits(Matrix, _Rect);

	  function Matrix() {
	    _classCallCheck(this, Matrix);

	    return _possibleConstructorReturn(this, _Rect.apply(this, arguments));
	  }

	  Matrix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Rect.prototype.getDefaultCfg.call(this);
	    cfg.type = 'matrix';
	    cfg.showTitle = false;
	    return cfg;
	  };

	  Matrix.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var rows = fields.length;
	    var cols = rows; // 矩阵中行列相等，等于指定的字段个数
	    var rst = [];
	    for (var i = 0; i < cols; i++) {
	      var colField = fields[i];
	      for (var j = 0; j < rows; j++) {
	        var rowField = fields[j];
	        var facet = {
	          type: self.type,
	          colValue: colField,
	          rowValue: rowField,
	          colField: colField,
	          rowField: rowField,
	          colIndex: i,
	          rowIndex: j,
	          cols: cols,
	          rows: rows,
	          data: data,
	          region: self.getRegion(rows, cols, i, j)
	        };
	        rst.push(facet);
	      }
	    }
	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  Matrix.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].title = null;
	      axes[xField].label = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  Matrix.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  return Matrix;
	}(Rect);

	module.exports = Matrix;

	/***/ }),
	/* 479 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Interaction
	 * @author leungwensen@gmail.com
	 */

	var Interactions = {
	  Base: __webpack_require__(341),
	  Brush: __webpack_require__(480),
	  Drag: __webpack_require__(481),
	  Zoom: __webpack_require__(482)
	};

	module.exports = Interactions;

	/***/ }),
	/* 480 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var BRUSH_TYPES = ['X', 'Y', 'XY', 'POLYGON'];
	var DEFAULT_TYPE = 'XY';

	var Brush = function (_Interaction) {
	  _inherits(Brush, _Interaction);

	  Brush.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      type: DEFAULT_TYPE,
	      startPoint: null,
	      brushing: false,
	      dragging: false,
	      brushShape: null,
	      container: null,
	      polygonPath: null,
	      style: {
	        fill: '#C5D4EB',
	        opacity: 0.3,
	        lineWidth: 1,
	        stroke: '#82A6DD'
	      },
	      draggable: false,
	      dragOffX: 0,
	      dragOffY: 0,
	      inPlot: true,
	      xField: null,
	      yField: null
	    });
	  };

	  function Brush(cfg, view) {
	    _classCallCheck(this, Brush);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.filter = !me.draggable;
	    me.type = me.type.toUpperCase();
	    me.chart = view;

	    if (BRUSH_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    var canvas = me.canvas;
	    if (canvas) {
	      var plotRange = void 0;
	      canvas.get('children').map(function (child) {
	        if (child.get('type') === 'plotBack') {
	          plotRange = child.get('plotRange');
	          return false;
	        }
	        return child;
	      });
	      me.plot = {
	        start: plotRange.bl,
	        end: plotRange.tr
	      };
	    }
	    if (view) {
	      var coord = view.get('coord');
	      me.plot = {
	        start: coord.start,
	        end: coord.end
	      };
	      var xScales = view._getScales('x');
	      var yScales = view._getScales('y');
	      me.xScale = me.xField ? xScales[me.xField] : view.getXScale();
	      me.yScale = me.yField ? yScales[me.yField] : view.getYScales()[0];
	    }
	    return _this;
	  }

	  // onBurshstart() { }
	  // onBrushmove() { }
	  // onBrushend() {}
	  // onDragstart() {}
	  // onDragmove() {}
	  // onDragend() {}

	  Brush.prototype.start = function start(ev) {
	    var me = this;
	    var canvas = me.canvas,
	        type = me.type,
	        brushShape = me.brushShape;


	    if (!type) return;

	    var startPoint = { x: ev.offsetX, y: ev.offsetY };
	    if (!startPoint.x) return;
	    var isInPlot = me.plot && me.inPlot;
	    var canvasDOM = canvas.get('canvasDOM');
	    var pixelRatio = canvas.get('pixelRatio');

	    if (me.selection) me.selection = null;

	    if (me.draggable && brushShape && !brushShape.get('destroyed')) {
	      // allow drag the brushShape
	      if (brushShape.isHit(startPoint.x * pixelRatio, startPoint.y * pixelRatio)) {
	        canvasDOM.style.cursor = 'move';
	        me.selection = brushShape;
	        me.dragging = true;
	        if (type === 'X') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = 0;
	        } else if (type === 'Y') {
	          me.dragoffX = 0;
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'XY') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'POLYGON') {
	          var box = brushShape.getBBox();
	          me.dragoffX = startPoint.x - box.minX;
	          me.dragoffY = startPoint.y - box.minY;
	        }

	        if (isInPlot) {
	          me.selection.attr('clip', canvas.addShape('rect', {
	            attrs: {
	              x: this.plot.start.x,
	              y: this.plot.end.y,
	              width: this.plot.end.x - this.plot.start.x,
	              height: this.plot.start.y - this.plot.end.y,
	              fill: '#fff',
	              fillOpacity: 0
	            }
	          }));
	        }
	        me.onDragstart && me.onDragstart(ev);
	      }
	      me.prePoint = startPoint;
	    }

	    if (!me.dragging) {
	      // brush start
	      me.onBrushstart && me.onBrushstart(startPoint);
	      var container = me.container;
	      if (isInPlot) {
	        var _me$plot = me.plot,
	            start = _me$plot.start,
	            end = _me$plot.end;

	        if (startPoint.x < start.x || startPoint.x > end.x || startPoint.y < end.y || startPoint.y > start.y) return;
	      }
	      canvasDOM.style.cursor = 'crosshair';
	      me.startPoint = startPoint;
	      me.brushShape = null;
	      me.brushing = true;

	      if (!container) {
	        container = canvas.addGroup({
	          zIndex: 5 // upper
	        });
	        container.initTransform();
	      } else {
	        container.clear();
	      }
	      me.container = container;

	      if (type === 'POLYGON') me.polygonPath = 'M ' + startPoint.x + ' ' + startPoint.y;
	    }
	  };

	  Brush.prototype.process = function process(ev) {
	    var me = this;
	    var brushing = me.brushing,
	        dragging = me.dragging,
	        type = me.type,
	        plot = me.plot,
	        startPoint = me.startPoint,
	        xScale = me.xScale,
	        yScale = me.yScale,
	        canvas = me.canvas;


	    if (!brushing && !dragging) {
	      return;
	    }
	    var currentPoint = {
	      x: ev.offsetX,
	      y: ev.offsetY
	    };
	    var canvasDOM = canvas.get('canvasDOM');

	    if (brushing) {
	      canvasDOM.style.cursor = 'crosshair';
	      var start = plot.start,
	          end = plot.end;

	      var polygonPath = me.polygonPath;
	      var brushShape = me.brushShape;
	      var container = me.container;
	      if (me.plot && me.inPlot) {
	        currentPoint = me._limitCoordScope(currentPoint);
	      }

	      var rectStartX = void 0;
	      var rectStartY = void 0;
	      var rectWidth = void 0;
	      var rectHeight = void 0;

	      if (type === 'Y') {
	        rectStartX = start.x;
	        rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        rectWidth = Math.abs(start.x - end.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'X') {
	        rectStartX = currentPoint.x >= startPoint.x ? startPoint.x : currentPoint.x;
	        rectStartY = end.y;
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(end.y - start.y);
	      } else if (type === 'XY') {
	        if (currentPoint.x >= startPoint.x) {
	          rectStartX = startPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        } else {
	          rectStartX = currentPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        }
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'POLYGON') {
	        polygonPath += 'L ' + currentPoint.x + ' ' + currentPoint.y;
	        me.polygonPath = polygonPath;
	        if (!brushShape) {
	          brushShape = container.addShape('path', {
	            attrs: Util.mix(me.style, {
	              path: polygonPath
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            path: polygonPath
	          }));
	        }
	      }
	      if (type !== 'POLYGON') {
	        if (!brushShape) {
	          brushShape = container.addShape('rect', {
	            attrs: Util.mix(me.style, {
	              x: rectStartX,
	              y: rectStartY,
	              width: rectWidth,
	              height: rectHeight
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            x: rectStartX,
	            y: rectStartY,
	            width: rectWidth,
	            height: rectHeight
	          }));
	        }
	      }

	      me.brushShape = brushShape;
	    } else if (dragging) {
	      canvasDOM.style.cursor = 'move';
	      var selection = me.selection;
	      if (selection && !selection.get('destroyed')) {
	        if (type === 'POLYGON') {
	          var prePoint = me.prePoint;
	          me.selection.translate(currentPoint.x - prePoint.x, currentPoint.y - prePoint.y);
	        } else {
	          me.dragoffX && selection.attr('x', currentPoint.x - me.dragoffX);
	          me.dragoffY && selection.attr('y', currentPoint.y - me.dragoffY);
	        }
	      }
	    }

	    me.prePoint = currentPoint;
	    canvas.draw();

	    var _me$_getSelected = me._getSelected(),
	        data = _me$_getSelected.data,
	        shapes = _me$_getSelected.shapes,
	        xValues = _me$_getSelected.xValues,
	        yValues = _me$_getSelected.yValues;

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: currentPoint.x,
	      y: currentPoint.y
	    };

	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }
	    me.onDragmove && me.onDragmove(eventObj);
	    me.onBrushmove && me.onBrushmove(eventObj);
	  };

	  Brush.prototype.end = function end(ev) {
	    var me = this;
	    var data = me.data,
	        shapes = me.shapes,
	        xValues = me.xValues,
	        yValues = me.yValues,
	        canvas = me.canvas,
	        type = me.type,
	        startPoint = me.startPoint,
	        chart = me.chart,
	        container = me.container,
	        xScale = me.xScale,
	        yScale = me.yScale;
	    var offsetX = ev.offsetX,
	        offsetY = ev.offsetY;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'default';

	    if (Math.abs(startPoint.x - offsetX) <= 1 && Math.abs(startPoint.y - offsetY) <= 1) {
	      // 防止点击事件
	      me.brushing = false;
	      me.dragging = false;
	      return;
	    }

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: offsetX,
	      y: offsetY
	    };
	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }

	    if (me.dragging) {
	      me.dragging = false;
	      me.onDragend && me.onDragend(eventObj);
	    } else if (me.brushing) {
	      me.brushing = false;
	      var brushShape = me.brushShape;
	      var polygonPath = me.polygonPath;

	      if (type === 'POLYGON') {
	        polygonPath += 'z';

	        brushShape && !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	          path: polygonPath
	        }));
	        me.polygonPath = polygonPath;
	        canvas.draw();
	      }

	      if (me.onBrushend) {
	        me.onBrushend(eventObj);
	      } else if (chart && me.filter) {
	        container.clear(); // clear the brush
	        // filter data
	        if (type === 'X') {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	        } else if (type === 'Y') {
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        } else {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        }
	        chart.repaint();
	      }
	    }
	  };

	  Brush.prototype.reset = function reset() {
	    var me = this;
	    var chart = me.chart,
	        filter = me.filter;

	    if (chart && filter) {
	      chart.get('options').filters = {};
	      chart.repaint();
	    }
	  };

	  Brush.prototype._limitCoordScope = function _limitCoordScope(point) {
	    var plot = this.plot;
	    var start = plot.start,
	        end = plot.end;


	    if (point.x < start.x) {
	      point.x = start.x;
	    }
	    if (point.x > end.x) {
	      point.x = end.x;
	    }
	    if (point.y < end.y) {
	      point.y = end.y;
	    }
	    if (point.y > start.y) {
	      point.y = start.y;
	    }
	    return point;
	  };

	  Brush.prototype._getSelected = function _getSelected() {
	    var me = this;
	    var chart = me.chart,
	        xScale = me.xScale,
	        yScale = me.yScale,
	        brushShape = me.brushShape,
	        canvas = me.canvas;

	    var pixelRatio = canvas.get('pixelRatio');
	    var selectedShapes = [];
	    var xValues = [];
	    var yValues = [];
	    var selectedData = [];
	    if (chart) {
	      var geoms = chart.get('geoms');
	      geoms.map(function (geom) {
	        var shapes = geom.getShapes();
	        shapes.map(function (shape) {
	          var shapeData = shape.get('origin');
	          if (!Array.isArray(shapeData)) {
	            // 线图、区域图等
	            shapeData = [shapeData];
	          }

	          shapeData.map(function (each) {
	            if (brushShape.isHit(each.x * pixelRatio, each.y * pixelRatio)) {
	              selectedShapes.push(shape);
	              var origin = each._origin;
	              selectedData.push(origin);
	              xScale && xValues.push(origin[xScale.field]);
	              yScale && yValues.push(origin[yScale.field]);
	            }
	            return each;
	          });

	          return shape;
	        });
	        return geom;
	      });
	    }
	    me.shapes = selectedShapes;
	    me.xValues = xValues;
	    me.yValues = yValues;
	    me.data = selectedData;
	    return {
	      data: selectedData,
	      xValues: xValues,
	      yValues: yValues,
	      shapes: selectedShapes
	    };
	  };

	  return Brush;
	}(Interaction);

	G2.registerInteraction('brush', Brush);
	G2.registerInteraction('Brush', Brush);

	module.exports = Brush;

	/***/ }),
	/* 481 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var DRAGGING_TYPES = ['X', 'Y', 'XY'];
	var DEFAULT_TYPE = 'X';

	var Drag = function (_Interaction) {
	  _inherits(Drag, _Interaction);

	  Drag.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      type: DEFAULT_TYPE,
	      stepRatio: 0.05,
	      stepByField: {},
	      originScaleDefsByField: {},
	      previousPoint: null,
	      isDragging: false
	    });
	  };

	  function Drag(cfg, view) {
	    _classCallCheck(this, Drag);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.type = me.type.toUpperCase();
	    me.chart = view;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    var scaleController = view.get('scaleController');
	    scales.forEach(function (scale) {
	      var field = scale.field;
	      var def = scaleController.defs[field];
	      me.originScaleDefsByField[field] = Util.mix(def, {
	        nice: !!def.nice
	      });
	      if (scale.isLinear) {
	        me.stepByField[field] = (scale.max - scale.min) * me.stepRatio;
	      }
	    });

	    if (DRAGGING_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    return _this;
	  }

	  // onDragstart() { }
	  // onDrag() { }
	  // onDragend() { }

	  Drag.prototype._applyTranslate = function _applyTranslate(scale) {
	    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	    var me = this;
	    var chart = me.chart;
	    var min = scale.min,
	        max = scale.max,
	        field = scale.field;

	    var range = max - min;
	    chart.scale(field, {
	      nice: false,
	      min: min - offset * range,
	      max: max - offset * range
	    });
	  };

	  Drag.prototype.start = function start(ev) {
	    var me = this;
	    var chart = me.chart,
	        canvas = me.canvas;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'pointer';
	    var coord = chart.get('coord');
	    me.isDragging = true;
	    me.previousPoint = coord.invertPoint(ev);
	  };

	  Drag.prototype.process = function process(ev) {
	    var me = this;
	    if (me.isDragging) {
	      var chart = me.chart,
	          type = me.type,
	          canvas = me.canvas;

	      var canvasDOM = canvas.get('canvasDOM');
	      canvasDOM.style.cursor = 'move';
	      var coord = chart.get('coord');
	      var previousPoint = me.previousPoint;
	      var currentPoint = coord.invertPoint(ev);
	      if (type.indexOf('X') > -1) {
	        me._applyTranslate(chart.getXScale(), currentPoint.x - previousPoint.x);
	      }
	      if (type.indexOf('Y') > -1) {
	        var yScales = chart.getYScales();
	        yScales.forEach(function (yScale) {
	          me._applyTranslate(yScale, currentPoint.y - previousPoint.y);
	        });
	      }
	      me.previousPoint = currentPoint;
	      chart.repaint();
	    }
	  };

	  Drag.prototype.end = function end() {
	    var me = this;
	    me.isDragging = false;
	    var canvas = me.canvas;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'default';
	  };

	  Drag.prototype.reset = function reset() {
	    var me = this;
	    var view = me.view,
	        originScaleDefsByField = me.originScaleDefsByField;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    scales.forEach(function (scale) {
	      if (scale.isLinear) {
	        var field = scale.field;
	        view.scale(field, originScaleDefsByField[field]);
	      }
	    });
	    view.repaint();
	  };

	  return Drag;
	}(Interaction);

	G2.registerInteraction('drag', Drag);
	G2.registerInteraction('Drag', Drag);

	module.exports = Drag;

	/***/ }),
	/* 482 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var ZOOMING_TYPES = ['X', 'Y', 'XY'];
	var DEFAULT_TYPE = 'X';

	// TODO zoom with center point

	var Zoom = function (_Interaction) {
	  _inherits(Zoom, _Interaction);

	  Zoom.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      processingEvent: 'mousewheel',
	      type: DEFAULT_TYPE,
	      stepRatio: 0.05,
	      stepByField: {},
	      originScaleDefsByField: {}
	    });
	  };

	  function Zoom(cfg, view) {
	    _classCallCheck(this, Zoom);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.chart = view;
	    me.type = me.type.toUpperCase();

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    var scaleController = view.get('scaleController');
	    scales.forEach(function (scale) {
	      var field = scale.field;
	      var def = scaleController.defs[field] || {};
	      me.originScaleDefsByField[field] = Util.mix(def, {
	        nice: !!def.nice
	      });
	      if (scale.isLinear) {
	        me.stepByField[field] = (scale.max - scale.min) * me.stepRatio;
	      }
	    });

	    if (ZOOMING_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    return _this;
	  }

	  // onZoom() { }
	  // onZoomin() { }
	  // onZoomout() { }

	  Zoom.prototype._applyScale = function _applyScale(scale, delta) {
	    var minOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var me = this;
	    var chart = me.chart,
	        stepByField = me.stepByField;

	    if (scale.isLinear) {
	      var min = scale.min,
	          max = scale.max,
	          field = scale.field;

	      var maxOffset = 1 - minOffset;
	      var step = stepByField[field] * delta;
	      var newMin = min + step * minOffset;
	      var newMax = max - step * maxOffset;
	      if (newMax > newMin) {
	        chart.scale(field, {
	          nice: false,
	          min: newMin,
	          max: newMax
	        });
	      }
	    }
	  };

	  Zoom.prototype.process = function process(ev) {
	    var me = this;
	    var chart = me.chart,
	        type = me.type;

	    var coord = chart.get('coord');
	    var deltaY = ev.deltaY;
	    var offsetPoint = coord.invertPoint(ev);
	    if (deltaY) {
	      me.onZoom && me.onZoom(deltaY, offsetPoint, me);
	      if (deltaY > 0) {
	        me.onZoomin && me.onZoomin(deltaY, offsetPoint, me);
	      } else {
	        me.onZoomout && me.onZoomout(deltaY, offsetPoint, me);
	      }
	      var delta = deltaY / Math.abs(deltaY);
	      if (type.indexOf('X') > -1) {
	        me._applyScale(chart.getXScale(), delta, offsetPoint.x);
	      }
	      if (type.indexOf('Y') > -1) {
	        var yScales = chart.getYScales();
	        yScales.forEach(function (yScale) {
	          me._applyScale(yScale, delta, offsetPoint.y);
	        });
	      }
	    }
	    chart.repaint();
	  };

	  Zoom.prototype.reset = function reset() {
	    var me = this;
	    var view = me.view,
	        originScaleDefsByField = me.originScaleDefsByField;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    scales.forEach(function (scale) {
	      if (scale.isLinear) {
	        var field = scale.field;
	        view.scale(field, originScaleDefsByField[field]);
	      }
	    });
	    view.repaint();
	  };

	  return Zoom;
	}(Interaction);

	G2.registerInteraction('zoom', Zoom);
	G2.registerInteraction('Zoom', Zoom);

	module.exports = Zoom;

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=g2.js.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = function (chart, config, componentConfig) {
	  var _this = this;

	  if (config.tooltip !== false) {
	    var _ref = config.tooltip || {},
	        sort = _ref.sort,
	        _ref$showTitle = _ref.showTitle,
	        showTitle = _ref$showTitle === undefined ? true : _ref$showTitle,
	        titleFormatter = _ref.titleFormatter,
	        nameFormatter = _ref.nameFormatter,
	        valueFormatter = _ref.valueFormatter,
	        customConfig = _ref.customConfig;

	    var tooltipConfig = {
	      showTitle: showTitle,
	      // crosshairs 空对象不可省略，否则在混合图表中会没有crosshairs line
	      crosshairs: {},
	      itemTpl: '<li data-index={index}>' + '<span style="background-color:{color};" class="g2-tooltip-marker"></span>' + '<span class="g2-tooltip-item-name">{name}</span>:<span class="g2-tooltip-item-value">{value}</span></li>'
	    };

	    if (componentConfig) {
	      _extends(tooltipConfig, componentConfig);
	    }

	    if (customConfig) {
	      (0, _merge2.default)(tooltipConfig, customConfig);
	    }

	    chart.tooltip(tooltipConfig);

	    if (sort || titleFormatter || nameFormatter || valueFormatter) {
	      chart.on('tooltip:change', function (ev) {
	        // 如果设置了合法的排序关键字，则开始排序
	        if (_g2.default.Util.isFunction(sort)) {
	          ev.items.sort(sort);
	        } else if (sortFun[sort]) {
	          ev.items.sort(sortFun[sort]);
	        }

	        // 格式化标题
	        if (titleFormatter) {
	          ev.items[0].title = titleFormatter(ev.items[0].title, ev.items);
	        }

	        // 对每一项格式化 名字 和 值
	        ev.items.forEach(function (item, index) {
	          var raw = (0, _common.getRawData)(config, _this.rawData, item);

	          if (valueFormatter) {
	            item.value = valueFormatter(item.value, raw, index, ev.items);
	          }
	          if (nameFormatter) {
	            item.name = nameFormatter(item.name, raw, index, ev.items);
	          }
	        });
	      });
	    }
	  } else {
	    chart.tooltip(false);
	  }
	};

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _common = __webpack_require__(8);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 排序函数
	var sortFun = {
	  // 升序
	  asce: function asce(a, b) {
	    return a.value - b.value;
	  },

	  // 降序
	  desc: function desc(a, b) {
	    return b.value - a.value;
	  }
	};

	/*
	* 常见直角坐标系的tooltip，包含title、name、value
	* */
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\rectTooltip.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\rectTooltip.js"); } } })();

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isFunction = __webpack_require__(11);

	var keys = Object.keys ? function (obj) {
	  return Object.keys(obj);
	} : function (obj) {
	  var result = [];
	  each(obj, function (value, key) {
	    if (!(isFunction(obj) && key === 'prototype')) {
	      result.push(key);
	    }
	  });
	  return result;
	};

	module.exports = keys;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = function (chart, config) {
	  var guide = config.guide;
	  if (!guide) {
	    return;
	  }

	  if (guide.line) {
	    if (Array.isArray(guide.line)) {
	      guide.line.forEach(function (line) {
	        drawGuideLine(chart, line);
	      });
	    } else {
	      drawGuideLine(chart, guide.line);
	    }
	  }

	  if (guide.area) {
	    if (Array.isArray(guide.area)) {
	      guide.area.forEach(function (area) {
	        drawGuideArea(chart, area);
	      });
	    } else {
	      drawGuideArea(chart, guide.area);
	    }
	  }
	};

	exports.drawGuideLine = drawGuideLine;
	exports.drawGuideArea = drawGuideArea;

	var _common = __webpack_require__(8);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function drawGuideLine(chart, guideLine) {
	  var top = guideLine.top,
	      _guideLine$text = guideLine.text,
	      text = _guideLine$text === undefined ? {} : _guideLine$text,
	      status = guideLine.status,
	      axis = guideLine.axis,
	      value = guideLine.value,
	      start = guideLine.start,
	      end = guideLine.end;
	  var title = text.title,
	      titlePosition = text.position,
	      titleAlign = text.align,
	      titleRotate = text.rotate,
	      offsetX = text.offsetX,
	      offsetY = text.offsetY,
	      _text$style = text.style,
	      style = _text$style === undefined ? {} : _text$style;

	  var color = (0, _common.getStatusColor)(status);

	  var guideConfig = {
	    top: top || true,
	    lineStyle: {
	      stroke: color
	    },
	    text: {
	      content: title || '',
	      position: titlePosition || 'start',
	      autoRotate: titleRotate || false,
	      style: _extends({
	        fill: color,
	        textAlign: titleAlign || ((titlePosition || 'start') !== 'start' ? 'start' : 'end')
	      }, style),
	      offsetX: offsetX,
	      offsetY: offsetY
	    }
	  };

	  // 判断value时需要注意数字0是假值，但是是一个合理的guide value
	  if (axis && (value || value === 0)) {
	    if (axis === 'x') {
	      // y 轴是分类型数据的情况比较少，暂时不处理
	      guideConfig.start = [value, 'min'];
	      guideConfig.end = [value, 'max'];
	      // x 轴辅助线，修改position和textAlign默认值
	      guideConfig.text.position = titlePosition || 'end';
	      guideConfig.text.style.textAlign = titleAlign || 'center';
	    } else if (axis === 'y' || /y\d/.test(axis)) {
	      // 形似 y0, y1 ...的axis，说明是多Y轴，多轴的情况下，start/end 必须返回原始数据格式才能正确匹配y轴度量
	      // 函数接受两个参数 xScales 和 yScales
	      guideConfig.start = function (xScales) {
	        if (xScales.x && xScales.x.isCategory) {
	          // 如果x轴是分类型数据，使用[-0.5, length - 0.5]的索引值来让辅助线铺满绘图区域
	          return _defineProperty({ x: -0.5 }, axis, value);
	        }
	        return _defineProperty({ x: 'min' }, axis, value);
	      };
	      // 函数接受两个参数 xScales 和 yScales
	      guideConfig.end = function (xScales) {
	        if (xScales.x && xScales.x.isCategory) {
	          // 如果x轴是分类型数据，使用[-0.5, length - 0.5]的索引值来让辅助线铺满绘图区域
	          return _defineProperty({ x: xScales.x.values.length - 0.5 }, axis, value);
	        }
	        return _defineProperty({ x: 'max' }, axis, value);
	      };
	      guideConfig.text.offsetY = offsetY === 0 ? offsetY : offsetY || 6;
	    }
	  }
	  if (start) {
	    guideConfig.start = start;
	  }
	  if (end) {
	    guideConfig.end = end;
	  }

	  if (guideConfig.start && guideConfig.end) {
	    chart.guide().line(guideConfig);
	  } else {
	    console.warn('guide line 定义不全');
	  }
	}

	function drawGuideArea(chart, guideArea) {
	  var top = guideArea.top,
	      status = guideArea.status,
	      axis = guideArea.axis,
	      value = guideArea.value,
	      start = guideArea.start,
	      end = guideArea.end;

	  var color = (0, _common.getStatusColor)(status);

	  var guideConfig = {
	    top: top || true,
	    style: {
	      fill: color
	    }
	  };

	  if (axis && Array.isArray(value) && value.length > 1) {
	    if (axis === 'x') {
	      // y 轴是分类型数据的情况比较少，暂时不处理
	      guideConfig.start = [value[0], 'min'];
	      guideConfig.end = [value[1], 'max'];
	    } else if (axis === 'y' || /y\d/.test(axis)) {
	      // 形似 y0, y1 ...的axis，说明是多Y轴，多轴的情况下，start/end 必须返回原始数据格式才能正确匹配y轴度量
	      // 函数接受两个参数 xScales 和 yScales
	      guideConfig.start = function (xScales) {
	        if (xScales.x && xScales.x.isCategory) {
	          // 如果x轴是分类型数据，使用[-0.5, length - 0.5]的索引值来让辅助线铺满绘图区域
	          return _defineProperty({ x: -0.5 }, axis, value[0]);
	        }
	        return _defineProperty({ x: 'min' }, axis, value[0]);
	      };
	      // 函数接受两个参数 xScales 和 yScales
	      guideConfig.end = function (xScales) {
	        if (xScales.x && xScales.x.isCategory) {
	          // 如果x轴是分类型数据，使用[-0.5, length - 0.5]的索引值来让辅助线铺满绘图区域
	          return _defineProperty({ x: xScales.x.values.length - 0.5 }, axis, value[1]);
	        }
	        return _defineProperty({ x: 'max' }, axis, value[1]);
	      };
	    }
	  }
	  if (start) {
	    guideConfig.start = start;
	  }
	  if (end) {
	    guideConfig.end = end;
	  }

	  if (guideConfig.start && guideConfig.end) {
	    chart.guide().region(guideConfig);
	  } else {
	    console.warn('guide area 定义不全');
	  }
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\guide.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\guide.js"); } } })();

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/*
	* 常见直角坐标系的legend，仅包含name和align设置。
	* */


	exports.default = function (chart, config, componentConfig, isOneDataGroup) {
	  var _this = this;

	  // 设置图例
	  if (config.legend !== false) {
	    var _ref = config.legend || {},
	        _ref$autoCollapse = _ref.autoCollapse,
	        autoCollapse = _ref$autoCollapse === undefined ? true : _ref$autoCollapse,
	        _ref$collapseRow = _ref.collapseRow,
	        collapseRow = _ref$collapseRow === undefined ? 'auto' : _ref$collapseRow,
	        align = _ref.align,
	        nameFormatter = _ref.nameFormatter,
	        valueFormatter = _ref.valueFormatter,
	        showData = _ref.showData,
	        customConfig = _ref.customConfig,
	        _ref$allowAllCanceled = _ref.allowAllCanceled,
	        allowAllCanceled = _ref$allowAllCanceled === undefined ? false : _ref$allowAllCanceled,
	        _ref$style = _ref.style,
	        style = _ref$style === undefined ? {} : _ref$style;

	    var legendConfig = {
	      // 这些是widgets特有的属性
	      autoCollapse: autoCollapse,
	      collapseRow: collapseRow,
	      // 以下为g2的属性
	      useHtml: true,
	      title: null,
	      position: 'top',
	      allowAllCanceled: allowAllCanceled,
	      // 这个属性文档里没有，设置为false可以让图例不居中，再手动设置定位样式
	      autoPosition: false,
	      onHover: _common.noop,
	      itemTpl: function itemTpl(value, color, checked, index) {
	        var item = getRawData(config, _this.rawData, value, isOneDataGroup);

	        var newName = nameFormatter ? nameFormatter(value, _extends({}, item, {
	          color: color,
	          checked: checked
	        }), index) : value;

	        if (showData) {
	          var dataValue = getDataValue(item.data);
	          var newValue = valueFormatter ? valueFormatter(dataValue, _extends({}, item, {
	            color: color,
	            checked: checked
	          }), index) : dataValue;

	          return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + newName + '</span><span class="g2-legend-value">' + newValue + '</span></li>';
	        }

	        return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + newName + '</span></li>';
	      },
	      'g2-legend': _extends({
	        top: _index.size.s3
	      }, align === 'right' ? { right: 0 } : { left: 0 })
	    };

	    if (componentConfig) {
	      // 内部的componentConfig直接使用assign浅复制，方便覆盖。
	      _extends(legendConfig, componentConfig);
	    }

	    if (customConfig) {
	      (0, _merge2.default)(legendConfig, customConfig);
	    }

	    if (legendConfig['g2-legend'] && _typeof(legendConfig['g2-legend']) === 'object') {
	      _extends(legendConfig['g2-legend'], style);
	    }

	    chart.legend(legendConfig);

	    if (this.afterRenderCallbacks && legendConfig.autoCollapse) {
	      var legendCollapseInfo = legendCollapse.call(this, legendConfig);
	      this.afterRenderCallbacks.push(legendCollapseInfo.render);

	      if (this.unmountCallbacks) {
	        this.unmountCallbacks.push(legendCollapseInfo.unmount);
	      }
	    }
	  } else {
	    chart.legend(false);
	  }
	};

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function getRawData(config, rawData, name, isOneDataGroup) {
	  if (!rawData) {
	    return {};
	  }

	  if (isOneDataGroup) {
	    var _originData = rawData[0] || {};
	    var result = {};

	    _originData.data.some(function (r) {
	      if (Array.isArray(r) && r[0] === name || (typeof r === 'undefined' ? 'undefined' : _typeof(r)) === 'object' && r.x === name) {
	        result = r;
	        return true;
	      }
	      return false;
	    });

	    if (Array.isArray(result)) {
	      result = {
	        data: result
	      };
	    }

	    return result;
	  }

	  var originData = {};
	  if (config.dataType !== 'g2') {
	    rawData.some(function (r) {
	      if (r.name === name) {
	        originData = r;
	        return true;
	      }
	      return false;
	    });
	  }

	  return originData;
	}

	function getDataValue(data) {
	  if (!Array.isArray(data)) {
	    return '-';
	  }

	  for (var i = 0; i < data.length; i++) {
	    // 单组数据时，如饼图/漏斗图，data[i] 不是数组/对象
	    if (_typeof(data[i]) !== 'object' && i === 1) {
	      return data[i];
	    }
	    if (i === data.length - 1) {
	      if (Array.isArray(data[i])) {
	        return data[i][1];
	      }
	      if (_typeof(data[i]) === 'object') {
	        return data[i].y;
	      }
	    }
	  }
	}

	function legendCollapse(legendConfig) {
	  var _legendConfig$collaps = legendConfig.collapseRow,
	      collapseRow = _legendConfig$collaps === undefined ? 2 : _legendConfig$collaps;

	  var collapseInstance = null;
	  return {
	    render: function render(chart, config) {
	      if (config.legend !== false && this.chartDom) {
	        var legendWrapperDom = this.chartDom.querySelector('.g2-legend');
	        var legendListDom = this.chartDom.querySelector('.g2-legend-list');
	        var legendListItemDom = this.chartDom.querySelector('.g2-legend-list-item');

	        if (!legendWrapperDom || !legendListDom || !legendListItemDom) {
	          return;
	        }

	        var itemStyle = window.getComputedStyle(legendListItemDom);
	        var marginTop = (0, _common.pxToNumber)(itemStyle.getPropertyValue('margin-top'));
	        var marginBottom = (0, _common.pxToNumber)(itemStyle.getPropertyValue('margin-bottom'));
	        var itemHeight = legendListItemDom.offsetHeight + marginTop + marginBottom;
	        var wrapperHeight = legendWrapperDom.offsetHeight;

	        // 自动适配图例折叠高度
	        if (collapseRow === 'auto') {
	          var chartHeight = this._size && this._size[1];
	          if (chartHeight) {
	            // 行数最多占图表高度的三分之一，最小为2。
	            collapseRow = Math.max(2, Math.round(chartHeight / itemHeight / 3));
	          }
	        } else {
	          collapseRow = Number(collapseRow);
	        }

	        if (wrapperHeight > itemHeight * collapseRow) {
	          if (!collapseInstance) {
	            collapseInstance = new Collapse(legendWrapperDom, legendListDom, {
	              wrapperHeight: wrapperHeight,
	              itemHeight: itemHeight,
	              collapseRow: collapseRow,
	              collapseTop: marginTop,
	              collapseBottom: marginBottom
	            });
	          }

	          collapseInstance.start({ collapseRow: collapseRow });
	        } else if (collapseInstance) {
	          collapseInstance.end();
	        }
	      }
	    },
	    unmount: function unmount() {
	      if (collapseInstance) {
	        collapseInstance.destroy();
	      }
	    }
	  };
	}

	var Collapse = function () {
	  function Collapse(dom, listDom, config) {
	    _classCallCheck(this, Collapse);

	    this.dom = dom;
	    this.listDom = listDom;
	    this.moveOffset = 0;
	    this.config = config;
	    this.handleClick = this.handleClick.bind(this);

	    var _config = this.config,
	        itemHeight = _config.itemHeight,
	        collapseRow = _config.collapseRow,
	        wrapperHeight = _config.wrapperHeight,
	        collapseTop = _config.collapseTop,
	        collapseBottom = _config.collapseBottom;


	    var collapseDom = this.collapseDom = document.createElement('div');
	    collapseDom.className = 'widgets-legend-collapse';
	    collapseDom.style.paddingTop = collapseTop + 'px';
	    collapseDom.style.paddingBottom = collapseBottom + 'px';

	    var collapseUpDom = this.collapseUpDom = document.createElement('div');
	    collapseUpDom.className = 'legend-collapse-btn collapse-up';
	    var collapseDownDom = this.collapseDownDom = document.createElement('div');
	    collapseDownDom.className = 'legend-collapse-btn collapse-down';
	    collapseDom.appendChild(collapseUpDom);
	    collapseDom.appendChild(collapseDownDom);

	    collapseDom.addEventListener('click', this.handleClick);
	    collapseDom.addEventListener('mousemove', noopEvent);
	    collapseDom.addEventListener('mouseout', noopEvent);

	    this.minOffset = -(wrapperHeight / itemHeight) + collapseRow;
	    this.maxOffset = 0;
	  }

	  _createClass(Collapse, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      e.stopPropagation();

	      if (!e.target.classList.contains('legend-collapse-btn') || e.target.classList.contains('disable')) {
	        return;
	      }

	      var moveOffset = this.moveOffset;

	      // 上一页
	      if (e.target.classList.contains('collapse-up')) {
	        moveOffset += 1;
	      }
	      // 下一页
	      if (e.target.classList.contains('collapse-down')) {
	        moveOffset -= 1;
	      }

	      this.moveOffset = moveOffset;

	      this.renderState();
	    }
	  }, {
	    key: 'renderState',
	    value: function renderState() {
	      var itemHeight = this.config.itemHeight;


	      this.collapseUpDom.classList.remove('disable');
	      this.collapseDownDom.classList.remove('disable');

	      // 不能向下
	      if (this.moveOffset <= this.minOffset) {
	        this.moveOffset = this.minOffset;
	        this.collapseDownDom.classList.add('disable');
	      }

	      // 不能向上
	      if (this.moveOffset >= this.maxOffset) {
	        this.moveOffset = this.maxOffset;
	        this.collapseUpDom.classList.add('disable');
	      }

	      this.listDom.style.transform = 'translate(0, ' + this.moveOffset * itemHeight + 'px)';
	    }
	  }, {
	    key: 'start',
	    value: function start(_ref2) {
	      var newCollapseRow = _ref2.collapseRow;
	      var _config2 = this.config,
	          itemHeight = _config2.itemHeight,
	          oldCollapseRow = _config2.collapseRow;

	      var collapseRow = newCollapseRow || oldCollapseRow;

	      this.dom.classList.add('has-collapse');

	      // 展示时重新获取高度
	      // 修复因样式变化导致滚动范围改变所引起的问题。
	      this.config.wrapperHeight = this.dom.offsetHeight;
	      this.minOffset = -(this.config.wrapperHeight / itemHeight) + collapseRow;

	      this.dom.style.maxHeight = itemHeight * collapseRow + 'px';
	      this.dom.appendChild(this.collapseDom);

	      this.renderState();
	    }
	  }, {
	    key: 'end',
	    value: function end() {
	      this.dom.classList.remove('has-collapse');
	      this.dom.style.maxHeight = '';
	      this.dom.removeChild(this.collapseDom);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.end();

	      this.collapseDom.removeEventListener('click', this.handleClick);
	      this.collapseDom.removeEventListener('mousemove', noopEvent);
	      this.collapseDom.removeEventListener('mouseout', noopEvent);
	    }
	  }]);

	  return Collapse;
	}();

	function noopEvent(e) {
	  e.stopPropagation();
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\rectLegend.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\rectLegend.js"); } } })();

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isPlaineObject = __webpack_require__(45);

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 * pick(object, ['a', 'c']);  // => { 'a': 1, 'c': 3 }
	 */

	var pick = function pick(object, keys) {
	  if (object === null || !isPlaineObject(object)) {
	    return {};
	  }
	  var result = {};
	  each(keys, function (key) {
	    if (hasOwnProperty.call(object, key)) {
	      result[key] = object[key];
	    }
	  });
	  return result;
	};

	module.exports = pick;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-array/ Version 1.2.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};

	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;

	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};

	function pair(a, b) {
	  return [a, b];
	}

	var cross = function(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;

	  if (reduce == null) reduce = pair;

	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }

	  return values;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var number = function(x) {
	  return x === null ? NaN : +x;
	};

	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  if (m > 1) return sum / (m - 1);
	};

	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};

	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  return [min, max];
	};

	var array = Array.prototype;

	var slice = array.slice;
	var map = array.map;

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var identity = function(x) {
	  return x;
	};

	var range = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	};

	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);

	var ticks = function(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;

	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }

	  if (reverse) ticks.reverse();

	  return ticks;
	};

	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};

	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;

	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }

	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;

	    var bins = new Array(m + 1),
	        bin;

	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }

	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };

	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };

	  return histogram;
	};

	var quantile = function(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};

	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};

	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};

	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  return max;
	};

	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }

	  if (m) return sum / m;
	};

	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }

	  return quantile(numbers.sort(ascending), 0.5);
	};

	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;

	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);

	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }

	  return merged;
	};

	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  return min;
	};

	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};

	var scan = function(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];

	  if (compare == null) compare = ascending;

	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }

	  if (compare(xj, xj) === 0) return j;
	};

	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }

	  return array;
	};

	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }

	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }

	  return sum;
	};

	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};

	function length(d) {
	  return d.length;
	}

	var zip = function() {
	  return transpose(arguments);
	};

	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = quantile;
	exports.range = range;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-hierarchy/ v1.1.8 Copyright 2018 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}

	function meanXReduce(x, c) {
	  return x + c.x;
	}

	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}

	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}

	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}

	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}

	function cluster() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;

	  function cluster(root) {
	    var previousNode,
	        x = 0;

	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });

	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;

	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }

	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };

	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };

	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };

	  return cluster;
	}

	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}

	function node_count() {
	  return this.eachAfter(count);
	}

	function node_each(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	}

	function node_eachBefore(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	}

	function node_eachAfter(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	}

	function node_sum(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	}

	function node_sort(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	}

	function node_path(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	}

	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}

	function node_ancestors() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	}

	function node_descendants() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	}

	function node_leaves() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	}

	function node_links() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	}

	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;

	  if (children == null) children = defaultChildren;

	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }

	  return root.eachBefore(computeHeight);
	}

	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}

	function defaultChildren(d) {
	  return d.children;
	}

	function copyData(node) {
	  node.data = node.data.data;
	}

	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}

	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}

	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};

	var slice = Array.prototype.slice;

	function shuffle(array) {
	  var m = array.length,
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m];
	    array[m] = array[i];
	    array[i] = t;
	  }

	  return array;
	}

	function enclose(circles) {
	  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;

	  while (i < n) {
	    p = circles[i];
	    if (e && enclosesWeak(e, p)) ++i;
	    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
	  }

	  return e;
	}

	function extendBasis(B, p) {
	  var i, j;

	  if (enclosesWeakAll(p, B)) return [p];

	  // If we get here then B must have at least one element.
	  for (i = 0; i < B.length; ++i) {
	    if (enclosesNot(p, B[i])
	        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
	      return [B[i], p];
	    }
	  }

	  // If we get here then B must have at least two elements.
	  for (i = 0; i < B.length - 1; ++i) {
	    for (j = i + 1; j < B.length; ++j) {
	      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
	          && enclosesNot(encloseBasis2(B[i], p), B[j])
	          && enclosesNot(encloseBasis2(B[j], p), B[i])
	          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
	        return [B[i], B[j], p];
	      }
	    }
	  }

	  // If we get here then something is very wrong.
	  throw new Error;
	}

	function enclosesNot(a, b) {
	  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
	  return dr < 0 || dr * dr < dx * dx + dy * dy;
	}

	function enclosesWeak(a, b) {
	  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}

	function enclosesWeakAll(a, B) {
	  for (var i = 0; i < B.length; ++i) {
	    if (!enclosesWeak(a, B[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	function encloseBasis(B) {
	  switch (B.length) {
	    case 1: return encloseBasis1(B[0]);
	    case 2: return encloseBasis2(B[0], B[1]);
	    case 3: return encloseBasis3(B[0], B[1], B[2]);
	  }
	}

	function encloseBasis1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}

	function encloseBasis2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}

	function encloseBasis3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = x1 - x2,
	      a3 = x1 - x3,
	      b2 = y1 - y2,
	      b3 = y1 - y3,
	      c2 = r2 - r1,
	      c3 = r3 - r1,
	      d1 = x1 * x1 + y1 * y1 - r1 * r1,
	      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
	      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (r1 + xa * xb + ya * yb),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
	  return {
	    x: x1 + xa + xb * r,
	    y: y1 + ya + yb * r,
	    r: r
	  };
	}

	function place(b, a, c) {
	  var dx = b.x - a.x, x, a2,
	      dy = b.y - a.y, y, b2,
	      d2 = dx * dx + dy * dy;
	  if (d2) {
	    a2 = a.r + c.r, a2 *= a2;
	    b2 = b.r + c.r, b2 *= b2;
	    if (a2 > b2) {
	      x = (d2 + b2 - a2) / (2 * d2);
	      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
	      c.x = b.x - x * dx - y * dy;
	      c.y = b.y - x * dy + y * dx;
	    } else {
	      x = (d2 + a2 - b2) / (2 * d2);
	      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
	      c.x = a.x + x * dx - y * dy;
	      c.y = a.y + x * dy + y * dx;
	    }
	  } else {
	    c.x = a.x + c.r;
	    c.y = a.y;
	  }
	}

	function intersects(a, b) {
	  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}

	function score(node) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab,
	      dy = (a.y * b.r + b.y * a.r) / ab;
	  return dx * dx + dy * dy;
	}

	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}

	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;

	  var a, b, c, n, aa, ca, i, j, k, sj, sk;

	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;

	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;

	  // Place the third circle.
	  place(b, a, c = circles[2]);

	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;

	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);

	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);

	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;

	    // Compute the new closest circle pair to the centroid.
	    aa = score(a);
	    while ((c = c.next) !== b) {
	      if ((ca = score(c)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }

	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

	  return c.r;
	}

	function siblings(circles) {
	  packEnclose(circles);
	  return circles;
	}

	function optional(f) {
	  return f == null ? null : required(f);
	}

	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}

	function constantZero() {
	  return 0;
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function defaultRadius(d) {
	  return Math.sqrt(d.value);
	}

	function index() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;

	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }

	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };

	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };

	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
	  };

	  return pack;
	}

	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}

	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;

	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}

	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}

	function roundNode(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	}

	function treemapDice(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	}

	function partition() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;

	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }

	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };

	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };

	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };

	  return partition;
	}

	var keyPrefix = "$", // Protect against keys like “__proto__”.
	    preroot = {depth: -1},
	    ambiguous = {};

	function defaultId(d) {
	  return d.id;
	}

	function defaultParentId(d) {
	  return d.parentId;
	}

	function stratify() {
	  var id = defaultId,
	      parentId = defaultParentId;

	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};

	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }

	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");

	    return root;
	  }

	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };

	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };

	  return stratify;
	}

	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }

	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}

	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}

	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}

	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}

	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}

	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}

	TreeNode.prototype = Object.create(Node.prototype);

	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;

	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }

	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}

	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	function tree() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;

	  function tree(root) {
	    var t = treeRoot(root);

	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);

	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);

	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }

	    return root;
	  }

	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }

	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }

	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }

	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }

	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };

	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };

	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };

	  return tree;
	}

	function treemapSlice(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	}

	var phi = (1 + Math.sqrt(5)) / 2;

	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;

	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;

	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);

	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }

	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }

	  return rows;
	}

	var squarify = (function custom(ratio) {

	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }

	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return squarify;
	})(phi);

	function index$1() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;

	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }

	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };

	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };

	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };

	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };

	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
	  };

	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };

	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
	  };

	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
	  };

	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
	  };

	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
	  };

	  return treemap;
	}

	function binary(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);

	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }

	  partition(0, n, parent.value, x0, y0, x1, y1);

	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }

	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;

	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }

	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;

	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	}

	function sliceDice(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	}

	var resquarify = (function custom(ratio) {

	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;

	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }

	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return resquarify;
	})(phi);

	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$1;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EventEmitter = __webpack_require__(68);
	var assign = __webpack_require__(2);
	var clone = __webpack_require__(26);
	var cloneDeep = __webpack_require__(26);
	var find = __webpack_require__(153);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isMatch = __webpack_require__(57);
	var isObject = __webpack_require__(44);
	var isString = __webpack_require__(6);
	var keys = __webpack_require__(19);
	var pick = __webpack_require__(22);

	function cloneOptions(options) {
	  var result = {};
	  forIn(options, function (value, key) {
	    if (isObject(value) && value.isView) {
	      result[key] = value;
	    } else {
	      result[key] = clone(value);
	    }
	  });
	  return result;
	}

	var View = function (_EventEmitter) {
	  _inherits(View, _EventEmitter);

	  // constructor
	  function View(dataSet, options) {
	    _classCallCheck(this, View);

	    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

	    var me = _this;
	    options = options || {};
	    dataSet = dataSet || {};
	    if (!dataSet.isDataSet) {
	      options = dataSet;
	      dataSet = null;
	    }
	    assign(me, {
	      dataSet: dataSet,
	      loose: !dataSet,
	      dataType: 'table',
	      isView: true,
	      isDataView: true, // alias
	      origin: [],
	      rows: [],
	      transforms: [],
	      watchingStates: null
	    }, options);
	    if (!me.loose) {
	      var watchingStates = me.watchingStates;

	      dataSet.on('statechange', function (name) {
	        if (isArray(watchingStates)) {
	          if (watchingStates.indexOf(name) > -1) {
	            me._reExecute();
	          }
	        } else {
	          me._reExecute();
	        }
	      });
	    }
	    return _this;
	  }

	  View.prototype._parseStateExpression = function _parseStateExpression(expr) {
	    var dataSet = this.dataSet;
	    var matched = /^\$state\.(\w+)/.exec(expr);
	    if (matched) {
	      return dataSet.state[matched[1]];
	    }
	    return expr;
	  };

	  View.prototype._preparseOptions = function _preparseOptions(options) {
	    var me = this;
	    var optionsCloned = cloneOptions(options);
	    if (me.loose) {
	      return optionsCloned;
	    }
	    forIn(optionsCloned, function (value, key) {
	      if (isString(value) && /^\$state\./.test(value)) {
	        optionsCloned[key] = me._parseStateExpression(value);
	      }
	    });
	    return optionsCloned;
	  };

	  // connectors


	  View.prototype._prepareSource = function _prepareSource(source, options) {
	    var me = this;
	    var DataSet = View.DataSet;
	    // warning me.origin is protected
	    me._source = {
	      source: source,
	      options: options
	    };
	    if (!options) {
	      if (source instanceof View || isString(source)) {
	        me.origin = DataSet.getConnector('default')(source, me.dataSet);
	      } else if (isArray(source)) {
	        // TODO branch: if source is like ['dataview1', 'dataview2']
	        me.origin = source;
	      } else if (isObject(source) && source.type) {
	        options = me._preparseOptions(source); // connector without source
	        me.origin = DataSet.getConnector(options.type)(options, me);
	      } else {
	        throw new TypeError('Invalid source');
	      }
	    } else {
	      options = me._preparseOptions(options);
	      me.origin = DataSet.getConnector(options.type)(source, options, me);
	    }
	    me.rows = cloneDeep(me.origin);
	    return me;
	  };

	  View.prototype.source = function source(_source, options) {
	    var me = this;
	    me._prepareSource(_source, options);
	    me._reExecuteTransforms();
	    me.trigger('change');
	    return me;
	  };

	  // transforms


	  View.prototype.transform = function transform() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var me = this;
	    me.transforms.push(options);
	    me._executeTransform(options);
	    return me;
	  };

	  View.prototype._executeTransform = function _executeTransform(options) {
	    var me = this;
	    options = me._preparseOptions(options);
	    var transform = View.DataSet.getTransform(options.type);
	    transform(me, options);
	  };

	  View.prototype._reExecuteTransforms = function _reExecuteTransforms() {
	    var me = this;
	    me.transforms.forEach(function (options) {
	      me._executeTransform(options);
	    });
	  };

	  // rows


	  View.prototype.addRow = function addRow(row) {
	    this.rows.push(row);
	  };

	  View.prototype.removeRow = function removeRow(index) {
	    this.rows.splice(index, 1);
	  };

	  View.prototype.updateRow = function updateRow(index, newRow) {
	    assign(this.rows[index], newRow);
	  };

	  View.prototype.findRows = function findRows(query) {
	    return this.rows.filter(function (row) {
	      return isMatch(row, query);
	    });
	  };

	  View.prototype.findRow = function findRow(query) {
	    return find(this.rows, query);
	  };

	  // columns


	  View.prototype.getColumnNames = function getColumnNames() {
	    var firstRow = this.rows[0];
	    if (firstRow) {
	      return keys(firstRow);
	    }
	    return [];
	  };

	  View.prototype.getColumnName = function getColumnName(index) {
	    return this.getColumnNames()[index];
	  };

	  View.prototype.getColumnIndex = function getColumnIndex(columnName) {
	    var columnNames = this.getColumnNames();
	    return columnNames.indexOf(columnName);
	  };

	  View.prototype.getColumn = function getColumn(columnName) {
	    return this.rows.map(function (row) {
	      return row[columnName];
	    });
	  };

	  View.prototype.getColumnData = function getColumnData(columnName) {
	    return this.getColumn(columnName);
	  };

	  // data process


	  View.prototype.getSubset = function getSubset(startRowIndex, endRowIndex, columnNames) {
	    var subset = [];
	    for (var i = startRowIndex; i <= endRowIndex; i++) {
	      subset.push(pick(this.rows[i], columnNames));
	    }
	    return subset;
	  };

	  View.prototype.toString = function toString(prettyPrint) {
	    var me = this;
	    if (prettyPrint) {
	      return JSON.stringify(me.rows, null, 2);
	    }
	    return JSON.stringify(me.rows);
	  };

	  View.prototype._reExecute = function _reExecute() {
	    var me = this;
	    var _me$_source = me._source,
	        source = _me$_source.source,
	        options = _me$_source.options;

	    me._prepareSource(source, options);
	    me._reExecuteTransforms();
	    me.trigger('change');
	  };

	  return View;
	}(EventEmitter);

	module.exports = View;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isArray = __webpack_require__(3);

	var clone = function clone(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {
	    return obj;
	  }
	  var rst = void 0;
	  if (isArray(obj)) {
	    rst = [];
	    for (var i = 0, l = obj.length; i < l; i++) {
	      if (_typeof(obj[i]) === 'object' && obj[i] != null) {
	        rst[i] = clone(obj[i]);
	      } else {
	        rst[i] = obj[i];
	      }
	    }
	  } else {
	    rst = {};
	    for (var k in obj) {
	      if (_typeof(obj[k]) === 'object' && obj[k] != null) {
	        rst[k] = clone(obj[k]);
	      } else {
	        rst[k] = obj[k];
	      }
	    }
	  }

	  return rst;
	};

	module.exports = clone;

/***/ },
/* 27 */
/***/ function(module, exports) {

	var toString = {}.toString;
	var isType = function isType(value, type) {
	  return toString.call(value) === '[object ' + type + ']';
	};

	module.exports = isType;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-geo/ Version 1.6.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(23)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Array) { 'use strict';

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	var adder = function() {
	  return new Adder;
	};

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add(temp, y, this.t);
	    add(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var quarterPi = pi / 4;
	var tau = pi * 2;

	var degrees = 180 / pi;
	var radians = pi / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;

	var log = Math.log;
	var pow = Math.pow;
	var sin = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin(x / 2)) * x;
	}

	function noop() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;

	var areaStream = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop;
	  },
	  sphere: function() {
	    areaSum.add(tau);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos(phi),
	      sinPhi = sin(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos(adLambda),
	      v = k * sdLambda * sin(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	var area = function(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	};

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
	  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range$1;

	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon) phi1 = 90;
	    else if (deltaSum < -epsilon) phi0 = -90;
	    range$1[0] = lambda0$1, range$1[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range$$1, x) {
	  return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;
	}

	var bounds = function(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range$1 = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	};

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point

	var centroidStream = {
	  sphere: noop,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	var centroid = function(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
	};

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var compose = function(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	};

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos(deltaPhi),
	      sinDeltaPhi = sin(deltaPhi),
	      cosDeltaGamma = cos(deltaGamma),
	      sinDeltaGamma = sin(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  };

	  return forward;
	};

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos(radius),
	      sinRadius = sin(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
	}

	var circle = function() {
	  var center = constant([0, 0]),
	      radius = constant(90),
	      precision = constant(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees, x[1] *= degrees;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
	  };

	  return circle;
	};

	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};

	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};

	var pointEqual = function(a, b) {
	  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
	};

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;

	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipExtent(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = d3Array.merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	var extent = function() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	};

	var sum = adder();

	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin(lambda), -cos(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum.reset();

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin(phi0),
	        cosPhi0 = cos(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin(phi1),
	          cosPhi1 = cos(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi,
	          k = sinPhi0 * sinPhi1;

	      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
	};

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;

	var lengthStream = {
	  sphere: noop,
	  point: noop,
	  lineStart: lengthLineStart,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin(phi),
	      cosPhi = cos(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos(delta),
	      sinDelta = sin(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	var length = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};

	var coordinates = [null, null];
	var object = {type: "LineString", coordinates: coordinates};

	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length(object);
	};

	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};

	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};

	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}

	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}

	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon;
	}

	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}

	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}

	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}

	var contains = function(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	};

	function graticuleX(y0, y1, dy) {
	  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
	        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
	      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
	}

	function graticule10() {
	  return graticule()();
	}

	var interpolate = function(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos(y0),
	      sy0 = sin(y0),
	      cy1 = cos(y1),
	      sy1 = sin(y1),
	      kx0 = cy0 * cos(x0),
	      ky0 = cy0 * sin(x0),
	      kx1 = cy1 * cos(x1),
	      ky1 = cy1 * sin(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin(d);

	  var interpolate = d ? function(t) {
	    var B = sin(t *= d) / k,
	        A = sin(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees,
	      atan2(z, sqrt(x * x + y * y)) * degrees
	    ];
	  } : function() {
	    return [x0 * degrees, y0 * degrees];
	  };

	  interpolate.distance = d;

	  return interpolate;
	};

	var identity = function(x) {
	  return x;
	};

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;

	var areaStream$1 = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;

	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	// TODO Enforce positive area for exterior, negative area for interior?

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;

	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau);
	        break;
	      }
	    }
	  },
	  result: noop
	};

	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;

	var lengthStream$1 = {
	  point: noop,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};

	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}

	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        if (this._circle == null) this._circle = circle$1(this._radius);
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	var index = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	};

	var clip = function(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = d3Array.merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	};

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi, -halfPi]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi : -pi,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi) < epsilon) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon
	      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
	          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi;
	    stream.point(-pi, phi);
	    stream.point(0, phi);
	    stream.point(pi, phi);
	    stream.point(pi, 0);
	    stream.point(pi, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi, -phi);
	    stream.point(-pi, 0);
	    stream.point(-pi, phi);
	  } else if (abs(from[0] - to[0]) > epsilon) {
	    var lambda = from[0] < to[0] ? pi : -pi;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	var clipCircle = function(radius, delta) {
	  var cr = cos(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos(lambda) * cos(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon;
	            point1[1] += epsilon;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi) < epsilon,
	        meridian = polar || delta < epsilon;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
	};

	var transform = function(methods) {
	  return {
	    stream: transformer(methods)
	  };
	};

	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fitExtent(projection, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = projection.clipExtent && projection.clipExtent();

	  projection
	      .scale(150)
	      .translate([0, 0]);

	  if (clip != null) projection.clipExtent(null);

	  geoStream(object, projection.stream(boundsStream$1));

	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

	  if (clip != null) projection.clipExtent(clip);

	  return projection
	      .scale(k * 150)
	      .translate([x, y]);
	}

	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}

	var maxDepth = 16;
	var cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};

	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;

	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }

	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees, point[1] * degrees];
	  }

	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };

	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
	  };

	  return p;
	}

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin(y)) / n;
	    return [r * sin(x *= n), r0 - r * cos(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};

	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var albersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    return reset();
	  };

	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };

	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };

	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }

	  return albersUsa.scale(1070);
	};

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos(x),
	        cy = cos(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin(x),
	      k * sin(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin(c),
	        cc = cos(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	var azimuthalEqualArea = function() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	var azimuthalEquidistant = function() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi];
	};

	var mercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau);
	};

	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function(_) {
	    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function tany(y) {
	  return tan((halfPi + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
	    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
	    var r = f / pow(tany(y), n);
	    return [r * sin(n * x), f - r * cos(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];
	  };

	  return project;
	}

	var conicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	var equirectangular = function() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	};

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin(nx), g - gy * cos(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	var conicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};

	function gnomonicRaw(x, y) {
	  var cy = cos(y), k = cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	var gnomonic = function() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};

	function scaleTranslate(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}

	var identity$1 = function() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect
	      x0 = null, y0, x1, y1, clip = identity, // clip extent
	      cache,
	      cacheStream,
	      projection;

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    }
	  };
	};

	function orthographicRaw(x, y) {
	  return [cos(y) * sin(x), sin(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	var orthographic = function() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon);
	};

	function stereographicRaw(x, y) {
	  var cy = cos(y), k = 1 + cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	var stereographic = function() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi];
	};

	var transverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	};

	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate;
	exports.geoLength = length;
	exports.geoPath = index;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$1;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/*
	* 常见直角坐标系的X轴设置。
	* */


	exports.default = function (chart, config, componentConfig) {
	  if (config.xAxis === false || config.xAxis && config.xAxis.visible === false) {
	    chart.axis('x', false);
	  } else {
	    var _ref = config.xAxis || {},
	        autoRotate = _ref.autoRotate,
	        labelFormatter = _ref.labelFormatter,
	        customConfig = _ref.customConfig;

	    var xAxisConfig = {
	      title: null, // 不展示坐标轴的标题
	      label: {
	        autoRotate: autoRotate,
	        formatter: labelFormatter
	      }
	    };

	    // 网格线
	    if (config.grid) {
	      xAxisConfig.grid = {
	        lineStyle: {
	          stroke: _index.color.widgetsAxisGrid,
	          lineWidth: 1
	          // lineDash: null
	        }
	        // hideFirstLine: true
	      };
	    }

	    if (componentConfig) {
	      _extends(xAxisConfig, componentConfig);
	    }

	    if (customConfig) {
	      (0, _merge2.default)(xAxisConfig, customConfig);
	    }

	    chart.axis('x', xAxisConfig);
	  }
	};

	var _index = __webpack_require__(9);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\rectXAxis.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\rectXAxis.js"); } } })();

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/*
	* 常见直角坐标系的单个Y轴设置。
	* */


	exports.default = function (chart, config) {
	  var yField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'y';
	  var componentConfig = arguments[3];

	  if (config.yAxis === false || config.yAxis && config.yAxis.visible === false) {
	    chart.axis(yField, false);
	  } else {
	    var _ref = config.yAxis || {},
	        labelFormatter = _ref.labelFormatter,
	        customConfig = _ref.customConfig;

	    var yConfig = {
	      title: null, // 不展示坐标轴的标题
	      label: {
	        formatter: labelFormatter
	      }
	    };

	    // 关闭了X轴，需要显示第一条grid
	    if (config.xAxis === false || config.xAxis && config.xAxis.visible === false) {
	      yConfig.grid = {
	        hideFirstLine: false
	      };
	    }

	    if (componentConfig) {
	      _extends(yConfig, componentConfig);
	    }

	    if (customConfig) {
	      (0, _merge2.default)(yConfig, customConfig);
	    }

	    chart.axis(yField, yConfig);
	  }
	};

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\rectYAxis.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\rectYAxis.js"); } } })();

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// extra APIs
	__webpack_require__(91);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);

	// connectors
	__webpack_require__(95);
	__webpack_require__(96);
	__webpack_require__(97);
	__webpack_require__(48);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);

	// transforms
	// static
	__webpack_require__(107);
	__webpack_require__(112);
	__webpack_require__(113);
	__webpack_require__(129);
	__webpack_require__(130);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(133);
	__webpack_require__(135);
	__webpack_require__(136);
	__webpack_require__(138);
	__webpack_require__(137);
	__webpack_require__(139);
	// imputation
	__webpack_require__(111);
	__webpack_require__(125);
	// statistics
	__webpack_require__(102);
	// regression
	__webpack_require__(134);
	// KDE
	__webpack_require__(126);
	// binning
	__webpack_require__(103);
	__webpack_require__(104);
	__webpack_require__(105);
	__webpack_require__(106);
	// geo
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	// diagram
	__webpack_require__(108);
	// require('./transform/diagram/dagre');
	__webpack_require__(109);
	__webpack_require__(110);
	// hierarchy
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	// tag cloud
	__webpack_require__(140);
	// waffle
	__webpack_require__(141);
	// kernel smoothing
	__webpack_require__(127);
	__webpack_require__(128);

	module.exports = __webpack_require__(1);

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(16),
	    standardDeviation = _require.standardDeviation,
	    interquartileRange = _require.interquartileRange;

	module.exports = {
	  silverman: function silverman(arr) {
	    var stdev = standardDeviation(arr);
	    var num = 4 * Math.pow(stdev, 5);
	    var denom = 3 * arr.length;
	    return Math.pow(num / denom, 0.2);
	  },
	  nrd: function nrd(x) {
	    var s = standardDeviation(x);
	    var iqr = interquartileRange(x);
	    if (typeof iqr === 'number') {
	      s = Math.min(s, iqr / 1.34);
	    }
	    return 1.06 * s * Math.pow(x.length, -0.2);
	  }
	};

/***/ },
/* 33 */
/***/ function(module, exports) {

	
	module.exports = function (extent) {
	  var bandwidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var min = extent[0],
	      max = extent[1];

	  var values = [];
	  var tmp = min;
	  while (tmp < max) {
	    values.push(tmp);
	    tmp += bandwidth;
	  }
	  values.push(max);
	  return values;
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var hierarchy = __webpack_require__(53);

	var Layout = function () {
	  function Layout(root) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, Layout);

	    var me = this;
	    me.options = options;
	    me.rootNode = hierarchy(root, options);
	  }

	  Layout.prototype.execute = function execute() {
	    throw new Error('please override this method');
	  };

	  return Layout;
	}();

	module.exports = Layout;

/***/ },
/* 35 */
/***/ function(module, exports) {

	// isFinite,
	var isNil = function isNil(value) {
	  /**
	   * isNil(null) => true
	   * isNil() => true
	   */
	  return value === null || value === undefined;
	};

	module.exports = isNil;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 判断是否数字
	 * @return {Boolean} 是否数字
	 */
	var isType = __webpack_require__(27);

	var isNumber = function isNumber(value) {
	  return isType(value, 'Number');
	};
	module.exports = isNumber;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.autoSelect = autoSelect;
	exports.isMobileWithProps = isMobileWithProps;
	/**
	 * 根据平台（移动、PC）选择需要渲染的图表组件
	 * 如果移动图表不存在，直接返回 PC 图表
	 *
	 * @example
	 *
	 * ```
	 * import AiscLine from '@alife/aisc-widgets';
	 * import AismLine from '@alife/aism-widgets';
	 *
	 * export default autoSelect(AiscLine, AismLine);
	 * ```
	 *
	 * @param {React.Component}} aisc - PC 端图表
	 * @param {React.Component} aism - 移动端图表
	 */
	var isMobile = exports.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

	function autoSelect(aisc, aism) {
	  if (!isMobile || !aism) {
	    return aisc;
	  }
	  return aism;
	}

	function isMobileWithProps(props) {
	  return !!(props.isMobile || props.isMobile !== false && isMobile);
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\platform.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\platform.js"); } } })();

/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = {
	  HIERARCHY: 'hierarchy',
	  GEO: 'geo',
	  HEX: 'hex',
	  GRAPH: 'graph',
	  TABLE: 'table',
	  GEO_GRATICULE: 'geo-graticule',
	  STATISTICS_METHODS: ['max', 'mean', // alias: average
	  'median', 'min', 'mode', 'product', 'standardDeviation', 'sum', 'sumSimple', 'variance']
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/*
	 * @reference: https://github.com/jasondavies/science.js/blob/master/src/stats/kernel.js
	 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js#L16
	 */
	function uniform(u) {
	  return Math.abs(u) <= 1 ? 0.5 : 0;
	}
	function tricubed(u) {
	  var abs = 1 - Math.pow(Math.abs(u), 3);
	  return Math.pow(abs, 3);
	}
	module.exports = {
	  boxcar: uniform,
	  cosine: function cosine(u) {
	    if (Math.abs(u) <= 1) {
	      return Math.PI / 4 * Math.cos(Math.PI / 2 * u);
	    }
	    return 0;
	  },
	  epanechnikov: function epanechnikov(u) {
	    return Math.abs(u) < 1 ? 0.75 * (1 - u * u) : 0;
	  },
	  gaussian: function gaussian(u) {
	    // return 1 / Math.sqrt(2 * Math.PI) * Math.exp(-0.5 * u * u);
	    return 0.3989422804 * Math.exp(-0.5 * u * u);
	  },
	  quartic: function quartic(u) {
	    if (Math.abs(u) < 1) {
	      var tmp = 1 - u * u;
	      return 15 / 16 * tmp * tmp;
	    }
	    return 0;
	  },
	  triangular: function triangular(u) {
	    var abs = Math.abs(u);
	    return abs < 1 ? 1 - abs : 0;
	  },
	  tricube: function tricube(u) {
	    return Math.abs(u) < 1 ? 70 / 81 * tricubed(u) : 0;
	  },
	  triweight: function triweight(u) {
	    if (Math.abs(u) < 1) {
	      var tmp = 1 - u * u;
	      return 35 / 32 * tmp * tmp * tmp;
	    }
	    return 0;
	  },

	  uniform: uniform
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	
	var hierarchy = {
	  compactBox: __webpack_require__(144),
	  dendrogram: __webpack_require__(145),
	  indented: __webpack_require__(146),
	  mindmap: __webpack_require__(151)
	};

	module.exports = hierarchy;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	
	var separateTree = __webpack_require__(54);
	var VALID_DIRECTIONS = ['LR', // left to right
	'RL', // right to left
	'TB', // top to bottom
	'BT', // bottom to top
	'H', // horizontal
	'V' // vertical
	];
	var HORIZONTAL_DIRECTIONS = ['LR', 'RL', 'H'];
	var isHorizontal = function isHorizontal(direction) {
	  return HORIZONTAL_DIRECTIONS.indexOf(direction) > -1;
	};
	var DEFAULT_DIRECTION = VALID_DIRECTIONS[0];

	module.exports = function (root, options, layoutAlgrithm) {
	  var direction = options.direction || DEFAULT_DIRECTION;
	  options.isHorizontal = isHorizontal(direction);
	  if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
	    throw new TypeError('Invalid direction: ' + direction);
	  }

	  if (direction === VALID_DIRECTIONS[0]) {
	    // LR
	    layoutAlgrithm(root, options);
	  } else if (direction === VALID_DIRECTIONS[1]) {
	    // RL
	    layoutAlgrithm(root, options);
	    root.right2left();
	  } else if (direction === VALID_DIRECTIONS[2]) {
	    // TB
	    layoutAlgrithm(root, options);
	  } else if (direction === VALID_DIRECTIONS[3]) {
	    // BT
	    layoutAlgrithm(root, options);
	    root.bottom2top();
	  } else if (direction === VALID_DIRECTIONS[4] || direction === VALID_DIRECTIONS[5]) {
	    // H or V
	    // separate into left and right trees
	    var _separateTree = separateTree(root, options),
	        left = _separateTree.left,
	        right = _separateTree.right;
	    // do layout for left and right trees


	    layoutAlgrithm(left, options);
	    layoutAlgrithm(right, options);
	    options.isHorizontal ? left.right2left() : left.bottom2top();
	    // combine left and right trees
	    right.translate(left.x - right.x, left.y - right.y);
	    // translate root
	    root.x = left.x;
	    root.y = right.y;
	    var bb = root.getBoundingBox();
	    if (options.isHorizontal) {
	      if (bb.top < 0) {
	        root.translate(0, -bb.top);
	      }
	    } else {
	      if (bb.left < 0) {
	        root.translate(-bb.left, 0);
	      }
	    }
	  }
	  root.translate(-(root.x + root.width / 2 + root.hgap), -(root.y + root.height / 2 + root.vgap));
	  return root;
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isNil = __webpack_require__(35);
	var isArray = __webpack_require__(3);

	var values = function values(data, name) {
	  var rst = [];
	  var tmpMap = {};
	  for (var i = 0; i < data.length; i++) {
	    var obj = data[i];
	    var value = obj[name];
	    if (!isNil(value)) {
	      if (!isArray(value)) {
	        value = [value];
	      }
	      each(value, function (val) {
	        if (!tmpMap[val]) {
	          rst.push(val);
	          tmpMap[val] = true;
	        }
	      });
	    }
	  }
	  return rst;
	};

	module.exports = values;

/***/ },
/* 43 */
/***/ function(module, exports) {

	var isArrayLike = function isArrayLike(value) {
	  /**
	   * isArrayLike([1, 2, 3]) => true
	   * isArrayLike(document.body.children) => true
	   * isArrayLike('abc') => true
	   * isArrayLike(Function) => false
	   */
	  return value !== null && typeof value !== 'function' && isFinite(value.length);
	};

	module.exports = isArrayLike;

/***/ },
/* 44 */
/***/ function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isObject = function isObject(value) {
	  /**
	   * isObject({}) => true
	   * isObject([1, 2, 3]) => true
	   * isObject(Function) => true
	   * isObject(null) => false
	   */
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return value !== null && type === 'object' || type === 'function';
	};

	module.exports = isObject;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(160);
	var isType = __webpack_require__(27);

	var isPlainObject = function isPlainObject(value) {
	  /**
	   * isObjectLike(new Foo) => false
	   * isObjectLike([1, 2, 3]) => false
	   * isObjectLike({ x: 0, y: 0 }) => true
	   * isObjectLike(Object.create(null)) => true
	   */
	  if (!isObjectLike(value) || !isType(value, 'Object')) {
	    return false;
	  }
	  if (Object.getPrototypeOf(value) === null) {
	    return true;
	  }
	  var proto = value;
	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }
	  return Object.getPrototypeOf(value) === proto;
	};

	module.exports = isPlainObject;

/***/ },
/* 46 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* eslint-disable */
	var ieVersion = exports.ieVersion = typeof document === 'undefined' ? false : document.documentMode;
	/* eslint-enable */

/***/ },
/* 47 */
/***/ function(module, exports) {

	'use strict';

	var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset/;

	var getComputedStyle = function getComputedStyle(node) {
	    return node.nodeType == 1 ? node.ownerDocument.defaultView.getComputedStyle(node, null) : {};
	},
	    removePixel = {
	    left: true,
	    top: true
	},
	    getStyleValue = function getStyleValue(node, type, value) {
	    type = type.toLowerCase();
	    if (value === 'auto') {
	        if (type === 'height') {
	            return node.offsetHeight;
	        }
	        if (type === 'width') {
	            return node.offsetWidth;
	        }
	    }
	    if (!(type in removePixel)) {
	        removePixel[type] = PIXEL_PATTERN.test(type);
	    }
	    return removePixel[type] ? parseFloat(value) || 0 : value;
	},
	    floatMap = {
	    cssFloat: 1,
	    styleFloat: 1,
	    float: 1
	};

	function camelize(name) {
	    return name.replace(/-(.)/g, function ($0, $1) {
	        return $1.toUpperCase();
	    });
	}

	function hyphenate(name) {
	    return name.replace(/[A-Z]/g, function ($1) {
	        return '-' + $1.toLowerCase();
	    });
	}

	function getStyle(node, name) {
	    var length = arguments.length,
	        style = getComputedStyle(node);

	    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;

	    return length === 1 ? style : getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelize(name)]);
	}

	function setStyle(node, name, value) {
	    var length = arguments.length;
	    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
	    if (length === 3) {
	        if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {
	            value = value + 'px';
	        }
	        return node.style[camelize(name)] = value; // IE8 support.
	    }
	    for (var x in name) {
	        setStyle(node, x, name[x]);
	    }
	    return getComputedStyle(node);
	}

	function getOuterWidth(el) {
	    if (el === document.body) {
	        return document.documentElement.clientWidth;
	    }
	    return el.offsetWidth;
	}

	function getOuterHeight(el) {
	    if (el === document.body) {
	        return window.innerHeight || document.documentElement.clientHeight;
	    }
	    return el.offsetHeight;
	}

	function getDocSize() {
	    var width = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth),
	        height = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);

	    return {
	        width: width,
	        height: height
	    };
	}

	function getClientSize() {
	    var width = document.documentElement.clientWidth,
	        height = window.innerHeight || document.documentElement.clientHeight;

	    return {
	        width: width,
	        height: height
	    };
	}

	function getScroll() {
	    return {
	        scrollLeft: Math.max(document.documentElement.scrollLeft, document.body.scrollLeft),
	        scrollTop: Math.max(document.documentElement.scrollTop, document.body.scrollTop)
	    };
	}

	function getOffset(node) {
	    var box = node.getBoundingClientRect(),
	        docElem = document.documentElement;

	    return {
	        left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
	        top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
	    };
	}

	module.exports = {
	    set: setStyle,
	    get: getStyle,
	    getOuterWidth: getOuterWidth,
	    getOuterHeight: getOuterHeight,
	    getDocSize: getDocSize,
	    getClientSize: getClientSize,
	    getScroll: getScroll,
	    getOffset: getOffset
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var getPointAtLength = __webpack_require__(62);
	var cloneDeep = __webpack_require__(26);

	var _require = __webpack_require__(28),
	    geoPath = _require.geoPath;

	var _require2 = __webpack_require__(1),
	    GEO = _require2.GEO,
	    registerConnector = _require2.registerConnector;

	var geoPathGenerator = geoPath();

	function GeoJSONConnector(data, options, dataView) {
	  dataView.dataType = GEO;
	  var features = cloneDeep(data.features);

	  // pre-process
	  features.forEach(function (feature) {
	    feature.name = feature.properties.name;
	    feature.longitude = [];
	    feature.latitude = [];
	    var pathData = feature.pathData = geoPathGenerator(feature);
	    var points = getPointAtLength(pathData);
	    points._path.forEach(function (point) {
	      feature.longitude.push(point[1]);
	      feature.latitude.push(point[2]);
	    });
	    var centroid = geoPathGenerator.centroid(feature);
	    feature.centroidX = centroid[0];
	    feature.centroidY = centroid[1];
	  });

	  // dataView.origin = features;
	  return features;
	}

	registerConnector('geo', GeoJSONConnector);
	registerConnector('geojson', GeoJSONConnector);
	registerConnector('GeoJSON', GeoJSONConnector);

	module.exports = GeoJSONConnector;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(11);
	var isString = __webpack_require__(6);
	var d3Geo = __webpack_require__(28);
	var d3GeoProjection = __webpack_require__(58);
	var d3CompositeProjection = __webpack_require__(165);

	/*
	* getGeoProjection
	*
	* @param {string|function} projection  projection name or projection function
	* @param {boolean} [exportRaw = false] - whether return the raw projection or not
	* */
	module.exports = function (projection, exportRaw) {
	  if (isFunction(projection)) {
	    return exportRaw ? projection : projection();
	  }
	  if (isString(projection)) {
	    if (d3Geo[projection]) {
	      return exportRaw ? d3Geo[projection] : d3Geo[projection]();
	    }
	    if (d3GeoProjection[projection]) {
	      return exportRaw ? d3GeoProjection[projection] : d3GeoProjection[projection]();
	    }
	    if (d3CompositeProjection[projection]) {
	      return exportRaw ? d3CompositeProjection[projection] : d3CompositeProjection[projection]();
	    }
	  }
	  return null;
	};

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = function (fraction) {
	  var step = 1 / fraction;
	  var pArr = [];
	  for (var i = 0; i <= 1; i = i + step) {
	    pArr.push(i);
	  }
	  return pArr;
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["F2"] = factory();
		else
			root["F2"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 124);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Utility for F2
	 * @author dxq613@gmail.com
	 */
	var DomUtil = __webpack_require__(43);
	var Util = {
	  upperFirst: __webpack_require__(44),
	  lowerFirst: __webpack_require__(45),
	  isString: __webpack_require__(14),
	  isNumber: __webpack_require__(17),
	  isBoolean: __webpack_require__(46),
	  isFunction: __webpack_require__(47),
	  isDate: __webpack_require__(33),
	  isArray: __webpack_require__(10),
	  isNil: __webpack_require__(6),
	  isObject: __webpack_require__(18),
	  isPlainObject: __webpack_require__(28),
	  deepMix: __webpack_require__(49),
	  mix: __webpack_require__(15),
	  each: __webpack_require__(3),
	  wrapBehavior: function wrapBehavior(obj, action) {
	    if (obj['_wrap_' + action]) {
	      return obj['_wrap_' + action];
	    }
	    var method = function method(e) {
	      obj[action](e);
	    };
	    obj['_wrap_' + action] = method;
	    return method;
	  },
	  getWrapBehavior: function getWrapBehavior(obj, action) {
	    return obj['_wrap_' + action];
	  },
	  parsePadding: function parsePadding(padding) {
	    var top = void 0;
	    var right = void 0;
	    var bottom = void 0;
	    var left = void 0;

	    if (Util.isNumber(padding) || Util.isString(padding)) {
	      top = bottom = left = right = padding;
	    } else if (Util.isArray(padding)) {
	      top = padding[0];
	      right = !Util.isNil(padding[1]) ? padding[1] : padding[0];
	      bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];
	      left = !Util.isNil(padding[3]) ? padding[3] : right;
	    }

	    return [top, right, bottom, left];
	  }
	};

	Util.Array = {
	  merge: function merge(dataArray) {
	    var rst = [];
	    for (var i = 0, len = dataArray.length; i < len; i++) {
	      rst = rst.concat(dataArray[i]);
	    }
	    return rst;
	  },
	  values: function values(data, name) {
	    var rst = [];
	    var tmpMap = {};
	    for (var i = 0, len = data.length; i < len; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (!Util.isArray(value)) {
	          if (!tmpMap[value]) {
	            rst.push(value);
	            tmpMap[value] = true;
	          }
	        } else {
	          Util.each(value, function (val) {
	            if (!tmpMap[val]) {
	              rst.push(val);
	              tmpMap[val] = true;
	            }
	          });
	        }
	      }
	    }
	    return rst;
	  },
	  firstValue: function firstValue(data, name) {
	    var rst = null;
	    for (var i = 0, len = data.length; i < len; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (Util.isArray(value)) {
	          rst = value[0];
	        } else {
	          rst = value;
	        }
	        break;
	      }
	    }
	    return rst;
	  },
	  group: function group(data, fields) {
	    var appendConditions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    if (!fields) {
	      return [data];
	    }
	    var groups = Util.Array.groupToMap(data, fields);
	    var array = [];
	    if (fields.length === 1 && appendConditions[fields[0]]) {
	      var values = appendConditions[fields[0]];
	      Util.each(values, function (value) {
	        value = '_' + value;
	        array.push(groups[value]);
	      });
	    } else {
	      for (var i in groups) {
	        array.push(groups[i]);
	      }
	    }

	    return array;
	  },
	  groupToMap: function groupToMap(data, fields) {
	    if (!fields) {
	      return {
	        0: data
	      };
	    }

	    var callback = function callback(row) {
	      var unique = '_';
	      for (var i = 0, l = fields.length; i < l; i++) {
	        unique += row[fields[i]] && row[fields[i]].toString();
	      }
	      return unique;
	    };

	    var groups = {};
	    for (var i = 0, len = data.length; i < len; i++) {
	      var row = data[i];
	      var key = callback(row);
	      if (groups[key]) {
	        groups[key].push(row);
	      } else {
	        groups[key] = [row];
	      }
	    }

	    return groups;
	  },
	  remove: function remove(arr, obj) {
	    if (!arr) {
	      return;
	    }
	    var index = arr.indexOf(obj);
	    if (index !== -1) {
	      arr.splice(index, 1);
	    }
	  },
	  getRange: function getRange(values) {
	    if (!values.length) {
	      return {
	        min: 0,
	        max: 0
	      };
	    }
	    var max = Math.max.apply(null, values);
	    var min = Math.min.apply(null, values);
	    return {
	      min: min,
	      max: max
	    };
	  }
	};

	Util.mix(Util, DomUtil);

	module.exports = Util;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	var Theme = __webpack_require__(42);
	var Util = __webpack_require__(0);

	var Global = {
	  version: '3.2.0',
	  trackable: true,
	  scales: {},
	  widthRatio: {
	    column: 1 / 2,
	    rose: 0.999999,
	    multiplePie: 3 / 4
	  },
	  lineDash: [4, 4]
	};

	Global.setTheme = function (theme) {
	  Util.deepMix(this, theme);
	};

	Global.setTheme(Theme);
	module.exports = Global;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Element = __webpack_require__(25);

	var Shape = function (_Element) {
	  _inherits(Shape, _Element);

	  function Shape() {
	    _classCallCheck(this, Shape);

	    return _possibleConstructorReturn(this, _Element.apply(this, arguments));
	  }

	  Shape.prototype._initProperties = function _initProperties() {
	    this._attrs = {
	      zIndex: 0,
	      visible: true,
	      destroyed: false,
	      isShape: true,
	      attrs: {}
	    };
	  };

	  Shape.prototype.getType = function getType() {
	    return this._attrs.type;
	  };

	  Shape.prototype.drawInner = function drawInner(context) {
	    var self = this;
	    var attrs = self.get('attrs');
	    self.createPath(context);
	    var originOpacity = context.globalAlpha;
	    if (self.hasFill()) {
	      var fillOpacity = attrs.fillOpacity;
	      if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	        context.globalAlpha = fillOpacity;
	        context.fill();
	        context.globalAlpha = originOpacity;
	      } else {
	        context.fill();
	      }
	    }
	    if (self.hasStroke()) {
	      var lineWidth = attrs.lineWidth;
	      if (lineWidth > 0) {
	        var strokeOpacity = attrs.strokeOpacity;
	        if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {
	          context.globalAlpha = strokeOpacity;
	        }
	        context.stroke();
	      }
	    }
	  };

	  Shape.prototype.getBBox = function getBBox() {
	    var bbox = this._attrs.bbox;
	    if (!bbox) {
	      bbox = this.calculateBox();
	      if (bbox) {
	        bbox.x = bbox.minX;
	        bbox.y = bbox.minY;
	        bbox.width = bbox.maxX - bbox.minX;
	        bbox.height = bbox.maxY - bbox.minY;
	      }
	      this._attrs.bbox = bbox;
	    }
	    return bbox;
	  };

	  Shape.prototype.calculateBox = function calculateBox() {
	    return null;
	  };

	  Shape.prototype.createPath = function createPath() {};

	  return Shape;
	}(Element);

	module.exports = Shape;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	var isArray = __webpack_require__(10);

	var each = function each(elements, func) {
	  if (!elements) {
	    return;
	  }
	  var rst = void 0;
	  if (isArray(elements)) {
	    for (var i = 0, len = elements.length; i < len; i++) {
	      rst = func(elements[i], i);
	      if (rst === false) {
	        break;
	      }
	    }
	  } else if (isObject(elements)) {
	    for (var k in elements) {
	      if (elements.hasOwnProperty(k)) {
	        rst = func(elements[k], k);
	        if (rst === false) {
	          break;
	        }
	      }
	    }
	  }
	};

	module.exports = each;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports) {

	/**
	 * 2 Dimensional Vector
	 * @module vector2
	 */
	module.exports = {
	  /**
	   * Creates a new, empty vector2
	   *
	   * @return {vector2} a new 2D vector
	   */
	  create: function create() {
	    return [0, 0];
	  },

	  /**
	   * Calculates the length of a vector2
	   *
	   * @param {vector2} v vector to calculate length of
	   * @return {Number} length of v
	   */
	  length: function length(v) {
	    var x = v[0];
	    var y = v[1];
	    return Math.sqrt(x * x + y * y);
	  },

	  /**
	   * Normalize a vector2
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v vector to normalize
	   * @return {vector2} out
	   */
	  normalize: function normalize(out, v) {
	    var len = this.length(v);
	    if (len === 0) {
	      out[0] = 0;
	      out[1] = 0;
	    } else {
	      out[0] = v[0] / len;
	      out[1] = v[1] / len;
	    }

	    return out;
	  },

	  /**
	   * Adds two vector2's
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {vector2} out
	   */
	  add: function add(out, v1, v2) {
	    out[0] = v1[0] + v2[0];
	    out[1] = v1[1] + v2[1];
	    return out;
	  },

	  /**
	   * Subtracts vector v2 from vector v1
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {vector2} out
	   */
	  sub: function sub(out, v1, v2) {
	    out[0] = v1[0] - v2[0];
	    out[1] = v1[1] - v2[1];
	    return out;
	  },

	  /**
	   * Scales a vector2 by a scalar number
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v the vector to scale
	   * @param {Number} s amount to scale the vector by
	   * @return {vector2} out
	   */
	  scale: function scale(out, v, s) {
	    out[0] = v[0] * s;
	    out[1] = v[1] * s;
	    return out;
	  },

	  /**
	   * Calculates the dot product of two vector2's
	   *
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {Number} dot product of v1 and v2
	   */
	  dot: function dot(v1, v2) {
	    return v1[0] * v2[0] + v1[1] * v2[1];
	  },

	  /**
	   * Calculates the direction of two vector2's
	   *
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {Boolean} the direction of v1 and v2
	   */
	  direction: function direction(v1, v2) {
	    return v1[0] * v2[1] - v2[0] * v1[1];
	  },

	  /**
	   * Calculates the angle of two vector2's
	   *
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {Number} angle of v1 and v2
	   */
	  angle: function angle(v1, v2) {
	    var theta = this.dot(v1, v2) / (this.length(v1) * this.length(v2));
	    return Math.acos(theta);
	  },

	  /**
	   * Calculates the angle of two vector2's with direction
	   *
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @param {Boolean} direction the direction of two vector2's
	   * @return {Number} angle of v1 and v2
	   */
	  angleTo: function angleTo(v1, v2, direction) {
	    var angle = this.angle(v1, v2);
	    var angleLargeThanPI = this.direction(v1, v2) >= 0;
	    if (direction) {
	      if (angleLargeThanPI) {
	        return Math.PI * 2 - angle;
	      }

	      return angle;
	    }

	    if (angleLargeThanPI) {
	      return angle;
	    }
	    return Math.PI * 2 - angle;
	  },

	  /**
	   * whether a vector2 is zero vector
	   *
	   * @param  {vector2} v vector to calculate
	   * @return {Boolean}   is or not a zero vector
	   */
	  zero: function zero(v) {
	    return v[0] === 0 && v[1] === 0;
	  },

	  /**
	   * Calculates the euclidian distance between two vector2's
	   *
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {Number} distance between a and b
	   */
	  distance: function distance(v1, v2) {
	    var x = v2[0] - v1[0];
	    var y = v2[1] - v1[1];
	    return Math.sqrt(x * x + y * y);
	  },

	  /**
	   * Creates a new vector2 initialized with values from an existing vector
	   *
	   * @param {vector2} v vector to clone
	   * @return {Array} a new 2D vector
	   */
	  clone: function clone(v) {
	    return [v[0], v[1]];
	  },

	  /**
	   * Return the minimum of two vector2's
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {vector2} out
	   */
	  min: function min(out, v1, v2) {
	    out[0] = Math.min(v1[0], v2[0]);
	    out[1] = Math.min(v1[1], v2[1]);
	    return out;
	  },

	  /**
	   * Return the maximum of two vector2's
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v1 the first operand
	   * @param {vector2} v2 the second operand
	   * @return {vector2} out
	   */
	  max: function max(out, v1, v2) {
	    out[0] = Math.max(v1[0], v2[0]);
	    out[1] = Math.max(v1[1], v2[1]);
	    return out;
	  },

	  /**
	   * Transforms the vector2 with a mat2d
	   *
	   * @param {vector2} out the receiving vector
	   * @param {vector2} v the vector to transform
	   * @param {mat2d} m matrix to transform with
	   * @return {vector2} out
	   */
	  transformMat2d: function transformMat2d(out, v, m) {
	    var x = v[0];
	    var y = v[1];
	    out[0] = m[0] * x + m[2] * y + m[4];
	    out[1] = m[1] * x + m[3] * y + m[5];
	    return out;
	  }
	};

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Base = __webpack_require__(29);
	var GROUP_ATTRS = ['color', 'size', 'shape'];
	var FIELD_ORIGIN = '_origin';
	var FIELD_ORIGIN_Y = '_originY';
	var Global = __webpack_require__(1);
	var Attr = __webpack_require__(53);
	var GeometryShape = __webpack_require__(8);
	var Adjust = __webpack_require__(22);

	function parseFields(field) {
	  if (Util.isArray(field)) {
	    return field;
	  }
	  if (Util.isString(field)) {
	    return field.split('*');
	  }
	  return [field];
	}

	/**
	 * The parent class for Geometry
	 * @class Geom
	 */

	var Geom = function (_Base) {
	  _inherits(Geom, _Base);

	  function Geom() {
	    _classCallCheck(this, Geom);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Geom.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * geometry type
	       * @type {String}
	       */
	      type: null,
	      /**
	       * the data of geometry
	       * @type {Array}
	       */
	      data: null,
	      /**
	       * the attrs of geo,etry
	       * @type {Object}
	       */
	      attrs: {},

	      scales: {},

	      /**
	       * group for storing the shapes
	       * @type {Canvas}
	       */
	      container: null,
	      /**
	       * style options
	       * @type {Object}
	       */
	      styleOptions: null,

	      chart: null,

	      shapeType: '',

	      /**
	       * wether to generate key points for each shape
	       * @protected
	       * @type {Boolean}
	       */
	      generatePoints: false,

	      attrOptions: {},

	      sortable: false,
	      startOnZero: true,
	      visible: true,
	      connectNulls: false
	    };
	  };

	  Geom.prototype.init = function init() {
	    var self = this;
	    self._initAttrs();
	    var dataArray = self._processData();
	    if (self.get('adjust')) {
	      self._adjustData(dataArray);
	    }
	    self.set('dataArray', dataArray);
	  };

	  Geom.prototype._getGroupScales = function _getGroupScales() {
	    var self = this;
	    var scales = [];
	    Util.each(GROUP_ATTRS, function (attrName) {
	      var attr = self.getAttr(attrName);
	      if (attr) {
	        var attrScales = attr.scales;
	        Util.each(attrScales, function (scale) {
	          if (scale && scale.isCategory && scales.indexOf(scale) === -1) {
	            scales.push(scale);
	          }
	        });
	      }
	    });
	    return scales;
	  };

	  Geom.prototype._groupData = function _groupData(data) {
	    var self = this;
	    var colDefs = self.get('colDefs');
	    var groupScales = self._getGroupScales();
	    if (groupScales.length) {
	      var appendConditions = {};
	      var names = [];
	      Util.each(groupScales, function (scale) {
	        var field = scale.field;
	        names.push(field);
	        if (colDefs && colDefs[field] && colDefs[field].values) {
	          // users have defined
	          appendConditions[scale.field] = colDefs[field].values;
	        }
	      });
	      return Util.Array.group(data, names, appendConditions);
	    }
	    return [data];
	  };

	  Geom.prototype._setAttrOptions = function _setAttrOptions(attrName, attrCfg) {
	    var options = this.get('attrOptions');
	    options[attrName] = attrCfg;
	  };

	  Geom.prototype._createAttrOption = function _createAttrOption(attrName, field, cfg, defaultValues) {
	    var attrCfg = {};
	    attrCfg.field = field;
	    if (cfg) {
	      if (Util.isFunction(cfg)) {
	        attrCfg.callback = cfg;
	      } else {
	        attrCfg.values = cfg;
	      }
	    } else {
	      attrCfg.values = defaultValues;
	    }
	    this._setAttrOptions(attrName, attrCfg);
	  };

	  Geom.prototype._initAttrs = function _initAttrs() {
	    var self = this;
	    var attrs = self.get('attrs');
	    var attrOptions = self.get('attrOptions');
	    var coord = self.get('coord');

	    for (var type in attrOptions) {
	      if (attrOptions.hasOwnProperty(type)) {
	        var option = attrOptions[type];
	        var className = Util.upperFirst(type);
	        var fields = parseFields(option.field);
	        if (type === 'position') {
	          option.coord = coord;
	        }
	        var scales = [];
	        for (var i = 0, len = fields.length; i < len; i++) {
	          var field = fields[i];
	          var scale = self._createScale(field);
	          scales.push(scale);
	        }
	        if (type === 'position') {
	          var yScale = scales[1];
	          if (coord.type === 'polar' && coord.transposed && self.hasAdjust('stack')) {
	            if (yScale.values.length) {
	              yScale.change({
	                nice: false,
	                min: 0,
	                max: Math.max.apply(null, yScale.values)
	              });
	            }
	          }
	        }

	        option.scales = scales;
	        var attr = new Attr[className](option);
	        attrs[type] = attr;
	      }
	    }
	  };

	  Geom.prototype._createScale = function _createScale(field) {
	    var scales = this.get('scales');
	    var scale = scales[field];
	    if (!scale) {
	      scale = this.get('chart').createScale(field);
	      scales[field] = scale;
	    }
	    return scale;
	  };

	  Geom.prototype._processData = function _processData() {
	    var self = this;
	    var data = this.get('data');
	    var dataArray = [];
	    var groupedArray = this._groupData(data);
	    for (var i = 0, len = groupedArray.length; i < len; i++) {
	      var subData = groupedArray[i];
	      var tempData = self._saveOrigin(subData);
	      if (this.hasAdjust('dodge')) {
	        self._numberic(tempData);
	      }
	      dataArray.push(tempData);
	    }
	    return dataArray;
	  };

	  Geom.prototype._saveOrigin = function _saveOrigin(data) {
	    var rst = [];
	    for (var i = 0, len = data.length; i < len; i++) {
	      var origin = data[i];
	      var obj = {};
	      for (var k in origin) {
	        obj[k] = origin[k];
	      }
	      obj[FIELD_ORIGIN] = origin;
	      rst.push(obj);
	    }
	    return rst;
	  };

	  Geom.prototype._numberic = function _numberic(data) {
	    var positionAttr = this.getAttr('position');
	    var scales = positionAttr.scales;
	    for (var j = 0, len = data.length; j < len; j++) {
	      var obj = data[j];
	      var count = Math.min(2, scales.length);
	      for (var i = 0; i < count; i++) {
	        var scale = scales[i];
	        if (scale.isCategory) {
	          var field = scale.field;
	          obj[field] = scale.translate(obj[field]);
	        }
	      }
	    }
	  };

	  Geom.prototype._adjustData = function _adjustData(dataArray) {
	    var self = this;
	    var adjust = self.get('adjust');
	    if (adjust) {
	      var adjustType = Util.upperFirst(adjust.type);
	      if (!Adjust[adjustType]) {
	        throw new Error('not support such adjust : ' + adjust);
	      }

	      var xScale = self.getXScale();
	      var yScale = self.getYScale();
	      var cfg = Util.mix({
	        xField: xScale.field,
	        yField: yScale.field
	      }, adjust);
	      var adjustObject = new Adjust[adjustType](cfg);
	      adjustObject.processAdjust(dataArray);
	      if (adjustType === 'Stack') {
	        self._updateStackRange(yScale.field, yScale, dataArray);
	      }
	    }
	  };

	  Geom.prototype._updateStackRange = function _updateStackRange(field, scale, dataArray) {
	    var mergeArray = Util.Array.merge(dataArray);
	    var min = scale.min;
	    var max = scale.max;
	    for (var i = 0, len = mergeArray.length; i < len; i++) {
	      var obj = mergeArray[i];
	      var tmpMin = Math.min.apply(null, obj[field]);
	      var tmpMax = Math.max.apply(null, obj[field]);
	      if (tmpMin < min) {
	        min = tmpMin;
	      }
	      if (tmpMax > max) {
	        max = tmpMax;
	      }
	    }
	    if (min < scale.min || max > scale.max) {
	      scale.change({
	        min: min,
	        max: max
	      });
	    }
	  };

	  Geom.prototype._sort = function _sort(mappedArray) {
	    var self = this;
	    var xScale = self.getXScale();
	    var field = xScale.field,
	        type = xScale.type,
	        isLinear = xScale.isLinear;

	    if ((isLinear || type === 'timeCat') && xScale.values.length > 1) {
	      // sort only for linear and timeCat type.
	      Util.each(mappedArray, function (itemArr) {
	        itemArr.sort(function (obj1, obj2) {
	          if (type === 'timeCat') {
	            return xScale._toTimeStamp(obj1[FIELD_ORIGIN][field]) - xScale._toTimeStamp(obj2[FIELD_ORIGIN][field]);
	          }
	          return xScale.translate(obj1[FIELD_ORIGIN][field]) - xScale.translate(obj2[FIELD_ORIGIN][field]);
	        });
	      });
	    }
	    self.set('hasSorted', true);
	    self.set('dataArray', mappedArray);
	  };

	  Geom.prototype.paint = function paint() {
	    var self = this;
	    var dataArray = self.get('dataArray');
	    var mappedArray = [];
	    var shapeFactory = self.getShapeFactory();
	    shapeFactory.setCoord(self.get('coord'));
	    self._beforeMapping(dataArray);
	    for (var i = 0, len = dataArray.length; i < len; i++) {
	      var data = dataArray[i];
	      if (data.length) {
	        data = self._mapping(data);
	        mappedArray.push(data);
	        self.draw(data, shapeFactory);
	      }
	    }
	    self.set('dataArray', mappedArray);
	  };

	  Geom.prototype.getShapeFactory = function getShapeFactory() {
	    var shapeFactory = this.get('shapeFactory');
	    if (!shapeFactory) {
	      var shapeType = this.get('shapeType');
	      shapeFactory = GeometryShape.getShapeFactory(shapeType);
	      this.set('shapeFactory', shapeFactory);
	    }
	    return shapeFactory;
	  };

	  Geom.prototype._mapping = function _mapping(data) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var yField = self.getYScale().field;
	    var mappedData = [];
	    for (var i = 0, len = data.length; i < len; i++) {
	      var record = data[i];
	      var newRecord = {};
	      newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];
	      newRecord.points = record.points;
	      // 避免
	      newRecord[FIELD_ORIGIN_Y] = record[yField];
	      for (var k in attrs) {
	        if (attrs.hasOwnProperty(k)) {
	          var attr = attrs[k];
	          var names = attr.names;
	          var values = self._getAttrValues(attr, record);
	          if (names.length > 1) {
	            for (var j = 0, _len = values.length; j < _len; j++) {
	              var val = values[j];
	              var name = names[j];
	              newRecord[name] = Util.isArray(val) && val.length === 1 ? val[0] : val;
	            }
	          } else {
	            newRecord[names[0]] = values.length === 1 ? values[0] : values;
	          }
	        }
	      }
	      mappedData.push(newRecord);
	    }

	    return mappedData;
	  };

	  Geom.prototype._getAttrValues = function _getAttrValues(attr, record) {
	    var scales = attr.scales;
	    var params = [];
	    for (var i = 0, len = scales.length; i < len; i++) {
	      var scale = scales[i];
	      var field = scale.field;
	      if (scale.type === 'identity') {
	        params.push(scale.value);
	      } else {
	        params.push(record[field]);
	      }
	    }
	    var values = attr.mapping.apply(attr, params);
	    return values;
	  };

	  Geom.prototype.getAttrValue = function getAttrValue(attrName, record) {
	    var attr = this.getAttr(attrName);
	    var rst = null;
	    if (attr) {
	      var values = this._getAttrValues(attr, record);
	      rst = values[0];
	    }
	    return rst;
	  };

	  Geom.prototype._beforeMapping = function _beforeMapping(dataArray) {
	    var self = this;
	    if (self.get('sortable')) {
	      self._sort(dataArray);
	    }
	    if (self.get('generatePoints')) {
	      Util.each(dataArray, function (data) {
	        self._generatePoints(data);
	      });
	    }
	  };

	  Geom.prototype.isInCircle = function isInCircle() {
	    var coord = this.get('coord');
	    return coord && coord.isPolar;
	  };

	  Geom.prototype.getCallbackCfg = function getCallbackCfg(fields, cfg, origin) {
	    if (!fields) {
	      return cfg;
	    }
	    var tmpCfg = {};
	    var params = fields.map(function (field) {
	      return origin[field];
	    });
	    Util.each(cfg, function (v, k) {
	      if (Util.isFunction(v)) {
	        tmpCfg[k] = v.apply(null, params);
	      } else {
	        tmpCfg[k] = v;
	      }
	    });
	    return tmpCfg;
	  };

	  Geom.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var self = this;
	    var isInCircle = self.isInCircle();
	    var cfg = {
	      origin: obj,
	      x: obj.x,
	      y: obj.y,
	      color: obj.color,
	      size: obj.size,
	      shape: obj.shape,
	      isInCircle: isInCircle,
	      opacity: obj.opacity
	    };
	    var styleOptions = self.get('styleOptions');
	    if (styleOptions && styleOptions.style) {
	      cfg.style = self.getCallbackCfg(styleOptions.fields, styleOptions.style, obj[FIELD_ORIGIN]);
	    }
	    if (self.get('generatePoints')) {
	      cfg.points = obj.points;
	    }
	    if (isInCircle) {
	      cfg.center = self.get('coord').center;
	    }
	    return cfg;
	  };

	  Geom.prototype.draw = function draw(data, shapeFactory) {
	    var self = this;
	    var container = self.get('container');
	    var yScale = self.getYScale();
	    Util.each(data, function (obj, index) {
	      if (yScale && Util.isNil(obj._origin[yScale.field])) {
	        return;
	      }
	      obj.index = index;
	      var cfg = self.getDrawCfg(obj);
	      var shape = obj.shape;
	      self.drawShape(shape, obj, cfg, container, shapeFactory);
	    });
	  };

	  Geom.prototype.drawShape = function drawShape(shape, shapeData, cfg, container, shapeFactory) {
	    var gShape = shapeFactory.drawShape(shape, cfg, container);

	    if (gShape) {
	      Util.each([].concat(gShape), function (s) {
	        s.set('origin', shapeData);
	      });
	    }
	  };

	  Geom.prototype._generatePoints = function _generatePoints(data) {
	    var self = this;
	    var shapeFactory = self.getShapeFactory();
	    var shapeAttr = self.getAttr('shape');
	    for (var i = 0, len = data.length; i < len; i++) {
	      var obj = data[i];
	      var cfg = self.createShapePointsCfg(obj);
	      var shape = shapeAttr ? self._getAttrValues(shapeAttr, obj) : null;
	      var points = shapeFactory.getShapePoints(shape, cfg);
	      obj.points = points;
	    }
	  };

	  /**
	   * get the info of each shape
	   * @protected
	   * @param  {Object} obj the data item
	   * @return {Object} cfg return the result
	   */


	  Geom.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var x = this._normalizeValues(obj[xScale.field], xScale);
	    var y = void 0;

	    if (yScale) {
	      y = this._normalizeValues(obj[yScale.field], yScale);
	    } else {
	      y = obj.y ? obj.y : 0.1;
	    }

	    return {
	      x: x,
	      y: y,
	      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined
	    };
	  };

	  Geom.prototype.getYMinValue = function getYMinValue() {
	    var yScale = this.getYScale();
	    var min = yScale.min,
	        max = yScale.max;

	    var value = void 0;

	    if (this.get('startOnZero')) {
	      if (max <= 0 && min <= 0) {
	        value = max;
	      } else {
	        value = min >= 0 ? min : 0;
	      }
	    } else {
	      value = min;
	    }

	    return value;
	  };

	  Geom.prototype._normalizeValues = function _normalizeValues(values, scale) {
	    var rst = [];
	    if (Util.isArray(values)) {
	      for (var i = 0, len = values.length; i < len; i++) {
	        var v = values[i];
	        rst.push(scale.scale(v));
	      }
	    } else {
	      rst = scale.scale(values);
	    }
	    return rst;
	  };

	  Geom.prototype.getAttr = function getAttr(name) {
	    return this.get('attrs')[name];
	  };

	  Geom.prototype.getXScale = function getXScale() {
	    return this.getAttr('position').scales[0];
	  };

	  Geom.prototype.getYScale = function getYScale() {
	    return this.getAttr('position').scales[1];
	  };

	  Geom.prototype.hasAdjust = function hasAdjust(adjust) {
	    return this.get('adjust') && this.get('adjust').type === adjust;
	  };

	  Geom.prototype._getSnap = function _getSnap(scale, item, arr) {
	    var i = 0;
	    var values = void 0;
	    var yField = this.getYScale().field; // 叠加的维度
	    if (this.hasAdjust('stack') && scale.field === yField) {
	      values = [];
	      arr.forEach(function (obj) {
	        values.push(obj[FIELD_ORIGIN_Y]);
	      });

	      for (var len = values.length; i < len; i++) {
	        if (values[0][0] > item) {
	          break;
	        }
	        if (values[values.length - 1][1] <= item) {
	          i = values.length - 1;
	          break;
	        }
	        if (values[i][0] <= item && values[i][1] > item) {
	          break;
	        }
	      }
	    } else {
	      values = scale.values;
	      values.sort(function (a, b) {
	        return a - b;
	      });
	      for (var _len2 = values.length; i < _len2; i++) {
	        if ((values[0] + values[1]) / 2 > item) {
	          break;
	        }
	        if ((values[i - 1] + values[i]) / 2 <= item && (values[i + 1] + values[i]) / 2 > item) {
	          break;
	        }
	        if ((values[values.length - 2] + values[values.length - 1]) / 2 <= item) {
	          i = values.length - 1;
	          break;
	        }
	      }
	    }
	    var result = values[i];
	    return result;
	  };

	  Geom.prototype.getSnapRecords = function getSnapRecords(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScale = self.getYScale();
	    var xfield = xScale.field;

	    var dataArray = self.get('dataArray');
	    if (!this.get('hasSorted')) {
	      this._sort(dataArray);
	    }

	    var rst = [];
	    var invertPoint = coord.invertPoint(point);
	    var invertPointX = invertPoint.x;
	    if (self.isInCircle() && !coord.transposed && invertPointX > (1 + xScale.rangeMax()) / 2) {
	      invertPointX = xScale.rangeMin();
	    }

	    var xValue = xScale.invert(invertPointX);
	    if (!xScale.isCategory) {
	      xValue = self._getSnap(xScale, xValue);
	    }

	    var tmp = [];

	    dataArray.forEach(function (data) {
	      data.forEach(function (obj) {
	        var originValue = Util.isNil(obj[FIELD_ORIGIN]) ? obj[xfield] : obj[FIELD_ORIGIN][xfield];
	        if (self._isEqual(originValue, xValue, xScale)) {
	          tmp.push(obj);
	        }
	      });
	    });

	    // special for pie chart
	    if (this.hasAdjust('stack') && coord.isPolar && coord.transposed && xScale.values.length === 1) {
	      if (invertPointX >= 0 && invertPointX <= 1) {
	        var yValue = yScale.invert(invertPoint.y);
	        yValue = self._getSnap(yScale, yValue, tmp);
	        tmp.forEach(function (obj) {
	          if (Util.isArray(yValue) ? obj[FIELD_ORIGIN_Y].toString() === yValue.toString() : obj[FIELD_ORIGIN_Y] === yValue) {
	            rst.push(obj);
	          }
	        });
	      }
	    } else {
	      rst = tmp;
	    }

	    return rst;
	  };

	  Geom.prototype._isEqual = function _isEqual(originValue, value, scale) {
	    if (scale.type === 'timeCat') {
	      return scale._toTimeStamp(originValue) === value;
	    }
	    return value === originValue;
	  };

	  Geom.prototype.position = function position(field) {
	    this._setAttrOptions('position', {
	      field: field
	    });
	    return this;
	  };

	  Geom.prototype.color = function color(field, values) {
	    this._createAttrOption('color', field, values, Global.colors);
	    return this;
	  };

	  Geom.prototype.size = function size(field, values) {
	    this._createAttrOption('size', field, values, Global.sizes);
	    return this;
	  };

	  Geom.prototype.shape = function shape(field, values) {
	    var type = this.get('type');
	    var shapes = Global.shapes[type] || [];
	    this._createAttrOption('shape', field, values, shapes);
	    return this;
	  };

	  Geom.prototype.style = function style(field, cfg) {
	    var styleOptions = this.get('styleOptions');
	    if (!styleOptions) {
	      styleOptions = {};
	      this.set('styleOptions', styleOptions);
	    }
	    if (Util.isObject(field)) {
	      cfg = field;
	      field = null;
	    }
	    var fields = void 0;
	    if (field) {
	      fields = parseFields(field);
	    }
	    styleOptions.fields = fields;
	    styleOptions.style = cfg;
	    return this;
	  };

	  Geom.prototype.adjust = function adjust(type) {
	    if (Util.isString(type)) {
	      type = { type: type };
	    }
	    this.set('adjust', type);
	    return this;
	  };

	  Geom.prototype.animate = function animate(cfg) {
	    this.set('animateCfg', cfg);
	    return this;
	  };

	  Geom.prototype.reset = function reset() {
	    this.set('attrOptions', {});
	    this.set('adjust', null);
	    this.clearInner();
	  };

	  Geom.prototype.clearInner = function clearInner() {
	    var container = this.get('container');
	    if (container) {
	      container.clear();
	      container.setMatrix([1, 0, 0, 1, 0, 0]);
	    }
	    container && container.clear();
	    this.set('attrs', {});
	    this.set('groupScales', null);
	    this.set('xDistance', null);
	  };

	  Geom.prototype.clear = function clear() {
	    this.clearInner();
	    this.set('scales', {});
	  };

	  Geom.prototype.destroy = function destroy() {
	    this.clear();
	    _Base.prototype.destroy.call(this);
	  };

	  Geom.prototype._display = function _display(visible) {
	    this.set('visible', visible);
	    var container = this.get('container');
	    var canvas = container.get('canvas');
	    container.set('visible', visible);
	    canvas.draw();
	  };

	  Geom.prototype.show = function show() {
	    this._display(true);
	  };

	  Geom.prototype.hide = function hide() {
	    this._display(false);
	  };

	  return Geom;
	}(Base);

	module.exports = Geom;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {

	// isFinite,
	var isNil = function isNil(value) {
	  /**
	   * isNil(null) => true
	   * isNil() => true
	   */
	  return value === null || value === undefined;
	};

	module.exports = isNil;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

	var toString = {}.toString;
	var isType = function isType(value, type) {
	  return toString.call(value) === '[object ' + type + ']';
	};

	module.exports = isType;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(1);

	var Shape = {};

	var ShapeBase = {
	  _coord: null,
	  /**
	   * draw the shape
	   * @param {Object} cfg options
	   * @param {Object} container container to store the shapes
	   */
	  draw: function draw(cfg, container) {
	    if (this.drawShape) {
	      this.drawShape(cfg, container);
	    }
	  },

	  /**
	   * set the coordinate instance
	   * @param {Coord} coord coordinate instance
	   */
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },

	  /**
	   * convert the normalized value to the canvas position
	   * @param  {point} point the point to convert
	   * @return {point} point return the result
	   */
	  parsePoint: function parsePoint(point) {
	    var coord = this._coord;
	    if (coord.isPolar) {
	      if (point.x === 1) point.x = 0.9999999;
	      if (point.y === 1) point.y = 0.9999999;
	    }
	    return coord.convertPoint(point);
	  },

	  /**
	   * convert the normalized value to the canvas position
	   * @param  {points} points the array that store the points
	   * @return {points} points return the result
	   */
	  parsePoints: function parsePoints(points) {
	    if (!points) return false;
	    var self = this;
	    var rst = [];
	    points.forEach(function (point) {
	      rst.push(self.parsePoint(point));
	    });
	    return rst;
	  }
	};

	var ShapeFactoryBase = {
	  defaultShapeType: null,
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },
	  getShape: function getShape(type) {
	    var self = this;
	    if (Util.isArray(type)) {
	      type = type[0];
	    }
	    var shape = self[type] || self[self.defaultShapeType];
	    shape._coord = self._coord;
	    return shape;
	  },
	  getShapePoints: function getShapePoints(type, cfg) {
	    var shape = this.getShape(type);
	    var fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;
	    var points = fn(cfg);
	    return points;
	  },
	  getDefaultPoints: function getDefaultPoints() /* cfg */{
	    return [];
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    if (!cfg.color) {
	      cfg.color = Global.colors[0];
	    }
	    return shape.draw(cfg, container);
	  }
	};

	Shape.registerFactory = function (factoryName, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var geomObj = Util.mix({}, ShapeFactoryBase, cfg);
	  Shape[className] = geomObj;
	  geomObj.name = factoryName;
	  return geomObj;
	};

	Shape.registerShape = function (factoryName, shapeType, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var factory = Shape[className];
	  var shapeObj = Util.mix({}, ShapeBase, cfg);
	  factory[shapeType] = shapeObj;
	  return shapeObj;
	};

	Shape.registShape = Shape.registerShape;

	Shape.getShapeFactory = function (factoryName) {
	  var self = this;
	  factoryName = factoryName || 'point';
	  var className = Util.upperFirst(factoryName);
	  return self[className];
	};

	module.exports = Shape;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	var G = {
	  Canvas: __webpack_require__(68),
	  Group: __webpack_require__(31),
	  Shape: __webpack_require__(2),
	  Matrix: __webpack_require__(23),
	  Vector2: __webpack_require__(4)
	};

	__webpack_require__(69);
	__webpack_require__(70);
	__webpack_require__(71);
	__webpack_require__(72);
	__webpack_require__(73);
	__webpack_require__(74);
	__webpack_require__(75);
	__webpack_require__(76);
	__webpack_require__(77);

	module.exports = G;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	var isType = __webpack_require__(7);

	var isArray = Array.isArray ? Array.isArray : function (value) {
	  return isType(value, 'Array');
	};

	module.exports = isArray;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	var Vector2 = __webpack_require__(4);

	var start = Vector2.create();
	var end = Vector2.create();
	var extremity = Vector2.create();

	function getCubicBezierXYatT(startPt, controlPt1, controlPt2, endPt, T) {
	  var x = CubicN(T, startPt.x, controlPt1.x, controlPt2.x, endPt.x);
	  var y = CubicN(T, startPt.y, controlPt1.y, controlPt2.y, endPt.y);
	  return {
	    x: x,
	    y: y
	  };
	}
	// cubic helper formula at T distance
	function CubicN(T, a, b, c, d) {
	  var t2 = T * T;
	  var t3 = t2 * T;
	  return a + (-a * 3 + T * (3 * a - a * T)) * T + (3 * b + T * (-6 * b + b * 3 * T)) * T + (c * 3 - c * 3 * T) * t2 + d * t3;
	}

	function cubicBezierBounds(c) {
	  var minX = Infinity;
	  var maxX = -Infinity;
	  var minY = Infinity;
	  var maxY = -Infinity;
	  var s = {
	    x: c[0],
	    y: c[1]
	  };
	  var c1 = {
	    x: c[2],
	    y: c[3]
	  };
	  var c2 = {
	    x: c[4],
	    y: c[5]
	  };
	  var e = {
	    x: c[6],
	    y: c[7]
	  };
	  for (var t = 0; t < 100; t++) {
	    var pt = getCubicBezierXYatT(s, c1, c2, e, t / 100);
	    if (pt.x < minX) {
	      minX = pt.x;
	    }
	    if (pt.x > maxX) {
	      maxX = pt.x;
	    }
	    if (pt.y < minY) {
	      minY = pt.y;
	    }
	    if (pt.y > maxY) {
	      maxY = pt.y;
	    }
	  }
	  return {
	    minX: minX,
	    minY: minY,
	    maxX: maxX,
	    maxY: maxY
	  };
	}

	module.exports = {
	  getBBoxFromPoints: function getBBoxFromPoints(points) {
	    if (points.length === 0) {
	      return;
	    }
	    var p = points[0];
	    var left = p.x;
	    var right = p.x;
	    var top = p.y;
	    var bottom = p.y;
	    var len = points.length;

	    for (var i = 1; i < len; i++) {
	      p = points[i];
	      left = Math.min(left, p.x);
	      right = Math.max(right, p.x);
	      top = Math.min(top, p.y);
	      bottom = Math.max(bottom, p.y);
	    }

	    return {
	      minX: left,
	      minY: top,
	      maxX: right,
	      maxY: bottom
	    };
	  },
	  getBBoxFromLine: function getBBoxFromLine(x0, y0, x1, y1) {
	    return {
	      minX: Math.min(x0, x1),
	      minY: Math.min(y0, y1),
	      maxX: Math.max(x0, x1),
	      maxY: Math.max(y0, y1)
	    };
	  },
	  getBBoxFromArc: function getBBoxFromArc(x, y, r, startAngle, endAngle, anticlockwise) {
	    var diff = Math.abs(startAngle - endAngle);
	    if (diff % Math.PI * 2 < 1e-4 && diff > 1e-4) {
	      // Is a circle
	      return {
	        minX: x - r,
	        minY: y - r,
	        maxX: x + r,
	        maxY: y + r
	      };
	    }

	    start[0] = Math.cos(startAngle) * r + x;
	    start[1] = Math.sin(startAngle) * r + y;

	    end[0] = Math.cos(endAngle) * r + x;
	    end[1] = Math.sin(endAngle) * r + y;
	    var min = [0, 0];
	    var max = [0, 0];

	    Vector2.min(min, start, end);
	    Vector2.max(max, start, end);

	    // Thresh to [0, Math.PI * 2]
	    startAngle = startAngle % (Math.PI * 2);
	    if (startAngle < 0) {
	      startAngle = startAngle + Math.PI * 2;
	    }
	    endAngle = endAngle % (Math.PI * 2);
	    if (endAngle < 0) {
	      endAngle = endAngle + Math.PI * 2;
	    }

	    if (startAngle > endAngle && !anticlockwise) {
	      endAngle += Math.PI * 2;
	    } else if (startAngle < endAngle && anticlockwise) {
	      startAngle += Math.PI * 2;
	    }
	    if (anticlockwise) {
	      var tmp = endAngle;
	      endAngle = startAngle;
	      startAngle = tmp;
	    }

	    for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	      if (angle > startAngle) {
	        extremity[0] = Math.cos(angle) * r + x;
	        extremity[1] = Math.sin(angle) * r + y;

	        Vector2.min(min, extremity, min);
	        Vector2.max(max, extremity, max);
	      }
	    }

	    return {
	      minX: min[0],
	      minY: min[1],
	      maxX: max[0],
	      maxY: max[1]
	    };
	  },
	  getBBoxFromBezierGroup: function getBBoxFromBezierGroup(points) {
	    var minX = Infinity;
	    var maxX = -Infinity;
	    var minY = Infinity;
	    var maxY = -Infinity;
	    for (var i = 0, len = points.length; i < len; i++) {
	      var bbox = cubicBezierBounds(points[i]);
	      if (bbox.minX < minX) {
	        minX = bbox.minX;
	      }
	      if (bbox.maxX > maxX) {
	        maxX = bbox.maxX;
	      }
	      if (bbox.minY < minY) {
	        minY = bbox.minY;
	      }
	      if (bbox.maxY > maxY) {
	        maxY = bbox.maxY;
	      }
	    }

	    return {
	      minX: minX,
	      minY: minY,
	      maxX: maxX,
	      maxY: maxY
	    };
	  }
	};

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);

	var KEYWORDS_PERCENT = {
	  min: 0,
	  median: 0.5,
	  max: 1
	};

	var GuideBase = function () {
	  GuideBase.prototype._initDefaultCfg = function _initDefaultCfg() {};

	  function GuideBase(cfg) {
	    _classCallCheck(this, GuideBase);

	    this._initDefaultCfg();
	    Util.deepMix(this, cfg);
	  }

	  GuideBase.prototype._getNormalizedValue = function _getNormalizedValue(val, scale) {
	    var rst = void 0;
	    if (Util.isNil(KEYWORDS_PERCENT[val])) {
	      rst = scale.scale(val);
	    } else {
	      rst = KEYWORDS_PERCENT[val];
	    }
	    return rst;
	  };

	  GuideBase.prototype.parsePercentPoint = function parsePercentPoint(coord, position) {
	    var xPercent = parseFloat(position[0]) / 100;
	    var yPercent = parseFloat(position[1]) / 100;
	    var start = coord.start;
	    var end = coord.end;
	    var width = Math.abs(start.x - end.x);
	    var height = Math.abs(start.y - end.y);
	    var x = width * xPercent + Math.min(start.x, end.x);
	    var y = height * yPercent + Math.min(start.y, end.y);
	    return {
	      x: x,
	      y: y
	    };
	  };

	  GuideBase.prototype.parsePoint = function parsePoint(coord, position) {
	    var self = this;
	    var xScale = self.xScale;
	    var yScales = self.yScales;
	    if (Util.isFunction(position)) {
	      position = position(xScale, yScales); // position 必须是对象
	    }

	    // 如果数据格式是 ['50%', '50%'] 的格式
	    if (Util.isString(position[0]) && position[0].indexOf('%') !== -1) {
	      return this.parsePercentPoint(coord, position);
	    }

	    var x = self._getNormalizedValue(position[0], xScale);
	    var y = self._getNormalizedValue(position[1], yScales[0]);

	    var point = coord.convertPoint({ x: x, y: y });
	    if (self.limitInPlot) {
	      // limit in chart plotRange
	      if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {
	        return point;
	      }
	      return null;
	    }
	    return point;
	  };

	  /**
	   * render the guide component
	   * @param  {Coord} coord  coordinate instance
	   * @param  {Canvas.Group} group the container
	   */


	  GuideBase.prototype.render = function render() /* coord,group */{};

	  GuideBase.prototype.repaint = function repaint() {
	    this.remove();
	    var coord = this.coord,
	        container = this.container,
	        canvas = this.canvas;

	    if (container && !container.isDestroyed()) {
	      this.render(coord, container);
	      canvas.draw();
	    }
	  };

	  GuideBase.prototype.remove = function remove() {
	    var element = this.element;

	    element && element.remove(true);
	  };

	  return GuideBase;
	}();

	module.exports = GuideBase;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var mix = __webpack_require__(15);
	var each = __webpack_require__(3);
	var isObject = __webpack_require__(18);
	var isNil = __webpack_require__(6);

	var Scale = function () {
	  Scale.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'base';
	    /**
	     * 格式化函数,输出文本或者tick时的格式化函数
	     * @type {Function}
	     */
	    this.formatter = null;
	    /**
	     * 输出的值域
	     * @type {Array}
	     */
	    this.range = [0, 1];
	    /**
	     * 度量的标记
	     * @type {Array}
	     */
	    this.ticks = null;
	    /**
	     * 参与度量计算的值，可选项
	     * @type {Array}
	     */
	    this.values = [];
	  };

	  function Scale(cfg) {
	    _classCallCheck(this, Scale);

	    this._initDefaultCfg();
	    mix(this, cfg);
	    this.init();
	  }

	  /**
	   * 度量初始化
	   * @protected
	   */

	  Scale.prototype.init = function init() {};

	  /**
	   * 获取该度量的ticks,返回的是多个对象，
	   *   - text: tick 的文本
	   *   - value: 对应的度量转换后的值
	   * <code>
	   *   [
	   *     {text: 0,value:0}
	   *     {text: 1,value:0.2}
	   *     {text: 2,value:0.4}
	   *     {text: 3,value:0.6}
	   *     {text: 4,value:0.8}
	   *     {text: 5,value:1}
	   *   ]
	   * </code>
	   * @param {Number} count 输出tick的个数的近似值，默认是 10
	   * @return {Array} 返回 ticks 数组
	   */

	  Scale.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = self.ticks;
	    var rst = [];
	    each(ticks, function (tick) {
	      var obj = void 0;
	      if (isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: self.getText(tick),
	          tickValue: tick,
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  /**
	   * 获取格式化后的文本
	   * @param  {*} value 输入的数据
	   * @param  {*} key 字段的 key
	   * @return {String} 格式化的文本
	   */

	  Scale.prototype.getText = function getText(value, key) {
	    var formatter = this.formatter;
	    value = formatter ? formatter(value, key) : value;
	    if (isNil(value) || !value.toString) {
	      value = '';
	    }
	    return value.toString();
	  };
	  /**
	   * 输出的值域最小值
	   * @protected
	   * @return {Number} 返回最小的值
	   */

	  Scale.prototype.rangeMin = function rangeMin() {
	    return this.range[0];
	  };
	  /**
	   * 输出的值域最大值
	   * @protected
	   * @return {Number} 返回最大的值
	   */

	  Scale.prototype.rangeMax = function rangeMax() {
	    var range = this.range;
	    return range[range.length - 1];
	  };

	  /**
	   * 度量转换后的结果，翻转回输入域
	   * @param  {Number} value 需要翻转的数值
	   * @return {*} 度量的输入值
	   */

	  Scale.prototype.invert = function invert(value) {
	    return value;
	  };
	  /**
	   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等
	   * @param  {*} value 传入的值
	   * @return {Number} 转换的值
	   */

	  Scale.prototype.translate = function translate(value) {
	    return value;
	  };
	  /**
	   * 进行度量转换
	   * @param  {*} value 输入值
	   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]
	   */

	  Scale.prototype.scale = function scale(value) {
	    return value;
	  };
	  /**
	   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等
	   * @return {Scale} 克隆的度量
	   */

	  Scale.prototype.clone = function clone() {
	    var self = this;
	    var constr = self.constructor;
	    var cfg = {};
	    each(self, function (v, k) {
	      cfg[k] = self[k];
	    });
	    return new constr(cfg);
	  };
	  /**
	   * 更改度量的属性信息
	   * @param  {Object} info 属性信息
	   * @chainable
	   * @return {Scale} 返回自身的引用
	   */

	  Scale.prototype.change = function change(info) {
	    this.ticks = null;
	    mix(this, info);
	    this.init();
	    return this;
	  };

	  return Scale;
	}();

	module.exports = Scale;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

	var isType = __webpack_require__(7);

	var isString = function isString(str) {
	  return isType(str, 'String');
	};

	module.exports = isString;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {

	function _mix(dist, obj) {
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key) && key !== 'constructor' && obj[key] !== undefined) {
	      dist[key] = obj[key];
	    }
	  }
	}

	var mix = function mix(dist, src1, src2, src3) {
	  if (src1) _mix(dist, src1);
	  if (src2) _mix(dist, src2);
	  if (src3) _mix(dist, src3);
	  return dist;
	};

	module.exports = mix;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	/**
	 * @fileOverview the Attribute base class
	 */

	var isString = __webpack_require__(14);
	var isArray = __webpack_require__(10);
	var mix = __webpack_require__(15);
	var each = __webpack_require__(3);

	function toScaleString(scale, value) {
	  if (isString(value)) {
	    return value;
	  }
	  return scale.invert(scale.scale(value));
	}

	/**
	 * 所有视觉通道属性的基类
	 * @class Attr
	 */

	var AttributeBase = function () {
	  function AttributeBase(cfg) {
	    _classCallCheck(this, AttributeBase);

	    /**
	     * 属性的类型
	     * @type {String}
	     */
	    this.type = 'base';

	    /**
	     * 属性的名称
	     * @type {String}
	     */
	    this.name = null;

	    /**
	     * 回调函数
	     * @type {Function}
	     */
	    this.method = null;

	    /**
	     * 备选的值数组
	     * @type {Array}
	     */
	    this.values = [];

	    /**
	     * 属性内部的度量
	     * @type {Array}
	     */
	    this.scales = [];

	    /**
	     * 是否通过线性取值, 如果未指定，则根据数值的类型判定
	     * @type {Boolean}
	     */
	    this.linear = null;

	    mix(this, cfg);
	  }

	  // 获取属性值，将值映射到视觉通道


	  AttributeBase.prototype._getAttrValue = function _getAttrValue(scale, value) {
	    var values = this.values;
	    if (scale.isCategory && !this.linear) {
	      var index = scale.translate(value);
	      return values[index % values.length];
	    }
	    var percent = scale.scale(value);
	    return this.getLinearValue(percent);
	  };

	  /**
	   * 如果进行线性映射，返回对应的映射值
	   * @protected
	   * @param  {Number} percent 百分比
	   * @return {*}  颜色值、形状、大小等
	   */

	  AttributeBase.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var steps = values.length - 1;
	    var step = Math.floor(steps * percent);
	    var leftPercent = steps * percent - step;
	    var start = values[step];
	    var end = step === steps ? start : values[step + 1];
	    var rstValue = start + (end - start) * leftPercent;
	    return rstValue;
	  };

	  /**
	   * 默认的回调函数
	   * @param {*} value 回调函数的值
	   * @type {Function}
	   * @return {Array} 返回映射后的值
	   */

	  AttributeBase.prototype.callback = function callback(value) {
	    var self = this;
	    var scale = self.scales[0];
	    var rstValue = null;
	    if (scale.type === 'identity') {
	      rstValue = scale.value;
	    } else {
	      rstValue = self._getAttrValue(scale, value);
	    }
	    return rstValue;
	  };

	  /**
	   * 根据度量获取属性名
	   * @return {Array} dims of this Attribute
	   */

	  AttributeBase.prototype.getNames = function getNames() {
	    var scales = this.scales;
	    var names = this.names;
	    var length = Math.min(scales.length, names.length);
	    var rst = [];
	    for (var i = 0; i < length; i++) {
	      rst.push(names[i]);
	    }
	    return rst;
	  };

	  /**
	   * 根据度量获取维度名
	   * @return {Array} dims of this Attribute
	   */

	  AttributeBase.prototype.getFields = function getFields() {
	    var scales = this.scales;
	    var rst = [];
	    each(scales, function (scale) {
	      rst.push(scale.field);
	    });
	    return rst;
	  };

	  /**
	   * 根据名称获取度量
	   * @param  {String} name the name of scale
	   * @return {Scale} scale
	   */

	  AttributeBase.prototype.getScale = function getScale(name) {
	    var scales = this.scales;
	    var names = this.names;
	    var index = names.indexOf(name);
	    return scales[index];
	  };

	  /**
	   * 映射数据
	   * @param {*} param1...paramn 多个数值
	   * @return {Array} 映射的值组成的数组
	   */

	  AttributeBase.prototype.mapping = function mapping() {
	    var scales = this.scales;
	    var callback = this.callback;

	    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	      params[_key] = arguments[_key];
	    }

	    var values = params;
	    if (callback) {
	      for (var i = 0, len = params.length; i < len; i++) {
	        params[i] = this._toOriginParam(params[i], scales[i]);
	      }
	      values = callback.apply(this, params);
	    }
	    values = [].concat(values);
	    return values;
	  };

	  // 原始的参数


	  AttributeBase.prototype._toOriginParam = function _toOriginParam(param, scale) {
	    var rst = param;
	    if (!scale.isLinear) {
	      if (isArray(param)) {
	        rst = [];
	        for (var i = 0, len = param.length; i < len; i++) {
	          rst.push(toScaleString(scale, param[i]));
	        }
	      } else {
	        rst = toScaleString(scale, param);
	      }
	    }
	    return rst;
	  };

	  return AttributeBase;
	}();

	module.exports = AttributeBase;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * 判断是否数字
	 * @return {Boolean} 是否数字
	 */
	var isType = __webpack_require__(7);

	var isNumber = function isNumber(value) {
	  return isType(value, 'Number');
	};
	module.exports = isNumber;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports) {

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var isObject = function isObject(value) {
	  /**
	   * isObject({}) => true
	   * isObject([1, 2, 3]) => true
	   * isObject(Function) => true
	   * isObject(null) => false
	   */
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return value !== null && type === 'object' || type === 'function';
	};

	module.exports = isObject;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Base = __webpack_require__(29);
	var Plot = __webpack_require__(50);
	var Util = __webpack_require__(0);
	var Coord = __webpack_require__(51);
	var Geom = __webpack_require__(5);
	var ScaleController = __webpack_require__(59);
	var AxisController = __webpack_require__(65);
	var Global = __webpack_require__(1);

	var _require = __webpack_require__(9),
	    Canvas = _require.Canvas;

	var Helper = __webpack_require__(26);

	function isFullCircle(coord) {
	  var startAngle = coord.startAngle;
	  var endAngle = coord.endAngle;
	  if (!Util.isNil(startAngle) && !Util.isNil(endAngle) && endAngle - startAngle < Math.PI * 2) {
	    return false;
	  }
	  return true;
	}

	function compare(a, b) {
	  return a - b;
	}

	function _isScaleExist(scales, compareScale) {
	  var flag = false;
	  Util.each(scales, function (scale) {
	    var scaleValues = [].concat(scale.values);
	    var compareScaleValues = [].concat(compareScale.values);
	    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort(compare).toString() === compareScaleValues.sort(compare).toString()) {
	      flag = true;
	      return;
	    }
	  });

	  return flag;
	}

	var Chart = function (_Base) {
	  _inherits(Chart, _Base);

	  Chart.initPlugins = function initPlugins() {
	    return {
	      _plugins: [],
	      _cacheId: 0,
	      register: function register(plugins) {
	        var p = this._plugins;
	        [].concat(plugins).forEach(function (plugin) {
	          if (p.indexOf(plugin) === -1) {
	            p.push(plugin);
	          }
	        });

	        this._cacheId++;
	      },
	      unregister: function unregister(plugins) {
	        var p = this._plugins;
	        [].concat(plugins).forEach(function (plugin) {
	          var idx = p.indexOf(plugin);
	          if (idx !== -1) {
	            p.splice(idx, 1);
	          }
	        });

	        this._cacheId++;
	      },
	      clear: function clear() {
	        this._plugins = [];
	        this._cacheId++;
	      },
	      count: function count() {
	        return this._plugins.length;
	      },
	      getAll: function getAll() {
	        return this._plugins;
	      },
	      notify: function notify(chart, hook, args) {
	        var descriptors = this.descriptors(chart);
	        var ilen = descriptors.length;
	        var i = void 0;
	        var descriptor = void 0;
	        var plugin = void 0;
	        var params = void 0;
	        var method = void 0;

	        for (i = 0; i < ilen; ++i) {
	          descriptor = descriptors[i];
	          plugin = descriptor.plugin;
	          method = plugin[hook];
	          if (typeof method === 'function') {
	            params = [chart].concat(args || []);
	            if (method.apply(plugin, params) === false) {
	              return false;
	            }
	          }
	        }

	        return true;
	      },
	      descriptors: function descriptors(chart) {
	        var cache = chart._plugins || (chart._plugins = {});
	        if (cache.id === this._cacheId) {
	          return cache.descriptors;
	        }

	        var plugins = [];
	        var descriptors = [];

	        this._plugins.concat(chart && chart.get('plugins') || []).forEach(function (plugin) {
	          var idx = plugins.indexOf(plugin);
	          if (idx !== -1) {
	            return;
	          }

	          plugins.push(plugin);
	          descriptors.push({
	            plugin: plugin
	          });
	        });

	        cache.descriptors = descriptors;
	        cache.id = this._cacheId;
	        return descriptors;
	      }
	    };
	  };

	  Chart.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * the id of canvas
	       * @type {String}
	       */
	      id: null,
	      /**
	       * padding
	       * @type {Array|Number}
	       */
	      padding: Global.padding,

	      /**
	       * data
	       * @type {Array}
	       */
	      data: null,
	      /**
	       * scales of chart
	       * @type {Object}
	       */
	      scales: {},
	      /**
	       * @private
	       * geometry instances
	       * @type {Array}
	       */
	      geoms: null,
	      /**
	       * scale configuration
	       * @type {Object}
	       */
	      colDefs: null,
	      pixelRatio: Global.pixelRatio,
	      /**
	       * filter options
	       * @type {Object}
	       */
	      filters: null,
	      appendPadding: Global.appendPadding
	    };
	  };

	  Chart.prototype._getFieldsForLegend = function _getFieldsForLegend() {
	    var fields = [];
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var attrOptions = geom.get('attrOptions');
	      var attrCfg = attrOptions.color;
	      if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {
	        var arr = attrCfg.field.split('*');

	        Util.each(arr, function (item) {
	          if (fields.indexOf(item) === -1) {
	            fields.push(item);
	          }
	        });
	      }
	    });
	    return fields;
	  };

	  Chart.prototype._createScale = function _createScale(field, data) {
	    var scaleController = this.get('scaleController');
	    return scaleController.createScale(field, data);
	  };

	  Chart.prototype._adjustScale = function _adjustScale() {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScales = self.getYScales();
	    var scales = [];

	    xScale && scales.push(xScale);
	    scales = scales.concat(yScales);
	    var inFullCircle = coord.isPolar && isFullCircle(coord);
	    var scaleController = self.get('scaleController');
	    var colDefs = scaleController.defs;
	    Util.each(scales, function (scale) {
	      if ((scale.isCategory || scale.isIdentity) && scale.values && !(colDefs[scale.field] && colDefs[scale.field].range)) {
	        var count = scale.values.length;
	        var range = void 0;
	        if (count === 1) {
	          range = [0.5, 1];
	        } else {
	          var widthRatio = 1;
	          var offset = 0;
	          if (inFullCircle) {
	            if (!coord.transposed) {
	              range = [0, 1 - 1 / count];
	            } else {
	              widthRatio = Global.widthRatio.multiplePie;
	              offset = 1 / count * widthRatio;
	              range = [offset / 2, 1 - offset / 2];
	            }
	          } else {
	            offset = 1 / count * 1 / 2;
	            range = [offset, 1 - offset];
	          }
	        }
	        scale.range = range;
	      }
	    });

	    var geoms = this.get('geoms');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      if (geom.get('type') === 'interval') {
	        var yScale = geom.getYScale();
	        var field = yScale.field,
	            min = yScale.min,
	            max = yScale.max,
	            type = yScale.type;

	        if (!(colDefs[field] && colDefs[field].min) && type !== 'time') {
	          if (min > 0) {
	            yScale.change({
	              min: 0
	            });
	          } else if (max <= 0) {
	            yScale.change({
	              max: 0
	            });
	          }
	        }
	      }
	    }
	  };

	  Chart.prototype._removeGeoms = function _removeGeoms() {
	    var geoms = this.get('geoms');
	    while (geoms.length > 0) {
	      var geom = geoms.shift();
	      geom.destroy();
	    }
	  };

	  Chart.prototype._clearGeoms = function _clearGeoms() {
	    var geoms = this.get('geoms');
	    for (var i = 0, length = geoms.length; i < length; i++) {
	      var geom = geoms[i];
	      geom.clear();
	    }
	  };

	  Chart.prototype._clearInner = function _clearInner() {
	    this.set('scales', {});
	    this.set('legendItems', null);
	    this._clearGeoms();

	    Chart.plugins.notify(this, 'clearInner');
	    this.get('axisController') && this.get('axisController').clear();
	  };

	  Chart.prototype._execFilter = function _execFilter(data) {
	    var filters = this.get('filters');
	    if (filters) {
	      data = data.filter(function (obj) {
	        var rst = true;
	        Util.each(filters, function (fn, k) {
	          if (fn) {
	            rst = fn(obj[k], obj);
	            if (!rst) {
	              return false;
	            }
	          }
	        });
	        return rst;
	      });
	    }
	    return data;
	  };

	  Chart.prototype._initGeoms = function _initGeoms(geoms) {
	    var coord = this.get('coord');
	    var data = this.get('filteredData');
	    var colDefs = this.get('colDefs');

	    for (var i = 0, length = geoms.length; i < length; i++) {
	      var geom = geoms[i];
	      geom.set('data', data);
	      geom.set('coord', coord);
	      geom.set('colDefs', colDefs);
	      geom.init();
	    }
	  };

	  Chart.prototype._initCoord = function _initCoord() {
	    var plot = this.get('plotRange');
	    var coordCfg = Util.mix({
	      type: 'cartesian'
	    }, this.get('coordCfg'), {
	      plot: plot
	    });
	    var type = coordCfg.type;
	    var C = Coord[Util.upperFirst(type)];
	    var coord = new C(coordCfg);
	    this.set('coord', coord);
	  };

	  Chart.prototype._initLayout = function _initLayout() {
	    var padding = this.get('_padding');
	    if (!padding) {
	      padding = this.get('margin') || this.get('padding');
	      padding = Util.parsePadding(padding);
	    }

	    var top = padding[0] === 'auto' ? 0 : padding[0];
	    var right = padding[1] === 'auto' ? 0 : padding[1];
	    var bottom = padding[2] === 'auto' ? 0 : padding[2];
	    var left = padding[3] === 'auto' ? 0 : padding[3];

	    var width = this.get('width');
	    var height = this.get('height');
	    var plot = new Plot({
	      start: {
	        x: left,
	        y: top
	      },
	      end: {
	        x: width - right,
	        y: height - bottom
	      }
	    });
	    this.set('plotRange', plot);
	    this.set('plot', plot);
	  };

	  Chart.prototype._initCanvas = function _initCanvas() {
	    var self = this;
	    try {
	      var canvas = new Canvas({
	        el: self.get('el') || self.get('id'),
	        context: self.get('context'),
	        pixelRatio: self.get('pixelRatio'),
	        width: self.get('width'),
	        height: self.get('height'),
	        fontFamily: Global.fontFamily
	      });
	      self.set('canvas', canvas);
	      self.set('width', canvas.get('width'));
	      self.set('height', canvas.get('height'));
	    } catch (error) {
	      throw error;
	    }
	    Chart.plugins.notify(self, 'afterCanvasInit');
	    self._initLayout();
	  };

	  Chart.prototype._initLayers = function _initLayers() {
	    var canvas = this.get('canvas');
	    this.set('backPlot', canvas.addGroup());
	    this.set('middlePlot', canvas.addGroup({
	      zIndex: 10
	    }));
	    this.set('frontPlot', canvas.addGroup({
	      zIndex: 20
	    }));
	  };

	  Chart.prototype._init = function _init() {
	    var self = this;
	    self._initCanvas();
	    self._initLayers();
	    self.set('geoms', []);
	    self.set('scaleController', new ScaleController());
	    self.set('axisController', new AxisController({
	      frontPlot: self.get('frontPlot').addGroup({
	        className: 'axisContainer'
	      }),
	      backPlot: self.get('backPlot').addGroup({
	        className: 'axisContainer'
	      }),
	      chart: self
	    }));
	    Chart.plugins.notify(self, 'init');
	  };

	  function Chart(cfg) {
	    _classCallCheck(this, Chart);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    var self = _this;
	    Util.each(Geom, function (geomConstructor, className) {
	      var methodName = Util.lowerFirst(className);
	      self[methodName] = function (cfg) {
	        var geom = new geomConstructor(cfg);
	        self.addGeom(geom);
	        return geom;
	      };
	    });
	    self._init();
	    return _this;
	  }

	  /**
	   * set data and some scale configuration
	   * @chainable
	   * @param  {Array} data the dataset to visualize
	   * @param  {Object} colDefs the configuration for scales
	   * @return {Chart} return the chart instance
	   */


	  Chart.prototype.source = function source(data, colDefs) {
	    this.set('data', data);
	    if (colDefs) {
	      this.scale(colDefs);
	    }
	    return this;
	  };

	  Chart.prototype.scale = function scale(field, cfg) {
	    var colDefs = this.get('colDefs') || {};
	    if (Util.isObject(field)) {
	      Util.mix(colDefs, field);
	    } else {
	      colDefs[field] = cfg;
	    }

	    this.set('colDefs', colDefs);
	    var scaleController = this.get('scaleController');
	    scaleController.defs = colDefs;

	    return this;
	  };

	  /**
	   * configure the axis
	   * @chainable
	   * @param  {String|Boolean} field the field name of data
	   * @param  {Object} cfg configuration for axis
	   * @return {Chart} return the chart instance
	   */


	  Chart.prototype.axis = function axis(field, cfg) {
	    var axisController = this.get('axisController');
	    if (!field) {
	      axisController.axisCfg = null;
	    } else {
	      axisController.axisCfg = axisController.axisCfg || {};
	      axisController.axisCfg[field] = cfg;
	    }
	    return this;
	  };

	  /**
	   * configure the coordinate
	   * @chainable
	   * @param  {String} type set the type of coodinate
	   * @param  {Object} cfg configuration for coordinate
	   * @return {Chart} return the chart instance
	   */


	  Chart.prototype.coord = function coord(type, cfg) {
	    var coordCfg = void 0;
	    if (Util.isObject(type)) {
	      coordCfg = type;
	    } else {
	      coordCfg = cfg || {};
	      coordCfg.type = type || 'cartesian';
	    }
	    this.set('coordCfg', coordCfg);

	    return this;
	  };

	  Chart.prototype.filter = function filter(field, condition) {
	    var filters = this.get('filters') || {};
	    filters[field] = condition;
	    this.set('filters', filters);
	  };

	  /**
	   * render the chart
	   * @chainable
	   * @return {Chart} return the chart instance
	   */


	  Chart.prototype.render = function render() {
	    var self = this;
	    var canvas = self.get('canvas');
	    var geoms = self.get('geoms');
	    // processing the data
	    var data = this.get('data') || [];
	    var filteredData = this._execFilter(data);
	    this.set('filteredData', filteredData);
	    // init the coordinate instance
	    self._initCoord();

	    Chart.plugins.notify(self, 'beforeGeomInit');

	    // init all geometry instances
	    self._initGeoms(geoms);
	    // do some adjust for data
	    self._adjustScale();

	    Chart.plugins.notify(self, 'beforeGeomDraw');
	    self._renderAxis();

	    var middlePlot = self.get('middlePlot');
	    if (self.get('limitInPlot') && !middlePlot.attr('clip')) {
	      var coord = self.get('coord');
	      var clip = Helper.getClip(coord);
	      clip.set('canvas', middlePlot.get('canvas'));
	      middlePlot.attr('clip', clip);
	    }

	    for (var i = 0, length = geoms.length; i < length; i++) {
	      var geom = geoms[i];
	      geom.paint();
	    }

	    Chart.plugins.notify(self, 'afterGeomDraw');
	    canvas.sort();
	    this.get('frontPlot').sort();
	    Chart.plugins.notify(self, 'beforeCanvasDraw');
	    canvas.draw();
	    return self;
	  };

	  /**
	   * clear the chart, include geometris and all the shapes
	   * @chainable
	   * @return {Chart} return the chart
	   */


	  Chart.prototype.clear = function clear() {
	    Chart.plugins.notify(this, 'clear');
	    this._removeGeoms();
	    this._clearInner();
	    this.set('filters', null);
	    this.set('isUpdate', false);
	    this.set('_padding', null);
	    var canvas = this.get('canvas');
	    canvas.draw();
	    return this;
	  };

	  Chart.prototype.repaint = function repaint() {
	    this.set('isUpdate', true);
	    Chart.plugins.notify(this, 'repaint');
	    this._clearInner();
	    this.render();
	  };

	  Chart.prototype.changeData = function changeData(data) {
	    this.set('data', data);
	    Chart.plugins.notify(this, 'changeData');
	    this.set('_padding', null);
	    this.repaint();
	  };

	  Chart.prototype.changeSize = function changeSize(width, height) {
	    if (width) {
	      this.set('width', width);
	    } else {
	      width = this.get('width');
	    }

	    if (height) {
	      this.set('height', height);
	    } else {
	      height = this.get('height');
	    }

	    var canvas = this.get('canvas');
	    canvas.changeSize(width, height);
	    this._initLayout();
	    this.repaint();
	    return this;
	  };

	  Chart.prototype.destroy = function destroy() {
	    this.clear();
	    var canvas = this.get('canvas');
	    canvas.destroy();
	    Chart.plugins.notify(this, 'afterCanvasDestroyed');

	    if (this._interactions) {
	      Util.each(this._interactions, function (interaction) {
	        interaction.destroy();
	      });
	    }

	    _Base.prototype.destroy.call(this);
	  };

	  /**
	   * calculate dataset's position on canvas
	   * @param  {Object} record the dataset
	   * @return {Object} return the position
	   */


	  Chart.prototype.getPosition = function getPosition(record) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScale = self.getYScales()[0];
	    var xField = xScale.field;
	    var x = xScale.scale(record[xField]);
	    var yField = yScale.field;
	    var y = yScale.scale(record[yField]);
	    return coord.convertPoint({
	      x: x,
	      y: y
	    });
	  };

	  /**
	   * get the data item of the point
	   * @param  {Object} point canvas position
	   * @return {Object} return the data item
	   */


	  Chart.prototype.getRecord = function getRecord(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScale = self.getYScales()[0];
	    var invertPoint = coord.invertPoint(point);
	    var record = {};
	    record[xScale.field] = xScale.invert(invertPoint.x);
	    record[yScale.field] = yScale.invert(invertPoint.y);
	    return record;
	  };
	  /**
	   * get the dataset of the point
	   * @param  {Object} point canvas position
	   * @return {Array} return the dataset
	  **/


	  Chart.prototype.getSnapRecords = function getSnapRecords(point) {
	    var geom = this.get('geoms')[0];
	    var data = [];
	    if (geom) {
	      // need to judge
	      data = geom.getSnapRecords(point);
	    }
	    return data;
	  };

	  /**
	   * creat scale instances
	   * @param  {String} field field name of data
	   * @return {Scale} return the scale
	   */


	  Chart.prototype.createScale = function createScale(field) {
	    var data = this.get('data');
	    var filteredData = this.get('filteredData');
	    if (filteredData.length) {
	      var legendFields = this._getFieldsForLegend();
	      if (legendFields.indexOf(field) === -1) {
	        data = filteredData;
	      }
	    }

	    var scales = this.get('scales');
	    if (!scales[field]) {
	      scales[field] = this._createScale(field, data);
	    }
	    return scales[field];
	  };

	  /**
	   * @protected
	   * add geometry instance to geoms
	   * @param {Geom} geom geometry instance
	   */


	  Chart.prototype.addGeom = function addGeom(geom) {
	    var geoms = this.get('geoms');
	    var middlePlot = this.get('middlePlot');
	    geoms.push(geom);
	    geom.set('chart', this);
	    geom.set('container', middlePlot.addGroup());
	  };

	  /**
	   * get the scale of x axis
	   * @return {Scale} return the scale
	   */


	  Chart.prototype.getXScale = function getXScale() {
	    var self = this;
	    var geoms = self.get('geoms');
	    var xScale = geoms[0].getXScale();
	    return xScale;
	  };

	  /**
	   * get the scale of y axis
	   * @return {Array} return the scale
	   */


	  Chart.prototype.getYScales = function getYScales() {
	    var geoms = this.get('geoms');
	    var rst = [];

	    Util.each(geoms, function (geom) {
	      var yScale = geom.getYScale();
	      if (rst.indexOf(yScale) === -1) {
	        rst.push(yScale);
	      }
	    });
	    return rst;
	  };

	  Chart.prototype.getLegendItems = function getLegendItems() {
	    if (this.get('legendItems')) {
	      return this.get('legendItems');
	    }
	    var legendItems = {};
	    var scales = [];

	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var colorAttr = geom.getAttr('color');
	      if (colorAttr) {
	        var scale = colorAttr.getScale('color');
	        if (scale.type !== 'identity' && !_isScaleExist(scales, scale)) {
	          scales.push(scale);

	          var field = scale.field;
	          var ticks = scale.getTicks();
	          var items = [];
	          Util.each(ticks, function (tick) {
	            var text = tick.text;
	            var name = text;
	            var scaleValue = tick.value;
	            var value = scale.invert(scaleValue);
	            var color = colorAttr.mapping(value).join('') || Global.defaultColor;

	            var marker = {
	              fill: color,
	              radius: 3,
	              symbol: 'circle',
	              stroke: '#fff'
	            };

	            items.push({
	              name: name, // for display
	              dataValue: value, // the origin value
	              checked: true,
	              marker: marker
	            });
	          });

	          legendItems[field] = items;
	        }
	      }
	    });

	    this.set('legendItems', legendItems);

	    return legendItems;
	  };

	  // register the plugins


	  Chart.prototype.registerPlugins = function registerPlugins(plugins) {
	    var self = this;
	    var chartPlugins = self.get('plugins') || [];
	    if (!Util.isArray(chartPlugins)) {
	      chartPlugins = [chartPlugins];
	    }

	    [].concat(plugins).forEach(function (plugin) {
	      if (chartPlugins.indexOf(plugin) === -1) {
	        plugin.init && plugin.init(self); // init
	        chartPlugins.push(plugin);
	      }
	    });
	    Chart.plugins._cacheId++;
	    self.set('plugins', chartPlugins);
	  };

	  Chart.prototype._renderAxis = function _renderAxis() {
	    var axisController = this.get('axisController');
	    var xScale = this.getXScale();
	    var yScales = this.getYScales();
	    var coord = this.get('coord');
	    Chart.plugins.notify(this, 'beforeRenderAxis');
	    axisController.createAxis(coord, xScale, yScales);
	  };

	  Chart.prototype._isAutoPadding = function _isAutoPadding() {
	    if (this.get('_padding')) {
	      return false;
	    }
	    var padding = this.get('padding');
	    if (Util.isArray(padding)) {
	      return padding.indexOf('auto') !== -1;
	    }
	    return padding === 'auto';
	  };

	  Chart.prototype._updateLayout = function _updateLayout(padding) {
	    var width = this.get('width');
	    var height = this.get('height');
	    var start = {
	      x: padding[3],
	      y: padding[0]
	    };
	    var end = {
	      x: width - padding[1],
	      y: height - padding[2]
	    };

	    var plot = this.get('plot');
	    var coord = this.get('coord');
	    plot.reset(start, end);
	    coord.reset(plot);
	  };

	  return Chart;
	}(Base);

	Chart.plugins = Chart.initPlugins();

	module.exports = Chart;

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape util
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	var ShapeUtil = {
	  splitPoints: function splitPoints(obj) {
	    var points = [];
	    var x = obj.x;
	    var y = obj.y;
	    y = Util.isArray(y) ? y : [y];
	    y.forEach(function (yItem, index) {
	      var point = {
	        x: Util.isArray(x) ? x[index] : x,
	        y: yItem
	      };
	      points.push(point);
	    });
	    return points;
	  },
	  splitArray: function splitArray(data, yField, connectNulls) {
	    if (!data.length) return [];
	    var arr = [];
	    var tmp = [];
	    var yValue = void 0;
	    Util.each(data, function (obj) {
	      yValue = obj._origin ? obj._origin[yField] : obj[yField];
	      if (connectNulls) {
	        if (!Util.isNil(yValue)) {
	          tmp.push(obj);
	        }
	      } else {
	        if (Util.isArray(yValue) && Util.isNil(yValue[0]) || Util.isNil(yValue)) {
	          if (tmp.length) {
	            arr.push(tmp);
	            tmp = [];
	          }
	        } else {
	          tmp.push(obj);
	        }
	      }
	    });

	    if (tmp.length) {
	      arr.push(tmp);
	    }

	    return arr;
	  }
	};

	module.exports = ShapeUtil;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);

	var Base = function () {
	  Base.prototype._initDefaultCfg = function _initDefaultCfg() {};

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    this._initDefaultCfg();
	    Util.mix(this, cfg);

	    var start = void 0;
	    var end = void 0;
	    if (this.plot) {
	      start = this.plot.bl;
	      end = this.plot.tr;
	      this.start = start;
	      this.end = end;
	    } else {
	      start = this.start;
	      end = this.end;
	    }
	    this.init(start, end);
	  }

	  Base.prototype.init = function init() {};

	  Base.prototype.convertPoint = function convertPoint(point) {
	    return point;
	  };

	  Base.prototype.invertPoint = function invertPoint(point) {
	    return point;
	  };

	  Base.prototype.reset = function reset(plot) {
	    this.plot = plot;
	    var bl = plot.bl,
	        tr = plot.tr;

	    this.start = bl;
	    this.end = tr;
	    this.init(bl, tr);
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var mix = __webpack_require__(15);

	var Adjust = function () {
	  Adjust.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整
	  };

	  function Adjust(cfg) {
	    _classCallCheck(this, Adjust);

	    this._initDefaultCfg();
	    mix(this, cfg);
	  }

	  /**
	   * @override
	   */

	  Adjust.prototype.processAdjust = function processAdjust() /* dataArray */{};

	  return Adjust;
	}();

	module.exports = Adjust;

	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {

	var Matrix = {
	  multiply: function multiply(m1, m2) {
	    var m11 = m1[0] * m2[0] + m1[2] * m2[1];
	    var m12 = m1[1] * m2[0] + m1[3] * m2[1];

	    var m21 = m1[0] * m2[2] + m1[2] * m2[3];
	    var m22 = m1[1] * m2[2] + m1[3] * m2[3];

	    var dx = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	    var dy = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];

	    return [m11, m12, m21, m22, dx, dy];
	  },
	  scale: function scale(out, m, v) {
	    out[0] = m[0] * v[0];
	    out[1] = m[1] * v[0];
	    out[2] = m[2] * v[1];
	    out[3] = m[3] * v[1];
	    out[4] = m[4];
	    out[5] = m[5];

	    return out;
	  },
	  rotate: function rotate(out, m, radian) {
	    var c = Math.cos(radian);
	    var s = Math.sin(radian);
	    var m11 = m[0] * c + m[2] * s;
	    var m12 = m[1] * c + m[3] * s;
	    var m21 = m[0] * -s + m[2] * c;
	    var m22 = m[1] * -s + m[3] * c;
	    out[0] = m11;
	    out[1] = m12;
	    out[2] = m21;
	    out[3] = m22;
	    out[4] = m[4];
	    out[5] = m[5];

	    return out;
	  },
	  translate: function translate(out, m, v) {
	    out[0] = m[0];
	    out[1] = m[1];
	    out[2] = m[2];
	    out[3] = m[3];
	    out[4] = m[4] + m[0] * v[0] + m[2] * v[1];
	    out[5] = m[5] + m[1] * v[0] + m[3] * v[1];
	    return out;
	  },
	  transform: function transform(m, actions) {
	    var out = [].concat(m);
	    for (var i = 0, len = actions.length; i < len; i++) {
	      var action = actions[i];
	      switch (action[0]) {
	        case 't':
	          Matrix.translate(out, out, [action[1], action[2]]);
	          break;
	        case 's':
	          Matrix.scale(out, out, [action[1], action[2]]);
	          break;
	        case 'r':
	          Matrix.rotate(out, out, action[1]);
	          break;
	        default:
	          break;
	      }
	    }

	    return out;
	  }
	};

	module.exports = Matrix;

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(1);
	var Vector2 = __webpack_require__(4);

	var Abastract = function () {
	  Abastract.prototype._initDefaultCfg = function _initDefaultCfg() {
	    /**
	     * ticks
	     * @type {Array}
	     */
	    this.ticks = [];
	    /**
	     * the configuration for tickLine
	     * @type {Object}
	     */
	    this.tickLine = {};
	    /**
	     * the direction of ticks, 1 means clockwise
	     * @type {Number}
	     */
	    this.offsetFactor = 1;
	    /**
	     * the top container
	     * @type {container}
	     */
	    this.frontContainer = null;
	    /**
	     * the back container
	     * @type {[type]}
	     */
	    this.backContainer = null;
	    /**
	     * points for draw grid line
	     * @type {Array}
	     */
	    this.gridPoints = [];
	  };

	  function Abastract(cfg) {
	    _classCallCheck(this, Abastract);

	    this._initDefaultCfg();
	    Util.mix(this, cfg);
	    this.draw();
	  }

	  Abastract.prototype.draw = function draw() {
	    var line = this.line,
	        tickLine = this.tickLine,
	        label = this.label,
	        grid = this.grid;


	    grid && this.drawGrid(grid); // draw the grid lines
	    tickLine && this.drawTicks(tickLine); // draw the tickLine
	    line && this.drawLine(line); // draw axis line
	    label && this.drawLabels(); // draw ticks
	  };

	  Abastract.prototype.drawTicks = function drawTicks(tickCfg) {
	    var self = this;
	    var ticks = self.ticks;
	    var length = tickCfg.length;
	    var container = self.getContainer(tickCfg.top);
	    Util.each(ticks, function (tick) {
	      var start = self.getOffsetPoint(tick.value);
	      var end = self.getSidePoint(start, length);
	      var shape = container.addShape('line', {
	        className: 'axis-tick',
	        attrs: Util.mix({
	          x1: start.x,
	          y1: start.y,
	          x2: end.x,
	          y2: end.y
	        }, tickCfg)
	      });
	      shape._id = self._id + '-ticks';
	    });
	  };

	  Abastract.prototype.drawLabels = function drawLabels() {
	    var self = this;
	    var labelOffset = self.labelOffset;
	    var labels = self.labels;
	    Util.each(labels, function (labelShape) {
	      var container = self.getContainer(labelShape.get('top'));
	      var start = self.getOffsetPoint(labelShape.get('value'));

	      var _self$getSidePoint = self.getSidePoint(start, labelOffset),
	          x = _self$getSidePoint.x,
	          y = _self$getSidePoint.y;

	      labelShape.attr(Util.mix({
	        x: x,
	        y: y
	      }, self.getTextAlignInfo(start, labelOffset), labelShape.get('textStyle')));
	      labelShape._id = self._id + '-' + labelShape.attr('text');
	      container.add(labelShape);
	    });
	  };

	  Abastract.prototype.drawLine = function drawLine() {};

	  Abastract.prototype.drawGrid = function drawGrid(grid) {
	    var self = this;
	    var gridPoints = self.gridPoints,
	        ticks = self.ticks;

	    var gridCfg = grid;
	    var count = gridPoints.length;

	    Util.each(gridPoints, function (subPoints, index) {
	      if (Util.isFunction(grid)) {
	        var tick = ticks[index] || {};
	        gridCfg = Util.mix({}, Global._defaultAxis.grid, grid(tick.text, index, count));
	      }

	      if (gridCfg) {
	        var type = gridCfg.type; // has two types: 'line' and 'arc'
	        var points = subPoints.points;
	        var container = self.getContainer(gridCfg.top);
	        var shape = void 0;

	        if (type === 'arc') {
	          var center = self.center,
	              startAngle = self.startAngle,
	              endAngle = self.endAngle;

	          var radius = Vector2.length([points[0].x - center.x, points[0].y - center.y]);
	          shape = container.addShape('Arc', {
	            className: 'axis-grid',
	            attrs: Util.mix({
	              x: center.x,
	              y: center.y,
	              startAngle: startAngle,
	              endAngle: endAngle,
	              r: radius
	            }, gridCfg)
	          });
	        } else {
	          shape = container.addShape('Polyline', {
	            className: 'axis-grid',
	            attrs: Util.mix({
	              points: points
	            }, gridCfg)
	          });
	        }

	        shape._id = subPoints._id;
	      }
	    });
	  };

	  Abastract.prototype.getOffsetPoint = function getOffsetPoint() {};

	  Abastract.prototype.getAxisVector = function getAxisVector() {};

	  Abastract.prototype.getOffsetVector = function getOffsetVector(point, offset) {
	    var self = this;
	    var axisVector = self.getAxisVector(point);
	    var normal = Vector2.normalize([], axisVector);
	    var factor = self.offsetFactor;
	    var verticalVector = [normal[1] * -1 * factor, normal[0] * factor];
	    return Vector2.scale([], verticalVector, offset);
	  };

	  Abastract.prototype.getSidePoint = function getSidePoint(point, offset) {
	    var self = this;
	    var offsetVector = self.getOffsetVector(point, offset);
	    return {
	      x: point.x + offsetVector[0],
	      y: point.y + offsetVector[1]
	    };
	  };

	  Abastract.prototype.getTextAlignInfo = function getTextAlignInfo(point, offset) {
	    var self = this;
	    var offsetVector = self.getOffsetVector(point, offset);
	    var align = void 0;
	    var baseLine = void 0;
	    if (offsetVector[0] > 0) {
	      align = 'left';
	    } else if (offsetVector[0] < 0) {
	      align = 'right';
	    } else {
	      align = 'center';
	    }
	    if (offsetVector[1] > 0) {
	      baseLine = 'top';
	    } else if (offsetVector[1] < 0) {
	      baseLine = 'bottom';
	    } else {
	      baseLine = 'middle';
	    }
	    return {
	      textAlign: align,
	      textBaseline: baseLine
	    };
	  };

	  Abastract.prototype.getContainer = function getContainer(isTop) {
	    var frontContainer = this.frontContainer,
	        backContainer = this.backContainer;

	    return isTop ? frontContainer : backContainer;
	  };

	  return Abastract;
	}();

	module.exports = Abastract;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var MatrixUtil = __webpack_require__(23);
	var Vector2 = __webpack_require__(4);

	function isUnchanged(m) {
	  return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
	}

	var ALIAS_ATTRS_MAP = {
	  stroke: 'strokeStyle',
	  fill: 'fillStyle',
	  opacity: 'globalAlpha'
	};

	var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash'];

	var CLIP_SHAPES = ['circle', 'sector', 'polygon', 'rect', 'polyline'];

	var Element = function () {
	  Element.prototype._initProperties = function _initProperties() {
	    this._attrs = {
	      zIndex: 0,
	      visible: true,
	      destroyed: false
	    };
	  };

	  function Element(cfg) {
	    _classCallCheck(this, Element);

	    this._initProperties();
	    Util.mix(this._attrs, cfg);

	    var attrs = this._attrs.attrs;
	    if (attrs) {
	      this.initAttrs(attrs);
	    }

	    this.initTransform();
	  }

	  Element.prototype.get = function get(name) {
	    return this._attrs[name];
	  };

	  Element.prototype.set = function set(name, value) {
	    this._attrs[name] = value;
	  };

	  Element.prototype.isGroup = function isGroup() {
	    return this.get('isGroup');
	  };

	  Element.prototype.isShape = function isShape() {
	    return this.get('isShape');
	  };

	  Element.prototype.initAttrs = function initAttrs(attrs) {
	    this.attr(Util.mix(this.getDefaultAttrs(), attrs));
	  };

	  Element.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {};
	  };

	  Element.prototype._setAttr = function _setAttr(name, value) {
	    var attrs = this._attrs.attrs;
	    if (name === 'clip') {
	      value = this._setAttrClip(value);
	    } else {
	      var alias = ALIAS_ATTRS_MAP[name];
	      if (alias) {
	        attrs[alias] = value;
	      }
	    }
	    attrs[name] = value;
	  };

	  Element.prototype._getAttr = function _getAttr(name) {
	    return this._attrs.attrs[name];
	  };

	  // _afterAttrsSet() {}

	  Element.prototype._setAttrClip = function _setAttrClip(clip) {
	    if (clip && CLIP_SHAPES.indexOf(clip._attrs.type) > -1) {
	      if (clip.get('canvas') === null) {
	        clip = Object.assign({}, clip);
	      }
	      clip.set('parent', this.get('parent'));
	      clip.set('context', this.get('context'));
	      return clip;
	    }
	    return null;
	  };

	  Element.prototype.attr = function attr(name, value) {
	    var self = this;
	    if (self.get('destroyed')) return null;
	    var argumentsLen = arguments.length;
	    if (argumentsLen === 0) {
	      return self._attrs.attrs;
	    }

	    if (Util.isObject(name)) {
	      this._attrs.bbox = null;
	      for (var k in name) {
	        self._setAttr(k, name[k]);
	      }
	      if (self._afterAttrsSet) {
	        self._afterAttrsSet();
	      }
	      return self;
	    }
	    if (argumentsLen === 2) {
	      this._attrs.bbox = null;
	      self._setAttr(name, value);
	      if (self._afterAttrsSet) {
	        self._afterAttrsSet();
	      }
	      return self;
	    }
	    return self._getAttr(name);
	  };

	  Element.prototype.getParent = function getParent() {
	    return this.get('parent');
	  };

	  Element.prototype.draw = function draw(context) {
	    if (this.get('destroyed')) {
	      return;
	    }
	    if (this.get('visible')) {
	      this.setContext(context);
	      this.drawInner(context);
	      this.restoreContext(context);
	    }
	  };

	  Element.prototype.setContext = function setContext(context) {
	    var clip = this._attrs.attrs.clip;
	    context.save();
	    if (clip) {
	      clip.resetTransform(context);
	      clip.createPath(context);
	      context.clip();
	    }
	    this.resetContext(context);
	    this.resetTransform(context);
	  };

	  Element.prototype.restoreContext = function restoreContext(context) {
	    context.restore();
	  };

	  Element.prototype.resetContext = function resetContext(context) {
	    var elAttrs = this._attrs.attrs;
	    if (!this.get('isGroup')) {
	      for (var k in elAttrs) {
	        if (SHAPE_ATTRS.indexOf(k) > -1) {
	          var v = elAttrs[k];
	          if (k === 'lineDash' && context.setLineDash && v) {
	            context.setLineDash(v);
	          } else {
	            context[k] = v;
	          }
	        }
	      }
	    }
	  };

	  Element.prototype.hasFill = function hasFill() {
	    return this.get('canFill') && this._attrs.attrs.fillStyle;
	  };

	  Element.prototype.hasStroke = function hasStroke() {
	    return this.get('canStroke') && this._attrs.attrs.strokeStyle;
	  };

	  Element.prototype.drawInner = function drawInner() /* context */{};

	  Element.prototype.show = function show() {
	    this.set('visible', true);
	    return this;
	  };

	  Element.prototype.hide = function hide() {
	    this.set('visible', false);
	    return this;
	  };

	  Element.prototype.isVisible = function isVisible() {
	    return this.get('visible');
	  };

	  Element.prototype._removeFromParent = function _removeFromParent() {
	    var parent = this.get('parent');
	    if (parent) {
	      var children = parent.get('children');
	      Util.Array.remove(children, this);
	    }

	    return this;
	  };

	  Element.prototype.remove = function remove(destroy) {
	    if (destroy) {
	      this.destroy();
	    } else {
	      this._removeFromParent();
	    }
	  };

	  Element.prototype.destroy = function destroy() {
	    var destroyed = this.get('destroyed');

	    if (destroyed) {
	      return null;
	    }

	    this._removeFromParent();

	    this._attrs = {};
	    this.set('destroyed', true);
	  };

	  Element.prototype.getBBox = function getBBox() {
	    return {
	      minX: 0,
	      maxX: 0,
	      minY: 0,
	      maxY: 0
	    };
	  };

	  Element.prototype.initTransform = function initTransform() {
	    var attrs = this._attrs.attrs || {};
	    if (!attrs.matrix) {
	      attrs.matrix = [1, 0, 0, 1, 0, 0];
	    }
	    this._attrs.attrs = attrs;
	  };

	  Element.prototype.getMatrix = function getMatrix() {
	    return this._attrs.attrs.matrix;
	  };

	  Element.prototype.setMatrix = function setMatrix(m) {
	    this._attrs.attrs.matrix = [m[0], m[1], m[2], m[3], m[4], m[5]];
	  };

	  Element.prototype.transform = function transform(actions) {
	    var matrix = this._attrs.attrs.matrix;
	    this._attrs.attrs.matrix = MatrixUtil.transform(matrix, actions);
	    return this;
	  };

	  Element.prototype.setTransform = function setTransform(actions) {
	    this._attrs.attrs.matrix = [1, 0, 0, 1, 0, 0];
	    return this.transform(actions);
	  };

	  Element.prototype.translate = function translate(x, y) {
	    var matrix = this._attrs.attrs.matrix;
	    MatrixUtil.translate(matrix, matrix, [x, y]);
	  };

	  Element.prototype.rotate = function rotate(rad) {
	    var matrix = this._attrs.attrs.matrix;
	    MatrixUtil.rotate(matrix, matrix, rad);
	  };

	  Element.prototype.scale = function scale(sx, sy) {
	    var matrix = this._attrs.attrs.matrix;
	    MatrixUtil.scale(matrix, matrix, [sx, sy]);
	  };

	  Element.prototype.moveTo = function moveTo(x, y) {
	    var cx = this._attrs.x || 0;
	    var cy = this._attrs.y || 0;
	    this.translate(x - cx, y - cy);
	    this.set('x', x);
	    this.set('y', y);
	  };

	  Element.prototype.apply = function apply(v) {
	    var m = this._attrs.attrs.matrix;
	    Vector2.transformMat2d(v, v, m);
	    return this;
	  };

	  Element.prototype.resetTransform = function resetTransform(context) {
	    var mo = this._attrs.attrs.matrix;
	    if (!isUnchanged(mo)) {
	      context.transform(mo[0], mo[1], mo[2], mo[3], mo[4], mo[5]);
	    }
	  };

	  Element.prototype.isDestroyed = function isDestroyed() {
	    return this.get('destroyed');
	  };

	  return Element;
	}();

	module.exports = Element;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(9),
	    Shape = _require.Shape;

	module.exports = {
	  getClip: function getClip(coord) {
	    var start = coord.start;
	    var end = coord.end;
	    var width = end.x - start.x;
	    var height = Math.abs(end.y - start.y);
	    var clip = void 0;
	    if (coord.isPolar) {
	      var circleRadius = coord.circleRadius,
	          center = coord.center,
	          startAngle = coord.startAngle,
	          endAngle = coord.endAngle;

	      clip = new Shape.Sector({
	        attrs: {
	          x: center.x,
	          y: center.y,
	          r: circleRadius,
	          r0: 0,
	          startAngle: startAngle,
	          endAngle: endAngle
	        }
	      });
	    } else {
	      clip = new Shape.Rect({
	        attrs: {
	          x: start.x,
	          y: end.y,
	          width: width,
	          height: height
	        }
	      });
	    }
	    clip.isClip = true;
	    return clip;
	  },
	  isPointInPlot: function isPointInPlot(point, plot) {
	    var x = point.x,
	        y = point.y;
	    var tl = plot.tl,
	        tr = plot.tr,
	        br = plot.br;

	    return x >= tl.x && x <= tr.x && y >= tl.y && y <= br.y;
	  }
	};

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

	var isNil = __webpack_require__(6);

	function toString(value) {
	  if (isNil(value)) return '';
	  return value.toString();
	}

	module.exports = toString;

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(48);
	var isType = __webpack_require__(7);

	var isPlainObject = function isPlainObject(value) {
	  /**
	   * isObjectLike(new Foo) => false
	   * isObjectLike([1, 2, 3]) => false
	   * isObjectLike({ x: 0, y: 0 }) => true
	   * isObjectLike(Object.create(null)) => true
	   */
	  if (!isObjectLike(value) || !isType(value, 'Object')) {
	    return false;
	  }
	  if (Object.getPrototypeOf(value) === null) {
	    return true;
	  }
	  var proto = value;
	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }
	  return Object.getPrototypeOf(value) === proto;
	};

	module.exports = isPlainObject;

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview Base class of chart and geometry
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	var Base = function () {
	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {};
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var attrs = {};
	    var defaultCfg = this.getDefaultCfg();
	    this._attrs = attrs;
	    Util.mix(attrs, defaultCfg, cfg);
	  }

	  Base.prototype.get = function get(name) {
	    return this._attrs[name];
	  };

	  Base.prototype.set = function set(name, value) {
	    this._attrs[name] = value;
	  };

	  Base.prototype.destroy = function destroy() {
	    this._attrs = {};
	    this.destroyed = true;
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(2);
	var SHAPE_MAP = {};
	var INDEX = '_INDEX';

	function getComparer(compare) {
	  return function (left, right) {
	    var result = compare(left, right);
	    return result === 0 ? left[INDEX] - right[INDEX] : result;
	  };
	}

	module.exports = {
	  getGroupClass: function getGroupClass() {},
	  getChildren: function getChildren() {
	    return this.get('children');
	  },
	  addShape: function addShape(type) {
	    var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var canvas = this.get('canvas');
	    var shapeType = SHAPE_MAP[type];
	    if (!shapeType) {
	      shapeType = Util.upperFirst(type);
	      SHAPE_MAP[type] = shapeType;
	    }
	    cfg.canvas = canvas;
	    if (shapeType === 'Text' && canvas && canvas.get('fontFamily')) {
	      cfg.attrs.fontFamily = cfg.attrs.fontFamily || canvas.get('fontFamily');
	    }

	    var shape = new Shape[shapeType](cfg);
	    this.add(shape);
	    return shape;
	  },
	  addGroup: function addGroup(cfg) {
	    var canvas = this.get('canvas');
	    var groupClass = this.getGroupClass();
	    cfg = Util.mix({}, cfg);
	    cfg.canvas = canvas;
	    cfg.parent = this;
	    var rst = new groupClass(cfg);
	    this.add(rst);
	    return rst;
	  },
	  contain: function contain(item) {
	    var children = this.get('children');
	    return children.indexOf(item) > -1;
	  },
	  sort: function sort() {
	    var children = this.get('children');
	    for (var i = 0, len = children.length; i < len; i++) {
	      var child = children[i];
	      child[INDEX] = i;
	    }

	    children.sort(getComparer(function (obj1, obj2) {
	      return obj1.get('zIndex') - obj2.get('zIndex');
	    }));

	    return this;
	  },
	  clear: function clear() {
	    var children = this.get('children');

	    while (children.length !== 0) {
	      children[children.length - 1].remove(true);
	    }
	    return this;
	  },
	  add: function add(items) {
	    var self = this;
	    var children = self.get('children');
	    if (!Util.isArray(items)) {
	      items = [items];
	    }

	    for (var i = 0, len = items.length; i < len; i++) {
	      var item = items[i];
	      var parent = item.get('parent');
	      if (parent) {
	        var descendants = parent.get('children');
	        Util.Array.remove(descendants, item);
	      }
	      self._setEvn(item);
	      children.push(item);
	    }

	    return self;
	  },
	  _setEvn: function _setEvn(item) {
	    var self = this;
	    item._attrs.parent = self;
	    item._attrs.context = self._attrs.context;
	    item._attrs.canvas = self._attrs.canvas;
	    var clip = item._attrs.attrs.clip;
	    if (clip) {
	      clip.set('parent', self);
	      clip.set('context', self.get('context'));
	    }
	    if (item._attrs.isGroup) {
	      var children = item._attrs.children;
	      for (var i = 0, len = children.length; i < len; i++) {
	        item._setEvn(children[i]);
	      }
	    }
	  }
	};

	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Element = __webpack_require__(25);
	var Container = __webpack_require__(30);
	var Vector2 = __webpack_require__(4);

	var Group = function (_Element) {
	  _inherits(Group, _Element);

	  function Group() {
	    _classCallCheck(this, Group);

	    return _possibleConstructorReturn(this, _Element.apply(this, arguments));
	  }

	  Group.prototype._initProperties = function _initProperties() {
	    this._attrs = {
	      zIndex: 0,
	      visible: true,
	      destroyed: false,
	      isGroup: true,
	      children: []
	    };
	  };

	  Group.prototype.drawInner = function drawInner(context) {
	    var children = this.get('children');
	    for (var i = 0, len = children.length; i < len; i++) {
	      var child = children[i];
	      child.draw(context);
	    }
	    return this;
	  };

	  Group.prototype.getBBox = function getBBox() {
	    var self = this;
	    var minX = Infinity;
	    var maxX = -Infinity;
	    var minY = Infinity;
	    var maxY = -Infinity;
	    var children = self.get('children');
	    for (var i = 0, length = children.length; i < length; i++) {
	      var child = children[i];
	      if (child.get('visible')) {
	        var box = child.getBBox();
	        if (!box) {
	          continue;
	        }

	        var leftTop = [box.minX, box.minY];
	        var leftBottom = [box.minX, box.maxY];
	        var rightTop = [box.maxX, box.minY];
	        var rightBottom = [box.maxX, box.maxY];
	        var matrix = child.attr('matrix');

	        Vector2.transformMat2d(leftTop, leftTop, matrix);
	        Vector2.transformMat2d(leftBottom, leftBottom, matrix);
	        Vector2.transformMat2d(rightTop, rightTop, matrix);
	        Vector2.transformMat2d(rightBottom, rightBottom, matrix);

	        minX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], minX);
	        maxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], maxX);
	        minY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], minY);
	        maxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], maxY);
	      }
	    }

	    return {
	      minX: minX,
	      minY: minY,
	      maxX: maxX,
	      maxY: maxY,
	      x: minX,
	      y: minY,
	      width: maxX - minX,
	      height: maxY - minY
	    };
	  };

	  Group.prototype.destroy = function destroy() {
	    if (this.get('destroyed')) {
	      return;
	    }
	    this.clear();
	    _Element.prototype.destroy.call(this);
	  };

	  return Group;
	}(Element);

	Util.mix(Group.prototype, Container, {
	  getGroupClass: function getGroupClass() {
	    return Group;
	  }
	});

	module.exports = Group;

	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(8);
	var ShapeUtil = __webpack_require__(20);
	var Global = __webpack_require__(1);

	// register line geom
	var Line = Shape.registerFactory('line', {
	  defaultShapeType: 'line'
	});

	function getStyle(cfg) {
	  var style = {
	    strokeStyle: cfg.color
	  };
	  if (cfg.size >= 0) {
	    style.lineWidth = cfg.size;
	  }
	  Util.mix(style, cfg.style);

	  return Util.mix({}, Global.shape.line, style);
	}

	function drawLines(cfg, container, style, smooth) {
	  var points = cfg.points;
	  if (points.length && Util.isArray(points[0].y)) {
	    var topPoints = [];
	    var bottomPoints = [];
	    for (var i = 0, len = points.length; i < len; i++) {
	      var point = points[i];
	      var tmp = ShapeUtil.splitPoints(point);
	      bottomPoints.push(tmp[0]);
	      topPoints.push(tmp[1]);
	    }
	    if (cfg.isInCircle) {
	      topPoints.push(topPoints[0]);
	      bottomPoints.push(bottomPoints[0]);
	    }
	    if (cfg.isStack) {
	      return container.addShape('Polyline', {
	        className: 'line',
	        attrs: Util.mix({
	          points: topPoints,
	          smooth: smooth
	        }, style)
	      });
	    }
	    var topShape = container.addShape('Polyline', {
	      className: 'line',
	      attrs: Util.mix({
	        points: topPoints,
	        smooth: smooth
	      }, style)
	    });
	    var bottomShape = container.addShape('Polyline', {
	      className: 'line',
	      attrs: Util.mix({
	        points: bottomPoints,
	        smooth: smooth
	      }, style)
	    });

	    return [topShape, bottomShape];
	  }
	  if (cfg.isInCircle) {
	    points.push(points[0]);
	  }
	  return container.addShape('Polyline', {
	    className: 'line',
	    attrs: Util.mix({
	      points: points,
	      smooth: smooth
	    }, style)
	  });
	}

	var SHAPES = ['line', 'smooth', 'dash'];
	Util.each(SHAPES, function (shapeType) {
	  Shape.registerShape('line', shapeType, {
	    draw: function draw(cfg, container) {
	      var smooth = shapeType === 'smooth';
	      var style = getStyle(cfg);
	      if (shapeType === 'dash') {
	        style.lineDash = Global.lineDash;
	      }

	      return drawLines(cfg, container, style, smooth);
	    }
	  });
	});

	module.exports = Line;

	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {

	var isType = __webpack_require__(7);

	var isDate = function isDate(value) {
	  return isType(value, 'Date');
	};

	module.exports = isDate;

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Base = __webpack_require__(13);
	var catAuto = __webpack_require__(35);
	var each = __webpack_require__(3);
	var isNumber = __webpack_require__(17);
	var isString = __webpack_require__(14);

	var Category = function (_Base) {
	  _inherits(Category, _Base);

	  function Category() {
	    _classCallCheck(this, Category);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Category.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Base.prototype._initDefaultCfg.call(this);
	    this.type = 'cat';
	    /**
	     * 是否分类度量
	     * @type {Boolean}
	     */
	    this.isCategory = true;
	    this.isRounding = true; // 是否进行取整操作
	  };

	  /**
	   * @override
	   */

	  Category.prototype.init = function init() {
	    var self = this;
	    var values = self.values;
	    var tickCount = self.tickCount;

	    each(values, function (v, i) {
	      values[i] = v.toString();
	    });
	    if (!self.ticks) {
	      var ticks = values;
	      if (tickCount) {
	        var temp = catAuto({
	          maxCount: tickCount,
	          data: values,
	          isRounding: self.isRounding
	        });
	        ticks = temp.ticks;
	      }
	      this.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */

	  Category.prototype.getText = function getText(value) {
	    if (this.values.indexOf(value) === -1 && isNumber(value)) {
	      value = this.values[Math.round(value)];
	    }

	    return _Base.prototype.getText.call(this, value);
	  };

	  /**
	   * @override
	   */

	  Category.prototype.translate = function translate(value) {
	    var index = this.values.indexOf(value);
	    if (index === -1 && isNumber(value)) {
	      index = value;
	    } else if (index === -1) {
	      index = NaN;
	    }
	    return index;
	  };
	  /**
	   * @override
	   */

	  Category.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var percent = void 0;

	    if (isString(value) || this.values.indexOf(value) !== -1) {
	      value = this.translate(value);
	    }
	    if (this.values.length > 1) {
	      percent = value / (this.values.length - 1);
	    } else {
	      percent = value;
	    }
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */

	  Category.prototype.invert = function invert(value) {
	    if (isString(value)) {
	      // 如果已经是字符串
	      return value;
	    }
	    var min = this.rangeMin();
	    var max = this.rangeMax();

	    // 归一到 范围内
	    if (value < min) {
	      value = min;
	    }
	    if (value > max) {
	      value = max;
	    }
	    var percent = (value - min) / (max - min);
	    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;
	    index = index || 0;
	    return this.values[index];
	  };

	  return Category;
	}(Base);

	Base.Cat = Category;
	module.exports = Category;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算分类的的坐标点
	 * @author dxq613@gmail.com
	 */
	var each = __webpack_require__(3);
	var MAX_COUNT = 8;
	var SUB_COUNT = 4; // 控制个数不能过小

	function getSimpleArray(data) {
	  var arr = [];
	  each(data, function (sub) {
	    arr = arr.concat(sub);
	  });
	  return arr;
	}
	function getGreatestFactor(count, number) {
	  var i = void 0;
	  for (i = number; i > 0; i--) {
	    if (count % i === 0) {
	      break;
	    }
	  }
	  // 如果是素数，没有可以整除的数字
	  if (i === 1) {
	    for (i = number; i > 0; i--) {
	      if ((count - 1) % i === 0) {
	        break;
	      }
	    }
	  }
	  return i;
	}

	module.exports = function (info) {
	  var rst = {};
	  var ticks = [];
	  var isRounding = info.isRounding;
	  var categories = getSimpleArray(info.data);
	  var length = categories.length;
	  var maxCount = info.maxCount || MAX_COUNT;
	  var tickCount = void 0;

	  if (isRounding) {
	    // 取整操作
	    tickCount = getGreatestFactor(length - 1, maxCount - 1) + 1;
	    // 如果计算出来只有两个坐标点，则直接使用传入的 maxCount
	    if (tickCount === 2) {
	      tickCount = maxCount;
	    } else if (tickCount < maxCount - SUB_COUNT) {
	      tickCount = maxCount - SUB_COUNT;
	    }
	  } else {
	    tickCount = maxCount;
	  }

	  if (!isRounding && length <= tickCount + tickCount / 2) {
	    ticks = [].concat(categories);
	  } else {
	    var step = parseInt(length / (tickCount - 1), 10);

	    var groups = categories.map(function (e, i) {
	      return i % step === 0 ? categories.slice(i, i + step) : null;
	    }).filter(function (e) {
	      return e;
	    });

	    for (var i = 1, groupLen = groups.length; i < groupLen && (isRounding ? i * step < length - step : i < tickCount - 1); i++) {
	      ticks.push(groups[i][0]);
	    }
	    if (categories.length) {
	      ticks.unshift(categories[0]);
	      var last = categories[length - 1];
	      if (ticks.indexOf(last) === -1) {
	        ticks.push(last);
	      }
	    }
	  }

	  rst.categories = categories;
	  rst.ticks = ticks;
	  return rst;
	};

	/***/ }),
	/* 36 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	module.exports = {
	  requestAnimationFrame: (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window.requestAnimationFrame ? window.requestAnimationFrame : function (fn) {
	    return setTimeout(fn, 16);
	  }
	};

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview convert the line to curve
	 * @author dxq613@gmail.com
	 */
	var Vector2 = __webpack_require__(4);

	function getPoint(v) {
	  return [v.x, v.y];
	}

	function smoothBezier(points, smooth, isLoop, constraint) {
	  var cps = [];

	  var prevPoint = void 0;
	  var nextPoint = void 0;
	  var hasConstraint = !!constraint;
	  var min = void 0;
	  var max = void 0;
	  var point = void 0;
	  var len = void 0;
	  var l = void 0;
	  var i = void 0;
	  if (hasConstraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];

	    for (i = 0, l = points.length; i < l; i++) {
	      point = getPoint(points[i]);
	      Vector2.min(min, min, point);
	      Vector2.max(max, max, point);
	    }
	    Vector2.min(min, min, constraint[0]);
	    Vector2.max(max, max, constraint[1]);
	  }

	  for (i = 0, len = points.length; i < len; i++) {
	    point = getPoint(points[i]);
	    if (isLoop) {
	      prevPoint = getPoint(points[i ? i - 1 : len - 1]);
	      nextPoint = getPoint(points[(i + 1) % len]);
	    } else {
	      if (i === 0 || i === len - 1) {
	        cps.push([point[0], point[1]]);
	        continue;
	      } else {
	        prevPoint = getPoint(points[i - 1]);
	        nextPoint = getPoint(points[i + 1]);
	      }
	    }

	    var v = Vector2.sub([], nextPoint, prevPoint);
	    Vector2.scale(v, v, smooth);
	    var d0 = Vector2.distance(point, prevPoint);
	    var d1 = Vector2.distance(point, nextPoint);

	    var sum = d0 + d1;
	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }

	    var v1 = Vector2.scale([], v, -d0);
	    var v2 = Vector2.scale([], v, d1);

	    var cp0 = Vector2.add([], point, v1);
	    var cp1 = Vector2.add([], point, v2);

	    if (hasConstraint) {
	      Vector2.max(cp0, cp0, min);
	      Vector2.min(cp0, cp0, max);
	      Vector2.max(cp1, cp1, min);
	      Vector2.min(cp1, cp1, max);
	    }

	    cps.push([cp0[0], cp0[1]]);
	    cps.push([cp1[0], cp1[1]]);
	  }

	  if (isLoop) {
	    cps.push(cps.shift());
	  }
	  return cps;
	}

	function catmullRom2bezier(pointList, z, constraint) {
	  var isLoop = !!z;

	  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);
	  var len = pointList.length;
	  var d1 = [];

	  var cp1 = void 0;
	  var cp2 = void 0;
	  var p = void 0;

	  for (var i = 0; i < len - 1; i++) {
	    cp1 = controlPointList[i * 2];
	    cp2 = controlPointList[i * 2 + 1];
	    p = pointList[i + 1];
	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);
	  }

	  if (isLoop) {
	    cp1 = controlPointList[len];
	    cp2 = controlPointList[len + 1];
	    p = pointList[0];

	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);
	  }
	  return d1;
	}

	module.exports = {
	  smooth: catmullRom2bezier
	};

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Geom = __webpack_require__(5);
	var ShapeUtil = __webpack_require__(20);
	var Util = __webpack_require__(0);
	__webpack_require__(32);

	var Path = function (_Geom) {
	  _inherits(Path, _Geom);

	  function Path() {
	    _classCallCheck(this, Path);

	    return _possibleConstructorReturn(this, _Geom.apply(this, arguments));
	  }

	  Path.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'path';
	    cfg.shapeType = 'line';
	    return cfg;
	  };

	  Path.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var cfg = _Geom.prototype.getDrawCfg.call(this, obj);
	    cfg.isStack = this.hasAdjust('stack');
	    return cfg;
	  };

	  Path.prototype.draw = function draw(data, shapeFactory) {
	    var self = this;
	    var container = self.get('container');
	    var yScale = self.getYScale();
	    var connectNulls = self.get('connectNulls');
	    var splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);

	    var cfg = this.getDrawCfg(data[0]);
	    cfg.origin = data;

	    Util.each(splitArray, function (subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex;
	      cfg.points = subData;
	      self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);
	    });
	  };

	  return Path;
	}(Geom);

	Geom.Path = Path;
	module.exports = Path;

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Utility for calculate the with ratui in x axis
	 * @author sima.zhang1990@gmail.com
	 * @author dxq613@gmail.com
	 */

	var Global = __webpack_require__(1);
	var Util = __webpack_require__(0);

	var SizeMixin = {
	  getDefalutSize: function getDefalutSize() {
	    var defaultSize = this.get('defaultSize');
	    if (!defaultSize) {
	      var coord = this.get('coord');
	      var xScale = this.getXScale();
	      var dataArray = this.get('dataArray');
	      var count = xScale.values.length;
	      var range = xScale.range;
	      var normalizeSize = 1 / count;
	      var widthRatio = 1;

	      if (coord && coord.isPolar) {
	        if (coord.transposed && count > 1) {
	          widthRatio = Global.widthRatio.multiplePie;
	        } else {
	          widthRatio = Global.widthRatio.rose;
	        }
	      } else {
	        if (xScale.isLinear) {
	          normalizeSize *= range[1] - range[0];
	        }
	        widthRatio = Global.widthRatio.column;
	      }
	      normalizeSize *= widthRatio;
	      if (this.hasAdjust('dodge')) {
	        normalizeSize = normalizeSize / dataArray.length;
	      }
	      defaultSize = normalizeSize;
	      this.set('defaultSize', defaultSize);
	    }
	    return defaultSize;
	  },
	  getDimWidth: function getDimWidth(dimName) {
	    var coord = this.get('coord');
	    var start = coord.convertPoint({
	      x: 0,
	      y: 0
	    });
	    var end = coord.convertPoint({
	      x: dimName === 'x' ? 1 : 0,
	      y: dimName === 'x' ? 0 : 1
	    });
	    var width = 0;
	    if (start && end) {
	      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
	    }
	    return width;
	  },
	  _getWidth: function _getWidth() {
	    var width = this.get('_width');
	    if (!width) {
	      var coord = this.get('coord');
	      if (coord && coord.isPolar && !coord.transposed) {
	        width = (coord.endAngle - coord.startAngle) * coord.circleRadius;
	      } else {
	        width = this.getDimWidth('x');
	      }
	      this.set('_width', width);
	    }

	    return width;
	  },
	  _toNormalizedSize: function _toNormalizedSize(size) {
	    var width = this._getWidth();
	    return size / width;
	  },
	  _toCoordSize: function _toCoordSize(normalizeSize) {
	    var width = this._getWidth();
	    return width * normalizeSize;
	  },
	  getNormalizedSize: function getNormalizedSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      size = this.getDefalutSize();
	    } else {
	      size = this._toNormalizedSize(size);
	    }
	    return size;
	  },
	  getSize: function getSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      var normalizeSize = this.getDefalutSize();
	      size = this._toCoordSize(normalizeSize);
	    }
	    return size;
	  }
	};

	module.exports = SizeMixin;

	/***/ }),
	/* 40 */,
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {

	var Core = {};

	var Global = __webpack_require__(1);
	Core.Global = Global;
	Core.version = Global.version;
	Core.Chart = __webpack_require__(19);
	Core.Shape = __webpack_require__(8);
	Core.G = __webpack_require__(9);
	Core.Util = __webpack_require__(0);

	Core.track = function (enable) {
	  Global.trackable = enable;
	};
	__webpack_require__(78);

	module.exports = Core;

	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview default theme
	 * @author dxq613@gail.com
	 */
	var Util = __webpack_require__(0);
	var color1 = '#E8E8E8'; // color of axis-line and axis-grid
	var color2 = '#808080'; // color of axis label

	var defaultAxis = {
	  label: {
	    fill: color2,
	    fontSize: 10
	  },
	  line: {
	    stroke: color1,
	    lineWidth: 1
	  },
	  grid: {
	    type: 'line',
	    stroke: color1,
	    lineWidth: 1,
	    lineDash: [2]
	  },
	  tickLine: null,
	  labelOffset: 7.5
	};

	var Theme = {
	  fontFamily: '"Helvetica Neue", "San Francisco", Helvetica, Tahoma, Arial, "PingFang SC", "Hiragino Sans GB", "Heiti SC", "Microsoft YaHei", sans-serif',
	  defaultColor: '#1890FF',
	  pixelRatio: 1,
	  padding: 'auto',
	  appendPadding: 15,
	  colors: ['#1890FF', '#2FC25B', '#FACC14', '#223273', '#8543E0', '#13C2C2', '#3436C7', '#F04864'],
	  shapes: {
	    line: ['line', 'dash'],
	    point: ['circle', 'hollowCircle']
	  },
	  sizes: [4, 10],
	  axis: {
	    bottom: Util.mix({}, defaultAxis, {
	      grid: null
	    }),
	    left: Util.mix({}, defaultAxis, {
	      line: null
	    }),
	    right: Util.mix({}, defaultAxis, {
	      line: null
	    }),
	    circle: Util.mix({}, defaultAxis, {
	      line: null
	    }),
	    radius: Util.mix({}, defaultAxis, {
	      labelOffset: 4
	    })
	  },
	  shape: {
	    line: {
	      lineWidth: 2,
	      lineJoin: 'round',
	      lineCap: 'round'
	    },
	    point: {
	      lineWidth: 0,
	      size: 3
	    },
	    area: {
	      fillOpacity: 0.1
	    }
	  },
	  _defaultAxis: defaultAxis
	};

	module.exports = Theme;

	/***/ }),
	/* 43 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var DomUtil = void 0;
	/**
	 * Detects support for options object argument in addEventListener.
	 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
	 * @private
	 */
	var supportsEventListenerOptions = function () {
	  var supports = false;
	  try {
	    var options = Object.defineProperty({}, 'passive', {
	      get: function get() {
	        supports = true;
	      }
	    });
	    window.addEventListener('e', null, options);
	  } catch (e) {
	    // continue regardless of error
	  }
	  return supports;
	}();

	// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
	// https://github.com/chartjs/Chart.js/issues/4287
	var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;

	function createEvent(type, chart, x, y, nativeEvent) {
	  return {
	    type: type,
	    chart: chart,
	    native: nativeEvent || null,
	    x: x !== undefined ? x : null,
	    y: y !== undefined ? y : null
	  };
	}

	function fromNativeEvent(event, chart) {
	  var type = event.type;

	  var point = {};
	  var touches = event.targetTouches;
	  if (touches && touches.length > 0) {
	    point.x = touches[0].clientX;
	    point.y = touches[0].clientY;
	  } else {
	    point.x = event.clientX;
	    point.y = event.clientY;
	  }
	  var canvas = chart.get('canvas');
	  var pos = DomUtil.getRelativePosition(point, canvas);
	  return createEvent(type, chart, pos.x, pos.y, event);
	}

	DomUtil = {
	  /* global wx, my, module */
	  isWx: (typeof wx === 'undefined' ? 'undefined' : _typeof(wx)) === 'object' && typeof wx.getSystemInfoSync === 'function', // weixin miniprogram
	  isMy: (typeof my === 'undefined' ? 'undefined' : _typeof(my)) === 'object' && typeof my.getSystemInfoSync === 'function', // ant miniprogram
	  isNode: typeof module !== 'undefined' && typeof module.exports !== 'undefined', // in node
	  isBrowser: typeof window !== 'undefined' && typeof window.document !== 'undefined', // in browser
	  getPixelRatio: function getPixelRatio() {
	    return window && window.devicePixelRatio || 1;
	  },
	  getStyle: function getStyle(el, property) {
	    return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	  },
	  getWidth: function getWidth(el) {
	    var width = this.getStyle(el, 'width');
	    if (width === 'auto') {
	      width = el.offsetWidth;
	    }
	    return parseFloat(width);
	  },
	  getHeight: function getHeight(el) {
	    var height = this.getStyle(el, 'height');
	    if (height === 'auto') {
	      height = el.offsetHeight;
	    }
	    return parseFloat(height);
	  },
	  getDomById: function getDomById(id) {
	    if (!id) {
	      return null;
	    }
	    return document.getElementById(id);
	  },
	  getRelativePosition: function getRelativePosition(point, canvas) {
	    var canvasDom = canvas.get('el');

	    var _canvasDom$getBoundin = canvasDom.getBoundingClientRect(),
	        top = _canvasDom$getBoundin.top,
	        right = _canvasDom$getBoundin.right,
	        bottom = _canvasDom$getBoundin.bottom,
	        left = _canvasDom$getBoundin.left;

	    var paddingLeft = parseFloat(this.getStyle(canvasDom, 'padding-left'));
	    var paddingTop = parseFloat(this.getStyle(canvasDom, 'padding-top'));
	    var paddingRight = parseFloat(this.getStyle(canvasDom, 'padding-right'));
	    var paddingBottom = parseFloat(this.getStyle(canvasDom, 'padding-bottom'));
	    var width = right - left - paddingLeft - paddingRight;
	    var height = bottom - top - paddingTop - paddingBottom;
	    var pixelRatio = canvas.get('pixelRatio');

	    var mouseX = (point.x - left - paddingLeft) / width * canvasDom.width / pixelRatio;
	    var mouseY = (point.y - top - paddingTop) / height * canvasDom.height / pixelRatio;

	    return {
	      x: mouseX,
	      y: mouseY
	    };
	  },
	  addEventListener: function addEventListener(source, type, listener) {
	    DomUtil.isBrowser && source.addEventListener(type, listener, eventListenerOptions);
	  },
	  removeEventListener: function removeEventListener(source, type, listener) {
	    DomUtil.isBrowser && source.removeEventListener(type, listener, eventListenerOptions);
	  },
	  createEvent: function createEvent(event, chart) {
	    return fromNativeEvent(event, chart);
	  },
	  measureText: function measureText(text, font, ctx) {
	    if (!ctx) {
	      ctx = document.createElement('canvas').getContext('2d');
	    }

	    ctx.font = font || '12px sans-serif';
	    return ctx.measureText(text);
	  }
	};

	module.exports = DomUtil;

	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(27);

	var upperFirst = function upperFirst(value) {
	  var str = toString(value);
	  return str.charAt(0).toUpperCase() + str.substring(1);
	};

	module.exports = upperFirst;

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(27);

	var lowerFirst = function lowerFirst(value) {
	  var str = toString(value);
	  return str.charAt(0).toLowerCase() + str.substring(1);
	};

	module.exports = lowerFirst;

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * 是否是布尔类型
	 *
	 * @param {Object} value 测试的值
	 * @return {Boolean}
	 */
	var isType = __webpack_require__(7);

	var isBoolean = function isBoolean(value) {
	  return isType(value, 'Boolean');
	};

	module.exports = isBoolean;

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * 是否为函数
	 * @param  {*} fn 对象
	 * @return {Boolean}  是否函数
	 */
	var isType = __webpack_require__(7);

	var isFunction = function isFunction(value) {
	  return isType(value, 'Function');
	};

	module.exports = isFunction;

	/***/ }),
	/* 48 */
	/***/ (function(module, exports) {

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var isObjectLike = function isObjectLike(value) {
	  /**
	   * isObjectLike({}) => true
	   * isObjectLike([1, 2, 3]) => true
	   * isObjectLike(Function) => false
	   * isObjectLike(null) => false
	   */
	  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;
	};

	module.exports = isObjectLike;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

	var isPlainObject = __webpack_require__(28);
	var isArray = __webpack_require__(10);

	var MAX_MIX_LEVEL = 5;

	function _deepMix(dist, src, level, maxLevel) {
	  level = level || 0;
	  maxLevel = maxLevel || MAX_MIX_LEVEL;
	  for (var key in src) {
	    if (src.hasOwnProperty(key)) {
	      var value = src[key];
	      if (value !== null && isPlainObject(value)) {
	        if (!isPlainObject(dist[key])) {
	          dist[key] = {};
	        }
	        if (level < maxLevel) {
	          _deepMix(dist[key], value, level + 1, maxLevel);
	        } else {
	          dist[key] = src[key];
	        }
	      } else if (isArray(value)) {
	        dist[key] = [];
	        dist[key] = dist[key].concat(value);
	      } else if (value !== undefined) {
	        dist[key] = value;
	      }
	    }
	  }
	}

	var deepMix = function deepMix() {
	  var args = new Array(arguments.length);
	  var length = args.length;
	  for (var i = 0; i < length; i++) {
	    args[i] = arguments[i];
	  }
	  var rst = args[0];
	  for (var _i = 1; _i < length; _i++) {
	    _deepMix(rst, args[_i]);
	  }
	  return rst;
	};

	module.exports = deepMix;

	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);

	var Plot = function () {
	  function Plot(cfg) {
	    _classCallCheck(this, Plot);

	    Util.mix(this, cfg);
	    this._init();
	  }

	  Plot.prototype._init = function _init() {
	    var self = this;
	    var start = self.start;
	    var end = self.end;
	    var xMin = Math.min(start.x, end.x);
	    var xMax = Math.max(start.x, end.x);
	    var yMin = Math.min(start.y, end.y);
	    var yMax = Math.max(start.y, end.y);

	    this.tl = {
	      x: xMin,
	      y: yMin
	    };
	    this.tr = {
	      x: xMax,
	      y: yMin
	    };
	    this.bl = {
	      x: xMin,
	      y: yMax
	    };
	    this.br = {
	      x: xMax,
	      y: yMax
	    };
	    this.width = xMax - xMin;
	    this.height = yMax - yMin;
	  };

	  /**
	   * reset
	   * @param  {Object} start start point
	   * @param  {Object} end end point
	   */


	  Plot.prototype.reset = function reset(start, end) {
	    this.start = start;
	    this.end = end;
	    this._init();
	  };

	  /**
	   * check the point is in the range of plot
	   * @param  {Nubmer}  x x value
	   * @param  {[type]}  y y value
	   * @return {Boolean} return the result
	   */


	  Plot.prototype.isInRange = function isInRange(x, y) {
	    if (Util.isObject(x)) {
	      y = x.y;
	      x = x.x;
	    }
	    var tl = this.tl;
	    var br = this.br;
	    return tl.x <= x && x <= br.x && tl.y <= y && y <= br.y;
	  };

	  return Plot;
	}();

	module.exports = Plot;

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {

	var Coord = __webpack_require__(21);

	__webpack_require__(52);

	module.exports = Coord;

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Base = __webpack_require__(21);

	var Cartesian = function (_Base) {
	  _inherits(Cartesian, _Base);

	  function Cartesian() {
	    _classCallCheck(this, Cartesian);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Cartesian.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'cartesian';
	    this.transposed = false;
	    this.isRect = true;
	  };

	  Cartesian.prototype.init = function init(start, end) {
	    this.x = {
	      start: start.x,
	      end: end.x
	    };

	    this.y = {
	      start: start.y,
	      end: end.y
	    };
	  };

	  Cartesian.prototype.convertPoint = function convertPoint(point) {
	    var self = this;
	    var transposed = self.transposed;
	    var xDim = transposed ? 'y' : 'x';
	    var yDim = transposed ? 'x' : 'y';
	    var x = self.x;
	    var y = self.y;
	    return {
	      x: x.start + (x.end - x.start) * point[xDim],
	      y: y.start + (y.end - y.start) * point[yDim]
	    };
	  };

	  Cartesian.prototype.invertPoint = function invertPoint(point) {
	    var self = this;
	    var transposed = self.transposed;
	    var xDim = transposed ? 'y' : 'x';
	    var yDim = transposed ? 'x' : 'y';
	    var x = self.x;
	    var y = self.y;
	    var rst = {};
	    rst[xDim] = (point.x - x.start) / (x.end - x.start);
	    rst[yDim] = (point.y - y.start) / (y.end - y.start);
	    return rst;
	  };

	  return Cartesian;
	}(Base);

	Base.Cartesian = Cartesian;
	Base.Rect = Cartesian;
	module.exports = Cartesian;

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  Position: __webpack_require__(54),
	  Shape: __webpack_require__(55),
	  Size: __webpack_require__(56),
	  Color: __webpack_require__(57)
	};

	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var isNil = __webpack_require__(6);
	var isArray = __webpack_require__(10);
	var each = __webpack_require__(3);
	var Base = __webpack_require__(16);

	var Position = function (_Base) {
	  _inherits(Position, _Base);

	  function Position(cfg) {
	    _classCallCheck(this, Position);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['x', 'y'];
	    _this.type = 'position';
	    return _this;
	  }

	  Position.prototype.mapping = function mapping(x, y) {
	    var scales = this.scales;
	    var coord = this.coord;
	    var scaleX = scales[0];
	    var scaleY = scales[1];
	    var rstX = void 0;
	    var rstY = void 0;
	    var obj = void 0;
	    if (isNil(x) || isNil(y)) {
	      return [];
	    }
	    if (isArray(y) && isArray(x)) {
	      rstX = [];
	      rstY = [];
	      for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i++, j++) {
	        obj = coord.convertPoint({
	          x: scaleX.scale(x[i]),
	          y: scaleY.scale(y[j])
	        });
	        rstX.push(obj.x);
	        rstY.push(obj.y);
	      }
	    } else if (isArray(y)) {
	      x = scaleX.scale(x);
	      rstY = [];
	      each(y, function (yVal) {
	        yVal = scaleY.scale(yVal);
	        obj = coord.convertPoint({
	          x: x,
	          y: yVal
	        });
	        if (rstX && rstX !== obj.x) {
	          if (!isArray(rstX)) {
	            rstX = [rstX];
	          }
	          rstX.push(obj.x);
	        } else {
	          rstX = obj.x;
	        }
	        rstY.push(obj.y);
	      });
	    } else if (isArray(x)) {
	      y = scaleY.scale(y);
	      rstX = [];
	      each(x, function (xVal) {
	        xVal = scaleX.scale(xVal);
	        obj = coord.convertPoint({
	          x: xVal,
	          y: y
	        });
	        if (rstY && rstY !== obj.y) {
	          if (!isArray(rstY)) {
	            rstY = [rstY];
	          }
	          rstY.push(obj.y);
	        } else {
	          rstY = obj.y;
	        }
	        rstX.push(obj.x);
	      });
	    } else {
	      x = scaleX.scale(x);
	      y = scaleY.scale(y);
	      var point = coord.convertPoint({
	        x: x,
	        y: y
	      });
	      rstX = point.x;
	      rstY = point.y;
	    }
	    return [rstX, rstY];
	  };

	  return Position;
	}(Base);

	module.exports = Position;

	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Base = __webpack_require__(16);

	var Shape = function (_Base) {
	  _inherits(Shape, _Base);

	  function Shape(cfg) {
	    _classCallCheck(this, Shape);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['shape'];
	    _this.type = 'shape';
	    _this.gradient = null;
	    return _this;
	  }

	  /**
	   * @override
	   */

	  Shape.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var index = Math.round((values.length - 1) * percent);
	    return values[index];
	  };

	  return Shape;
	}(Base);

	module.exports = Shape;

	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Base = __webpack_require__(16);

	var Size = function (_Base) {
	  _inherits(Size, _Base);

	  function Size(cfg) {
	    _classCallCheck(this, Size);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['size'];
	    _this.type = 'size';
	    _this.gradient = null;
	    return _this;
	  }

	  return Size;
	}(Base);

	module.exports = Size;

	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var ColorUtil = __webpack_require__(58);
	var Base = __webpack_require__(16);

	var Color = function (_Base) {
	  _inherits(Color, _Base);

	  function Color(cfg) {
	    _classCallCheck(this, Color);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['color'];
	    _this.type = 'color';
	    _this.gradient = null;
	    if (Util.isString(_this.values)) {
	      _this.linear = true;
	    }
	    return _this;
	  }

	  /**
	   * @override
	   */


	  Color.prototype.getLinearValue = function getLinearValue(percent) {
	    var gradient = this.gradient;
	    if (!gradient) {
	      var values = this.values;
	      gradient = ColorUtil.gradient(values);
	      this.gradient = gradient;
	    }
	    return gradient(percent);
	  };

	  return Color;
	}(Base);

	module.exports = Color;

	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);

	// Get the interpolation between colors
	function getValue(start, end, percent, index) {
	  var value = start[index] + (end[index] - start[index]) * percent;
	  return value;
	}

	// convert to hex
	function arr2hex(arr) {
	  return '#' + toRGBValue(arr[0]) + toRGBValue(arr[1]) + toRGBValue(arr[2]);
	}

	function toRGBValue(value) {
	  value = Math.round(value);
	  value = value.toString(16);
	  if (value.length === 1) {
	    value = '0' + value;
	  }
	  return value;
	}

	function calColor(colors, percent) {
	  var steps = colors.length - 1;
	  var step = Math.floor(steps * percent);
	  var left = steps * percent - step;
	  var start = colors[step];
	  var end = step === steps ? start : colors[step + 1];
	  var rgb = arr2hex([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);
	  return rgb;
	}

	function hex2arr(str) {
	  var arr = [];
	  arr.push(parseInt(str.substr(1, 2), 16));
	  arr.push(parseInt(str.substr(3, 2), 16));
	  arr.push(parseInt(str.substr(5, 2), 16));
	  return arr;
	}

	var colorCache = {
	  black: '#000000',
	  blue: '#0000ff',
	  grey: '#808080',
	  green: '#008000',
	  orange: '#ffa500',
	  pink: '#ffc0cb',
	  purple: '#800080',
	  red: '#ff0000',
	  white: '#ffffff',
	  yellow: '#ffff00'
	};

	var ColorUtil = {
	  /**
	   * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.
	   * @param  {String} color color value
	   * @return {String} Returns a hexadecimal string
	   */
	  toHex: function toHex(color) {
	    if (colorCache[color]) {
	      return colorCache[color];
	    }

	    if (color[0] === '#') {
	      if (color.length === 7) {
	        return color;
	      }

	      var hex = color.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (m, r, g, b) {
	        return '#' + r + r + g + g + b + b;
	      }); // hex3 to hex6
	      colorCache[color] = hex;
	      return hex;
	    }

	    // rgb/rgba to hex
	    var rst = color.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
	    rst.shift();
	    rst = arr2hex(rst);
	    colorCache[color] = rst;
	    return rst;
	  },


	  hex2arr: hex2arr,

	  /**
	   * handle the gradient color
	   * @param  {Array} colors the colors
	   * @return {String} return the color value
	   */
	  gradient: function gradient(colors) {
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors, function (color) {
	      if (color.indexOf('#') === -1) {
	        color = ColorUtil.toHex(color);
	      }
	      points.push(hex2arr(color));
	    });
	    return function (percent) {
	      return calColor(points, percent);
	    };
	  }
	};

	module.exports = ColorUtil;

	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(1);
	var Scale = __webpack_require__(60);
	var SCALE_TYPES_MAP = {
	  linear: 'Linear',
	  cat: 'Cat',
	  timeCat: 'TimeCat',
	  identity: 'Identity'
	};

	var ScaleController = function () {
	  function ScaleController(cfg) {
	    _classCallCheck(this, ScaleController);

	    // defs 列定义
	    this.defs = {};
	    Util.mix(this, cfg);
	  }

	  ScaleController.prototype._getDef = function _getDef(field) {
	    var defs = this.defs;
	    var def = null;
	    if (Global.scales[field] || defs[field]) {
	      def = Util.mix({}, Global.scales[field]);
	      Util.each(defs[field], function (v, k) {
	        if (Util.isNil(v)) {
	          delete def[k];
	        } else {
	          def[k] = v;
	        }
	      });
	    }
	    return def;
	  };

	  ScaleController.prototype._getDefaultType = function _getDefaultType(field, data, def) {
	    if (def && def.type) {
	      return def.type;
	    }
	    var type = 'linear';
	    var value = Util.Array.firstValue(data, field);
	    if (Util.isArray(value)) {
	      value = value[0];
	    }
	    if (Util.isString(value)) {
	      type = 'cat';
	    }
	    return type;
	  };

	  ScaleController.prototype._getScaleCfg = function _getScaleCfg(type, field, data, def) {
	    var values = void 0;
	    if (def && def.values) {
	      values = def.values;
	    } else {
	      values = Util.Array.values(data, field);
	    }
	    var cfg = {
	      field: field,
	      values: values
	    };

	    if (type !== 'cat' && type !== 'timeCat') {
	      if (!def || !(def.min && def.max)) {
	        var _Util$Array$getRange = Util.Array.getRange(values),
	            min = _Util$Array$getRange.min,
	            max = _Util$Array$getRange.max;

	        cfg.min = min;
	        cfg.max = max;
	        cfg.nice = true;
	      }
	    }

	    if (type === 'cat' || type === 'timeCat') {
	      cfg.isRounding = false; // used for tickCount calculation
	    }

	    return cfg;
	  };

	  ScaleController.prototype.createScale = function createScale(field, data) {
	    var self = this;
	    var def = self._getDef(field);
	    var scale = void 0;
	    if (!data || !data.length) {
	      if (def && def.type) {
	        scale = new Scale[SCALE_TYPES_MAP[def.type]](def);
	      } else {
	        scale = new Scale.Identity({
	          value: field,
	          field: field.toString(),
	          values: [field]
	        });
	      }
	      return scale;
	    }
	    var firstObj = data[0];
	    var firstValue = firstObj[field];
	    if (firstValue === null) {
	      firstValue = Util.Array.firstValue(data, field);
	    }

	    if (Util.isNumber(field) || Util.isNil(firstValue) && !def) {
	      scale = new Scale.Identity({
	        value: field,
	        field: field.toString(),
	        values: [field]
	      });
	    } else {
	      var type = self._getDefaultType(field, data, def);
	      var cfg = self._getScaleCfg(type, field, data, def);
	      def && Util.mix(cfg, def);
	      scale = new Scale[SCALE_TYPES_MAP[type]](cfg);
	    }
	    return scale;
	  };

	  return ScaleController;
	}();

	module.exports = ScaleController;

	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {

	var Scale = __webpack_require__(13);

	__webpack_require__(61);
	__webpack_require__(64);
	__webpack_require__(34);

	module.exports = Scale;

	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */
	var isNil = __webpack_require__(6);
	var each = __webpack_require__(3);

	var Base = __webpack_require__(13);
	var numberAuto = __webpack_require__(62);

	/**
	 * 线性度量
	 * @class Scale.Linear
	 */

	var Linear = function (_Base) {
	  _inherits(Linear, _Base);

	  function Linear() {
	    _classCallCheck(this, Linear);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Linear.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Base.prototype._initDefaultCfg.call(this);

	    this.type = 'linear';
	    this.isLinear = true;
	    /**
	     * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks
	     * @type {Boolean}
	     * @default false
	     */
	    this.nice = false;
	    /**
	     * min value of the scale
	     * @type {Number}
	     * @default null
	     */
	    this.min = null;
	    /**
	     * min value limitted of the scale
	     * @type {Number}
	     * @default null
	     */
	    this.minLimit = null;
	    /**
	     * max value of the scale
	     * @type {Number}
	     * @default null
	     */
	    this.max = null;
	    /**
	     * max value limitted of the scale
	     * @type {Number}
	     * @default null
	     */
	    this.maxLimit = null;
	    /**
	     * 自动生成标记时的个数
	     * @type {Number}
	     * @default null
	     */
	    this.tickCount = null;
	    /**
	     * 坐标轴点之间的间距，指的是真实数据的差值
	     * @type {Number}
	     * @default null
	     */
	    this.tickInterval = null;
	    /**
	     * 用于计算坐标点时逼近的数组
	     * @type {Array}
	     */
	    this.snapArray = null;
	  };

	  /**
	   * @protected
	   * @override
	   */

	  Linear.prototype.init = function init() {
	    var self = this;
	    if (!self.ticks) {
	      self.min = self.translate(self.min);
	      self.max = self.translate(self.max);
	      self.initTicks();
	    } else {
	      var ticks = self.ticks;
	      var firstValue = self.translate(ticks[0]);
	      var lastValue = self.translate(ticks[ticks.length - 1]);
	      if (isNil(self.min) || self.min > firstValue) {
	        self.min = firstValue;
	      }
	      if (isNil(self.max) || self.max < lastValue) {
	        self.max = lastValue;
	      }
	    }
	  };

	  /**
	   * 计算坐标点
	   * @protected
	   * @return {Array} 计算完成的坐标点
	   */

	  Linear.prototype.calculateTicks = function calculateTicks() {
	    var min = this.min,
	        max = this.max,
	        minLimit = this.minLimit,
	        maxLimit = this.maxLimit,
	        tickCount = this.tickCount,
	        tickInterval = this.tickInterval,
	        snapArray = this.snapArray;

	    if (tickCount === 1) {
	      throw new Error('linear scale\'tickCount should not be 1');
	    }
	    if (max < min) {
	      throw new Error('max: ' + max + ' should not be less than min: ' + min);
	    }
	    var tmp = numberAuto({
	      min: min,
	      max: max,
	      minLimit: minLimit,
	      maxLimit: maxLimit,
	      minCount: tickCount,
	      maxCount: tickCount,
	      interval: tickInterval,
	      snapArray: snapArray
	    });
	    return tmp.ticks;
	  };

	  // 初始化ticks


	  Linear.prototype.initTicks = function initTicks() {
	    var self = this;
	    var calTicks = self.calculateTicks();
	    if (self.nice) {
	      // 如果需要优化显示的tick
	      self.ticks = calTicks;
	      self.min = calTicks[0];
	      self.max = calTicks[calTicks.length - 1];
	    } else {
	      var ticks = [];
	      each(calTicks, function (tick) {
	        if (tick >= self.min && tick <= self.max) {
	          ticks.push(tick);
	        }
	      });

	      // 如果 ticks 为空，直接输入最小值、最大值
	      if (!ticks.length) {
	        ticks.push(self.min);
	        ticks.push(self.max);
	      }

	      self.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */

	  Linear.prototype.scale = function scale(value) {
	    if (isNil(value)) {
	      return NaN;
	    }
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }

	    var percent = (value - min) / (max - min);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */

	  Linear.prototype.invert = function invert(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    return this.min + percent * (this.max - this.min);
	  };

	  return Linear;
	}(Base);

	Base.Linear = Linear;
	module.exports = Linear;

	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自动计算数字坐标轴
	 * @author dxq613@gmail.com
	 */

	var isNil = __webpack_require__(6);
	var AutoUtil = __webpack_require__(63);

	var MIN_COUNT = 5;
	var MAX_COUNT = 7;
	var SNAP_COUNT_ARRAY = [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10];
	var SNAP_ARRAY = [0, 1, 2, 4, 5, 10];

	module.exports = function (info) {
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var ticks = [];
	  var minCount = info.minCount || MIN_COUNT;
	  var maxCount = info.maxCount || MAX_COUNT;
	  var isFixedCount = minCount === maxCount; // 是否限定死了个数
	  var minLimit = isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值
	  var maxLimit = isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值
	  var avgCount = (minCount + maxCount) / 2;
	  var count = avgCount;
	  // 用户传入的逼近数组
	  var snapArray = info.snapArray ? info.snapArray : isFixedCount ? SNAP_COUNT_ARRAY : SNAP_ARRAY;

	  // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分
	  if (min === minLimit && max === maxLimit && isFixedCount) {
	    interval = (max - min) / (count - 1);
	  }

	  if (isNil(min)) {
	    min = 0;
	  }
	  if (isNil(max)) {
	    max = 0;
	  }
	  if (max === min) {
	    if (min === 0) {
	      max = 1;
	    } else {
	      if (min > 0) {
	        min = 0;
	      } else {
	        max = 0;
	      }
	    }
	    if (max - min < 5 && !interval && max - min >= 1) {
	      interval = 1;
	    }
	  }

	  if (isNil(interval)) {
	    // 计算间距
	    var temp = (max - min) / (avgCount - 1);
	    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');
	    if (maxCount !== minCount) {
	      count = parseInt((max - min) / interval, 10);
	      if (count > maxCount) {
	        count = maxCount;
	      }
	      if (count < minCount) {
	        count = minCount;
	      }
	      // 不确定tick的个数时，使得tick偏小
	      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');
	    }
	  }
	  if (info.interval || maxCount !== minCount) {
	    // 校正 max 和 min
	    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近
	    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近

	    count = Math.round((max - min) / interval);
	    min = AutoUtil.fixedBase(min, interval);
	    max = AutoUtil.fixedBase(max, interval);
	  } else {
	    avgCount = parseInt(avgCount, 10); // 取整
	    var avg = (max + min) / 2;
	    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');
	    var sideCount = Math.floor((avgCount - 2) / 2);
	    var maxTick = avgTick + sideCount * interval;
	    var minTick = void 0;
	    if (avgCount % 2 === 0) {
	      minTick = avgTick - sideCount * interval;
	    } else {
	      minTick = avgTick - (sideCount + 1) * interval;
	    }
	    if (maxTick < max) {
	      maxTick = maxTick + interval;
	    }
	    if (minTick > min) {
	      minTick = minTick - interval;
	    }
	    max = AutoUtil.fixedBase(maxTick, interval);
	    min = AutoUtil.fixedBase(minTick, interval);
	  }

	  max = Math.min(max, maxLimit);
	  min = Math.max(min, minLimit);

	  ticks.push(min);
	  for (var i = 1; i < count; i++) {
	    var tickValue = AutoUtil.fixedBase(interval * i + min, interval);
	    if (tickValue < max) {
	      ticks.push(tickValue);
	    }
	  }
	  if (ticks[ticks.length - 1] < max) {
	    ticks.push(max);
	  }
	  return {
	    min: min,
	    max: max,
	    interval: interval,
	    count: count,
	    ticks: ticks
	  };
	};

	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {

	/**
	 * @fileOverview 计算方法
	 * @author dxq613@gmail.com
	 */

	// 如果小数点后面超过 10 位浮点数时进行一下处理
	var DECIMAL_LENGTH = 12;
	// 获取系数
	function getFactor(v) {
	  var factor = 1;
	  if (v === Infinity || v === -Infinity) {
	    throw new Error('Not support Infinity!');
	  }
	  if (v < 1) {
	    var count = 0;
	    while (v < 1) {
	      factor = factor / 10;
	      v = v * 10;
	      count++;
	    }
	    // 浮点数计算出现问题
	    if (factor.toString().length > DECIMAL_LENGTH) {
	      factor = parseFloat(factor.toFixed(count));
	    }
	  } else {
	    while (v > 10) {
	      factor = factor * 10;
	      v = v / 10;
	    }
	  }

	  return factor;
	}

	// 取小于当前值的
	function arrayFloor(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }

	  var pre = values[0];

	  if (value < values[0]) {
	    return NaN;
	  }

	  if (value >= values[length - 1]) {
	    return values[length - 1];
	  }
	  for (var i = 1; i < values.length; i++) {
	    if (value < values[i]) {
	      break;
	    }
	    pre = values[i];
	  }

	  return pre;
	}

	// 大于当前值的第一个
	function arrayCeiling(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	  // var pre = values[0];
	  var rst = void 0;
	  if (value > values[length - 1]) {
	    return NaN;
	  }
	  if (value < values[0]) {
	    return values[0];
	  }

	  for (var i = 1; i < values.length; i++) {
	    if (value <= values[i]) {
	      rst = values[i];
	      break;
	    }
	  }

	  return rst;
	}

	var Util = {
	  // 获取逼近的数值
	  snapFactorTo: function snapFactorTo(v, arr, snapType) {
	    // 假设 v = -512,isFloor = true
	    if (isNaN(v)) {
	      return NaN;
	    }
	    var factor = 1; // 计算系数
	    if (v !== 0) {
	      if (v < 0) {
	        factor = -1;
	      }
	      v = v * factor; // v = 512
	      var tmpFactor = getFactor(v);
	      factor = factor * tmpFactor; // factor = -100

	      v = v / tmpFactor; // v = 5.12
	    }
	    if (snapType === 'floor') {
	      v = Util.snapFloor(arr, v); // v = 5
	    } else if (snapType === 'ceil') {
	      v = Util.snapCeiling(arr, v); // v = 6
	    } else {
	      v = Util.snapTo(arr, v); // 四舍五入 5
	    }
	    var rst = v * factor;
	    // 如果出现浮点数计算问题，需要处理一下
	    if (Math.abs(factor) < 1 && rst.toString().length > DECIMAL_LENGTH) {
	      var decimalVal = parseInt(1 / factor);
	      var symbol = factor > 0 ? 1 : -1;
	      rst = v / decimalVal * symbol;
	    }
	    return rst;
	  },

	  // 获取逼近的倍数
	  snapMultiple: function snapMultiple(v, base, snapType) {
	    var div = void 0;
	    if (snapType === 'ceil') {
	      div = Math.ceil(v / base);
	    } else if (snapType === 'floor') {
	      div = Math.floor(v / base);
	    } else {
	      div = Math.round(v / base);
	    }
	    return div * base;
	  },

	  /**
	   * 获取逼近的值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的值
	   */
	  snapTo: function snapTo(values, value) {
	    // 这里假定values是升序排列
	    var floorVal = arrayFloor(values, value);
	    var ceilingVal = arrayCeiling(values, value);
	    if (isNaN(floorVal) || isNaN(ceilingVal)) {
	      if (values[0] >= value) {
	        return values[0];
	      }
	      var last = values[values.length - 1];
	      if (last <= value) {
	        return last;
	      }
	    }
	    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {
	      return floorVal;
	    }
	    return ceilingVal;
	  },

	  /**
	   * 获取逼近的最小值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最小值
	   */
	  snapFloor: function snapFloor(values, value) {
	    // 这里假定values是升序排列
	    return arrayFloor(values, value);
	  },

	  /**
	   * 获取逼近的最大值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最大值
	   */
	  snapCeiling: function snapCeiling(values, value) {
	    // 这里假定values是升序排列
	    return arrayCeiling(values, value);
	  },
	  fixedBase: function fixedBase(v, base) {
	    var str = base.toString();
	    var index = str.indexOf('.');
	    if (index === -1) {
	      return Math.round(v);
	    }
	    var length = str.substr(index + 1).length;
	    if (length > 20) {
	      length = 20;
	    }
	    return parseFloat(v.toFixed(length));
	  }
	};

	module.exports = Util;

	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Base = __webpack_require__(13);
	var isNumber = __webpack_require__(17);

	var Identity = function (_Base) {
	  _inherits(Identity, _Base);

	  function Identity() {
	    _classCallCheck(this, Identity);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Identity.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Base.prototype._initDefaultCfg.call(this);
	    this.isIdentity = true;
	    this.type = 'identity';
	    /**
	     * 常量值
	     * @type {*}
	     */
	    this.value = null;
	  };

	  /**
	   * @override
	   */

	  Identity.prototype.getText = function getText() {
	    return this.value.toString();
	  };

	  /**
	   * @override
	   */

	  Identity.prototype.scale = function scale(value) {
	    if (this.value !== value && isNumber(value)) {
	      return value;
	    }
	    return this.range[0];
	  };

	  /**
	   * @override
	   */

	  Identity.prototype.invert = function invert() {
	    return this.value;
	  };

	  return Identity;
	}(Base);

	Base.Identity = Identity;
	module.exports = Identity;

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Axis = __webpack_require__(66);
	var Global = __webpack_require__(1);

	var _require = __webpack_require__(9),
	    Shape = _require.Shape;

	function formatTicks(ticks) {
	  var tmp = ticks.slice(0);
	  if (tmp.length > 0) {
	    var first = tmp[0];
	    var last = tmp[tmp.length - 1];
	    if (first.value !== 0) {
	      tmp.unshift({
	        value: 0
	      });
	    }
	    if (last.value !== 1) {
	      tmp.push({
	        value: 1
	      });
	    }
	  }

	  return tmp;
	}

	var AxisController = function () {
	  function AxisController(cfg) {
	    _classCallCheck(this, AxisController);

	    this.axisCfg = {};
	    this.frontPlot = null;
	    this.backPlot = null;
	    this.axes = {}; // store the axes's options
	    Util.mix(this, cfg);
	  }

	  AxisController.prototype._isHide = function _isHide(field) {
	    var axisCfg = this.axisCfg;
	    return !axisCfg || axisCfg[field] === false;
	  };

	  AxisController.prototype._getLinePosition = function _getLinePosition(scale, dimType, index, transposed) {
	    var position = '';
	    var field = scale.field;
	    var axisCfg = this.axisCfg;
	    if (axisCfg[field] && axisCfg[field].position) {
	      position = axisCfg[field].position;
	    } else if (dimType === 'x') {
	      position = transposed ? 'left' : 'bottom';
	    } else if (dimType === 'y') {
	      position = index ? 'right' : 'left';
	      if (transposed) {
	        position = 'bottom';
	      }
	    }

	    return position;
	  };

	  AxisController.prototype._getLineCfg = function _getLineCfg(coord, dimType, position) {
	    var start = void 0;
	    var end = void 0;
	    var factor = 1; // Mark clockwise or counterclockwise
	    if (dimType === 'x') {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 1,
	        y: 0
	      };
	    } else {
	      if (position === 'right') {
	        // there will be several y axes
	        start = {
	          x: 1,
	          y: 0
	        };
	        end = {
	          x: 1,
	          y: 1
	        };
	      } else {
	        start = {
	          x: 0,
	          y: 0
	        };
	        end = {
	          x: 0,
	          y: 1
	        };
	        factor = -1;
	      }
	    }
	    if (coord.transposed) {
	      factor *= -1;
	    }

	    return {
	      offsetFactor: factor,
	      start: coord.convertPoint(start),
	      end: coord.convertPoint(end)
	    };
	  };

	  AxisController.prototype._getCircleCfg = function _getCircleCfg(coord) {
	    return {
	      startAngle: coord.startAngle,
	      endAngle: coord.endAngle,
	      center: coord.center,
	      radius: coord.circleRadius
	    };
	  };

	  AxisController.prototype._getRadiusCfg = function _getRadiusCfg(coord) {
	    var transposed = coord.transposed;
	    var start = void 0;
	    var end = void 0;
	    if (transposed) {
	      start = { x: 0, y: 0 };
	      end = { x: 1, y: 0 };
	    } else {
	      start = { x: 0, y: 0 };
	      end = { x: 0, y: 1 };
	    }
	    return {
	      offsetFactor: -1,
	      start: coord.convertPoint(start),
	      end: coord.convertPoint(end)
	    };
	  };

	  AxisController.prototype._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType, defaultCfg) {
	    var self = this;
	    var axisCfg = this.axisCfg;
	    var ticks = scale.getTicks();

	    var cfg = Util.deepMix({
	      ticks: ticks,
	      frontContainer: this.frontPlot,
	      backContainer: this.backPlot
	    }, defaultCfg, axisCfg[scale.field]);

	    var labels = [];
	    var label = cfg.label;
	    var count = ticks.length;
	    var maxWidth = 0;
	    var maxHeight = 0;
	    var labelCfg = label;

	    Util.each(ticks, function (tick, index) {
	      if (Util.isFunction(label)) {
	        var executedLabel = label(tick.text, index, count);
	        if (executedLabel) {
	          labelCfg = Util.mix({}, Global._defaultAxis.label, executedLabel);
	        } else {
	          labelCfg = null;
	        }
	      }
	      if (labelCfg) {
	        var textStyle = {};
	        if (labelCfg.textAlign) {
	          textStyle.textAlign = labelCfg.textAlign;
	        }
	        if (labelCfg.textBaseline) {
	          textStyle.textBaseline = labelCfg.textBaseline;
	        }
	        var axisLabel = new Shape.Text({
	          className: 'axis-label',
	          attrs: Util.mix({
	            x: 0,
	            y: 0,
	            text: tick.text,
	            fontFamily: self.chart.get('canvas').get('fontFamily')
	          }, labelCfg),
	          value: tick.value,
	          textStyle: textStyle,
	          top: labelCfg.top,
	          context: self.chart.get('canvas').get('context')
	        });
	        labels.push(axisLabel);

	        var _axisLabel$getBBox = axisLabel.getBBox(),
	            width = _axisLabel$getBBox.width,
	            height = _axisLabel$getBBox.height;

	        maxWidth = Math.max(maxWidth, width);
	        maxHeight = Math.max(maxHeight, height);
	      }
	    });

	    cfg.labels = labels;
	    cfg.maxWidth = maxWidth;
	    cfg.maxHeight = maxHeight;
	    return cfg;
	  };

	  AxisController.prototype._createAxis = function _createAxis(coord, scale, verticalScale, dimType) {
	    var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

	    var self = this;
	    var coordType = coord.type;
	    var transposed = coord.transposed;
	    var type = void 0;
	    var key = void 0;
	    var defaultCfg = void 0;
	    if (coordType === 'cartesian' || coordType === 'rect') {
	      var position = self._getLinePosition(scale, dimType, index, transposed);
	      defaultCfg = Global.axis[position];
	      defaultCfg.position = position;
	      type = 'Line';
	      key = position;
	    } else {
	      if (dimType === 'x' && !transposed || dimType === 'y' && transposed) {
	        defaultCfg = Global.axis.circle;
	        type = 'Circle';
	        key = 'circle';
	      } else {
	        defaultCfg = Global.axis.radius;
	        type = 'Line';
	        key = 'radius';
	      }
	    }
	    var cfg = self._getAxisCfg(coord, scale, verticalScale, dimType, defaultCfg);
	    cfg.type = type;
	    cfg.dimType = dimType;
	    cfg.verticalScale = verticalScale;
	    cfg.index = index;
	    this.axes[key] = cfg;
	  };

	  AxisController.prototype.createAxis = function createAxis(coord, xScale, yScales) {
	    var self = this;
	    if (xScale && !self._isHide(xScale.field)) {
	      self._createAxis(coord, xScale, yScales[0], 'x');
	    }
	    Util.each(yScales, function (yScale, index) {
	      if (!self._isHide(yScale.field)) {
	        self._createAxis(coord, yScale, xScale, 'y', index);
	      }
	    });

	    var axes = this.axes;
	    var chart = self.chart;
	    if (chart._isAutoPadding()) {
	      var userPadding = Util.parsePadding(chart.get('padding'));
	      var appendPadding = Util.parsePadding(chart.get('appendPadding'));
	      var legendRange = chart.get('legendRange') || {
	        top: 0,
	        right: 0,
	        bottom: 0,
	        left: 0
	      };

	      var padding = [userPadding[0] === 'auto' ? legendRange.top + appendPadding[0] * 2 : userPadding[0], userPadding[1] === 'auto' ? legendRange.right + appendPadding[1] : userPadding[1], userPadding[2] === 'auto' ? legendRange.bottom + appendPadding[2] : userPadding[2], userPadding[3] === 'auto' ? legendRange.left + appendPadding[3] : userPadding[3]];

	      if (coord.isPolar) {
	        var circleAxis = axes.circle;
	        if (circleAxis) {
	          var maxHeight = circleAxis.maxHeight,
	              maxWidth = circleAxis.maxWidth,
	              labelOffset = circleAxis.labelOffset;

	          padding[0] += maxHeight + labelOffset;
	          padding[1] += maxWidth + labelOffset;
	          padding[2] += maxHeight + labelOffset;
	          padding[3] += maxWidth + labelOffset;
	        }
	      } else {
	        if (axes.right && userPadding[1] === 'auto') {
	          var _axes$right = axes.right,
	              _maxWidth = _axes$right.maxWidth,
	              _labelOffset = _axes$right.labelOffset;

	          padding[1] += _maxWidth + _labelOffset;
	        }

	        if (axes.left && userPadding[3] === 'auto') {
	          var _axes$left = axes.left,
	              _maxWidth2 = _axes$left.maxWidth,
	              _labelOffset2 = _axes$left.labelOffset;

	          padding[3] += _maxWidth2 + _labelOffset2;
	        }

	        if (axes.bottom && userPadding[2] === 'auto') {
	          var _axes$bottom = axes.bottom,
	              _maxHeight = _axes$bottom.maxHeight,
	              _labelOffset3 = _axes$bottom.labelOffset;

	          padding[2] += _maxHeight + _labelOffset3;
	        }
	      }
	      chart.set('_padding', padding);
	      chart._updateLayout(padding);
	    }

	    Util.each(axes, function (axis) {
	      var type = axis.type,
	          grid = axis.grid,
	          verticalScale = axis.verticalScale,
	          ticks = axis.ticks,
	          dimType = axis.dimType,
	          position = axis.position,
	          index = axis.index;

	      var appendCfg = void 0;
	      if (coord.isPolar) {
	        if (type === 'Line') {
	          appendCfg = self._getRadiusCfg(coord);
	        } else if (type === 'Circle') {
	          appendCfg = self._getCircleCfg(coord);
	        }
	      } else {
	        appendCfg = self._getLineCfg(coord, dimType, position);
	      }

	      if (grid && verticalScale) {
	        var gridPoints = [];
	        var verticalTicks = formatTicks(verticalScale.getTicks());

	        Util.each(ticks, function (tick) {
	          var subPoints = [];
	          Util.each(verticalTicks, function (verticalTick) {
	            var x = dimType === 'x' ? tick.value : verticalTick.value;
	            var y = dimType === 'x' ? verticalTick.value : tick.value;
	            var point = coord.convertPoint({
	              x: x,
	              y: y
	            });
	            subPoints.push(point);
	          });

	          gridPoints.push({
	            points: subPoints,
	            _id: 'axis-' + dimType + index + '-grid-' + tick.tickValue
	          });
	        });
	        axis.gridPoints = gridPoints;

	        if (coord.isPolar && grid.type === 'arc') {
	          axis.center = coord.center;
	          axis.startAngle = coord.startAngle;
	          axis.endAngle = coord.endAngle;
	        }
	      }
	      appendCfg._id = 'axis-' + dimType;
	      if (!Util.isNil(index)) {
	        appendCfg._id = 'axis-' + dimType + index;
	      }

	      new Axis[type](Util.mix(axis, appendCfg));
	    });
	  };

	  AxisController.prototype.clear = function clear() {
	    this.axes = {};
	    this.frontPlot.clear();
	    this.backPlot.clear();
	  };

	  return AxisController;
	}();

	module.exports = AxisController;

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {

	var Abstract = __webpack_require__(24);

	__webpack_require__(67);

	module.exports = Abstract;

	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Abstract = __webpack_require__(24);

	var Line = function (_Abstract) {
	  _inherits(Line, _Abstract);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Abstract.apply(this, arguments));
	  }

	  Line.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Abstract.prototype._initDefaultCfg.call(this);
	    this.start = null;
	    this.end = null;
	  };

	  Line.prototype.getOffsetPoint = function getOffsetPoint(value) {
	    var start = this.start,
	        end = this.end;

	    return {
	      x: start.x + (end.x - start.x) * value,
	      y: start.y + (end.y - start.y) * value
	    };
	  };

	  Line.prototype.getAxisVector = function getAxisVector() {
	    var start = this.start,
	        end = this.end;

	    return [end.x - start.x, end.y - start.y];
	  };

	  Line.prototype.drawLine = function drawLine(lineCfg) {
	    var container = this.getContainer(lineCfg.top);
	    var start = this.start,
	        end = this.end;

	    container.addShape('line', {
	      className: 'axis-line',
	      attrs: Util.mix({
	        x1: start.x,
	        y1: start.y,
	        x2: end.x,
	        y2: end.y
	      }, lineCfg)
	    });
	  };

	  return Line;
	}(Abstract);

	Abstract.Line = Line;
	module.exports = Line;

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Container = __webpack_require__(30);
	var Group = __webpack_require__(31);

	var _require = __webpack_require__(36),
	    requestAnimationFrame = _require.requestAnimationFrame;

	var Canvas = function () {
	  Canvas.prototype.get = function get(name) {
	    return this._attrs[name];
	  };

	  Canvas.prototype.set = function set(name, value) {
	    this._attrs[name] = value;
	  };

	  function Canvas(cfg) {
	    _classCallCheck(this, Canvas);

	    this._attrs = Util.mix({
	      type: 'canvas',
	      children: []
	    }, cfg);
	    this._initPixelRatio();
	    this._initCanvas();
	  }

	  Canvas.prototype._initPixelRatio = function _initPixelRatio() {
	    var pixelRatio = this.get('pixelRatio');
	    if (!pixelRatio) {
	      this.set('pixelRatio', Util.getPixelRatio());
	    }
	  };

	  Canvas.prototype.beforeDraw = function beforeDraw() {
	    var context = this._attrs.context;
	    var el = this._attrs.el;
	    !Util.isWx && !Util.isMy && context && context.clearRect(0, 0, el.width, el.height);
	  };

	  Canvas.prototype._initCanvas = function _initCanvas() {
	    var self = this;
	    var el = self.get('el');
	    var context = self.get('context');
	    var canvas = void 0;

	    if (context) {
	      // CanvasRenderingContext2D
	      canvas = context.canvas;
	    } else if (Util.isString(el)) {
	      // HTMLElement's id
	      canvas = Util.getDomById(el);
	    } else {
	      // HTMLElement
	      canvas = el;
	    }

	    if (!canvas) {
	      throw new Error('Please specify the id or el of the chart!');
	    }

	    if (context && canvas && !canvas.getContext) {
	      canvas.getContext = function () {
	        return context;
	      };
	    }

	    var width = self.get('width');
	    if (!width) {
	      width = Util.getWidth(canvas);
	    }

	    var height = self.get('height');
	    if (!height) {
	      height = Util.getHeight(canvas);
	    }

	    self.set('canvas', this);
	    self.set('el', canvas);
	    self.set('context', context || canvas.getContext('2d'));
	    self.changeSize(width, height);
	  };

	  Canvas.prototype.changeSize = function changeSize(width, height) {
	    var pixelRatio = this.get('pixelRatio');
	    var canvasDOM = this.get('el');

	    if (Util.isBrowser) {
	      canvasDOM.style.width = width + 'px';
	      canvasDOM.style.height = height + 'px';
	    }

	    if (!Util.isWx && !Util.isMy) {
	      canvasDOM.width = width * pixelRatio;
	      canvasDOM.height = height * pixelRatio;

	      if (pixelRatio !== 1) {
	        var ctx = this.get('context');
	        ctx.scale(pixelRatio, pixelRatio);
	      }
	    }

	    this.set('width', width);
	    this.set('height', height);
	  };

	  Canvas.prototype.getWidth = function getWidth() {
	    var pixelRatio = this.get('pixelRatio');
	    var width = this.get('width');
	    return width * pixelRatio;
	  };

	  Canvas.prototype.getHeight = function getHeight() {
	    var pixelRatio = this.get('pixelRatio');
	    var height = this.get('height');
	    return height * pixelRatio;
	  };

	  Canvas.prototype.getPointByClient = function getPointByClient(clientX, clientY) {
	    var el = this.get('el');
	    var bbox = el.getBoundingClientRect();
	    var width = bbox.right - bbox.left;
	    var height = bbox.bottom - bbox.top;
	    return {
	      x: (clientX - bbox.left) * (el.width / width),
	      y: (clientY - bbox.top) * (el.height / height)
	    };
	  };

	  Canvas.prototype._beginDraw = function _beginDraw() {
	    this._attrs.toDraw = true;
	  };

	  Canvas.prototype._endDraw = function _endDraw() {
	    this._attrs.toDraw = false;
	  };

	  Canvas.prototype.draw = function draw() {
	    var self = this;
	    function drawInner() {
	      self.set('animateHandler', requestAnimationFrame(function () {
	        self.set('animateHandler', undefined);
	        if (self.get('toDraw')) {
	          drawInner();
	        }
	      }));
	      self.beforeDraw();
	      try {
	        var context = self._attrs.context;
	        var children = self._attrs.children;
	        for (var i = 0, len = children.length; i < len; i++) {
	          var child = children[i];
	          child.draw(context);
	        }

	        if (Util.isWx || Util.isMy) {
	          context.draw();
	        }
	      } catch (ev) {
	        console.warn('error in draw canvas, detail as:');
	        console.warn(ev);
	        self._endDraw();
	      }
	      self._endDraw();
	    }

	    if (self.get('destroyed')) {
	      return;
	    }
	    if (self.get('animateHandler')) {
	      this._beginDraw();
	    } else {
	      drawInner();
	    }
	  };

	  Canvas.prototype.destroy = function destroy() {
	    if (this.get('destroyed')) {
	      return;
	    }
	    this.clear();
	    this._attrs = {};
	    this.set('destroyed', true);
	  };

	  Canvas.prototype.isDestroyed = function isDestroyed() {
	    return this.get('destroyed');
	  };

	  return Canvas;
	}();

	Util.mix(Canvas.prototype, Container, {
	  getGroupClass: function getGroupClass() {
	    return Group;
	  }
	});

	module.exports = Canvas;

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(2);

	var Rect = function (_Shape) {
	  _inherits(Rect, _Shape);

	  function Rect() {
	    _classCallCheck(this, Rect);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Rect.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'rect';
	  };

	  Rect.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x: 0,
	      y: 0,
	      width: 0,
	      height: 0,
	      radius: 0,
	      lineWidth: 0
	    };
	  };

	  Rect.prototype.createPath = function createPath(context) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        width = attrs.width,
	        height = attrs.height;


	    context.beginPath();
	    var radius = attrs.radius;
	    if (!radius || !(width * height)) {
	      context.rect(x, y, width, height);
	    } else {
	      radius = Util.parsePadding(radius);
	      context.moveTo(x + radius[0], y);
	      context.lineTo(x + width - radius[1], y);
	      context.arc(x + width - radius[1], y + radius[1], radius[1], -Math.PI / 2, 0, false);
	      context.lineTo(x + width, y + height - radius[2]);
	      context.arc(x + width - radius[2], y + height - radius[2], radius[2], 0, Math.PI / 2, false);
	      context.lineTo(x + radius[3], y + height);
	      context.arc(x + radius[3], y + height - radius[3], radius[3], Math.PI / 2, Math.PI, false);
	      context.lineTo(x, y + radius[0]);
	      context.arc(x + radius[0], y + radius[0], radius[0], Math.PI, Math.PI * 3 / 2, false);
	      context.closePath();
	    }
	  };

	  Rect.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        width = attrs.width,
	        height = attrs.height;

	    return {
	      minX: x,
	      minY: y,
	      maxX: x + width,
	      maxY: y + height
	    };
	  };

	  return Rect;
	}(Shape);

	Shape.Rect = Rect;
	module.exports = Rect;

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);

	var Circle = function (_Shape) {
	  _inherits(Circle, _Shape);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Circle.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'circle';
	  };

	  Circle.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x: 0,
	      y: 0,
	      r: 0,
	      lineWidth: 0
	    };
	  };

	  Circle.prototype.createPath = function createPath(context) {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        r = attrs.r;

	    context.beginPath();
	    context.arc(x, y, r, 0, Math.PI * 2, false);
	    context.closePath();
	  };

	  Circle.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        r = attrs.r;


	    return {
	      minX: x - r,
	      maxX: x + r,
	      minY: y - r,
	      maxY: y + r
	    };
	  };

	  return Circle;
	}(Shape);

	Shape.Circle = Circle;
	module.exports = Circle;

	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);
	var bbox = __webpack_require__(11);

	var Line = function (_Shape) {
	  _inherits(Line, _Shape);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Line.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canStroke = true;
	    this._attrs.type = 'line';
	  };

	  Line.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x1: 0,
	      y1: 0,
	      x2: 0,
	      y2: 0,
	      lineWidth: 1
	    };
	  };

	  Line.prototype.createPath = function createPath(context) {
	    var attrs = this.get('attrs');
	    var x1 = attrs.x1,
	        y1 = attrs.y1,
	        x2 = attrs.x2,
	        y2 = attrs.y2;


	    context.beginPath();
	    context.moveTo(x1, y1);
	    context.lineTo(x2, y2);
	  };

	  Line.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x1 = attrs.x1,
	        y1 = attrs.y1,
	        x2 = attrs.x2,
	        y2 = attrs.y2;

	    return bbox.getBBoxFromLine(x1, y1, x2, y2);
	  };

	  return Line;
	}(Shape);

	Shape.Line = Line;
	module.exports = Line;

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);
	var bbox = __webpack_require__(11);

	var Polygon = function (_Shape) {
	  _inherits(Polygon, _Shape);

	  function Polygon() {
	    _classCallCheck(this, Polygon);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Polygon.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'polygon';
	  };

	  Polygon.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      points: null,
	      lineWidth: 0
	    };
	  };

	  Polygon.prototype.createPath = function createPath(context) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var points = attrs.points;

	    context.beginPath();

	    for (var i = 0, len = points.length; i < len; i++) {
	      var point = points[i];
	      if (i === 0) {
	        context.moveTo(point.x, point.y);
	      } else {
	        context.lineTo(point.x, point.y);
	      }
	    }
	    context.closePath();
	  };

	  Polygon.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var points = attrs.points;

	    return bbox.getBBoxFromPoints(points);
	  };

	  return Polygon;
	}(Shape);

	Shape.Polygon = Polygon;
	module.exports = Polygon;

	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);
	var Smooth = __webpack_require__(37);
	var bbox = __webpack_require__(11);

	var Polyline = function (_Shape) {
	  _inherits(Polyline, _Shape);

	  function Polyline() {
	    _classCallCheck(this, Polyline);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Polyline.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'polyline';
	  };

	  Polyline.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      points: null,
	      lineWidth: 1,
	      smooth: false
	    };
	  };

	  Polyline.prototype.createPath = function createPath(context) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var points = attrs.points,
	        smooth = attrs.smooth;


	    context.beginPath();
	    context.moveTo(points[0].x, points[0].y);
	    if (smooth) {
	      var constaint = [[0, 0], [1, 1]];
	      var sps = Smooth.smooth(points, false, constaint);
	      for (var i = 0, n = sps.length; i < n; i++) {
	        var sp = sps[i];
	        context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);
	      }
	    } else {
	      var _i = void 0;
	      var l = void 0;
	      for (_i = 1, l = points.length - 1; _i < l; _i++) {
	        context.lineTo(points[_i].x, points[_i].y);
	      }
	      context.lineTo(points[l].x, points[l].y);
	    }
	  };

	  Polyline.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var points = attrs.points,
	        smooth = attrs.smooth;


	    if (smooth) {
	      var newPoints = [];
	      var constaint = [[0, 0], [1, 1]];
	      var sps = Smooth.smooth(points, false, constaint);
	      for (var i = 0, n = sps.length; i < n; i++) {
	        var sp = sps[i];
	        if (i === 0) {
	          newPoints.push([points[0].x, points[0].y, sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
	        } else {
	          var lastPoint = sps[i - 1];
	          newPoints.push([lastPoint[5], lastPoint[6], sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
	        }
	      }
	      return bbox.getBBoxFromBezierGroup(newPoints);
	    }
	    return bbox.getBBoxFromPoints(points);
	  };

	  return Polyline;
	}(Shape);

	Shape.Polyline = Polyline;
	module.exports = Polyline;

	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);
	var bbox = __webpack_require__(11);

	var Arc = function (_Shape) {
	  _inherits(Arc, _Shape);

	  function Arc() {
	    _classCallCheck(this, Arc);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Arc.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canStroke = true;
	    this._attrs.type = 'arc';
	  };

	  Arc.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x: 0,
	      y: 0,
	      r: 0,
	      startAngle: 0,
	      endAngle: Math.PI * 2,
	      clockwise: false,
	      lineWidth: 1
	    };
	  };

	  Arc.prototype.createPath = function createPath(context) {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        r = attrs.r,
	        startAngle = attrs.startAngle,
	        endAngle = attrs.endAngle,
	        clockwise = attrs.clockwise;


	    context.beginPath();
	    context.arc(x, y, r, startAngle, endAngle, clockwise);
	  };

	  Arc.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        r = attrs.r,
	        startAngle = attrs.startAngle,
	        endAngle = attrs.endAngle,
	        clockwise = attrs.clockwise;


	    return bbox.getBBoxFromArc(x, y, r, startAngle, endAngle, clockwise);
	  };

	  return Arc;
	}(Shape);

	Shape.Arc = Arc;
	module.exports = Arc;

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);
	var bbox = __webpack_require__(11);

	var Sector = function (_Shape) {
	  _inherits(Sector, _Shape);

	  function Sector() {
	    _classCallCheck(this, Sector);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Sector.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'sector';
	  };

	  Sector.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x: 0,
	      y: 0,
	      lineWidth: 0,
	      r: 0,
	      r0: 0,
	      startAngle: 0,
	      endAngle: Math.PI * 2,
	      clockwise: false
	    };
	  };

	  Sector.prototype.createPath = function createPath(context) {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        startAngle = attrs.startAngle,
	        endAngle = attrs.endAngle,
	        r = attrs.r,
	        r0 = attrs.r0,
	        clockwise = attrs.clockwise;

	    context.beginPath();
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);

	    context.moveTo(unitX * r0 + x, unitY * r0 + y);
	    context.lineTo(unitX * r + x, unitY * r + y);
	    context.arc(x, y, r, startAngle, endAngle, clockwise);
	    context.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
	    if (r0 !== 0) {
	      context.arc(x, y, r0, endAngle, startAngle, !clockwise);
	    }
	    context.closePath();
	  };

	  Sector.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        r = attrs.r,
	        r0 = attrs.r0,
	        startAngle = attrs.startAngle,
	        endAngle = attrs.endAngle,
	        clockwise = attrs.clockwise;

	    var outerBBox = bbox.getBBoxFromArc(x, y, r, startAngle, endAngle, clockwise);
	    var innerBBox = bbox.getBBoxFromArc(x, y, r0, startAngle, endAngle, clockwise);
	    return {
	      minX: Math.min(outerBBox.minX, innerBBox.minX),
	      minY: Math.min(outerBBox.minY, innerBBox.minY),
	      maxX: Math.max(outerBBox.maxX, innerBBox.maxX),
	      maxY: Math.max(outerBBox.maxY, innerBBox.maxY)
	    };
	  };

	  return Sector;
	}(Shape);

	Shape.Sector = Sector;
	module.exports = Sector;

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(2);

	var textWidthCacheCounter = 0;
	var textWidthCache = {};
	var TEXT_CACHE_MAX = 5000;

	var Text = function (_Shape) {
	  _inherits(Text, _Shape);

	  function Text() {
	    _classCallCheck(this, Text);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Text.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'text';
	  };

	  Text.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      lineWidth: 0,
	      lineCount: 1,
	      fontSize: 12,
	      fontFamily: 'sans-serif',
	      fontStyle: 'normal',
	      fontWeight: 'normal',
	      fontVariant: 'normal',
	      textAlign: 'start',
	      textBaseline: 'bottom',
	      lineHeight: null,
	      textArr: null
	    };
	  };

	  Text.prototype._getFontStyle = function _getFontStyle() {
	    var attrs = this._attrs.attrs;
	    var fontSize = attrs.fontSize,
	        fontFamily = attrs.fontFamily,
	        fontWeight = attrs.fontWeight,
	        fontStyle = attrs.fontStyle,
	        fontVariant = attrs.fontVariant;

	    return fontStyle + ' ' + fontVariant + ' ' + fontWeight + ' ' + fontSize + 'px ' + fontFamily;
	  };

	  Text.prototype._afterAttrsSet = function _afterAttrsSet() {
	    var attrs = this._attrs.attrs;
	    attrs.font = this._getFontStyle();

	    if (attrs.text) {
	      var text = attrs.text;
	      var textArr = void 0;
	      if (Util.isString(text) && text.indexOf('\n') !== -1) {
	        textArr = text.split('\n');
	        var lineCount = textArr.length;
	        attrs.lineCount = lineCount;
	        attrs.textArr = textArr;
	      }
	    }
	    this.set('attrs', attrs);
	  };

	  Text.prototype._getTextHeight = function _getTextHeight() {
	    var attrs = this._attrs.attrs;
	    if (attrs.height) {
	      return attrs.height;
	    }
	    var lineCount = attrs.lineCount;
	    var fontSize = attrs.fontSize * 1;
	    if (lineCount > 1) {
	      var spaceingY = this._getSpaceingY();
	      return fontSize * lineCount + spaceingY * (lineCount - 1);
	    }
	    return fontSize;
	  };

	  Text.prototype._getSpaceingY = function _getSpaceingY() {
	    var attrs = this._attrs.attrs;
	    var lineHeight = attrs.lineHeight;
	    var fontSize = attrs.fontSize * 1;
	    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
	  };

	  Text.prototype.drawInner = function drawInner(context) {
	    var self = this;
	    var attrs = self._attrs.attrs;
	    var text = attrs.text;
	    if (!text) {
	      return;
	    }
	    var textArr = attrs.textArr;
	    var fontSize = attrs.fontSize * 1;
	    var spaceingY = self._getSpaceingY();
	    var x = attrs.x;
	    var y = attrs.y;

	    if (attrs.rotate) {
	      // do rotation
	      context.translate(x, y);
	      context.rotate(attrs.rotate);
	      x = 0;
	      y = 0;
	    }

	    var textBaseline = attrs.textBaseline;
	    var height = void 0;
	    if (textArr) {
	      height = self._getTextHeight();
	    }
	    var subY = void 0;

	    // context.beginPath();
	    if (self.hasFill()) {
	      var fillOpacity = attrs.fillOpacity;
	      if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	        context.globalAlpha = fillOpacity;
	      }
	      if (textArr) {
	        for (var i = 0, len = textArr.length; i < len; i++) {
	          var subText = textArr[i];
	          subY = y + i * (spaceingY + fontSize) - height + fontSize; // bottom;
	          if (textBaseline === 'middle') {
	            subY += height - fontSize - (height - fontSize) / 2;
	          }
	          if (textBaseline === 'top') {
	            subY += height - fontSize;
	          }
	          context.fillText(subText, x, subY);
	        }
	      } else {
	        context.fillText(text, x, y);
	      }
	    }

	    if (self.hasStroke()) {
	      if (textArr) {
	        for (var _i = 0, _len = textArr.length; _i < _len; _i++) {
	          var _subText = textArr[_i];
	          subY = y + _i * (spaceingY + fontSize) - height + fontSize; // bottom;
	          if (textBaseline === 'middle') {
	            subY += height - fontSize - (height - fontSize) / 2;
	          }
	          if (textBaseline === 'top') {
	            subY += height - fontSize;
	          }
	          context.strokeText(_subText, x, subY);
	        }
	      } else {
	        context.strokeText(text, x, y);
	      }
	    }
	  };

	  Text.prototype.calculateBox = function calculateBox() {
	    var self = this;
	    var attrs = self._attrs.attrs;
	    var x = attrs.x,
	        y = attrs.y,
	        textAlign = attrs.textAlign,
	        textBaseline = attrs.textBaseline;

	    var width = self._getTextWidth(); // attrs.width
	    if (!width) {
	      return {
	        minX: x,
	        minY: y,
	        maxX: x,
	        maxY: y
	      };
	    }
	    var height = self._getTextHeight(); // attrs.height
	    var point = {
	      x: x,
	      y: y - height
	    }; // default textAlign: start, textBaseline: bottom

	    if (textAlign) {
	      if (textAlign === 'end' || textAlign === 'right') {
	        point.x -= width;
	      } else if (textAlign === 'center') {
	        point.x -= width / 2;
	      }
	    }

	    if (textBaseline) {
	      if (textBaseline === 'top') {
	        point.y += height;
	      } else if (textBaseline === 'middle') {
	        point.y += height / 2;
	      }
	    }

	    return {
	      minX: point.x,
	      minY: point.y,
	      maxX: point.x + width,
	      maxY: point.y + height
	    };
	  };

	  Text.prototype._getTextWidth = function _getTextWidth() {
	    var attrs = this._attrs.attrs;
	    if (attrs.width) {
	      return attrs.width;
	    }
	    var text = attrs.text;
	    var context = this.get('context');

	    if (Util.isNil(text)) return undefined;

	    var font = attrs.font;
	    var textArr = attrs.textArr;
	    var key = text + '' + font;
	    if (textWidthCache[key]) {
	      return textWidthCache[key];
	    }

	    var width = 0;
	    if (textArr) {
	      for (var i = 0, length = textArr.length; i < length; i++) {
	        var subText = textArr[i];
	        width = Math.max(width, Util.measureText(subText, font, context).width);
	      }
	    } else {
	      width = Util.measureText(text, font, context).width;
	    }

	    if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	      textWidthCacheCounter = 0;
	      textWidthCache = {};
	    }
	    textWidthCacheCounter++;
	    textWidthCache[key] = width;

	    return width;
	  };

	  return Text;
	}(Shape);

	Shape.Text = Text;
	module.exports = Text;

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Shape = __webpack_require__(2);

	var Custom = function (_Shape) {
	  _inherits(Custom, _Shape);

	  function Custom() {
	    _classCallCheck(this, Custom);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Custom.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.createPath = null;
	    this._attrs.type = 'custom';
	  };

	  Custom.prototype.createPath = function createPath(context) {
	    var createPath = this.get('createPath');
	    createPath && createPath.call(this, context);
	  };

	  Custom.prototype.calculateBox = function calculateBox() {
	    var calculateBox = this.get('calculateBox');
	    return calculateBox && calculateBox.call(this);
	  };

	  return Custom;
	}(Shape);

	Shape.Custom = Custom;
	module.exports = Custom;

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview track f2
	 * @author sima.zhang1990@gmail.com
	 */
	var Global = __webpack_require__(1);
	var Util = __webpack_require__(0);
	var SERVER_URL = 'https://kcart.alipay.com/web/bi.do';

	setTimeout(function () {
	  if (Global.trackable && Util.isBrowser) {
	    // Only works for H5 env
	    var image = new Image();
	    var newObj = {
	      pg: document.URL,
	      r: new Date().getTime(),
	      f2: true,
	      version: Global.version,
	      page_type: 'syslog'
	    };
	    var d = encodeURIComponent(JSON.stringify([newObj]));
	    image.src = SERVER_URL + '?BIProfile=merge&d=' + d;
	  }
	}, 3000);

	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Path = __webpack_require__(38);
	var Geom = __webpack_require__(5);

	__webpack_require__(32);

	var Line = function (_Path) {
	  _inherits(Line, _Path);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Path.apply(this, arguments));
	  }

	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Path.prototype.getDefaultCfg.call(this);
	    cfg.type = 'line';
	    cfg.sortable = true;
	    return cfg;
	  };

	  return Line;
	}(Path);

	Geom.Line = Line;
	module.exports = Line;

	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Geom = __webpack_require__(5);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(39);
	__webpack_require__(81);

	var Interval = function (_Geom) {
	  _inherits(Interval, _Geom);

	  Interval.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'interval';
	    cfg.shapeType = 'interval';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Interval(cfg) {
	    _classCallCheck(this, Interval);

	    var _this = _possibleConstructorReturn(this, _Geom.call(this, cfg));

	    Util.mix(_this, SizeMixin);
	    return _this;
	  }

	  Interval.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  Interval.prototype.clearInner = function clearInner() {
	    _Geom.prototype.clearInner.call(this);
	    this.set('defaultSize', null);
	  };

	  return Interval;
	}(Geom);

	Geom.Interval = Interval;

	module.exports = Interval;

	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(8);
	var Vector2 = __webpack_require__(4);
	var Global = __webpack_require__(1);

	function getRectPoints(cfg) {
	  var x = cfg.x,
	      y = cfg.y,
	      y0 = cfg.y0,
	      size = cfg.size;


	  var ymin = y0;
	  var ymax = y;
	  if (Util.isArray(y)) {
	    ymax = y[1];
	    ymin = y[0];
	  }

	  var xmin = void 0;
	  var xmax = void 0;
	  if (Util.isArray(x)) {
	    xmin = x[0];
	    xmax = x[1];
	  } else {
	    xmin = x - size / 2;
	    xmax = x + size / 2;
	  }

	  return [{ x: xmin, y: ymin }, { x: xmin, y: ymax }, { x: xmax, y: ymax }, { x: xmax, y: ymin }];
	}

	function getRectRange(points) {
	  var xValues = [];
	  var yValues = [];
	  for (var i = 0, len = points.length; i < len; i++) {
	    var point = points[i];
	    xValues.push(point.x);
	    yValues.push(point.y);
	  }
	  var xMin = Math.min.apply(null, xValues);
	  var yMin = Math.min.apply(null, yValues);
	  var xMax = Math.max.apply(null, xValues);
	  var yMax = Math.max.apply(null, yValues);

	  return {
	    x: xMin,
	    y: yMin,
	    width: xMax - xMin,
	    height: yMax - yMin
	  };
	}

	var Interval = Shape.registerFactory('interval', {
	  defaultShapeType: 'rect',
	  getDefaultPoints: function getDefaultPoints(cfg) {
	    return getRectPoints(cfg);
	  }
	});

	Shape.registerShape('interval', 'rect', {
	  draw: function draw(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var style = Util.mix({
	      fill: cfg.color
	    }, Global.shape.interval, cfg.style);
	    if (cfg.isInCircle) {
	      var newPoints = points.slice(0);
	      if (this._coord.transposed) {
	        newPoints = [points[0], points[3], points[2], points[1]];
	      }

	      var _cfg$center = cfg.center,
	          x = _cfg$center.x,
	          y = _cfg$center.y;

	      var v = [1, 0];
	      var v0 = [newPoints[0].x - x, newPoints[0].y - y];
	      var v1 = [newPoints[1].x - x, newPoints[1].y - y];
	      var v2 = [newPoints[2].x - x, newPoints[2].y - y];

	      var startAngle = Vector2.angleTo(v, v1);
	      var endAngle = Vector2.angleTo(v, v2);
	      var r0 = Vector2.length(v0);
	      var r = Vector2.length(v1);

	      if (startAngle >= 1.5 * Math.PI) {
	        startAngle = startAngle - 2 * Math.PI;
	      }

	      if (endAngle >= 1.5 * Math.PI) {
	        endAngle = endAngle - 2 * Math.PI;
	      }

	      return container.addShape('Sector', {
	        className: 'interval',
	        attrs: Util.mix({
	          x: x,
	          y: y,
	          r: r,
	          r0: r0,
	          startAngle: startAngle,
	          endAngle: endAngle
	        }, style)
	      });
	    }

	    var rectCfg = getRectRange(points);

	    return container.addShape('rect', {
	      className: 'interval',
	      attrs: Util.mix(rectCfg, style)
	    });
	  }
	});

	module.exports = Interval;

	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  Stack: __webpack_require__(83),
	  Dodge: __webpack_require__(85)
	};

	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(84);
	module.exports = Stack;

	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var isArray = __webpack_require__(10);
	var isNil = __webpack_require__(6);
	var Adjust = __webpack_require__(22);

	var Stack = function (_Adjust) {
	  _inherits(Stack, _Adjust);

	  function Stack() {
	    _classCallCheck(this, Stack);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Stack.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.xField = null; // 调整对应的 x 方向对应的字段名称
	    this.yField = null; // 调整对应的 y 方向对应的字段名称
	  };

	  Stack.prototype.processAdjust = function processAdjust(dataArray) {
	    this.processStack(dataArray);
	  };

	  Stack.prototype.processStack = function processStack(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField;
	    var count = dataArray.length;
	    var stackCache = {
	      positive: {},
	      negative: {}
	    };
	    // 层叠顺序翻转
	    if (self.reverseOrder) {
	      dataArray = dataArray.slice(0).reverse();
	    }
	    for (var i = 0; i < count; i++) {
	      var data = dataArray[i];
	      for (var j = 0, len = data.length; j < len; j++) {
	        var item = data[j];
	        var x = item[xField] || 0;
	        var y = item[yField];
	        var xkey = x.toString();
	        y = isArray(y) ? y[1] : y;
	        if (!isNil(y)) {
	          var direction = y >= 0 ? 'positive' : 'negative';
	          if (!stackCache[direction][xkey]) {
	            stackCache[direction][xkey] = 0;
	          }
	          item[yField] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];
	          stackCache[direction][xkey] += y;
	        }
	      }
	    }
	  };

	  return Stack;
	}(Adjust);

	Adjust.Stack = Stack;
	module.exports = Stack;

	/***/ }),
	/* 85 */
	/***/ (function(module, exports, __webpack_require__) {

	var Dodge = __webpack_require__(86);
	module.exports = Dodge;

	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Adjust = __webpack_require__(22);
	var each = __webpack_require__(3);

	var MARGIN_RATIO = 1 / 2;
	var DODGE_RATIO = 1 / 2;

	var Dodge = function (_Adjust) {
	  _inherits(Dodge, _Adjust);

	  function Dodge() {
	    _classCallCheck(this, Dodge);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Dodge.prototype._initDefaultCfg = function _initDefaultCfg() {
	    /**
	     * 调整过程中,2个数据的间距
	     * @type {Number}
	     */
	    this.marginRatio = MARGIN_RATIO;
	    /**
	     * 调整占单位宽度的比例,例如：占2个分类间距的 1/2
	     * @type {Number}
	     */
	    this.dodgeRatio = DODGE_RATIO;
	    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整
	  };

	  Dodge.prototype.getDodgeOffset = function getDodgeOffset(range, index, count) {
	    var self = this;
	    var pre = range.pre;
	    var next = range.next;
	    var tickLength = next - pre;
	    var width = tickLength * self.dodgeRatio / count;
	    var margin = self.marginRatio * width;
	    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;
	    return (pre + next) / 2 + offset;
	  };

	  Dodge.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var count = dataArray.length;
	    var xField = self.xField;
	    each(dataArray, function (data, index) {
	      for (var i = 0, len = data.length; i < len; i++) {
	        var obj = data[i];
	        var value = obj[xField];
	        var range = {
	          pre: value - 0.5,
	          next: value + 0.5
	        };
	        var dodgeValue = self.getDodgeOffset(range, index, count);
	        obj[xField] = dodgeValue;
	      }
	    });
	  };

	  return Dodge;
	}(Adjust);

	Adjust.Dodge = Dodge;
	module.exports = Dodge;

	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Base = __webpack_require__(21);
	var Vector2 = __webpack_require__(4);
	var Matrix = __webpack_require__(23);

	var Polar = function (_Base) {
	  _inherits(Polar, _Base);

	  function Polar() {
	    _classCallCheck(this, Polar);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Polar.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'polar';
	    this.startAngle = -Math.PI / 2;
	    this.endAngle = Math.PI * 3 / 2;
	    this.inner = 0;
	    this.innerRadius = 0; // alias
	    this.isPolar = true;
	    this.transposed = false;
	    this.center = null;
	    this.radius = null; // relative, 0 ~ 1
	  };

	  Polar.prototype.init = function init(start, end) {
	    var self = this;
	    var inner = self.inner || self.innerRadius;
	    var width = Math.abs(end.x - start.x);
	    var height = Math.abs(end.y - start.y);

	    var maxRadius = void 0;
	    var center = void 0;
	    if (self.startAngle === -Math.PI && self.endAngle === 0) {
	      maxRadius = Math.min(width / 2, height);
	      center = {
	        x: (start.x + end.x) / 2,
	        y: start.y
	      };
	    } else {
	      maxRadius = Math.min(width, height) / 2;
	      center = {
	        x: (start.x + end.x) / 2,
	        y: (start.y + end.y) / 2
	      };
	    }

	    var radius = self.radius;
	    if (radius > 0 && radius <= 1) {
	      maxRadius = maxRadius * radius;
	    }

	    this.x = {
	      start: self.startAngle,
	      end: self.endAngle
	    };

	    this.y = {
	      start: maxRadius * inner,
	      end: maxRadius
	    };
	    this.center = center;
	    this.circleRadius = maxRadius; // the radius value in px
	  };

	  Polar.prototype.convertPoint = function convertPoint(point) {
	    var self = this;
	    var center = self.center;
	    var transposed = self.transposed;
	    var xDim = transposed ? 'y' : 'x';
	    var yDim = transposed ? 'x' : 'y';

	    var x = self.x;
	    var y = self.y;

	    var angle = x.start + (x.end - x.start) * point[xDim];
	    var radius = y.start + (y.end - y.start) * point[yDim];

	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Polar.prototype.invertPoint = function invertPoint(point) {
	    var self = this;
	    var center = self.center,
	        transposed = self.transposed,
	        x = self.x,
	        y = self.y;

	    var xDim = transposed ? 'y' : 'x';
	    var yDim = transposed ? 'x' : 'y';

	    var m = [1, 0, 0, 1, 0, 0];
	    Matrix.rotate(m, m, x.start);

	    var startV = [1, 0];
	    Vector2.transformMat2d(startV, startV, m);
	    startV = [startV[0], startV[1]];

	    var pointV = [point.x - center.x, point.y - center.y];
	    if (Vector2.zero(pointV)) {
	      return {
	        x: 0,
	        y: 0
	      };
	    }

	    var theta = Vector2.angleTo(startV, pointV, x.end < x.start);
	    if (Math.abs(theta - Math.PI * 2) < 0.001) {
	      theta = 0;
	    }
	    var l = Vector2.length(pointV);
	    var percentX = theta / (x.end - x.start);
	    percentX = x.end - x.start > 0 ? percentX : -percentX;
	    var percentY = (l - y.start) / (y.end - y.start);
	    var rst = {};
	    rst[xDim] = percentX;
	    rst[yDim] = percentY;
	    return rst;
	  };

	  return Polar;
	}(Base);

	Base.Polar = Polar;
	module.exports = Polar;

	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 提取公共代码到util方法
	 * @author dxq613@gmail.com
	 */

	var isString = __webpack_require__(14);
	var isDate = __webpack_require__(33);

	module.exports = {
	  toTimeStamp: function toTimeStamp(value) {
	    if (isString(value)) {
	      if (value.indexOf('T') > 0) {
	        value = new Date(value).getTime();
	      } else {
	        value = new Date(value.replace(/-/ig, '/')).getTime();
	      }
	    }
	    if (isDate(value)) {
	      value = value.getTime();
	    }
	    return value;
	  }
	};

	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * marker shapes，used for tooltip and legend
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(9),
	    Shape = _require.Shape;

	var SYMBOLS = {
	  circle: function circle(x, y, r, ctx) {
	    ctx.arc(x, y, r, 0, Math.PI * 2, false);
	  },
	  square: function square(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.lineTo(x - r, y + r);
	    ctx.closePath();
	  }
	};

	var Marker = function (_Shape) {
	  _inherits(Marker, _Shape);

	  function Marker() {
	    _classCallCheck(this, Marker);

	    return _possibleConstructorReturn(this, _Shape.apply(this, arguments));
	  }

	  Marker.prototype._initProperties = function _initProperties() {
	    _Shape.prototype._initProperties.call(this);
	    this._attrs.canFill = true;
	    this._attrs.canStroke = true;
	    this._attrs.type = 'marker';
	  };

	  Marker.prototype.getDefaultAttrs = function getDefaultAttrs() {
	    return {
	      x: 0,
	      y: 0,
	      lineWidth: 0
	    };
	  };

	  Marker.prototype.createPath = function createPath(context) {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        radius = attrs.radius;

	    var symbol = attrs.symbol || 'circle';
	    var method = void 0;
	    if (Util.isFunction(symbol)) {
	      method = symbol;
	    } else {
	      method = SYMBOLS[symbol];
	    }
	    context.beginPath();
	    method(x, y, radius, context, this);
	  };

	  Marker.prototype.calculateBox = function calculateBox() {
	    var attrs = this.get('attrs');
	    var x = attrs.x,
	        y = attrs.y,
	        radius = attrs.radius;

	    return {
	      minX: x - radius,
	      minY: y - radius,
	      maxX: x + radius,
	      maxY: y + radius
	    };
	  };

	  return Marker;
	}(Shape);

	module.exports = Marker;

	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);

	var _require = __webpack_require__(9),
	    Group = _require.Group;

	var Marker = __webpack_require__(89);
	var MARKER_RADIUS = 3;

	var List = function () {
	  List.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      showTitle: false,
	      /**
	       * title string
	       * @type {?String}
	       */
	      title: null,
	      /**
	       * items array
	       * @type {?Array}
	       */
	      items: null,
	      /**
	       * offset between title and items
	       * @type {Number}
	       */
	      titleGap: 12,
	      /**
	       * offset between each item
	       * @type {Number}
	       */
	      itemGap: 10,
	      /**
	       * the offset between each item in vertical direaction
	       * @type {Number}
	       */
	      itemMarginBottom: 12,
	      /**
	       * the formatter for item text
	       * @type {[type]}
	       */
	      itemFormatter: null,
	      itemWidth: null,
	      /**
	       * offset between marker and text
	       * @type {Number}
	       */
	      wordSpace: 6,
	      x: 0,
	      y: 0,
	      layout: 'horizontal',
	      /**
	       * the join string of `name` and `value`
	       * @type {String}
	       */
	      joinString: ': '
	    };
	  };

	  function List(cfg) {
	    _classCallCheck(this, List);

	    Util.deepMix(this, this.getDefaultCfg(), cfg);
	    this._init();
	    this._renderTitle();
	    this._renderItems();
	  }

	  List.prototype._init = function _init() {
	    var container = new Group({
	      zIndex: this.zIndex || 0
	    });
	    this.container = container;
	    var wrapper = container.addGroup();
	    this.wrapper = wrapper;
	    var itemsGroup = wrapper.addGroup({
	      className: 'itemsGroup'
	    });
	    this.itemsGroup = itemsGroup;

	    if (this.parent) {
	      this.parent.add(container);
	    }
	  };

	  List.prototype._renderTitle = function _renderTitle(title) {
	    title = title || this.title;

	    var titleHeight = 0;
	    if (this.showTitle && title) {
	      var wrapper = this.wrapper,
	          titleStyle = this.titleStyle;

	      var titleShape = wrapper.addShape('text', {
	        className: 'title',
	        attrs: Util.mix({
	          x: 0,
	          y: 0,
	          text: title
	        }, titleStyle)
	      });
	      titleHeight = titleShape.getBBox().height + this.titleGap;
	      this.titleShape = titleShape;
	    }
	    this._titleHeight = titleHeight;
	  };

	  List.prototype._renderItems = function _renderItems(items) {
	    var self = this;
	    items = items || self.items;

	    if (!items) {
	      return;
	    }

	    if (self.reversed) {
	      items.reverse();
	    }
	    Util.each(items, function (item, index) {
	      self._addItem(item, index);
	    });
	    if (items.length > 1) {
	      this._adjustItems();
	    }
	    this._renderBackground();
	  };

	  List.prototype._renderBackground = function _renderBackground() {
	    var background = this.background;
	    if (background) {
	      var container = this.container;
	      var wrapper = this.wrapper;

	      var _wrapper$getBBox = wrapper.getBBox(),
	          minX = _wrapper$getBBox.minX,
	          minY = _wrapper$getBBox.minY,
	          width = _wrapper$getBBox.width,
	          height = _wrapper$getBBox.height;

	      var padding = background.padding || [0, 0, 0, 0];
	      padding = Util.parsePadding(padding);
	      var attrs = Util.mix({
	        x: minX - padding[3],
	        y: minY - padding[0],
	        width: width + padding[1] + padding[3],
	        height: height + padding[0] + padding[2]
	      }, background);
	      var backShape = this.backShape;
	      if (backShape) {
	        backShape.attr(attrs);
	      } else {
	        backShape = container.addShape('Rect', {
	          zIndex: -1,
	          attrs: attrs
	        });
	      }
	      this.backShape = backShape;
	      container.sort();
	    }
	  };

	  List.prototype._addItem = function _addItem(item) {
	    var itemsGroup = this.itemsGroup;
	    var itemGroup = itemsGroup.addGroup({
	      name: item.name,
	      value: item.value,
	      dataValue: item.dataValue,
	      checked: item.checked
	    });
	    var unCheckStyle = this.unCheckStyle,
	        unCheckColor = this.unCheckColor,
	        nameStyle = this.nameStyle,
	        valueStyle = this.valueStyle,
	        wordSpace = this.wordSpace;
	    var marker = item.marker,
	        value = item.value;

	    var startX = 0;

	    if (unCheckColor) {
	      unCheckStyle.fill = unCheckColor;
	    }

	    if (marker) {
	      var radius = marker.radius || MARKER_RADIUS;
	      var markerAttrs = Util.mix({
	        x: radius,
	        y: this._titleHeight
	      }, marker);

	      if (item.checked === false) {
	        Util.mix(markerAttrs, unCheckStyle);
	      }

	      var markerShape = new Marker({
	        className: 'item-marker',
	        attrs: markerAttrs
	      });
	      itemGroup.add(markerShape);
	      startX += markerShape.getBBox().width + wordSpace;
	    }

	    var nameText = void 0;
	    var name = item.name;
	    if (name) {
	      var joinString = this.joinString || '';
	      name = value ? name + joinString : name;
	      nameText = itemGroup.addShape('text', {
	        className: 'name',
	        attrs: Util.mix({
	          x: startX,
	          y: this._titleHeight,
	          text: this._formatItemValue(name)
	        }, nameStyle, item.checked === false ? unCheckStyle : null)
	      });
	    }

	    if (value) {
	      var valueX = startX;
	      if (nameText) {
	        valueX += nameText.getBBox().width;
	      }

	      itemGroup.addShape('text', {
	        className: 'value',
	        attrs: Util.mix({
	          x: valueX,
	          y: this._titleHeight,
	          text: value
	        }, valueStyle, item.checked === false ? unCheckStyle : null)
	      });
	    }
	    return itemGroup;
	  };

	  List.prototype._formatItemValue = function _formatItemValue(value) {
	    var formatter = this.itemFormatter;
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  };

	  List.prototype._getMaxItemWidth = function _getMaxItemWidth() {
	    var width = void 0;
	    var itemWidth = this.itemWidth;

	    if (Util.isNumber(itemWidth) || Util.isNil(itemWidth)) {
	      return itemWidth;
	    }

	    if (itemWidth === 'auto') {
	      var itemsGroup = this.itemsGroup;
	      var children = itemsGroup.get('children');
	      var count = children.length;
	      var maxItemWidth = 0;
	      for (var i = 0; i < count; i++) {
	        var _children$i$getBBox = children[i].getBBox(),
	            _width = _children$i$getBBox.width;

	        maxItemWidth = Math.max(maxItemWidth, _width);
	      }
	      var maxLength = this.maxLength;
	      var itemGap = this.itemGap;
	      var twoAvgWidth = (maxLength - itemGap) / 2;
	      var threeAvgWidth = (maxLength - itemGap * 2) / 3;

	      if (count === 2) {
	        width = Math.max(maxItemWidth, twoAvgWidth);
	      } else {
	        // 1. max <= 3Avg, 3Avg
	        // 2. 3Avg < max && max < 2avg, 2avg
	        // 3. max > 2avg, max, one column
	        if (maxItemWidth <= threeAvgWidth) {
	          width = threeAvgWidth;
	        } else if (maxItemWidth <= twoAvgWidth) {
	          width = twoAvgWidth;
	        } else {
	          width = maxItemWidth;
	        }
	      }
	      return width;
	    }
	  };

	  List.prototype._adjustHorizontal = function _adjustHorizontal() {
	    var maxLength = this.maxLength,
	        itemsGroup = this.itemsGroup;


	    var children = itemsGroup.get('children');
	    var itemGap = this.itemGap,
	        itemMarginBottom = this.itemMarginBottom;

	    var titleHeight = this._titleHeight;

	    var row = 0;
	    var rowWidth = 0;
	    var width = void 0;
	    var height = void 0;
	    var itemWidth = this._getMaxItemWidth();
	    var legendHitBoxes = [];
	    for (var i = 0, len = children.length; i < len; i++) {
	      var child = children[i];
	      var box = child.getBBox();
	      var childHeight = box.height;
	      var childWidth = box.width;
	      width = itemWidth || childWidth;
	      height = childHeight + itemMarginBottom;

	      if (width - (maxLength - rowWidth) > 0.0001) {
	        row++;
	        rowWidth = 0;
	      }

	      child.moveTo(rowWidth, row * height);
	      legendHitBoxes.push({
	        x: rowWidth,
	        y: row * height + titleHeight - childHeight / 2,
	        width: childWidth * 1.375,
	        height: childHeight * 1.375
	      });
	      rowWidth += width + itemGap;
	    }
	    this.legendHitBoxes = legendHitBoxes;
	    return;
	  };

	  List.prototype._adjustVertical = function _adjustVertical() {
	    var maxLength = this.maxLength,
	        itemsGroup = this.itemsGroup;
	    var itemGap = this.itemGap,
	        itemMarginBottom = this.itemMarginBottom,
	        itemWidth = this.itemWidth;

	    var titleHeight = this._titleHeight;
	    var children = itemsGroup.get('children');

	    var colHeight = 0;
	    var width = void 0;
	    var height = void 0;
	    var maxItemWidth = 0;
	    var totalWidth = 0;
	    var legendHitBoxes = [];

	    for (var i = 0, length = children.length; i < length; i++) {
	      var child = children[i];
	      var bbox = child.getBBox();
	      width = bbox.width;
	      height = bbox.height;

	      if (Util.isNumber(itemWidth)) {
	        maxItemWidth = itemWidth + itemGap;
	      } else if (width > maxItemWidth) {
	        maxItemWidth = width + itemGap;
	      }

	      if (maxLength - colHeight < height) {
	        colHeight = 0;
	        totalWidth += maxItemWidth;
	        child.moveTo(totalWidth, 0);
	        legendHitBoxes.push({
	          x: totalWidth,
	          y: titleHeight - height / 2,
	          width: width * 1.375,
	          height: height * 1.375
	        });
	      } else {
	        child.moveTo(totalWidth, colHeight);
	        legendHitBoxes.push({
	          x: totalWidth,
	          y: colHeight - height / 2 + titleHeight,
	          width: width * 1.375,
	          height: height * 1.375
	        });
	      }

	      colHeight += height + itemMarginBottom;
	    }
	    this.legendHitBoxes = legendHitBoxes;
	    return;
	  };

	  List.prototype._adjustItems = function _adjustItems() {
	    var layout = this.layout;
	    if (layout === 'horizontal') {
	      this._adjustHorizontal();
	    } else {
	      this._adjustVertical();
	    }
	  };

	  List.prototype.moveTo = function moveTo(x, y) {
	    this.x = x;
	    this.y = y;
	    var container = this.container;
	    container && container.moveTo(x, y);
	    return this;
	  };

	  List.prototype.setItems = function setItems(items) {
	    this.clearItems();
	    this._renderItems(items);
	  };

	  List.prototype.setTitle = function setTitle(title) {
	    var titleShape = this.titleShape;
	    if (titleShape) {
	      titleShape.attr('text', title);
	    } else {
	      this._renderTitle(title);
	    }
	  };

	  List.prototype.clearItems = function clearItems() {
	    var itemsGroup = this.itemsGroup;
	    itemsGroup.clear();
	  };

	  List.prototype.getWidth = function getWidth() {
	    var container = this.container;
	    var bbox = container.getBBox();
	    return bbox.width;
	  };

	  List.prototype.getHeight = function getHeight() {
	    var container = this.container;
	    var bbox = container.getBBox();
	    return bbox.height;
	  };

	  List.prototype.show = function show() {
	    var container = this.container;
	    container.show();
	  };

	  List.prototype.hide = function hide() {
	    var container = this.container;
	    container.hide();
	  };

	  List.prototype.clear = function clear() {
	    var container = this.container;
	    container.clear();
	    container.remove(true);
	  };

	  return List;
	}();

	module.exports = List;

	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Animate configuration and register
	 * @author sima.zhang1990@gmail.com
	 */
	var Util = __webpack_require__(0);
	var defaultAnimationCfg = {
	  appear: {
	    duration: 450,
	    easing: 'quadraticOut'
	  }, // 'appear' animation options
	  update: {
	    duration: 300,
	    easing: 'quadraticOut'
	  }, // 'update' animation options
	  enter: {
	    duration: 300,
	    easing: 'quadraticOut'
	  }, // 'enter' animation options
	  leave: {
	    duration: 350,
	    easing: 'quadraticIn' // 'leave' animation options
	  } };

	var Animate = {
	  defaultCfg: {},
	  Action: {},
	  getAnimation: function getAnimation(geomType, coord, animationType) {
	    var geomAnimateCfg = this.defaultCfg[geomType];
	    if (geomAnimateCfg) {
	      var animation = geomAnimateCfg[animationType];
	      if (Util.isFunction(animation)) {
	        return animation(coord);
	      }
	    }
	    return false;
	  },
	  getAnimateCfg: function getAnimateCfg(geomType, animationType) {
	    var defaultCfg = defaultAnimationCfg[animationType];
	    var geomConfig = this.defaultCfg[geomType];
	    if (geomConfig && geomConfig.cfg && geomConfig.cfg[animationType]) {
	      return Util.deepMix({}, defaultCfg, geomConfig.cfg[animationType]);
	    }
	    return defaultCfg;
	  },
	  registerAnimation: function registerAnimation(animationName, animationFun) {
	    if (!this.Action) {
	      this.Action = {};
	    }
	    this.Action[animationName] = animationFun;
	  }
	};

	module.exports = Animate;

	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Utility
	 * @author sima.zhang1990@gmail.com
	 */
	var _require = __webpack_require__(9),
	    Matrix = _require.Matrix;

	var Util = __webpack_require__(0);

	var Helpers = {
	  getCoordInfo: function getCoordInfo(coord) {
	    var start = coord.start;
	    var end = coord.end;
	    return {
	      start: start,
	      end: end,
	      width: end.x - start.x,
	      height: Math.abs(end.y - start.y)
	    };
	  },
	  getScaledMatrix: function getScaledMatrix(shape, v, direct) {
	    var scaledMatrix = void 0;

	    shape.apply(v);
	    var x = v[0];
	    var y = v[1];

	    if (direct === 'x') {
	      shape.transform([['t', x, y], ['s', 0.01, 1], ['t', -x, -y]]);
	      var matrix = shape.getMatrix();
	      scaledMatrix = Matrix.transform(matrix, [['t', x, y], ['s', 100, 1], ['t', -x, -y]]);
	    } else if (direct === 'y') {
	      shape.transform([['t', x, y], ['s', 1, 0.01], ['t', -x, -y]]);
	      var _matrix = shape.getMatrix();
	      scaledMatrix = Matrix.transform(_matrix, [['t', x, y], ['s', 1, 100], ['t', -x, -y]]);
	    } else if (direct === 'xy') {
	      shape.transform([['t', x, y], ['s', 0.01, 0.01], ['t', -x, -y]]);
	      var _matrix2 = shape.getMatrix();
	      scaledMatrix = Matrix.transform(_matrix2, [['t', x, y], ['s', 100, 100], ['t', -x, -y]]);
	    }
	    return scaledMatrix;
	  },
	  getAnimateParam: function getAnimateParam(animateCfg, index, id) {
	    var result = {};
	    if (animateCfg.delay) {
	      result.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;
	    }
	    result.easing = animateCfg.easing;
	    result.duration = animateCfg.duration;
	    result.delay = animateCfg.delay;
	    return result;
	  },
	  doAnimation: function doAnimation(shape, endState, animateCfg, callback) {
	    var id = shape._id;
	    var index = shape.get('index');

	    var _Helpers$getAnimatePa = Helpers.getAnimateParam(animateCfg, index, id),
	        easing = _Helpers$getAnimatePa.easing,
	        delay = _Helpers$getAnimatePa.delay,
	        duration = _Helpers$getAnimatePa.duration;

	    var anim = shape.animate().to({
	      attrs: endState,
	      duration: duration,
	      delay: delay,
	      easing: easing
	    });

	    if (callback) {
	      anim.onEnd(function () {
	        callback();
	      });
	    }
	  }
	};

	module.exports = Helpers;

	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {

	var Geom = __webpack_require__(5);

	__webpack_require__(94);
	__webpack_require__(38);
	__webpack_require__(79);
	__webpack_require__(96);
	__webpack_require__(80);
	__webpack_require__(98);
	__webpack_require__(100);

	module.exports = Geom;

	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Geom = __webpack_require__(5);
	__webpack_require__(95);

	var Point = function (_Geom) {
	  _inherits(Point, _Geom);

	  function Point() {
	    _classCallCheck(this, Point);

	    return _possibleConstructorReturn(this, _Geom.apply(this, arguments));
	  }

	  Point.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'point';
	    cfg.shapeType = 'point';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Point.prototype.draw = function draw(data, shapeFactory) {
	    var self = this;
	    var container = self.get('container');
	    Util.each(data, function (obj) {
	      var shape = obj.shape;
	      var cfg = self.getDrawCfg(obj);
	      if (Util.isArray(obj.y)) {
	        var hasStack = self.hasAdjust('stack');
	        Util.each(obj.y, function (y, idx) {
	          cfg.y = y;
	          if (!hasStack || idx !== 0) {
	            self.drawShape(shape, obj, cfg, container, shapeFactory);
	          }
	        });
	      } else if (!Util.isNil(obj.y)) {
	        self.drawShape(shape, obj, cfg, container, shapeFactory);
	      }
	    });
	  };

	  return Point;
	}(Geom);

	Geom.Point = Point;

	module.exports = Point;

	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(1);
	var ShapeUtil = __webpack_require__(20);
	var Shape = __webpack_require__(8);
	var SHAPES = ['circle', 'hollowCircle', 'rect'];

	var Point = Shape.registerFactory('point', {
	  defaultShapeType: 'circle',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  }
	});

	function getPointsCfg(cfg) {
	  var style = {
	    lineWidth: 0,
	    stroke: cfg.color,
	    fill: cfg.color
	  };
	  if (cfg.size) {
	    style.size = cfg.size;
	  }

	  Util.mix(style, cfg.style);
	  return Util.mix({}, Global.shape.point, style);
	}

	function drawShape(cfg, container, shape) {
	  if (cfg.size === 0) return;
	  var pointCfg = getPointsCfg(cfg);
	  var size = pointCfg.r || pointCfg.size;
	  var x = cfg.x;
	  var y = !Util.isArray(cfg.y) ? [cfg.y] : cfg.y;
	  if (shape === 'hollowCircle') {
	    pointCfg.lineWidth = 1;
	    pointCfg.fill = null;
	  }
	  for (var i = 0, len = y.length; i < len; i++) {
	    if (shape === 'rect') {
	      return container.addShape('Rect', {
	        className: 'point',
	        attrs: Util.mix({
	          x: x - size,
	          y: y[i] - size,
	          width: size * 2,
	          height: size * 2
	        }, pointCfg)
	      });
	    }

	    return container.addShape('Circle', {
	      className: 'point',
	      attrs: Util.mix({
	        x: x,
	        y: y[i],
	        r: size
	      }, pointCfg)
	    });
	  }
	}

	Util.each(SHAPES, function (shapeType) {
	  Shape.registerShape('point', shapeType, {
	    draw: function draw(cfg, container) {
	      return drawShape(cfg, container, shapeType);
	    }
	  });
	});

	module.exports = Point;

	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview area geometry
	 * @author dxq613 @gmail.com
	 * @author sima.zhang1990@gmail.com
	 */

	var Geom = __webpack_require__(5);
	var ShapeUtil = __webpack_require__(20);
	var Util = __webpack_require__(0);
	__webpack_require__(97);

	var Area = function (_Geom) {
	  _inherits(Area, _Geom);

	  function Area() {
	    _classCallCheck(this, Area);

	    return _possibleConstructorReturn(this, _Geom.apply(this, arguments));
	  }

	  /**
	   * get the default configuration
	   * @protected
	   * @return {Object} return the result
	   */
	  Area.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'area';
	    cfg.shapeType = 'area';
	    cfg.generatePoints = true;
	    cfg.sortable = true;
	    return cfg;
	  };

	  Area.prototype.draw = function draw(data, shapeFactory) {
	    var self = this;
	    var container = self.get('container');
	    var cfg = this.getDrawCfg(data[0]);
	    var yScale = self.getYScale();
	    var connectNulls = self.get('connectNulls');
	    var splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);
	    cfg.origin = data;
	    Util.each(splitArray, function (subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex;
	      var points = subData.map(function (obj) {
	        return obj.points;
	      });
	      cfg.points = points;
	      self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);
	    });
	  };

	  return Area;
	}(Geom);

	Geom.Area = Area;

	module.exports = Area;

	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(8);
	var Smooth = __webpack_require__(37);
	var Global = __webpack_require__(1);

	function equals(v1, v2) {
	  return Math.abs(v1 - v2) < 0.00001;
	}

	function equalsCenter(points, center) {
	  var eqls = true;
	  Util.each(points, function (point) {
	    if (!equals(point.x, center.x) || !equals(point.y, center.y)) {
	      eqls = false;
	      return false;
	    }
	  });
	  return eqls;
	}

	function drawRectShape(topPoints, bottomPoints, container, style, isSmooth) {
	  var shape = void 0;
	  var points = topPoints.concat(bottomPoints);
	  if (isSmooth) {
	    shape = container.addShape('Custom', {
	      className: 'area',
	      attrs: Util.mix({
	        points: points
	      }, style),
	      createPath: function createPath(context) {
	        var constaint = [[0, 0], [1, 1]];
	        var points = this._attrs.attrs.points;
	        var pointsLen = points.length;
	        var topPoints = points.slice(0, pointsLen / 2);
	        var bottomPoints = points.slice(pointsLen / 2, pointsLen);
	        var topSps = Smooth.smooth(topPoints, false, constaint);
	        context.beginPath();
	        context.moveTo(topPoints[0].x, topPoints[0].y);
	        for (var i = 0, n = topSps.length; i < n; i++) {
	          var sp = topSps[i];
	          context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);
	        }

	        if (bottomPoints.length) {
	          var bottomSps = Smooth.smooth(bottomPoints, false, constaint);
	          context.lineTo(bottomPoints[0].x, bottomPoints[0].y);
	          for (var _i = 0, _n = bottomSps.length; _i < _n; _i++) {
	            var _sp = bottomSps[_i];
	            context.bezierCurveTo(_sp[1], _sp[2], _sp[3], _sp[4], _sp[5], _sp[6]);
	          }
	        }
	        context.closePath();
	      }
	    });
	  } else {
	    shape = container.addShape('Polyline', {
	      className: 'area',
	      attrs: Util.mix({
	        points: points
	      }, style)
	    });
	  }
	  return shape;
	}

	function drawShape(cfg, container, isSmooth) {
	  var self = this;
	  var points = cfg.points;
	  var topPoints = [];
	  var bottomPoints = [];
	  Util.each(points, function (point) {
	    bottomPoints.push(point[0]);
	    topPoints.push(point[1]);
	  });
	  var style = Util.mix({
	    fillStyle: cfg.color
	  }, Global.shape.area, cfg.style);

	  bottomPoints.reverse();
	  topPoints = self.parsePoints(topPoints);
	  bottomPoints = self.parsePoints(bottomPoints);
	  if (cfg.isInCircle) {
	    topPoints.push(topPoints[0]);
	    bottomPoints.unshift(bottomPoints[bottomPoints.length - 1]);
	    if (equalsCenter(bottomPoints, cfg.center)) {
	      bottomPoints = [];
	    }
	  }

	  return drawRectShape(topPoints, bottomPoints, container, style, isSmooth);
	}

	var Area = Shape.registerFactory('area', {
	  defaultShapeType: 'area',
	  getDefaultPoints: function getDefaultPoints(obj) {
	    var x = obj.x;
	    var y = obj.y;
	    var y0 = obj.y0;
	    y = Util.isArray(y) ? y : [y0, y];

	    var points = [];
	    points.push({
	      x: x,
	      y: y[0]
	    }, {
	      x: x,
	      y: y[1]
	    });
	    return points;
	  }
	});

	var SHAPES = ['area', 'smooth'];
	Util.each(SHAPES, function (shapeType) {
	  Shape.registerShape('area', shapeType, {
	    draw: function draw(cfg, container) {
	      var smooth = shapeType === 'smooth';
	      return drawShape.call(this, cfg, container, smooth);
	    }
	  });
	});

	module.exports = Area;

	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Geom = __webpack_require__(5);
	var Util = __webpack_require__(0);
	__webpack_require__(99);

	var Polygon = function (_Geom) {
	  _inherits(Polygon, _Geom);

	  function Polygon() {
	    _classCallCheck(this, Polygon);

	    return _possibleConstructorReturn(this, _Geom.apply(this, arguments));
	  }

	  Polygon.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'polygon';
	    cfg.shapeType = 'polygon';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Polygon.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);
	    var self = this;
	    var x = cfg.x;
	    var y = cfg.y;
	    var temp = void 0;
	    if (!(Util.isArray(x) && Util.isArray(y))) {
	      var xScale = self.getXScale();
	      var yScale = self.getYScale();
	      var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;
	      var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;
	      var xOffset = 0.5 * 1 / xCount;
	      var yOffset = 0.5 * 1 / yCount;
	      if (xScale.isCategory && yScale.isCategory) {
	        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];
	        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];
	      } else if (Util.isArray(x)) {
	        temp = x;
	        x = [temp[0], temp[0], temp[1], temp[1]];
	        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];
	      } else if (Util.isArray(y)) {
	        temp = y;
	        y = [temp[0], temp[1], temp[1], temp[0]];
	        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];
	      }
	      cfg.x = x;
	      cfg.y = y;
	    }
	    return cfg;
	  };

	  return Polygon;
	}(Geom);

	Geom.Polygon = Polygon;

	module.exports = Polygon;

	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {

	var Shape = __webpack_require__(8);
	var Util = __webpack_require__(0);

	var Polygon = Shape.registerFactory('polygon', {
	  defaultShapeType: 'polygon',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    var x = pointInfo.x,
	        y = pointInfo.y;

	    for (var i = 0, len = x.length; i < len; i++) {
	      points.push({
	        x: x[i],
	        y: y[i]
	      });
	    }
	    return points;
	  }
	});

	Shape.registerShape('polygon', 'polygon', {
	  draw: function draw(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var style = Util.mix({
	      fill: cfg.color,
	      points: points
	    }, cfg.style);
	    return container.addShape('Polygon', {
	      className: 'polygon',
	      attrs: style
	    });
	  }
	});

	module.exports = Polygon;

	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Geom = __webpack_require__(5);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(39);
	__webpack_require__(101);

	var Schema = function (_Geom) {
	  _inherits(Schema, _Geom);

	  Schema.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Geom.prototype.getDefaultCfg.call(this);
	    cfg.type = 'schema';
	    cfg.shapeType = 'schema';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Schema(cfg) {
	    _classCallCheck(this, Schema);

	    var _this = _possibleConstructorReturn(this, _Geom.call(this, cfg));

	    Util.mix(_this, SizeMixin);
	    return _this;
	  }

	  Schema.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _Geom.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  Schema.prototype.clearInner = function clearInner() {
	    _Geom.prototype.clearInner.call(this);
	    this.set('defaultSize', null);
	  };

	  return Schema;
	}(Geom);

	Geom.Schema = Schema;

	module.exports = Schema;

	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {

	var Shape = __webpack_require__(8);
	var Util = __webpack_require__(0);

	function _sortValue(value) {
	  var sorted = value.sort(function (a, b) {
	    return a < b ? 1 : -1;
	  });

	  var length = sorted.length;
	  if (length < 4) {
	    var min = sorted[length - 1];
	    for (var i = 0; i < 4 - length; i++) {
	      sorted.push(min);
	    }
	  }
	  return sorted;
	}

	// from left bottom corner, and clockwise
	function getCandlePoints(x, y, width) {
	  var yValues = _sortValue(y);
	  var points = [{
	    x: x,
	    y: yValues[0]
	  }, {
	    x: x,
	    y: yValues[1]
	  }, {
	    x: x - width / 2,
	    y: yValues[2]
	  }, {
	    x: x - width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[3]
	  }];
	  return points;
	}

	var Schema = Shape.registerFactory('schema', {});

	Shape.registerShape('schema', 'candle', {
	  getPoints: function getPoints(cfg) {
	    return getCandlePoints(cfg.x, cfg.y, cfg.size);
	  },
	  draw: function draw(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var style = Util.mix({
	      stroke: cfg.color,
	      fill: cfg.color,
	      lineWidth: 1
	    }, cfg.style);
	    return container.addShape('Custom', {
	      className: 'schema',
	      attrs: style,
	      createPath: function createPath(ctx) {
	        ctx.beginPath();
	        ctx.moveTo(points[0].x, points[0].y);
	        ctx.lineTo(points[1].x, points[1].y);

	        ctx.moveTo(points[2].x, points[2].y);
	        for (var i = 3; i < 6; i++) {
	          ctx.lineTo(points[i].x, points[i].y);
	        }
	        ctx.closePath();
	        ctx.moveTo(points[6].x, points[6].y);
	        ctx.lineTo(points[7].x, points[7].y);
	      }
	    });
	  }
	});

	module.exports = Schema;

	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Abstract = __webpack_require__(24);

	var Circle = function (_Abstract) {
	  _inherits(Circle, _Abstract);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Abstract.apply(this, arguments));
	  }

	  Circle.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Abstract.prototype._initDefaultCfg.call(this);
	    this.startAngle = -Math.PI / 2; // start angle，in radian
	    this.endAngle = Math.PI * 3 / 2; // end angle, in radian
	    this.radius = null; // radius
	    this.center = null; // center
	  };

	  Circle.prototype.getOffsetPoint = function getOffsetPoint(value) {
	    var startAngle = this.startAngle,
	        endAngle = this.endAngle;

	    var angle = startAngle + (endAngle - startAngle) * value;
	    return this._getCirclePoint(angle);
	  };

	  Circle.prototype._getCirclePoint = function _getCirclePoint(angle, radius) {
	    var self = this;
	    var center = self.center;
	    radius = radius || self.radius;
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Circle.prototype.getTextAlignInfo = function getTextAlignInfo(point, offset) {
	    var self = this;
	    var offsetVector = self.getOffsetVector(point, offset);
	    var align = void 0;
	    var baseLine = 'middle';
	    if (offsetVector[0] > 0) {
	      align = 'left';
	    } else if (offsetVector[0] < 0) {
	      align = 'right';
	    } else {
	      align = 'center';
	      if (offsetVector[1] > 0) {
	        baseLine = 'top';
	      } else if (offsetVector[1] < 0) {
	        baseLine = 'bottom';
	      }
	    }
	    return {
	      textAlign: align,
	      textBaseline: baseLine
	    };
	  };

	  Circle.prototype.getAxisVector = function getAxisVector(point) {
	    var center = this.center;
	    var factor = this.offsetFactor;
	    return [(point.y - center.y) * factor, (point.x - center.x) * -1 * factor];
	  };

	  Circle.prototype.drawLine = function drawLine(lineCfg) {
	    var center = this.center,
	        radius = this.radius,
	        startAngle = this.startAngle,
	        endAngle = this.endAngle;

	    var container = this.getContainer(lineCfg.top);
	    container.addShape('arc', {
	      className: 'axis-line',
	      attrs: Util.mix({
	        x: center.x,
	        y: center.y,
	        r: radius,
	        startAngle: startAngle,
	        endAngle: endAngle
	      }, lineCfg)
	    });
	  };

	  return Circle;
	}(Abstract);

	Abstract.Circle = Circle;
	module.exports = Circle;

	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {

	var TimeCat = __webpack_require__(104);
	module.exports = TimeCat;

	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @fileOverview 时间数据作为分类类型
	 * @author dxq613@gmail.com
	 */
	var Base = __webpack_require__(13);
	var Category = __webpack_require__(34);
	var fecha = __webpack_require__(105);
	var catAuto = __webpack_require__(35);
	var TimeUtil = __webpack_require__(88);

	var each = __webpack_require__(3);
	var isNumber = __webpack_require__(17);
	var isObject = __webpack_require__(18);
	var isString = __webpack_require__(14);

	/**
	 * 度量的构造函数
	 * @class Scale.TimeCategory
	 */

	var TimeCategory = function (_Category) {
	  _inherits(TimeCategory, _Category);

	  function TimeCategory() {
	    _classCallCheck(this, TimeCategory);

	    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
	  }

	  TimeCategory.prototype._initDefaultCfg = function _initDefaultCfg() {
	    _Category.prototype._initDefaultCfg.call(this);

	    this.type = 'timeCat';
	    /**
	     * 是否需要排序，默认进行排序
	     * @type {Boolean}
	     */
	    this.sortable = true;
	    this.tickCount = 5;
	    /**
	     * 时间格式化
	     * @type {String}
	     */
	    this.mask = 'YYYY-MM-DD';
	  };

	  TimeCategory.prototype.init = function init() {
	    var self = this;
	    var values = this.values;
	    // 针对时间分类类型，会将时间统一转换为时间戳
	    each(values, function (v, i) {
	      values[i] = self._toTimeStamp(v);
	    });
	    if (this.sortable) {
	      // 允许排序
	      values.sort(function (v1, v2) {
	        return v1 - v2;
	      });
	    }

	    if (!self.ticks) {
	      self.ticks = this.calculateTicks();
	    }
	  };

	  /**
	   * 计算 ticks
	   * @return {array} 返回 ticks 数组
	   */

	  TimeCategory.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var count = self.tickCount;
	    var ticks = void 0;
	    if (count) {
	      var temp = catAuto({
	        maxCount: count,
	        data: self.values,
	        isRounding: self.isRounding
	      });
	      ticks = temp.ticks;
	    } else {
	      ticks = self.values;
	    }

	    return ticks;
	  };

	  /**
	   * @override
	   */

	  TimeCategory.prototype.translate = function translate(value) {
	    value = this._toTimeStamp(value);
	    var index = this.values.indexOf(value);

	    if (index === -1) {
	      if (isNumber(value) && value < this.values.length) {
	        index = value;
	      } else {
	        index = NaN;
	      }
	    }
	    return index;
	  };

	  /**
	   * @override
	   */

	  TimeCategory.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var index = this.translate(value);

	    var percent = void 0;
	    if (this.values.length === 1 || isNaN(index)) {
	      // is index is NAN should not be set as 0
	      percent = index;
	    } else if (index > -1) {
	      percent = index / (this.values.length - 1);
	    } else {
	      percent = 0;
	    }

	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */

	  TimeCategory.prototype.getText = function getText(value) {
	    var result = '';
	    var index = this.translate(value);
	    if (index > -1) {
	      result = this.values[index];
	    } else {
	      result = value;
	    }

	    var formatter = this.formatter;
	    result = parseInt(result, 10);
	    result = formatter ? formatter(result) : fecha.format(result, this.mask);
	    return result;
	  };

	  /**
	   * @override
	   */

	  TimeCategory.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = this.ticks;
	    var rst = [];
	    each(ticks, function (tick) {
	      var obj = void 0;
	      if (isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: isString(tick) ? tick : self.getText(tick),
	          value: self.scale(tick),
	          tickValue: tick // 用于坐标轴上文本动画时确定前后帧的对应关系
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  // 将时间转换为时间戳


	  TimeCategory.prototype._toTimeStamp = function _toTimeStamp(value) {
	    return TimeUtil.toTimeStamp(value);
	  };

	  return TimeCategory;
	}(Category);

	Base.TimeCat = TimeCategory;
	module.exports = TimeCategory;

	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function (main) {
	  'use strict';

	  /**
	   * Parse or format dates
	   * @class fecha
	   */

	  var fecha = {};
	  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
	  var twoDigits = /\d\d?/;
	  var threeDigits = /\d{3}/;
	  var fourDigits = /\d{4}/;
	  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	  var literal = /\[([^]*?)\]/gm;
	  var noop = function noop() {};

	  function shorten(arr, sLen) {
	    var newArr = [];
	    for (var i = 0, len = arr.length; i < len; i++) {
	      newArr.push(arr[i].substr(0, sLen));
	    }
	    return newArr;
	  }

	  function monthUpdate(arrName) {
	    return function (d, v, i18n) {
	      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
	      if (~index) {
	        d.month = index;
	      }
	    };
	  }

	  function pad(val, len) {
	    val = String(val);
	    len = len || 2;
	    while (val.length < len) {
	      val = '0' + val;
	    }
	    return val;
	  }

	  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	  var monthNamesShort = shorten(monthNames, 3);
	  var dayNamesShort = shorten(dayNames, 3);
	  fecha.i18n = {
	    dayNamesShort: dayNamesShort,
	    dayNames: dayNames,
	    monthNamesShort: monthNamesShort,
	    monthNames: monthNames,
	    amPm: ['am', 'pm'],
	    DoFn: function DoFn(D) {
	      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
	    }
	  };

	  var formatFlags = {
	    D: function D(dateObj) {
	      return dateObj.getDate();
	    },
	    DD: function DD(dateObj) {
	      return pad(dateObj.getDate());
	    },
	    Do: function Do(dateObj, i18n) {
	      return i18n.DoFn(dateObj.getDate());
	    },
	    d: function d(dateObj) {
	      return dateObj.getDay();
	    },
	    dd: function dd(dateObj) {
	      return pad(dateObj.getDay());
	    },
	    ddd: function ddd(dateObj, i18n) {
	      return i18n.dayNamesShort[dateObj.getDay()];
	    },
	    dddd: function dddd(dateObj, i18n) {
	      return i18n.dayNames[dateObj.getDay()];
	    },
	    M: function M(dateObj) {
	      return dateObj.getMonth() + 1;
	    },
	    MM: function MM(dateObj) {
	      return pad(dateObj.getMonth() + 1);
	    },
	    MMM: function MMM(dateObj, i18n) {
	      return i18n.monthNamesShort[dateObj.getMonth()];
	    },
	    MMMM: function MMMM(dateObj, i18n) {
	      return i18n.monthNames[dateObj.getMonth()];
	    },
	    YY: function YY(dateObj) {
	      return String(dateObj.getFullYear()).substr(2);
	    },
	    YYYY: function YYYY(dateObj) {
	      return pad(dateObj.getFullYear(), 4);
	    },
	    h: function h(dateObj) {
	      return dateObj.getHours() % 12 || 12;
	    },
	    hh: function hh(dateObj) {
	      return pad(dateObj.getHours() % 12 || 12);
	    },
	    H: function H(dateObj) {
	      return dateObj.getHours();
	    },
	    HH: function HH(dateObj) {
	      return pad(dateObj.getHours());
	    },
	    m: function m(dateObj) {
	      return dateObj.getMinutes();
	    },
	    mm: function mm(dateObj) {
	      return pad(dateObj.getMinutes());
	    },
	    s: function s(dateObj) {
	      return dateObj.getSeconds();
	    },
	    ss: function ss(dateObj) {
	      return pad(dateObj.getSeconds());
	    },
	    S: function S(dateObj) {
	      return Math.round(dateObj.getMilliseconds() / 100);
	    },
	    SS: function SS(dateObj) {
	      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
	    },
	    SSS: function SSS(dateObj) {
	      return pad(dateObj.getMilliseconds(), 3);
	    },
	    a: function a(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
	    },
	    A: function A(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
	    },
	    ZZ: function ZZ(dateObj) {
	      var o = dateObj.getTimezoneOffset();
	      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
	    }
	  };

	  var parseFlags = {
	    D: [twoDigits, function (d, v) {
	      d.day = v;
	    }],
	    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
	      d.day = parseInt(v, 10);
	    }],
	    M: [twoDigits, function (d, v) {
	      d.month = v - 1;
	    }],
	    YY: [twoDigits, function (d, v) {
	      var da = new Date(),
	          cent = +('' + da.getFullYear()).substr(0, 2);
	      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
	    }],
	    h: [twoDigits, function (d, v) {
	      d.hour = v;
	    }],
	    m: [twoDigits, function (d, v) {
	      d.minute = v;
	    }],
	    s: [twoDigits, function (d, v) {
	      d.second = v;
	    }],
	    YYYY: [fourDigits, function (d, v) {
	      d.year = v;
	    }],
	    S: [/\d/, function (d, v) {
	      d.millisecond = v * 100;
	    }],
	    SS: [/\d{2}/, function (d, v) {
	      d.millisecond = v * 10;
	    }],
	    SSS: [threeDigits, function (d, v) {
	      d.millisecond = v;
	    }],
	    d: [twoDigits, noop],
	    ddd: [word, noop],
	    MMM: [word, monthUpdate('monthNamesShort')],
	    MMMM: [word, monthUpdate('monthNames')],
	    a: [word, function (d, v, i18n) {
	      var val = v.toLowerCase();
	      if (val === i18n.amPm[0]) {
	        d.isPm = false;
	      } else if (val === i18n.amPm[1]) {
	        d.isPm = true;
	      }
	    }],
	    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
	      if (v === 'Z') v = '+00:00';
	      var parts = (v + '').match(/([\+\-]|\d\d)/gi),
	          minutes;

	      if (parts) {
	        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
	        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
	      }
	    }]
	  };
	  parseFlags.dd = parseFlags.d;
	  parseFlags.dddd = parseFlags.ddd;
	  parseFlags.DD = parseFlags.D;
	  parseFlags.mm = parseFlags.m;
	  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
	  parseFlags.MM = parseFlags.M;
	  parseFlags.ss = parseFlags.s;
	  parseFlags.A = parseFlags.a;

	  // Some common format strings
	  fecha.masks = {
	    default: 'ddd MMM DD YYYY HH:mm:ss',
	    shortDate: 'M/D/YY',
	    mediumDate: 'MMM D, YYYY',
	    longDate: 'MMMM D, YYYY',
	    fullDate: 'dddd, MMMM D, YYYY',
	    shortTime: 'HH:mm',
	    mediumTime: 'HH:mm:ss',
	    longTime: 'HH:mm:ss.SSS'
	  };

	  /***
	   * Format a date
	   * @method format
	   * @param {Date|number} dateObj
	   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
	   */
	  fecha.format = function (dateObj, mask, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof dateObj === 'number') {
	      dateObj = new Date(dateObj);
	    }

	    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
	      throw new Error('Invalid Date in fecha.format');
	    }

	    mask = fecha.masks[mask] || mask || fecha.masks['default'];

	    var literals = [];

	    // Make literals inactive by replacing them with ??
	    mask = mask.replace(literal, function ($0, $1) {
	      literals.push($1);
	      return '??';
	    });
	    // Apply formatting rules
	    mask = mask.replace(token, function ($0) {
	      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
	    });
	    // Inline literal values back into the formatted value
	    return mask.replace(/\?\?/g, function () {
	      return literals.shift();
	    });
	  };

	  /**
	   * Parse a date string into an object, changes - into /
	   * @method parse
	   * @param {string} dateStr Date string
	   * @param {string} format Date parse format
	   * @returns {Date|boolean}
	   */
	  fecha.parse = function (dateStr, format, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof format !== 'string') {
	      throw new Error('Invalid format in fecha.parse');
	    }

	    format = fecha.masks[format] || format;

	    // Avoid regular expression denial of service, fail early for really long strings
	    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
	    if (dateStr.length > 1000) {
	      return false;
	    }

	    var isValid = true;
	    var dateInfo = {};
	    format.replace(token, function ($0) {
	      if (parseFlags[$0]) {
	        var info = parseFlags[$0];
	        var index = dateStr.search(info[0]);
	        if (!~index) {
	          isValid = false;
	        } else {
	          dateStr.replace(info[0], function (result) {
	            info[1](dateInfo, result, i18n);
	            dateStr = dateStr.substr(index + result.length);
	            return result;
	          });
	        }
	      }

	      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
	    });

	    if (!isValid) {
	      return false;
	    }

	    var today = new Date();
	    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
	      dateInfo.hour = +dateInfo.hour + 12;
	    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
	      dateInfo.hour = 0;
	    }

	    var date;
	    if (dateInfo.timezoneOffset != null) {
	      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
	      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
	    } else {
	      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
	    }
	    return date;
	  };

	  /* istanbul ignore next */
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = fecha;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return fecha;
	    }.call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    main.fecha = fecha;
	  }
	})(this);

	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	var Arc = function (_GuideBase) {
	  _inherits(Arc, _GuideBase);

	  function Arc() {
	    _classCallCheck(this, Arc);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Arc.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'arc';
	    /**
	     * start point
	     * @type {Array | Function}
	     */
	    this.start = [];
	    /**
	     * end point
	     * @type {Array | Function}
	     */
	    this.end = [];
	    /**
	     * style configuration
	     * @type {Object}
	     */
	    this.style = {
	      stroke: '#999',
	      lineWidth: 1
	    };
	  };

	  Arc.prototype.render = function render(coord, container) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    if (!start || !end) {
	      return;
	    }
	    var coordCenter = coord.center;
	    var radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));
	    var startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);
	    var endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);
	    var shape = container.addShape('arc', {
	      className: 'guide-arc',
	      attrs: Util.mix({
	        x: coordCenter.x,
	        y: coordCenter.y,
	        r: radius,
	        startAngle: startAngle,
	        endAngle: endAngle
	      }, self.style)
	    });
	    self.element = shape;
	    return shape;
	  };

	  return Arc;
	}(GuideBase);

	GuideBase.Arc = Arc;
	module.exports = Arc;

	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	function getOffsetFromAlign(alignX, alignY, width, height) {
	  var result = [];

	  if (alignX === 'left' && alignY === 'top') {
	    result[0] = 0;
	    result[1] = 0;
	  } else if (alignX === 'right' && alignY === 'top') {
	    result[0] = -width;
	    result[1] = 0;
	  } else if (alignX === 'left' && alignY === 'bottom') {
	    result[0] = 0;
	    result[1] = Math.floor(-height);
	  } else if (alignX === 'right' && alignY === 'bottom') {
	    result[0] = Math.floor(-width);
	    result[1] = Math.floor(-height);
	  } else if (alignX === 'right' && alignY === 'middle') {
	    result[0] = Math.floor(-width);
	    result[1] = Math.floor(-height / 2);
	  } else if (alignX === 'left' && alignY === 'middle') {
	    result[0] = 0;
	    result[1] = Math.floor(-height / 2);
	  } else if (alignX === 'center' && alignY === 'bottom') {
	    result[0] = Math.floor(-width / 2);
	    result[1] = Math.floor(-height);
	  } else if (alignX === 'center' && alignY === 'top') {
	    result[0] = Math.floor(-width / 2);
	    result[1] = 0;
	  } else {
	    result[0] = Math.floor(-width / 2);
	    result[1] = Math.floor(-height / 2);
	  }

	  return result;
	}

	function modifyCSS(DOM, CSS) {
	  for (var key in CSS) {
	    if (CSS.hasOwnProperty(key)) {
	      DOM.style[key] = CSS[key];
	    }
	  }
	  return DOM;
	}

	function createDom(str) {
	  var container = document.createElement('div');
	  str = str.replace(/(^\s*)|(\s*$)/g, '');
	  container.innerHTML = '' + str;
	  return container.childNodes[0];
	}

	var Html = function (_GuideBase) {
	  _inherits(Html, _GuideBase);

	  function Html() {
	    _classCallCheck(this, Html);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Html.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'html';
	    /**
	     * dom position
	     * @type {Object | Array}
	     */
	    this.position = null;
	    /**
	      * alignment for horizontal direction，can be 'left','center','right'
	      * @type {String}
	      */
	    this.alignX = 'center';
	    /**
	      * alignment for vertical direction，can be 'top', 'middle', 'bottom'
	      * @type {String}
	      */
	    this.alignY = 'middle';
	    /**
	      * offset for horizontal direction
	      * @type {Number}
	      */
	    this.offsetX = null;
	    /**
	      * offset for vertical direction
	      * @type {Number}
	      */
	    this.offsetY = null;
	    /**
	    * the html string
	    *@type {String | Function}
	    */
	    this.html = null;
	  };

	  // override paint


	  Html.prototype.render = function render(coord, container) {
	    var self = this;
	    var position = self.parsePoint(coord, self.position);
	    if (!position) {
	      return;
	    }
	    var myNode = createDom(self.html);
	    myNode = modifyCSS(myNode, {
	      position: 'absolute',
	      top: Math.floor(position.y) + 'px',
	      left: Math.floor(position.x) + 'px',
	      visibility: 'hidden'
	    });

	    var canvasDom = container.get('canvas').get('el');
	    var parentNode = canvasDom.parentNode;
	    parentNode = modifyCSS(parentNode, {
	      position: 'relative'
	    });

	    var wrapperNode = createDom('<div class="guideWapper" style="position: absolute;top: 0; left: 0;"></div>');
	    parentNode.appendChild(wrapperNode);
	    wrapperNode.appendChild(myNode);

	    var canvasOffsetTop = canvasDom.offsetTop;
	    var canvasOffsetLeft = canvasDom.offsetLeft;
	    var alignX = self.alignX,
	        alignY = self.alignY,
	        offsetX = self.offsetX,
	        offsetY = self.offsetY;

	    var width = Util.getWidth(myNode);
	    var height = Util.getHeight(myNode);
	    var newOffset = getOffsetFromAlign(alignX, alignY, width, height);
	    position.x = position.x + newOffset[0] + canvasOffsetLeft;
	    position.y = position.y + newOffset[1] + canvasOffsetTop;

	    if (offsetX) {
	      position.x += offsetX;
	    }

	    if (offsetY) {
	      position.y += offsetY;
	    }

	    modifyCSS(myNode, {
	      top: Math.floor(position.y) + 'px',
	      left: Math.floor(position.x) + 'px',
	      visibility: 'visible'
	    });
	    self.element = wrapperNode;
	  };

	  Html.prototype.remove = function remove() {
	    var element = this.element;
	    element && element.parentNode && element.parentNode.removeChild(element);
	  };

	  return Html;
	}(GuideBase);

	GuideBase.Html = Html;
	module.exports = Html;

	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	var Line = function (_GuideBase) {
	  _inherits(Line, _GuideBase);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Line.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'line';
	    this.start = [];
	    this.end = [];
	    this.style = {
	      stroke: '#000',
	      lineWidth: 1
	    };
	  };

	  Line.prototype.render = function render(coord, container) {
	    var points = [];
	    points[0] = this.parsePoint(coord, this.start);
	    points[1] = this.parsePoint(coord, this.end);
	    if (!points[0] || !points[1]) {
	      return;
	    }
	    var shape = container.addShape('Line', {
	      className: 'guide-line',
	      attrs: Util.mix({
	        x1: points[0].x,
	        y1: points[0].y,
	        x2: points[1].x,
	        y2: points[1].y
	      }, this.style)
	    });
	    this.element = shape;
	    return shape;
	  };

	  return Line;
	}(GuideBase);

	GuideBase.Line = Line;
	module.exports = Line;

	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	var Rect = function (_GuideBase) {
	  _inherits(Rect, _GuideBase);

	  function Rect() {
	    _classCallCheck(this, Rect);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Rect.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'rect';
	    this.start = [];
	    this.end = [];
	    this.style = {
	      fill: '#CCD7EB',
	      opacity: 0.4
	    };
	  };

	  Rect.prototype.render = function render(coord, container) {
	    var start = this.parsePoint(coord, this.start);
	    var end = this.parsePoint(coord, this.end);
	    if (!start || !end) {
	      return;
	    }
	    var shape = container.addShape('rect', {
	      className: 'guide-rect',
	      attrs: Util.mix({
	        x: Math.min(start.x, end.x),
	        y: Math.min(start.y, end.y),
	        width: Math.abs(end.x - start.x),
	        height: Math.abs(start.y - end.y)
	      }, this.style)
	    });
	    this.element = shape;
	    return shape;
	  };

	  return Rect;
	}(GuideBase);

	GuideBase.Rect = Rect;
	module.exports = Rect;

	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	var Text = function (_GuideBase) {
	  _inherits(Text, _GuideBase);

	  function Text() {
	    _classCallCheck(this, Text);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Text.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'text';
	    /**
	     * the position of text
	     * @type {Function | Array}
	     */
	    this.position = null;
	    /**
	     * the display content
	     * @type {String}
	     */
	    this.content = null;
	    /**
	     * style configuration for text
	     * @type {Object}
	     */
	    this.style = {
	      fill: '#000'
	    };
	    /**
	     * offset of horizontal direction
	     * @type {Number}
	     */
	    this.offsetX = 0;
	    /**
	     * offset of vertical direction
	     * @type {Number}
	     */
	    this.offsetY = 0;
	  };

	  Text.prototype.render = function render(coord, container) {
	    var position = this.position;
	    var point = this.parsePoint(coord, position);
	    if (!point) {
	      return;
	    }
	    var content = this.content,
	        style = this.style,
	        offsetX = this.offsetX,
	        offsetY = this.offsetY;


	    if (offsetX) {
	      point.x += offsetX;
	    }

	    if (offsetY) {
	      point.y += offsetY;
	    }

	    var shape = container.addShape('text', {
	      className: 'guide-text',
	      attrs: Util.mix({
	        x: point.x,
	        y: point.y,
	        text: content
	      }, style)
	    });
	    this.element = shape;
	    return shape;
	  };

	  return Text;
	}(GuideBase);

	GuideBase.Text = Text;
	module.exports = Text;

	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var GuideBase = __webpack_require__(12);

	var Tag = function (_GuideBase) {
	  _inherits(Tag, _GuideBase);

	  function Tag() {
	    _classCallCheck(this, Tag);

	    return _possibleConstructorReturn(this, _GuideBase.apply(this, arguments));
	  }

	  Tag.prototype._initDefaultCfg = function _initDefaultCfg() {
	    this.type = 'tag';
	    this.position = null;
	    this.content = null;
	    this.direct = 'tl';
	    this.autoAdjust = true;
	    this.offsetX = 0;
	    this.offsetY = 0;
	    this.side = 4;
	    this.background = {
	      padding: 5,
	      radius: 2,
	      fill: '#1890FF'
	    };
	    this.textStyle = {
	      fontSize: 12,
	      fill: '#fff',
	      textAlign: 'center',
	      textBaseline: 'middle'
	    };
	    this.withPoint = true;
	    this.pointStyle = {
	      fill: '#1890FF',
	      r: 3,
	      lineWidth: 1,
	      stroke: '#fff'
	    };
	  };

	  Tag.prototype._getDirect = function _getDirect(container, point, tagWidth, tagHeight) {
	    var direct = this.direct;
	    var side = this.side;
	    var canvas = container.get('canvas');
	    var clientWidth = canvas.get('width');
	    var clientHeight = canvas.get('height');
	    var x = point.x,
	        y = point.y;


	    var vertical = direct[0];
	    var horizontal = direct[1];

	    // adjust for vertical direction
	    if (vertical === 't' && y - side - tagHeight < 0) {
	      vertical = 'b';
	    } else if (vertical === 'b' && y + side + tagHeight > clientHeight) {
	      vertical = 't';
	    }
	    // adjust for horizontal direction
	    var diff = vertical === 'c' ? side : 0;
	    if (horizontal === 'l' && x - diff - tagWidth < 0) {
	      horizontal = 'r';
	    } else if (horizontal === 'r' && x + diff + tagWidth > clientWidth) {
	      horizontal = 'l';
	    } else if (horizontal === 'c') {
	      if (tagWidth / 2 + x + diff > clientWidth) {
	        horizontal = 'l';
	      } else if (x - tagWidth / 2 - diff < 0) {
	        horizontal = 'r';
	      }
	    }

	    direct = vertical + horizontal;
	    return direct;
	  };

	  Tag.prototype.render = function render(coord, container) {
	    var position = this.parsePoint(coord, this.position);
	    if (!position) {
	      return;
	    }
	    var content = this.content,
	        background = this.background,
	        textStyle = this.textStyle;

	    var shapes = [];

	    var wrapperContainer = container.addGroup({
	      className: 'guide-tag'
	    });

	    if (this.withPoint) {
	      var pointShape = wrapperContainer.addShape('Circle', {
	        className: 'guide-tag-point',
	        attrs: Util.mix({
	          x: position.x,
	          y: position.y
	        }, this.pointStyle)
	      });
	      shapes.push(pointShape);
	    }

	    var tagContainer = wrapperContainer.addGroup();
	    // create a text shape
	    var tagText = tagContainer.addShape('text', {
	      className: 'guide-tag-text',
	      zIndex: 1,
	      attrs: Util.mix({
	        x: 0,
	        y: 0,
	        text: content
	      }, textStyle)
	    });
	    shapes.push(tagText);

	    // create background box
	    var textBBox = tagText.getBBox();
	    var padding = Util.parsePadding(background.padding);
	    var tagWidth = textBBox.width + padding[1] + padding[3];
	    var tagHeight = textBBox.height + padding[0] + padding[2];
	    var yMin = textBBox.minY - padding[0];
	    var xMin = textBBox.minX - padding[3];
	    var tagBg = tagContainer.addShape('rect', {
	      className: 'guide-tag-bg',
	      zIndex: -1,
	      attrs: Util.mix({
	        x: xMin,
	        y: yMin,
	        width: tagWidth,
	        height: tagHeight
	      }, background)
	    });
	    shapes.push(tagBg);
	    var direct = this.autoAdjust ? this._getDirect(container, position, tagWidth, tagHeight) : this.direct;
	    var side = this.side;
	    var x = position.x + this.offsetX;
	    var y = position.y + this.offsetY;
	    var arrowPoints = void 0;
	    var radius = Util.parsePadding(background.radius);
	    if (direct === 'tl') {
	      arrowPoints = [{ x: tagWidth + xMin - side - 1, y: tagHeight + yMin - 1 }, // 这个 1 是为了防止出现白边
	      { x: tagWidth + xMin, y: tagHeight + yMin - 1 }, { x: tagWidth + xMin, y: tagHeight + side + yMin }];
	      radius[2] = 0;
	      x = x - tagWidth;
	      y = y - side - tagHeight;
	    } else if (direct === 'cl') {
	      arrowPoints = [{ x: tagWidth + xMin - 1, y: (tagHeight - side) / 2 + yMin - 1 }, { x: tagWidth + xMin - 1, y: (tagHeight + side) / 2 + yMin + 1 }, { x: tagWidth + side + xMin, y: tagHeight / 2 + yMin }];

	      x = x - tagWidth - side;
	      y = y - tagHeight / 2;
	    } else if (direct === 'bl') {
	      arrowPoints = [{ x: tagWidth + xMin, y: -side + yMin }, { x: tagWidth + xMin - side - 1, y: yMin + 1 }, { x: tagWidth + xMin, y: yMin + 1 }];
	      radius[1] = 0;

	      x = x - tagWidth;
	      y = y + side;
	    } else if (direct === 'bc') {
	      arrowPoints = [{ x: tagWidth / 2 + xMin, y: -side + yMin }, { x: (tagWidth - side) / 2 + xMin - 1, y: yMin + 1 }, { x: (tagWidth + side) / 2 + xMin + 1, y: yMin + 1 }];
	      x = x - tagWidth / 2;
	      y = y + side;
	    } else if (direct === 'br') {
	      arrowPoints = [{ x: xMin, y: yMin - side }, { x: xMin, y: yMin + 1 }, { x: xMin + side + 1, y: yMin + 1 }];
	      radius[0] = 0;
	      y = y + side;
	    } else if (direct === 'cr') {
	      arrowPoints = [{ x: xMin - side, y: tagHeight / 2 + yMin }, { x: xMin + 1, y: (tagHeight - side) / 2 + yMin - 1 }, { x: xMin + 1, y: (tagHeight + side) / 2 + yMin + 1 }];
	      x = x + side;
	      y = y - tagHeight / 2;
	    } else if (direct === 'tr') {
	      arrowPoints = [{ x: xMin, y: tagHeight + side + yMin }, { x: xMin, y: tagHeight + yMin - 1 }, { x: side + xMin + 1, y: tagHeight + yMin - 1 }];
	      radius[3] = 0;

	      y = y - tagHeight - side;
	    } else if (direct === 'tc') {
	      arrowPoints = [{ x: (tagWidth - side) / 2 + xMin - 1, y: tagHeight + yMin - 1 }, { x: (tagWidth + side) / 2 + xMin + 1, y: tagHeight + yMin - 1 }, { x: tagWidth / 2 + xMin, y: tagHeight + side + yMin }];
	      x = x - tagWidth / 2;
	      y = y - tagHeight - side;
	    }

	    var sideShape = tagContainer.addShape('Polygon', {
	      className: 'guide-tag-side',
	      zIndex: 0,
	      attrs: {
	        points: arrowPoints,
	        fill: background.fill
	      }
	    });
	    shapes.push(sideShape);

	    tagBg.attr('radius', radius);
	    tagContainer.moveTo(x - xMin, y - yMin);
	    tagContainer.sort();

	    this.element = wrapperContainer;
	    return shapes;
	  };

	  return Tag;
	}(GuideBase);

	GuideBase.Tag = Tag;
	module.exports = Tag;

	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(1);
	var Tooltip = __webpack_require__(113);
	var Helper = __webpack_require__(26);

	// Register the default configuration for Tooltip
	Global.tooltip = Util.deepMix({
	  triggerOn: ['touchstart', 'touchmove'],
	  // triggerOff: 'touchend',
	  alwaysShow: false,
	  showTitle: false,
	  showCrosshairs: false,
	  crosshairsStyle: {
	    stroke: 'rgba(0, 0, 0, 0.25)',
	    lineWidth: 1
	  },
	  showTooltipMarker: true,
	  background: {
	    radius: 1,
	    fill: 'rgba(0, 0, 0, 0.65)',
	    padding: [3, 5]
	  },
	  titleStyle: {
	    fontSize: 12,
	    fill: '#fff',
	    textAlign: 'start',
	    textBaseline: 'top'
	  },
	  nameStyle: {
	    fontSize: 12,
	    fill: 'rgba(255, 255, 255, 0.65)',
	    textAlign: 'start',
	    textBaseline: 'middle'
	  },
	  valueStyle: {
	    fontSize: 12,
	    fill: '#fff',
	    textAlign: 'start',
	    textBaseline: 'middle'
	  },
	  showItemMarker: true,
	  itemMarkerStyle: {
	    radius: 3,
	    symbol: 'circle',
	    lineWidth: 1,
	    stroke: '#fff'
	  },
	  layout: 'horizontal'
	}, Global.tooltip || {});

	function _getTooltipValueScale(geom) {
	  var colorAttr = geom.getAttr('color');
	  if (colorAttr) {
	    var colorScale = colorAttr.getScale(colorAttr.type);
	    if (colorScale.isLinear) {
	      return colorScale;
	    }
	  }
	  var xScale = geom.getXScale();
	  var yScale = geom.getYScale();
	  if (yScale) {
	    return yScale;
	  }

	  return xScale;
	}

	function getTooltipName(geom, origin) {
	  var name = void 0;
	  var nameScale = void 0;
	  var groupScales = geom._getGroupScales();
	  if (groupScales.length) {
	    Util.each(groupScales, function (scale) {
	      nameScale = scale;
	      return false;
	    });
	  }
	  if (nameScale) {
	    var field = nameScale.field;
	    name = nameScale.getText(origin[field]);
	  } else {
	    var valueScale = _getTooltipValueScale(geom);
	    name = valueScale.alias || valueScale.field;
	  }
	  return name;
	}

	function getTooltipValue(geom, origin) {
	  var scale = _getTooltipValueScale(geom);
	  return scale.getText(origin[scale.field]);
	}

	function getTooltipTitle(geom, origin) {
	  var position = geom.getAttr('position');
	  var field = position.getFields()[0];
	  var scale = geom.get('scales')[field];
	  return scale.getText(origin[scale.field]);
	}

	function _indexOfArray(items, item) {
	  var rst = -1;
	  Util.each(items, function (sub, index) {
	    if (sub.title === item.title && sub.name === item.name && sub.value === item.value && sub.color === item.color) {
	      rst = index;
	      return false;
	    }
	  });
	  return rst;
	}

	function _uniqItems(items) {
	  var tmp = [];
	  Util.each(items, function (item) {
	    var index = _indexOfArray(tmp, item);
	    if (index === -1) {
	      tmp.push(item);
	    } else {
	      tmp[index] = item;
	    }
	  });
	  return tmp;
	}

	function isEqual(arr1, arr2) {
	  return JSON.stringify(arr1) === JSON.stringify(arr2);
	}

	var TooltipController = function () {
	  function TooltipController(cfg) {
	    _classCallCheck(this, TooltipController);

	    this.enable = true;
	    this.cfg = {};
	    this.tooltip = null;
	    this.chart = null;
	    this.timeStamp = 0;
	    Util.mix(this, cfg);
	    var chart = this.chart;
	    this.canvasDom = chart.get('canvas').get('el');
	  }

	  TooltipController.prototype._setCrosshairsCfg = function _setCrosshairsCfg() {
	    var self = this;
	    var chart = self.chart;
	    var defaultCfg = Util.mix({}, Global.tooltip);
	    var geoms = chart.get('geoms');
	    var shapes = [];
	    Util.each(geoms, function (geom) {
	      var type = geom.get('type');
	      if (shapes.indexOf(type) === -1) {
	        shapes.push(type);
	      }
	    });
	    var coordType = chart.get('coord').type;
	    if (geoms.length && (coordType === 'cartesian' || coordType === 'rect')) {
	      if (shapes.length === 1 && ['line', 'area', 'path', 'point'].indexOf(shapes[0]) !== -1) {
	        Util.mix(defaultCfg, {
	          showCrosshairs: true
	        });
	      }
	    }

	    return defaultCfg;
	  };

	  TooltipController.prototype._getMaxLength = function _getMaxLength() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var layout = cfg.layout,
	        plotRange = cfg.plotRange;

	    return layout === 'horizontal' ? plotRange.br.x - plotRange.bl.x : plotRange.bl.y - plotRange.tr.y;
	  };

	  TooltipController.prototype.render = function render() {
	    var self = this;

	    if (self.tooltip /* || !self.enable */) {
	        return;
	      }

	    var chart = self.chart;
	    var canvas = chart.get('canvas');
	    var frontPlot = chart.get('frontPlot').addGroup({
	      className: 'tooltipContainer',
	      zIndex: 10
	    });
	    var backPlot = chart.get('backPlot').addGroup({
	      className: 'tooltipContainer'
	    });
	    var plotRange = chart.get('plotRange');
	    var coord = chart.get('coord');

	    var defaultCfg = self._setCrosshairsCfg();
	    var cfg = self.cfg;
	    cfg = Util.deepMix({
	      plotRange: plotRange,
	      frontPlot: frontPlot,
	      backPlot: backPlot,
	      canvas: canvas,
	      fixed: coord.transposed || coord.isPolar
	    }, defaultCfg, cfg);
	    cfg.maxLength = self._getMaxLength(cfg);
	    this.cfg = cfg;
	    var tooltip = new Tooltip(cfg);
	    self.tooltip = tooltip;
	    self.bindEvents();
	  };

	  TooltipController.prototype.clear = function clear() {
	    var tooltip = this.tooltip;
	    tooltip && tooltip.destroy();
	    this.tooltip = null;
	    this.prePoint = null;
	    this.unBindEvents();
	  };

	  TooltipController.prototype._getTooltipMarkerStyle = function _getTooltipMarkerStyle() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var type = cfg.type,
	        items = cfg.items;

	    var tooltipCfg = this.cfg;
	    if (type === 'rect') {
	      var x = void 0;
	      var y = void 0;
	      var width = void 0;
	      var height = void 0;
	      var chart = this.chart;

	      var _chart$get = chart.get('plotRange'),
	          tl = _chart$get.tl,
	          br = _chart$get.br;

	      var coord = chart.get('coord');
	      var firstItem = items[0];
	      var lastItem = items[items.length - 1];
	      var intervalWidth = firstItem.width;
	      if (coord.transposed) {
	        x = tl.x;
	        y = lastItem.y - intervalWidth * 0.75;
	        width = br.x - tl.x;
	        height = firstItem.y - lastItem.y + 1.5 * intervalWidth;
	      } else {
	        x = firstItem.x - intervalWidth * 0.75;
	        y = tl.y;
	        width = lastItem.x - firstItem.x + 1.5 * intervalWidth;
	        height = br.y - tl.y;
	      }

	      cfg.style = Util.mix({
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        fill: '#CCD6EC',
	        opacity: 0.3
	      }, tooltipCfg.tooltipMarkerStyle);
	    } else {
	      cfg.style = Util.mix({
	        radius: 4,
	        fill: '#fff',
	        lineWidth: 2
	      }, tooltipCfg.tooltipMarkerStyle);
	    }

	    return cfg;
	  };

	  TooltipController.prototype._setTooltip = function _setTooltip(point, items) {
	    var tooltipMarkerCfg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    var lastActive = this._lastActive;
	    var tooltip = this.tooltip;
	    var cfg = this.cfg;

	    items = _uniqItems(items);

	    if (cfg.onShow) {
	      cfg.onShow({
	        x: point.x,
	        y: point.y,
	        tooltip: tooltip,
	        items: items,
	        tooltipMarkerCfg: tooltipMarkerCfg
	      });
	    }
	    if (isEqual(lastActive, items)) {
	      return;
	    }
	    this._lastActive = items;

	    if (cfg.onChange || Util.isFunction(cfg.custom)) {
	      var onChange = cfg.onChange || cfg.custom;
	      onChange({
	        x: point.x,
	        y: point.y,
	        tooltip: tooltip,
	        items: items,
	        tooltipMarkerCfg: tooltipMarkerCfg
	      });
	    }

	    if (!cfg.custom) {
	      var first = items[0];
	      var title = first.title || first.name;
	      tooltip.setContent(title, items);
	    }
	    tooltip.setPosition(items);

	    var markerItems = tooltipMarkerCfg.items;
	    if (cfg.showTooltipMarker && markerItems.length) {
	      tooltipMarkerCfg = this._getTooltipMarkerStyle(tooltipMarkerCfg);
	      tooltip.setMarkers(tooltipMarkerCfg);
	    } else {
	      tooltip.clearMarkers();
	    }

	    tooltip.show();
	  };

	  TooltipController.prototype.showTooltip = function showTooltip(point) {
	    var self = this;
	    var chart = self.chart;

	    var tooltipMarkerType = void 0;
	    var tooltipMarkerItems = [];
	    var items = [];
	    var cfg = self.cfg;
	    var marker = void 0;
	    if (cfg.showItemMarker) {
	      marker = cfg.itemMarkerStyle;
	    }

	    var geoms = chart.get('geoms');
	    var coord = chart.get('coord');

	    Util.each(geoms, function (geom) {
	      if (geom.get('visible')) {
	        var type = geom.get('type');
	        var records = geom.getSnapRecords(point);
	        Util.each(records, function (record) {
	          if (record.x && record.y) {
	            var x = record.x,
	                y = record.y,
	                _origin = record._origin,
	                color = record.color;

	            var tooltipItem = {
	              x: x,
	              y: Util.isArray(y) ? y[1] : y,
	              color: color || Global.defaultColor,
	              origin: _origin,
	              name: getTooltipName(geom, _origin),
	              value: getTooltipValue(geom, _origin),
	              title: getTooltipTitle(geom, _origin)
	            };
	            if (marker) {
	              tooltipItem.marker = Util.mix({
	                fill: color || Global.defaultColor
	              }, marker);
	            }
	            items.push(tooltipItem);

	            if (['line', 'area', 'path'].indexOf(type) !== -1) {
	              tooltipMarkerType = 'circle';
	              tooltipMarkerItems.push(tooltipItem);
	            } else if (type === 'interval' && (coord.type === 'cartesian' || coord.type === 'rect')) {
	              tooltipMarkerType = 'rect';
	              tooltipItem.width = geom.getSize(record._origin);
	              tooltipMarkerItems.push(tooltipItem);
	            }
	          }
	        });
	      }
	    });

	    if (items.length) {
	      var tooltipMarkerCfg = {
	        items: tooltipMarkerItems,
	        type: tooltipMarkerType
	      };
	      self._setTooltip(point, items, tooltipMarkerCfg);
	    } else {
	      self.hideTooltip();
	    }
	  };

	  TooltipController.prototype.hideTooltip = function hideTooltip() {
	    var cfg = this.cfg;
	    this._lastActive = [];
	    var tooltip = this.tooltip;
	    if (tooltip) {
	      tooltip.hide();
	      if (cfg.onHide) {
	        cfg.onHide({
	          tooltip: tooltip
	        });
	      }
	      var canvas = this.chart.get('canvas');
	      canvas.draw();
	    }
	  };

	  TooltipController.prototype.handleShowEvent = function handleShowEvent(ev) {
	    if (!this.enable) return;
	    var chart = this.chart;
	    var plot = chart.get('plotRange');
	    var point = Util.createEvent(ev, chart);
	    if (!Helper.isPointInPlot(point, plot) && !this.cfg.alwaysShow) {
	      // not in chart plot
	      this.hideTooltip();
	      return;
	    }

	    var lastTimeStamp = this.timeStamp;
	    var timeStamp = +new Date();
	    if (timeStamp - lastTimeStamp > 16) {
	      this.showTooltip(point);
	      this.timeStamp = timeStamp;
	    }
	  };

	  TooltipController.prototype.handleHideEvent = function handleHideEvent() {
	    if (!this.enable) return;

	    this.hideTooltip();
	  };

	  TooltipController.prototype.handleDocEvent = function handleDocEvent(ev) {
	    if (!this.enable) return;

	    var canvasDom = this.canvasDom;
	    if (ev.target !== canvasDom) {
	      this.hideTooltip();
	    }
	  };

	  TooltipController.prototype._handleEvent = function _handleEvent(methodName, method, action) {
	    var canvasDom = this.canvasDom;
	    Util.each([].concat(methodName), function (aMethod) {
	      if (action === 'bind') {
	        Util.addEventListener(canvasDom, aMethod, method);
	      } else {
	        Util.removeEventListener(canvasDom, aMethod, method);
	      }
	    });
	  };

	  TooltipController.prototype.bindEvents = function bindEvents() {
	    var cfg = this.cfg;
	    var triggerOn = cfg.triggerOn,
	        triggerOff = cfg.triggerOff,
	        alwaysShow = cfg.alwaysShow;

	    var showMethod = Util.wrapBehavior(this, 'handleShowEvent');
	    var hideMethod = Util.wrapBehavior(this, 'handleHideEvent');

	    triggerOn && this._handleEvent(triggerOn, showMethod, 'bind');
	    triggerOff && this._handleEvent(triggerOff, hideMethod, 'bind');
	    // TODO: 当用户点击 canvas 外的事件时 tooltip 消失
	    if (!alwaysShow) {
	      var docMethod = Util.wrapBehavior(this, 'handleDocEvent');
	      Util.isBrowser && Util.addEventListener(document, 'touchstart', docMethod);
	    }
	  };

	  TooltipController.prototype.unBindEvents = function unBindEvents() {
	    var cfg = this.cfg;
	    var triggerOn = cfg.triggerOn,
	        triggerOff = cfg.triggerOff,
	        alwaysShow = cfg.alwaysShow;

	    var showMethod = Util.getWrapBehavior(this, 'handleShowEvent');
	    var hideMethod = Util.getWrapBehavior(this, 'handleHideEvent');

	    triggerOn && this._handleEvent(triggerOn, showMethod, 'unBind');
	    triggerOff && this._handleEvent(triggerOff, hideMethod, 'unBind');

	    if (!alwaysShow) {
	      var docMethod = Util.getWrapBehavior(this, 'handleDocEvent');
	      Util.isBrowser && Util.removeEventListener(document, 'touchstart', docMethod);
	    }
	  };

	  return TooltipController;
	}();

	module.exports = {
	  init: function init(chart) {
	    var tooltipController = new TooltipController({
	      chart: chart
	    });
	    chart.set('tooltipController', tooltipController);

	    chart.tooltip = function (enable, cfg) {
	      if (Util.isObject(enable)) {
	        cfg = enable;
	        enable = true;
	      }
	      tooltipController.enable = enable;
	      if (cfg) {
	        tooltipController.cfg = cfg;
	      }
	      return this;
	    };
	  },
	  afterGeomDraw: function afterGeomDraw(chart) {
	    var tooltipController = chart.get('tooltipController');
	    tooltipController.render();

	    chart.showTooltip = function (point) {
	      tooltipController.showTooltip(point);
	      return this;
	    };

	    chart.hideTooltip = function () {
	      tooltipController.hideTooltip();
	      return this;
	    };
	  },
	  clearInner: function clearInner(chart) {
	    var tooltipController = chart.get('tooltipController');
	    tooltipController.clear();
	  }
	};

	/***/ }),
	/* 113 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Marker = __webpack_require__(89);
	var Container = __webpack_require__(90);
	var GAP = 4;

	var Tooltip = function () {
	  Tooltip.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * wether show the crosshairs
	       * @type {Object}
	       */
	      showCrosshairs: false,
	      /**
	       * the style for crosshairs
	       * @type {Object}
	       */
	      crosshairsStyle: {
	        stroke: 'rgba(0, 0, 0, 0.25)',
	        lineWidth: 1
	      },
	      /**
	       * the style for tooltip container's background
	       * @type {Object}
	       */
	      background: null,
	      /**
	       * layout, can be horizontal or vertical
	       * @type {String}
	       */
	      layout: 'horizontal',
	      offsetX: 0,
	      offsetY: 0
	    };
	  };

	  function Tooltip(cfg) {
	    _classCallCheck(this, Tooltip);

	    Util.deepMix(this, this.getDefaultCfg(), cfg);
	    var frontPlot = this.frontPlot;
	    var plotRange = this.plotRange;

	    if (!this.custom) {
	      // custom means user do customize
	      var container = new Container(Util.mix({
	        parent: frontPlot,
	        zIndex: 3
	      }, cfg));
	      this.container = container;
	      if (!this.fixed) {
	        this.tooltipArrow = frontPlot.addShape('Polygon', {
	          className: 'tooltip-arrow',
	          visible: false,
	          zIndex: 2,
	          attrs: {
	            points: [],
	            fill: this.background.fill
	          }
	        });
	      }
	    }

	    if (this.showCrosshairs) {
	      var crosshairsStyle = this.crosshairsStyle;
	      var shape = frontPlot.addShape('Line', {
	        className: 'tooltip-crosshairs',
	        zIndex: 0,
	        visible: false,
	        attrs: Util.mix({
	          x1: 0,
	          y1: plotRange.bl.y,
	          x2: 0,
	          y2: plotRange.tl.y
	        }, crosshairsStyle)
	      });
	      this.crosshairsShape = shape;
	    }

	    frontPlot.sort();
	  }

	  Tooltip.prototype.setContent = function setContent(title, items) {
	    this.title = title;
	    this.items = items;
	    var container = this.container;
	    container.setTitle(title);
	    container.setItems(items);
	  };

	  Tooltip.prototype.setPosition = function setPosition(items) {
	    var container = this.container,
	        plotRange = this.plotRange,
	        offsetX = this.offsetX,
	        offsetY = this.offsetY,
	        crosshairsShape = this.crosshairsShape,
	        fixed = this.fixed,
	        tooltipArrow = this.tooltipArrow;

	    crosshairsShape && crosshairsShape.moveTo(items[0].x, 0);

	    if (!container) {
	      return;
	    }

	    var containerBBox = container.container.getBBox();
	    var minX = containerBBox.minX,
	        minY = containerBBox.minY,
	        width = containerBBox.width,
	        height = containerBBox.height;
	    var tl = plotRange.tl,
	        tr = plotRange.tr;

	    var posX = 0;
	    var posY = tl.y - height - GAP + offsetY;

	    if (fixed) {
	      var x = (tl.x + tr.x) / 2;
	      posX = x - width / 2 + offsetX;
	    } else {
	      var _x = void 0;
	      if (items.length > 1) {
	        _x = (items[0].x + items[items.length - 1].x) / 2;
	      } else {
	        _x = items[0].x;
	      }
	      posX = _x - width / 2 + offsetX;
	      if (posX < tl.x) {
	        posX = tl.x;
	      }
	      if (posX + width > tr.x) {
	        posX = tr.x - width;
	      }

	      if (tooltipArrow) {
	        tooltipArrow.attr('points', [{ x: _x - 3, y: tl.y - GAP + offsetY }, { x: _x + 3, y: tl.y - GAP + offsetY }, { x: _x, y: tl.y + offsetY }]);
	        var backShape = container.backShape;
	        var radius = Util.parsePadding(backShape.attr('radius'));
	        if (_x === tl.x) {
	          radius[3] = 0;

	          tooltipArrow.attr('points', [{ x: tl.x, y: tl.y + offsetY }, { x: tl.x, y: tl.y - GAP + offsetY }, { x: tl.x + GAP, y: tl.y - GAP + offsetY }]);
	        } else if (_x === tr.x) {
	          radius[2] = 0;

	          tooltipArrow.attr('points', [{ x: tr.x, y: tl.y + offsetY }, { x: tr.x - GAP, y: tl.y - GAP + offsetY }, { x: tr.x, y: tl.y - GAP + offsetY }]);
	        }
	        backShape.attr('radius', radius);
	      }
	    }

	    container.moveTo(posX - minX, posY - minY);
	  };

	  Tooltip.prototype.setMarkers = function setMarkers() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var self = this;
	    var items = cfg.items,
	        style = cfg.style,
	        type = cfg.type;

	    var markerGroup = self._getMarkerGroup(type);
	    if (type === 'circle') {
	      for (var i = 0, length = items.length; i < length; i++) {
	        var item = items[i];
	        var marker = new Marker({
	          className: 'tooltip-circle-marker',
	          attrs: Util.mix({
	            x: item.x,
	            y: item.y,
	            stroke: item.color
	          }, style)
	        });
	        markerGroup.add(marker);
	      }
	    } else {
	      markerGroup.addShape('rect', {
	        className: 'tooltip-rect-marker',
	        attrs: style
	      });
	    }
	  };

	  Tooltip.prototype.clearMarkers = function clearMarkers() {
	    var markerGroup = this.markerGroup;
	    markerGroup && markerGroup.clear();
	  };

	  Tooltip.prototype.show = function show() {
	    var crosshairsShape = this.crosshairsShape;
	    var markerGroup = this.markerGroup;
	    var container = this.container;
	    var tooltipArrow = this.tooltipArrow;
	    var canvas = this.canvas;
	    // canvas.sort();
	    crosshairsShape && crosshairsShape.show();
	    markerGroup && markerGroup.show();
	    container && container.show();
	    tooltipArrow && tooltipArrow.show();
	    canvas.draw();
	  };

	  Tooltip.prototype.hide = function hide() {
	    var crosshairsShape = this.crosshairsShape;
	    var markerGroup = this.markerGroup;
	    var container = this.container;
	    var tooltipArrow = this.tooltipArrow;
	    crosshairsShape && crosshairsShape.hide();
	    markerGroup && markerGroup.hide();
	    container && container.hide();
	    tooltipArrow && tooltipArrow.hide();
	  };

	  Tooltip.prototype.destroy = function destroy() {
	    var crosshairsShape = this.crosshairsShape;
	    var markerGroup = this.markerGroup;
	    var container = this.container;
	    var tooltipArrow = this.tooltipArrow;

	    crosshairsShape && crosshairsShape.remove(true);
	    markerGroup && markerGroup.remove(true);
	    container && container.clear();
	    tooltipArrow && tooltipArrow.remove(true);

	    this.destroyed = true;
	  };

	  Tooltip.prototype._getMarkerGroup = function _getMarkerGroup(type) {
	    var markerGroup = this.markerGroup;
	    if (!markerGroup) {
	      if (type === 'circle') {
	        markerGroup = this.frontPlot.addGroup({
	          zIndex: 1
	        });
	        this.frontPlot.sort();
	      } else {
	        markerGroup = this.backPlot.addGroup();
	      }
	      this.markerGroup = markerGroup;
	    } else {
	      markerGroup.clear();
	    }

	    return markerGroup;
	  };

	  return Tooltip;
	}();

	module.exports = Tooltip;

	/***/ }),
	/* 114 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Guide = __webpack_require__(12);
	var Global = __webpack_require__(1);

	// register the default configuration for Guide
	Global.guide = Util.deepMix({
	  line: {
	    style: {
	      stroke: '#a3a3a3',
	      lineWidth: 1
	    },
	    top: true
	  },
	  text: {
	    style: {
	      fill: '#787878',
	      textAlign: 'center',
	      textBaseline: 'middle'
	    },
	    offsetX: 0,
	    offsetY: 0,
	    top: true
	  },
	  rect: {
	    style: {
	      fill: '#fafafa'
	    },
	    top: false
	  },
	  arc: {
	    style: {
	      stroke: '#a3a3a3'
	    },
	    top: true
	  },
	  html: {
	    offsetX: 0,
	    offsetY: 0,
	    alignX: 'center',
	    alignY: 'middle'
	  },
	  tag: {
	    top: true,
	    offsetX: 0,
	    offsetY: 0,
	    side: 4,
	    background: {
	      padding: 5,
	      radius: 2,
	      fill: '#1890FF'
	    },
	    textStyle: {
	      fontSize: 12,
	      fill: '#fff',
	      textAlign: 'center',
	      textBaseline: 'middle'
	    }
	  },
	  point: {
	    top: true,
	    offsetX: 0,
	    offsetY: 0,
	    style: {
	      fill: '#fff',
	      r: 3,
	      lineWidth: 2,
	      stroke: '#1890ff'
	    }
	  }
	}, Global.guide || {});

	var GuideController = function () {
	  function GuideController(cfg) {
	    _classCallCheck(this, GuideController);

	    this.guides = [];
	    this.xScale = null;
	    this.yScales = null;
	    this.guideShapes = [];
	    Util.mix(this, cfg);
	  }

	  GuideController.prototype._toString = function _toString(position) {
	    if (Util.isFunction(position)) {
	      position = position(this.xScale, this.yScales);
	    }
	    position = position.toString();
	    return position;
	  };

	  GuideController.prototype._getId = function _getId(shape, guide) {
	    var id = guide.id;
	    if (!id) {
	      var type = guide.type;
	      if (type === 'arc' || type === 'line' || type === 'rect') {
	        id = this._toString(guide.start) + '-' + this._toString(guide.end);
	      } else {
	        id = this._toString(guide.position);
	      }
	    }

	    return id;
	  };

	  GuideController.prototype.paint = function paint(coord) {
	    var self = this;
	    var chart = self.chart,
	        guides = self.guides,
	        xScale = self.xScale,
	        yScales = self.yScales;

	    var guideShapes = [];
	    Util.each(guides, function (guide, idx) {
	      guide.xScale = xScale;
	      guide.yScales = yScales;
	      var container = void 0;
	      if (guide.type === 'regionFilter') {
	        // TODO: RegionFilter support animation
	        guide.chart = chart;
	      } else {
	        container = guide.top ? self.frontPlot : self.backPlot;
	      }
	      guide.coord = coord;
	      guide.container = container;
	      guide.canvas = chart.get('canvas');
	      var shape = guide.render(coord, container);
	      if (shape) {
	        var id = self._getId(shape, guide);
	        [].concat(shape).forEach(function (s) {
	          s._id = s.get('className') + '-' + id;
	          s.set('index', idx);
	          guideShapes.push(s);
	        });
	      }
	    });
	    self.guideShapes = guideShapes;
	  };

	  GuideController.prototype.clear = function clear() {
	    this.reset();
	    this.guides = [];
	    return this;
	  };

	  GuideController.prototype.reset = function reset() {
	    var guides = this.guides;
	    Util.each(guides, function (guide) {
	      guide.remove();
	    });
	  };

	  GuideController.prototype._createGuide = function _createGuide(type, cfg) {
	    var ClassName = Util.upperFirst(type);
	    var guide = new Guide[ClassName](Util.deepMix({}, Global.guide[type], cfg));
	    this.guides.push(guide);
	    return guide;
	  };

	  GuideController.prototype.line = function line() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('line', cfg);
	  };

	  GuideController.prototype.text = function text() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('text', cfg);
	  };

	  GuideController.prototype.arc = function arc() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('arc', cfg);
	  };

	  GuideController.prototype.html = function html() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('html', cfg);
	  };

	  GuideController.prototype.rect = function rect() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('rect', cfg);
	  };

	  GuideController.prototype.tag = function tag() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('tag', cfg);
	  };

	  GuideController.prototype.point = function point() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('point', cfg);
	  };

	  GuideController.prototype.regionFilter = function regionFilter() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    return this._createGuide('regionFilter', cfg);
	  };

	  return GuideController;
	}();

	module.exports = {
	  init: function init(chart) {
	    var guideController = new GuideController({
	      frontPlot: chart.get('frontPlot').addGroup({
	        zIndex: 20,
	        className: 'guideContainer'
	      }),
	      backPlot: chart.get('backPlot').addGroup({
	        className: 'guideContainer'
	      })
	    });
	    chart.set('guideController', guideController);
	    /**
	     * 为图表添加 guide
	     * @return {GuideController} 返回 guide 控制器
	     */
	    chart.guide = function () {
	      return guideController;
	    };
	  },
	  afterGeomDraw: function afterGeomDraw(chart) {
	    var guideController = chart.get('guideController');
	    if (!guideController.guides.length) {
	      return;
	    }
	    var xScale = chart.getXScale();
	    var yScales = chart.getYScales();
	    var coord = chart.get('coord');
	    guideController.xScale = xScale;
	    guideController.yScales = yScales;
	    guideController.chart = chart; // for regionFilter
	    guideController.paint(coord);
	  },
	  clear: function clear(chart) {
	    chart.get('guideController').clear();
	  },
	  repaint: function repaint(chart) {
	    chart.get('guideController').reset();
	  }
	};

	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var List = __webpack_require__(90);
	var Global = __webpack_require__(1);
	var LEGEND_GAP = 12;
	var MARKER_SIZE = 3;

	var DEFAULT_CFG = {
	  itemMarginBottom: 12,
	  itemGap: 10,
	  showTitle: false,
	  titleStyle: {
	    fontSize: 12,
	    fill: '#808080',
	    textAlign: 'start',
	    textBaseline: 'top'
	  },
	  nameStyle: {
	    fill: '#808080',
	    fontSize: 12,
	    textAlign: 'start',
	    textBaseline: 'middle'
	  },
	  valueStyle: {
	    fill: '#000000',
	    fontSize: 12,
	    textAlign: 'start',
	    textBaseline: 'middle'
	  },
	  unCheckStyle: {
	    fill: '#bfbfbf'
	  },
	  itemWidth: 'auto',
	  wordSpace: 6,
	  selectedMode: 'multiple' // 'multiple' or 'single'
	};

	// Register the default configuration for Legend
	Global.legend = Util.deepMix({
	  right: Util.mix({
	    position: 'right',
	    layout: 'vertical'
	  }, DEFAULT_CFG),
	  left: Util.mix({
	    position: 'left',
	    layout: 'vertical'
	  }, DEFAULT_CFG),
	  top: Util.mix({
	    position: 'top',
	    layout: 'horizontal'
	  }, DEFAULT_CFG),
	  bottom: Util.mix({
	    position: 'bottom',
	    layout: 'horizontal'
	  }, DEFAULT_CFG)
	}, Global.legend || {});

	function getPaddingByPos(pos, appendPadding) {
	  var padding = 0;
	  appendPadding = Util.parsePadding(appendPadding);
	  switch (pos) {
	    case 'top':
	      padding = appendPadding[0];
	      break;
	    case 'right':
	      padding = appendPadding[1];
	      break;
	    case 'bottom':
	      padding = appendPadding[2];
	      break;
	    case 'left':
	      padding = appendPadding[3];
	      break;
	    default:
	      break;
	  }

	  return padding;
	}

	var LegendController = function () {
	  function LegendController(cfg) {
	    _classCallCheck(this, LegendController);

	    this.legendCfg = {};
	    this.enable = true;
	    this.position = 'top';
	    Util.mix(this, cfg);
	    var chart = this.chart;
	    this.canvasDom = chart.get('canvas').get('el');
	    this.clear();
	  }

	  LegendController.prototype.addLegend = function addLegend(scale, items, filterVals) {
	    var self = this;
	    var legendCfg = self.legendCfg;
	    var field = scale.field;
	    var fieldCfg = legendCfg[field];

	    if (fieldCfg === false) {
	      return null;
	    }

	    if (fieldCfg && fieldCfg.custom) {
	      self.addCustomLegend(field);
	    } else {
	      var position = legendCfg.position || self.position;
	      if (fieldCfg && fieldCfg.position) {
	        position = fieldCfg.position;
	      }
	      if (scale.isCategory) {
	        self._addCategoryLegend(scale, items, position, filterVals);
	      }
	    }
	  };

	  LegendController.prototype.addCustomLegend = function addCustomLegend(field) {
	    var self = this;

	    var legendCfg = self.legendCfg;
	    if (field && legendCfg[field]) {
	      legendCfg = legendCfg[field];
	    }

	    var position = legendCfg.position || self.position;
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var items = legendCfg.items;
	    if (!items) {
	      return null;
	    }

	    var container = self.container;
	    Util.each(items, function (item) {
	      if (!Util.isObject(item.marker)) {
	        item.marker = {
	          symbol: item.marker || 'circle',
	          fill: item.fill,
	          radius: MARKER_SIZE
	        };
	      } else {
	        item.marker.radius = item.marker.radius || MARKER_SIZE;
	      }
	      item.checked = Util.isNil(item.checked) ? true : item.checked;
	      item.name = item.name || item.value;
	    });
	    var legend = new List(Util.deepMix({}, Global.legend[position], legendCfg, {
	      maxLength: self._getMaxLength(position),
	      items: items,
	      parent: container
	    }));
	    legends[position].push(legend);
	  };

	  LegendController.prototype.clear = function clear() {
	    var legends = this.legends;
	    Util.each(legends, function (legendItems) {
	      Util.each(legendItems, function (legend) {
	        legend.clear();
	      });
	    });

	    this.legends = {};
	    this.unBindEvents();
	  };

	  LegendController.prototype._isFiltered = function _isFiltered(scale, values, value) {
	    var rst = false;
	    Util.each(values, function (val) {
	      rst = rst || scale.getText(val) === scale.getText(value);
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  };

	  LegendController.prototype._getMaxLength = function _getMaxLength(position) {
	    var chart = this.chart;
	    var appendPadding = Util.parsePadding(chart.get('appendPadding'));

	    return position === 'right' || position === 'left' ? chart.get('height') - (appendPadding[0] + appendPadding[2]) : chart.get('width') - (appendPadding[1] + appendPadding[3]);
	  };

	  LegendController.prototype._addCategoryLegend = function _addCategoryLegend(scale, items, position, filterVals) {
	    var self = this;
	    var legendCfg = self.legendCfg,
	        legends = self.legends,
	        container = self.container,
	        chart = self.chart;

	    var field = scale.field;
	    legends[position] = legends[position] || [];

	    var symbol = 'circle';
	    if (legendCfg[field] && legendCfg[field].marker) {
	      symbol = legendCfg[field].marker;
	    } else if (legendCfg.marker) {
	      symbol = legendCfg.marker;
	    }

	    Util.each(items, function (item) {
	      if (Util.isPlainObject(symbol)) {
	        Util.mix(item.marker, symbol);
	      } else {
	        item.marker.symbol = symbol;
	      }

	      if (filterVals) {
	        item.checked = self._isFiltered(scale, filterVals, item.dataValue);
	      }
	    });

	    var legendItems = chart.get('legendItems');
	    legendItems[field] = items;

	    var lastCfg = Util.deepMix({}, Global.legend[position], legendCfg[field] || legendCfg, {
	      maxLength: self._getMaxLength(position),
	      items: items,
	      field: field,
	      filterVals: filterVals,
	      parent: container
	    });
	    if (lastCfg.showTitle) {
	      Util.deepMix(lastCfg, {
	        title: scale.alias || scale.field
	      });
	    }

	    var legend = new List(lastCfg);
	    legends[position].push(legend);
	    return legend;
	  };

	  LegendController.prototype._alignLegend = function _alignLegend(legend, pre, position) {
	    var self = this;
	    var _self$plotRange = self.plotRange,
	        tl = _self$plotRange.tl,
	        bl = _self$plotRange.bl;

	    var chart = self.chart;
	    var offsetX = legend.offsetX || 0;
	    var offsetY = legend.offsetY || 0;
	    var chartWidth = chart.get('width');
	    var chartHeight = chart.get('height');
	    var appendPadding = Util.parsePadding(chart.get('appendPadding'));
	    var legendHeight = legend.getHeight();
	    var legendWidth = legend.getWidth();

	    var x = 0;
	    var y = 0;
	    if (position === 'left' || position === 'right') {
	      var verticalAlign = legend.verticalAlign || 'middle';
	      var height = Math.abs(tl.y - bl.y);
	      x = position === 'left' ? appendPadding[3] : chartWidth - legendWidth - appendPadding[1];
	      y = (height - legendHeight) / 2 + tl.y;
	      if (verticalAlign === 'top') {
	        y = tl.y;
	      } else if (verticalAlign === 'bottom') {
	        y = bl.y - legendHeight;
	      }

	      if (pre) {
	        y = pre.get('y') - legendHeight - LEGEND_GAP;
	      }
	    } else {
	      var align = legend.align || 'left';
	      x = appendPadding[3];

	      if (align === 'center') {
	        x = chartWidth / 2 - legendWidth / 2;
	      } else if (align === 'right') {
	        x = chartWidth - (legendWidth + appendPadding[1]);
	      }
	      y = position === 'top' ? appendPadding[0] + Math.abs(legend.container.getBBox().minY) : chartHeight - legendHeight;
	      if (pre) {
	        var preWidth = pre.getWidth();
	        x = pre.x + preWidth + LEGEND_GAP;
	      }
	    }
	    if (position === 'bottom' && offsetY > 0) {
	      offsetY = 0;
	    }
	    if (position === 'right' && offsetX > 0) {
	      offsetX = 0;
	    }
	    legend.moveTo(x + offsetX, y + offsetY);
	  };

	  LegendController.prototype.alignLegends = function alignLegends() {
	    var self = this;
	    var legends = self.legends;
	    Util.each(legends, function (legendItems, position) {
	      Util.each(legendItems, function (legend, index) {
	        var pre = legendItems[index - 1];
	        self._alignLegend(legend, pre, position);
	      });
	    });

	    return self;
	  };

	  LegendController.prototype.handleEvent = function handleEvent(ev) {
	    var self = this;

	    function findItem(x, y) {
	      var result = null;
	      var legends = self.legends;
	      Util.each(legends, function (legendItems) {
	        Util.each(legendItems, function (legend) {
	          var itemsGroup = legend.itemsGroup,
	              legendHitBoxes = legend.legendHitBoxes;

	          var children = itemsGroup.get('children');
	          if (children.length) {
	            var legendPosX = legend.x;
	            var legendPosY = legend.y;
	            Util.each(legendHitBoxes, function (box, index) {
	              if (x >= box.x + legendPosX && x <= box.x + box.width + legendPosX && y >= box.y + legendPosY && y <= box.height + box.y + legendPosY) {
	                // inbox
	                result = {
	                  clickedItem: children[index],
	                  clickedLegend: legend
	                };
	                return false;
	              }
	            });
	          }
	        });
	      });
	      return result;
	    }

	    var chart = self.chart;

	    var _Util$createEvent = Util.createEvent(ev, chart),
	        x = _Util$createEvent.x,
	        y = _Util$createEvent.y;

	    var clicked = findItem(x, y);
	    if (clicked && clicked.clickedLegend.clickable !== false) {
	      var clickedItem = clicked.clickedItem,
	          clickedLegend = clicked.clickedLegend;

	      if (clickedLegend.onClick) {
	        ev.clickedItem = clickedItem;
	        clickedLegend.onClick(ev);
	      } else if (!clickedLegend.custom) {
	        var checked = clickedItem.get('checked');
	        var value = clickedItem.get('dataValue');
	        var filterVals = clickedLegend.filterVals,
	            field = clickedLegend.field,
	            selectedMode = clickedLegend.selectedMode;

	        var isSingeSelected = selectedMode === 'single';

	        if (isSingeSelected) {
	          chart.filter(field, function (val) {
	            return val === value;
	          });
	        } else {
	          if (!checked) {
	            filterVals.push(value);
	          } else {
	            Util.Array.remove(filterVals, value);
	          }

	          chart.filter(field, function (val) {
	            return filterVals.indexOf(val) !== -1;
	          });
	        }

	        chart.repaint();
	      }
	    }
	  };

	  LegendController.prototype.bindEvents = function bindEvents() {
	    var legendCfg = this.legendCfg;
	    var triggerOn = legendCfg.triggerOn || 'touchstart';
	    var method = Util.wrapBehavior(this, 'handleEvent');
	    Util.addEventListener(this.canvasDom, triggerOn, method);
	  };

	  LegendController.prototype.unBindEvents = function unBindEvents() {
	    var legendCfg = this.legendCfg;
	    var triggerOn = legendCfg.triggerOn || 'touchstart';
	    var method = Util.getWrapBehavior(this, 'handleEvent');
	    Util.removeEventListener(this.canvasDom, triggerOn, method);
	  };

	  return LegendController;
	}();

	module.exports = {
	  init: function init(chart) {
	    var legendController = new LegendController({
	      container: chart.get('backPlot'),
	      plotRange: chart.get('plotRange'),
	      chart: chart
	    });
	    chart.set('legendController', legendController);

	    chart.legend = function (field, cfg) {
	      var legendCfg = legendController.legendCfg;
	      legendController.enable = true;

	      if (Util.isBoolean(field)) {
	        legendController.enable = field;
	        legendCfg = cfg || {};
	      } else if (Util.isObject(field)) {
	        legendCfg = field;
	      } else {
	        legendCfg[field] = cfg;
	      }

	      legendController.legendCfg = legendCfg;

	      return this;
	    };
	  },
	  beforeGeomDraw: function beforeGeomDraw(chart) {
	    var legendController = chart.get('legendController');
	    if (!legendController.enable) return null; // legend is not displayed

	    var legendCfg = legendController.legendCfg;

	    if (legendCfg && legendCfg.custom) {
	      legendController.addCustomLegend();
	    } else {
	      var legendItems = chart.getLegendItems();
	      var scales = chart.get('scales');
	      var filters = chart.get('filters');
	      Util.each(legendItems, function (items, field) {
	        var scale = scales[field];
	        var values = scale.values;
	        var filterVals = void 0;
	        if (filters && filters[field]) {
	          filterVals = values.filter(filters[field]);
	        } else {
	          filterVals = values.slice(0);
	        }
	        legendController.addLegend(scale, items, filterVals);
	      });
	    }

	    if (legendCfg && legendCfg.clickable !== false) {
	      legendController.bindEvents();
	    }

	    var legends = legendController.legends;
	    var legendRange = {
	      top: 0,
	      right: 0,
	      bottom: 0,
	      left: 0
	    };
	    Util.each(legends, function (legendItems, position) {
	      var padding = 0;
	      Util.each(legendItems, function (legend) {
	        var width = legend.getWidth();
	        var height = legend.getHeight();
	        if (position === 'top' || position === 'bottom') {
	          padding = Math.max(padding, height);
	          if (legend.offsetY > 0) {
	            padding += legend.offsetY;
	          }
	        } else {
	          padding = Math.max(padding, width);
	          if (legend.offsetX > 0) {
	            padding += legend.offsetX;
	          }
	        }
	      });
	      legendRange[position] = padding + getPaddingByPos(position, chart.get('appendPadding'));
	    });
	    chart.set('legendRange', legendRange);
	  },
	  afterGeomDraw: function afterGeomDraw(chart) {
	    var legendController = chart.get('legendController');
	    legendController.alignLegends();
	  },
	  clearInner: function clearInner(chart) {
	    var legendController = chart.get('legendController');
	    legendController.clear();
	    chart.set('legendRange', null);
	  }
	};

	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Handle the detail animations
	 * @author sima.zhang1990@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Element = __webpack_require__(25);
	var Timeline = __webpack_require__(117);
	var Animator = __webpack_require__(118);
	var Animate = __webpack_require__(91);
	var ShapeAction = __webpack_require__(120);
	var GroupAction = __webpack_require__(121);
	var Chart = __webpack_require__(19);

	var timeline = void 0;
	Element.prototype.animate = function () {
	  var attrs = this.get('attrs');
	  return new Animator(this, attrs, timeline);
	};

	Chart.prototype.animate = function (cfg) {
	  this.set('animate', cfg);
	  return this;
	};

	Animate.Action = ShapeAction;
	Animate.defaultCfg = {
	  interval: {
	    enter: function enter(coord) {
	      if (coord.isPolar && coord.transposed) {
	        // for pie chart
	        return function (shape) {
	          shape.set('zIndex', -1);
	          var container = shape.get('parent');
	          container.sort();
	        };
	      }
	      return ShapeAction.fadeIn;
	    }
	  },
	  area: {
	    enter: function enter(coord) {
	      if (coord.isPolar) return null;
	      return ShapeAction.fadeIn;
	    }
	  },
	  line: {
	    enter: function enter(coord) {
	      if (coord.isPolar) return null;

	      return ShapeAction.fadeIn;
	    }
	  },
	  path: {
	    enter: function enter(coord) {
	      if (coord.isPolar) return null;

	      return ShapeAction.fadeIn;
	    }
	  }
	};

	var GROUP_ANIMATION = {
	  line: function line(coord) {
	    if (coord.isPolar) {
	      return GroupAction.groupScaleInXY;
	    }
	    return GroupAction.groupWaveIn;
	  },
	  area: function area(coord) {
	    if (coord.isPolar) {
	      return GroupAction.groupScaleInXY;
	    }
	    return GroupAction.groupWaveIn;
	  },
	  path: function path(coord) {
	    if (coord.isPolar) {
	      return GroupAction.groupScaleInXY;
	    }
	    return GroupAction.groupWaveIn;
	  },
	  point: function point() {
	    return GroupAction.shapesScaleInXY;
	  },
	  interval: function interval(coord) {
	    var result = void 0;
	    if (coord.isPolar) {
	      // polar coodinate
	      result = GroupAction.groupScaleInXY;
	      if (coord.transposed) {
	        // pie chart
	        result = GroupAction.groupWaveIn;
	      }
	    } else {
	      result = coord.transposed ? GroupAction.groupScaleInX : GroupAction.groupScaleInY;
	    }
	    return result;
	  },
	  schema: function schema() {
	    return GroupAction.groupWaveIn;
	  }
	};

	function diff(fromAttrs, toAttrs) {
	  var endState = {};
	  for (var k in toAttrs) {
	    if (Util.isNumber(fromAttrs[k]) && fromAttrs[k] !== toAttrs[k]) {
	      endState[k] = toAttrs[k];
	    } else if (Util.isArray(fromAttrs[k]) && JSON.stringify(fromAttrs[k]) !== JSON.stringify(toAttrs[k])) {
	      endState[k] = toAttrs[k];
	    }
	  }
	  return endState;
	}

	// Add a unique id identifier to each shape
	function _getShapeId(geom, dataObj) {
	  var type = geom.get('type');
	  var id = 'geom-' + type;
	  var xScale = geom.getXScale();
	  var yScale = geom.getYScale();
	  var xField = xScale.field || 'x';
	  var yField = yScale.field || 'y';
	  var yVal = dataObj[yField];
	  var xVal = void 0;
	  if (xScale.isIdentity) {
	    xVal = xScale.value;
	  } else {
	    xVal = dataObj[xField];
	  }

	  if (type === 'interval' || type === 'schema') {
	    id += '-' + xVal;
	  } else if (type === 'line' || type === 'area' || type === 'path') {
	    id += '-' + type;
	  } else {
	    id += xScale.isCategory ? '-' + xVal : '-' + xVal + '-' + yVal;
	  }

	  var groupScales = geom._getGroupScales();
	  Util.each(groupScales, function (groupScale) {
	    var field = groupScale.field;
	    if (groupScale.type !== 'identity') {
	      id += '-' + dataObj[field];
	    }
	  });

	  return id;
	}

	// get geometry's shapes
	function getShapes(geoms, chart, coord) {
	  var shapes = [];

	  Util.each(geoms, function (geom) {
	    var geomContainer = geom.get('container');
	    var geomShapes = geomContainer.get('children');
	    var type = geom.get('type');
	    var animateCfg = Util.isNil(geom.get('animateCfg')) ? _getAnimateCfgByShapeType(type, chart) : geom.get('animateCfg');
	    if (animateCfg !== false) {
	      Util.each(geomShapes, function (shape, index) {
	        if (shape.get('className') === type) {
	          shape._id = _getShapeId(geom, shape.get('origin')._origin);
	          shape.set('coord', coord);
	          shape.set('animateCfg', animateCfg);
	          shape.set('index', index);
	          shapes.push(shape);
	        }
	      });
	    }
	    geom.set('shapes', geomShapes);
	  });
	  return shapes;
	}

	function cache(shapes) {
	  var rst = {};
	  for (var i = 0, len = shapes.length; i < len; i++) {
	    var shape = shapes[i];
	    if (!shape._id || shape.isClip) continue;
	    var id = shape._id;
	    rst[id] = {
	      _id: id,
	      type: shape.get('type'), // the type of shape
	      attrs: Util.mix({}, shape._attrs.attrs), // the graphics attributes of shape
	      className: shape.get('className'),
	      geomType: shape.get('className'),
	      index: shape.get('index'),
	      coord: shape.get('coord'),
	      animateCfg: shape.get('animateCfg')
	    };
	  }
	  return rst;
	}

	function getAnimate(geomType, coord, animationType, animationName) {
	  var result = void 0;

	  if (Util.isFunction(animationName)) {
	    result = animationName;
	  } else if (Util.isString(animationName)) {
	    result = Animate.Action[animationName];
	  } else {
	    result = Animate.getAnimation(geomType, coord, animationType);
	  }
	  return result;
	}

	function getAnimateCfg(geomType, animationType, animateCfg) {
	  if (animateCfg === false || Util.isObject(animateCfg) && animateCfg[animationType] === false) {
	    return false;
	  }

	  var defaultCfg = Animate.getAnimateCfg(geomType, animationType);
	  if (animateCfg && animateCfg[animationType]) {
	    return Util.deepMix({}, defaultCfg, animateCfg[animationType]);
	  }
	  return defaultCfg;
	}

	function addAnimate(cache, shapes, canvas) {
	  var animate = void 0;
	  var animateCfg = void 0;

	  // the order of animation: leave -> update -> enter
	  var updateShapes = [];
	  var newShapes = [];
	  Util.each(shapes, function (shape) {
	    var result = cache[shape._id];
	    if (!result) {
	      newShapes.push(shape);
	    } else {
	      shape.set('cacheShape', result);
	      updateShapes.push(shape);
	      delete cache[shape._id];
	    }
	  });

	  // first do the leave animation
	  Util.each(cache, function (deletedShape) {
	    var className = deletedShape.className,
	        coord = deletedShape.coord,
	        _id = deletedShape._id,
	        attrs = deletedShape.attrs,
	        index = deletedShape.index,
	        type = deletedShape.type;


	    animateCfg = getAnimateCfg(className, 'leave', deletedShape.animateCfg);
	    if (animateCfg === false) return true;

	    animate = getAnimate(className, coord, 'leave', animateCfg.animation);
	    if (Util.isFunction(animate)) {
	      var tempShape = canvas.addShape(type, {
	        attrs: attrs,
	        index: index,
	        canvas: canvas,
	        className: className
	      });
	      tempShape._id = _id;
	      animate(tempShape, animateCfg, coord);
	    }
	  });

	  // then do the update animation
	  Util.each(updateShapes, function (updateShape) {
	    var className = updateShape.get('className');

	    animateCfg = getAnimateCfg(className, 'update', updateShape.get('animateCfg'));
	    if (animateCfg === false) return true;
	    var coord = updateShape.get('coord');
	    var cacheAttrs = updateShape.get('cacheShape').attrs;
	    var endState = diff(cacheAttrs, updateShape._attrs.attrs); // 判断如果属性相同的话就不进行变换
	    if (Object.keys(endState).length) {
	      animate = getAnimate(className, coord, 'update', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(updateShape, animateCfg, coord);
	      } else {
	        updateShape.attr(cacheAttrs);
	        updateShape.animate().to({
	          attrs: endState,
	          duration: animateCfg.duration,
	          easing: animateCfg.easing,
	          delay: animateCfg.delay
	        }).onEnd(function () {
	          updateShape.set('cacheShape', null);
	        });
	      }
	    }
	  });

	  // last, enter animation
	  Util.each(newShapes, function (newShape) {
	    // 新图形元素的进场元素
	    var className = newShape.get('className');
	    var coord = newShape.get('coord');

	    animateCfg = getAnimateCfg(className, 'enter', newShape.get('animateCfg'));
	    if (animateCfg === false) return true;

	    animate = getAnimate(className, coord, 'enter', animateCfg.animation);
	    if (Util.isFunction(animate)) {
	      if (className === 'interval' && coord.isPolar && coord.transposed) {
	        var index = newShape.get('index');
	        var lastShape = updateShapes[index - 1];
	        animate(newShape, animateCfg, lastShape);
	      } else {
	        animate(newShape, animateCfg, coord);
	      }
	    }
	  });
	}

	function _getAnimateCfgByShapeType(type, chart) {
	  var animateCfg = chart.get('animate');

	  if (type.indexOf('guide-tag') > -1) {
	    type = 'guide-tag';
	  }

	  if (Util.isObject(animateCfg)) {
	    return animateCfg[type];
	  }

	  if (animateCfg === false) {
	    return false;
	  }

	  return null;
	}

	module.exports = {
	  afterCanvasInit: function afterCanvasInit() /* chart */{
	    timeline = new Timeline();
	    timeline.play();
	  },
	  beforeCanvasDraw: function beforeCanvasDraw(chart) {
	    if (chart.get('animate') === false) {
	      return;
	    }

	    var isUpdate = chart.get('isUpdate');
	    var canvas = chart.get('canvas');
	    var coord = chart.get('coord');
	    var geoms = chart.get('geoms');

	    var caches = canvas.get('caches') || [];
	    if (caches.length === 0) {
	      isUpdate = false;
	    }

	    var cacheShapes = getShapes(geoms, chart, coord);

	    var _chart$get = chart.get('axisController'),
	        frontPlot = _chart$get.frontPlot,
	        backPlot = _chart$get.backPlot;

	    var axisShapes = frontPlot.get('children').concat(backPlot.get('children'));
	    var guideShapes = [];
	    if (chart.get('guideController')) {
	      guideShapes = chart.get('guideController').guideShapes;
	    }
	    var componentShapes = [];
	    axisShapes.concat(guideShapes).forEach(function (s) {
	      var className = s.get('className');
	      var animateCfg = _getAnimateCfgByShapeType(className, chart);
	      s.set('coord', coord);
	      s.set('animateCfg', animateCfg);
	      componentShapes.push(s);
	      cacheShapes.push(s);
	    });
	    canvas.set('caches', cache(cacheShapes));

	    if (isUpdate) {
	      addAnimate(caches, cacheShapes, canvas);
	    } else {
	      // do the appear animation
	      var animateCfg = void 0;
	      var animate = void 0;
	      Util.each(geoms, function (geom) {
	        var type = geom.get('type');
	        var geomCfg = Util.isNil(geom.get('animateCfg')) ? _getAnimateCfgByShapeType(type, chart) : geom.get('animateCfg');
	        if (geomCfg !== false) {
	          animateCfg = getAnimateCfg(type, 'appear', geomCfg);
	          animate = getAnimate(type, coord, 'appear', animateCfg.animation);
	          if (Util.isFunction(animate)) {
	            var shapes = geom.get('shapes');
	            Util.each(shapes, function (shape) {
	              animate(shape, animateCfg, coord);
	            });
	          } else if (GROUP_ANIMATION[type]) {
	            // do the default animation
	            animate = GroupAction[animateCfg.animation] || GROUP_ANIMATION[type](coord);

	            var yScale = geom.getYScale();
	            var zeroY = coord.convertPoint({
	              x: 0,
	              y: yScale.scale(geom.getYMinValue())
	            });

	            var container = geom.get('container');
	            animate && animate(container, animateCfg, coord, zeroY);
	          }
	        }
	      });

	      // do the animation of components
	      Util.each(componentShapes, function (shape) {
	        var animateCfg = shape.get('animateCfg');
	        var className = shape.get('className');
	        if (animateCfg && animateCfg.appear) {
	          // if user configure
	          var defaultCfg = Animate.getAnimateCfg(className, 'appear');
	          var appearCfg = Util.deepMix({}, defaultCfg, animateCfg.appear);
	          var _animate = getAnimate(className, coord, 'appear', appearCfg.animation);
	          if (Util.isFunction(_animate)) {
	            _animate(shape, appearCfg, coord);
	          }
	        }
	      });
	    }
	  },
	  afterCanvasDestroyed: function afterCanvasDestroyed() /* chart */{
	    timeline.stop();
	  }
	};

	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _require = __webpack_require__(36),
	    requestAnimationFrame = _require.requestAnimationFrame;

	var clock = (typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === 'object' && performance.now ? performance : Date;

	var Timeline = function () {
	  function Timeline() {
	    _classCallCheck(this, Timeline);

	    this.anims = [];
	    this.time = null;
	    this.playing = false;
	    this.canvas = [];
	  }

	  Timeline.prototype.play = function play() {
	    var self = this;
	    self.time = clock.now();
	    self.playing = true;

	    function step() {
	      if (self.playing) {
	        requestAnimationFrame(step);
	        self.update();
	      }
	    }

	    requestAnimationFrame(step);
	  };

	  Timeline.prototype.stop = function stop() {
	    this.playing = false;
	    this.time = null;
	    this.canvas = [];
	  };

	  Timeline.prototype.update = function update() {
	    var currentTime = clock.now();
	    this.canvas = [];

	    for (var i = 0; i < this.anims.length; i++) {
	      var propertyAnim = this.anims[i];
	      if (currentTime < propertyAnim.startTime || propertyAnim.hasEnded) {
	        continue;
	      }
	      var shape = propertyAnim.shape; // shape
	      if (shape.get('destroyed')) {
	        this.anims.splice(i, 1);
	        i--;
	        continue;
	      }

	      var startState = propertyAnim.startState,
	          endState = propertyAnim.endState,
	          interpolate = propertyAnim.interpolate,
	          duration = propertyAnim.duration;

	      if (currentTime >= propertyAnim.startTime && !propertyAnim.hasStarted) {
	        propertyAnim.hasStarted = true;
	        if (propertyAnim.onStart) {
	          propertyAnim.onStart();
	        }
	      }
	      var t = (currentTime - propertyAnim.startTime) / duration;
	      t = Math.max(0, Math.min(t, 1));
	      t = propertyAnim.easing(t);

	      if (propertyAnim.onFrame) {
	        propertyAnim.onFrame(t);
	      } else {
	        for (var key in interpolate) {
	          var diff = interpolate[key];
	          var value = diff(t);
	          var newValue = void 0;
	          if (key === 'points') {
	            newValue = [];
	            var aLen = Math.max(startState.points.length, endState.points.length);
	            for (var j = 0; j < aLen; j += 2) {
	              newValue.push({
	                x: value[j],
	                y: value[j + 1]
	              });
	            }
	          } else {
	            newValue = value;
	          }
	          shape._attrs.attrs[key] = newValue;
	        }
	      }

	      var canvas = shape.get('canvas');
	      if (this.canvas.indexOf(canvas) === -1) {
	        this.canvas.push(canvas);
	      }

	      if (propertyAnim.onUpdate) {
	        propertyAnim.onUpdate(t);
	      }

	      if (currentTime >= propertyAnim.endTime && !propertyAnim.hasEnded) {
	        propertyAnim.hasEnded = true;
	        if (propertyAnim.onEnd) {
	          propertyAnim.onEnd();
	        }
	      }

	      if (t === 1) {
	        // end
	        this.anims.splice(i, 1);
	        i--;
	      }
	    }

	    this.canvas.map(function (c) {
	      c.draw();
	      return c;
	    });
	    this.time = clock.now();
	  };

	  return Timeline;
	}();

	module.exports = Timeline;

	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Easing = __webpack_require__(119);

	function plainArray(arr) {
	  var result = [];
	  for (var i = 0, len = arr.length; i < len; i++) {
	    if (arr[i]) {
	      result.push(arr[i].x);
	      result.push(arr[i].y);
	    }
	  }
	  return result;
	}

	function interpolateNumber(a, b) {
	  a = +a;
	  b -= a;
	  return function (t) {
	    return a + b * t;
	  };
	}

	function interpolateArray(a, b) {
	  var nb = b ? b.length : 0;
	  var na = a ? Math.min(nb, a.length) : 0;
	  var x = new Array(na);
	  var c = new Array(nb);
	  var i = void 0;

	  for (i = 0; i < na; ++i) {
	    x[i] = interpolateNumber(a[i], b[i]);
	  }for (; i < nb; ++i) {
	    c[i] = b[i];
	  }return function (t) {
	    for (i = 0; i < na; ++i) {
	      c[i] = x[i](t);
	    }return c;
	  };
	}

	var Animator = function () {
	  function Animator(shape, source, timeline) {
	    _classCallCheck(this, Animator);

	    this.hasStarted = false;
	    this.hasEnded = false;
	    this.shape = shape;
	    this.source = source;
	    this.timeline = timeline;
	    this.animate = null;
	  }

	  // delay, attrs, duration, easing


	  Animator.prototype.to = function to() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var delay = cfg.delay || 0;
	    var attrs = cfg.attrs || {};
	    var duration = cfg.duration || 1000;

	    var easing = void 0; // 缓动函数
	    if (typeof cfg.easing === 'function') {
	      easing = cfg.easing;
	    } else {
	      easing = Easing[cfg.easing] || Easing.linear;
	    }

	    var animInfo = {
	      shape: this.shape,
	      startTime: this.timeline.time + delay,
	      duration: duration,
	      easing: easing
	    };

	    var interpolate = {}; // 差值函数
	    for (var attrName in attrs) {
	      var startValue = this.source[attrName];
	      var endValue = attrs[attrName];
	      if (attrName === 'points') {
	        startValue = plainArray(startValue);
	        endValue = plainArray(endValue);
	        interpolate.points = interpolateArray(startValue, endValue);
	        this.source.points = startValue;
	        attrs.points = endValue;
	      } else if (attrName === 'matrix') {
	        interpolate.matrix = interpolateArray(startValue, endValue);
	      } else {
	        interpolate[attrName] = interpolateNumber(startValue, endValue);
	      }
	    }
	    animInfo.interpolate = interpolate;
	    animInfo.startState = this.source;
	    animInfo.endState = attrs;
	    animInfo.endTime = animInfo.startTime + duration;

	    this.timeline.anims.push(animInfo);
	    this.animate = animInfo;
	    return this;
	  };

	  Animator.prototype.onFrame = function onFrame(callback) {
	    // 自定义每一帧动画的动作
	    if (this.animate) {
	      this.animate.onFrame = function (frame) {
	        callback(frame);
	      };
	    }

	    return this;
	  };

	  Animator.prototype.onStart = function onStart(callback) {
	    if (this.animate) {
	      this.animate.onStart = function () {
	        callback();
	      };
	    }

	    return this;
	  };

	  Animator.prototype.onUpdate = function onUpdate(callback) {
	    if (this.animate) {
	      this.animate.onUpdate = function (frame) {
	        callback(frame);
	      };
	    }

	    return this;
	  };

	  Animator.prototype.onEnd = function onEnd(callback) {
	    if (this.animate) {
	      this.animate.onEnd = function () {
	        callback();
	      };
	    }

	    return this;
	  };

	  return Animator;
	}();

	module.exports = Animator;

	/***/ }),
	/* 119 */
	/***/ (function(module, exports) {

	var Easing = {
	  linear: function linear(k) {
	    return k;
	  },
	  quadraticIn: function quadraticIn(k) {
	    return k * k;
	  },
	  quadraticOut: function quadraticOut(k) {
	    return k * (2 - k);
	  },
	  quadraticInOut: function quadraticInOut(k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k;
	    }
	    return -0.5 * (--k * (k - 2) - 1);
	  },
	  cubicIn: function cubicIn(k) {
	    return k * k * k;
	  },
	  cubicOut: function cubicOut(k) {
	    return --k * k * k + 1;
	  },
	  cubicInOut: function cubicInOut(k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k;
	    }
	    return 0.5 * ((k -= 2) * k * k + 2);
	  },
	  elasticIn: function elasticIn(k) {
	    var s = void 0;
	    var a = 0.1;
	    var p = 0.4;
	    if (k === 0) return 0;
	    if (k === 1) return 1;
	    if (!p) {
	      p = 0.3;
	    }
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(1 / a);
	    }
	    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	  },
	  elasticOut: function elasticOut(k) {
	    var s = void 0;
	    var a = 0.1;
	    var p = 0.4;
	    if (k === 0) return 0;
	    if (k === 1) return 1;
	    if (!p) {
	      p = 0.3;
	    }
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(1 / a);
	    }
	    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	  },
	  elasticInOut: function elasticInOut(k) {
	    var s = void 0;
	    var a = 0.1;
	    var p = 0.4;
	    if (k === 0) return 0;
	    if (k === 1) return 1;
	    if (!p) {
	      p = 0.3;
	    }
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(1 / a);
	    }
	    if ((k *= 2) < 1) {
	      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    }
	    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	  },
	  backIn: function backIn(k) {
	    var s = 1.70158;
	    return k * k * ((s + 1) * k - s);
	  },
	  backOut: function backOut(k) {
	    var s = 1.70158;
	    return (k = k - 1) * k * ((s + 1) * k + s) + 1;
	  },
	  backInOut: function backInOut(k) {
	    var s = 1.70158 * 1.525;
	    if ((k *= 2) < 1) {
	      return 0.5 * (k * k * ((s + 1) * k - s));
	    }
	    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	  },
	  bounceIn: function bounceIn(k) {
	    return 1 - Easing.bounceOut(1 - k);
	  },
	  bounceOut: function bounceOut(k) {
	    if ((k /= 1) < 1 / 2.75) {
	      return 7.5625 * k * k;
	    } else if (k < 2 / 2.75) {
	      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	    } else if (k < 2.5 / 2.75) {
	      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	    }

	    return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	  },
	  bounceInOut: function bounceInOut(k) {
	    if (k < 0.5) {
	      return Easing.bounceIn(k * 2) * 0.5;
	    }
	    return Easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	  }
	};

	module.exports = Easing;

	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Animation functions for shape
	 * @author sima.zhang1990@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Helpers = __webpack_require__(92);

	/*
	function waveIn(shape, animateCfg, coord) {
	  const clip = Helpers.getClip(coord);
	  clip.set('canvas', shape.get('canvas'));
	  shape.attr('clip', clip);
	  const onEnd = function() {
	    shape.attr('clip', null);
	    clip.remove(true);
	  };
	  Helpers.doAnimation(clip, clip.endState, animateCfg, onEnd);
	}

	function scaleInX(shape, animateCfg) {
	  const box = shape.getBBox();
	  const points = shape.get('origin').points;
	  let x;
	  const y = (box.minY + box.maxY) / 2;

	  if (points[0].y - points[1].y > 0) { // 当顶点在零点之下
	    x = box.maxX;
	  } else {
	    x = box.minX;
	  }
	  const scaledMatrix = Helpers.getScaledMatrix(shape, [ x, y ], 'x');
	  Helpers.doAnimation(shape, { matrix: scaledMatrix }, animateCfg);
	}

	function scaleInY(shape, animateCfg) {
	  const box = shape.getBBox();
	  const points = shape.get('origin').points;
	  const x = (box.minX + box.maxX) / 2;
	  let y;

	  if (points[0].y - points[1].y <= 0) { // 当顶点在零点之下
	    y = box.maxY;
	  } else {
	    y = box.minY;
	  }
	  const scaledMatrix = Helpers.getScaledMatrix(shape, [ x, y ], 'x');
	  Helpers.doAnimation(shape, { matrix: scaledMatrix }, animateCfg);
	}
	*/

	function fadeIn(shape, animateCfg) {
	  var fillOpacity = Util.isNil(shape.attr('fillOpacity')) ? 1 : shape.attr('fillOpacity');
	  var strokeOpacity = Util.isNil(shape.attr('strokeOpacity')) ? 1 : shape.attr('strokeOpacity');
	  shape.attr('fillOpacity', 0);
	  shape.attr('strokeOpacity', 0);
	  var endState = {
	    fillOpacity: fillOpacity,
	    strokeOpacity: strokeOpacity
	  };
	  Helpers.doAnimation(shape, endState, animateCfg);
	}

	module.exports = {
	  // waveIn,
	  // scaleInX,
	  // scaleInY,
	  fadeIn: fadeIn
	};

	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Group animate functions
	 * @author sima.zhang1990@gmail.com
	 */
	var Util = __webpack_require__(92);
	var Helper = __webpack_require__(26);

	var _require = __webpack_require__(9),
	    Shape = _require.Shape;

	function _groupScaleIn(container, animateCfg, coord, zeroY, type) {
	  var _Util$getCoordInfo = Util.getCoordInfo(coord),
	      start = _Util$getCoordInfo.start,
	      end = _Util$getCoordInfo.end,
	      width = _Util$getCoordInfo.width,
	      height = _Util$getCoordInfo.height;

	  var x = void 0;
	  var y = void 0;

	  var clip = new Shape.Rect({
	    attrs: {
	      x: start.x,
	      y: end.y,
	      width: width,
	      height: height
	    }
	  });

	  if (type === 'y') {
	    x = start.x + width / 2;
	    y = zeroY.y < start.y ? zeroY.y : start.y;
	  } else if (type === 'x') {
	    x = zeroY.x > start.x ? zeroY.x : start.x;
	    y = start.y + height / 2;
	  } else if (type === 'xy') {
	    if (coord.isPolar) {
	      x = coord.center.x;
	      y = coord.center.y;
	    } else {
	      x = (start.x + end.x) / 2;
	      y = (start.y + end.y) / 2;
	    }
	  }

	  var endMatrix = Util.getScaledMatrix(clip, [x, y], type);
	  clip.isClip = true;
	  clip.endState = {
	    matrix: endMatrix
	  };

	  clip.set('canvas', container.get('canvas'));
	  container.attr('clip', clip);
	  var onEnd = function onEnd() {
	    container.attr('clip', null);
	    clip.remove(true);
	  };
	  Util.doAnimation(clip, clip.endState, animateCfg, onEnd);
	}

	function _shapeScale(container, animateCfg, type) {
	  var shapes = container.get('children');
	  var x = void 0;
	  var y = void 0;
	  var endMatrix = void 0;

	  for (var i = 0, len = shapes.length; i < len; i++) {
	    var shape = shapes[i];
	    var box = shape.getBBox();
	    x = (box.minX + box.maxX) / 2;
	    y = (box.minY + box.maxY) / 2;
	    endMatrix = Util.getScaledMatrix(shape, [x, y], type);
	    Util.doAnimation(shape, { matrix: endMatrix }, animateCfg);
	  }
	}

	function groupScaleInX(container, animateCfg, coord, zeroY) {
	  _groupScaleIn(container, animateCfg, coord, zeroY, 'x');
	}

	function groupScaleInY(container, animateCfg, coord, zeroY) {
	  _groupScaleIn(container, animateCfg, coord, zeroY, 'y');
	}

	function groupScaleInXY(container, animateCfg, coord, zeroY) {
	  _groupScaleIn(container, animateCfg, coord, zeroY, 'xy');
	}

	function shapesScaleInX(container, animateCfg) {
	  _shapeScale(container, animateCfg, 'x');
	}

	function shapesScaleInY(container, animateCfg) {
	  _shapeScale(container, animateCfg, 'y');
	}

	function shapesScaleInXY(container, animateCfg) {
	  _shapeScale(container, animateCfg, 'xy');
	}

	function groupWaveIn(container, animateCfg, coord) {
	  var clip = Helper.getClip(coord);
	  clip.set('canvas', container.get('canvas'));
	  container.attr('clip', clip);
	  var onEnd = function onEnd() {
	    container.attr('clip', null);
	    clip.remove(true);
	  };
	  var endState = {};
	  if (coord.isPolar) {
	    var startAngle = coord.startAngle,
	        endAngle = coord.endAngle;

	    endState.endAngle = endAngle;
	    clip.attr('endAngle', startAngle);
	  } else {
	    var start = coord.start,
	        end = coord.end;

	    var width = Math.abs(start.x - end.x);
	    var height = Math.abs(start.y - end.y);
	    if (coord.isTransposed) {
	      clip.attr('height', 0);
	      endState.height = height;
	    } else {
	      clip.attr('width', 0);
	      endState.width = width;
	    }
	  }
	  Util.doAnimation(clip, endState, animateCfg, onEnd);
	}

	module.exports = {
	  groupWaveIn: groupWaveIn,
	  groupScaleInX: groupScaleInX,
	  groupScaleInY: groupScaleInY,
	  groupScaleInXY: groupScaleInXY,
	  shapesScaleInX: shapesScaleInX,
	  shapesScaleInY: shapesScaleInY,
	  shapesScaleInXY: shapesScaleInXY
	};

	/***/ }),
	/* 122 */,
	/* 123 */,
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Default, without interactins
	 */
	var F2 = __webpack_require__(41);

	__webpack_require__(93);
	__webpack_require__(82);

	__webpack_require__(87); // polar coordinate
	__webpack_require__(102); // the axis for polar coordinate

	__webpack_require__(103); // timeCat scale

	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);

	var Tooltip = __webpack_require__(112);
	var Guide = __webpack_require__(114);
	var Legend = __webpack_require__(115);
	var Animation = __webpack_require__(116);

	F2.Animate = __webpack_require__(91);
	// register plugins
	F2.Chart.plugins.register([Tooltip, Legend, Guide, Animation]);

	module.exports = F2;

	/***/ })
	/******/ ]);
	});

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Brush"] = factory();
		else
			root["Brush"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * g2-brush
	 * @author sima.zhang1990@gmail.com
	 */
	var Brush = __webpack_require__(1);
	module.exports = Brush;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * g2-brush
	 * @author sima.zhang1990@gmail.com
	 */
	var Util = __webpack_require__(2);
	var BRUSH_TYPES = ['X', 'Y', 'XY', 'POLYGON'];

	var Brush = function () {
	  function Brush(cfg) {
	    _classCallCheck(this, Brush);

	    /**
	     * keep the first mousedown point
	     * @type {object}
	     */
	    this.startPoint = null;
	    /**
	     * keep the brush state
	     * @type {Boolean}
	     */
	    this.brushing = false;
	    /**
	     * keep the drag state
	     * @type {Boolean}
	     */
	    this.dragging = false;
	    /**
	     * the brush shape
	     * @type {G.Shape}
	     */
	    this.brushShape = null;
	    /**
	     * the brush container
	     * @type {G.Group}
	     */
	    this.container = null;
	    /**
	     * keep polygon path
	     * @type {String}
	     */
	    this.polygonPath = null;
	    /**
	     * brush style
	     * @type {Object}
	     */
	    this.style = {
	      fill: '#C5D4EB',
	      opacity: 0.3,
	      lineWidth: 1,
	      stroke: '#82A6DD'
	    };
	    /**
	     * brush type
	     * @type {string}
	     */
	    this.type = 'XY';
	    /**
	     * is brushShape can be dragable, default is false
	     * @type {Boolean}
	     */
	    this.dragable = false;
	    this.dragoffX = 0;
	    this.dragoffY = 0;
	    /**
	     * is limited in plot, default value is true
	     * @type {Boolean}
	     */
	    this.inPlot = true;
	    /**
	     * xField
	     * @type {string}
	     */
	    this.xField = null;
	    /**
	     * yFiels
	     * @type {string}
	     */
	    this.yField = null;
	    /**
	     * Whether to filter the data，default is true
	     * @type {Boolean}
	     */
	    this.filter = !cfg.dragable;
	    this.onBrushstart = null;
	    this.onBrushmove = null;
	    this.onBrushend = null;
	    this.onDragstart = null;
	    this.onDragmove = null;
	    this.onDragend = null;

	    this._init(cfg);
	  }

	  Brush.prototype._init = function _init(cfg) {
	    Util.mix(this, cfg);
	    this.type = this.type.toUpperCase();
	    if (BRUSH_TYPES.indexOf(this.type) === -1) {
	      this.type = 'XY';
	    }
	    var canvas = this.canvas;
	    if (canvas) {
	      var plotRange = void 0;
	      canvas.get('children').map(function (child) {
	        if (child.get('type') === 'plotBack') {
	          plotRange = child.get('plotRange');
	          return false;
	        }
	        return child;
	      });
	      this.plot = {
	        start: plotRange.bl,
	        end: plotRange.tr
	      };

	      this.bindCanvasEvent();
	    }

	    if (this.chart) {
	      var chart = this.chart;
	      var coord = chart.get('coord');
	      this.plot = {
	        start: coord.start,
	        end: coord.end
	      };
	      var xScales = chart._getScales('x');
	      var yScales = chart._getScales('y');
	      this.xScale = this.xField ? xScales[this.xField] : chart.getXScale();
	      this.yScale = this.yField ? yScales[this.yField] : chart.getYScales()[0];
	    }
	  };

	  Brush.prototype.clearEvents = function clearEvents() {
	    this.onMouseDownListener && this.onMouseDownListener.remove();
	    this.onMouseMoveListener && this.onMouseMoveListener.remove();
	    this.onMouseupListener && this.onMouseupListener.remove();
	  };

	  Brush.prototype.bindCanvasEvent = function bindCanvasEvent() {
	    var canvas = this.canvas;

	    var canvasDOM = canvas.get('canvasDOM');
	    this.clearEvents();
	    this.onMouseDownListener = Util.addEventListener(canvasDOM, 'mousedown', Util.wrapBehavior(this, '_onCanvasMouseDown'));
	    this.onMouseMoveListener = Util.addEventListener(canvasDOM, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
	    this.onMouseUpListener = Util.addEventListener(canvasDOM, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
	  };

	  Brush.prototype._onCanvasMouseDown = function _onCanvasMouseDown(ev) {
	    var me = this;
	    var canvas = me.canvas,
	        type = me.type,
	        brushShape = me.brushShape;


	    if (!type) {
	      return;
	    }

	    var startPoint = { x: ev.offsetX, y: ev.offsetY };
	    var isInPlot = me.plot && me.inPlot;
	    var canvasDOM = canvas.get('canvasDOM');
	    var pixelRatio = canvas.get('pixelRatio');

	    if (me.selection) {
	      me.selection = null;
	    }

	    if (me.dragable && brushShape && !brushShape.get('destroyed')) {
	      // allow drag the brushShape
	      if (brushShape.isHit(startPoint.x * pixelRatio, startPoint.y * pixelRatio)) {
	        canvasDOM.style.cursor = 'move';
	        me.selection = brushShape;
	        me.dragging = true;
	        if (type === 'X') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = 0;
	        } else if (type === 'Y') {
	          me.dragoffX = 0;
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'XY') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'POLYGON') {
	          var box = brushShape.getBBox();
	          me.dragoffX = startPoint.x - box.minX;
	          me.dragoffY = startPoint.y - box.minY;
	        }

	        if (isInPlot) {
	          me.selection.attr('clip', canvas.addShape('rect', {
	            attrs: {
	              x: this.plot.start.x,
	              y: this.plot.end.y,
	              width: this.plot.end.x - this.plot.start.x,
	              height: this.plot.start.y - this.plot.end.y,
	              fill: '#fff',
	              fillOpacity: 0
	            }
	          }));
	        }
	        me.onDragstart && me.onDragstart(ev);
	      }
	      me.prePoint = startPoint;
	    }

	    if (!me.dragging) {
	      // brush start
	      me.onBrushstart && me.onBrushstart(startPoint);
	      var container = me.container;
	      if (isInPlot) {
	        var _me$plot = me.plot,
	            start = _me$plot.start,
	            end = _me$plot.end;

	        if (startPoint.x < start.x || startPoint.x > end.x || startPoint.y < end.y || startPoint.y > start.y) {
	          return;
	        }
	      }
	      canvasDOM.style.cursor = 'crosshair';
	      me.startPoint = startPoint;
	      me.brushShape = null;
	      me.brushing = true;

	      if (!container) {
	        container = canvas.addGroup({
	          zIndex: 5 // upper
	        });
	        container.initTransform();
	      } else {
	        container.clear();
	      }
	      me.container = container;

	      if (type === 'POLYGON') {
	        me.polygonPath = 'M ' + startPoint.x + ' ' + startPoint.y;
	      }
	    }
	  };

	  Brush.prototype._onCanvasMouseMove = function _onCanvasMouseMove(ev) {
	    var me = this;
	    var brushing = me.brushing,
	        dragging = me.dragging,
	        type = me.type,
	        plot = me.plot,
	        startPoint = me.startPoint,
	        xScale = me.xScale,
	        yScale = me.yScale,
	        canvas = me.canvas;


	    if (!brushing && !dragging) {
	      return;
	    }
	    var currentPoint = {
	      x: ev.offsetX,
	      y: ev.offsetY
	    };
	    var canvasDOM = canvas.get('canvasDOM');

	    if (brushing) {
	      canvasDOM.style.cursor = 'crosshair';
	      var start = plot.start,
	          end = plot.end;

	      var polygonPath = me.polygonPath;
	      var brushShape = me.brushShape;
	      var container = me.container;
	      if (me.plot && me.inPlot) {
	        currentPoint = me._limitCoordScope(currentPoint);
	      }

	      var rectStartX = void 0;
	      var rectStartY = void 0;
	      var rectWidth = void 0;
	      var rectHeight = void 0;

	      if (type === 'Y') {
	        rectStartX = start.x;
	        rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        rectWidth = Math.abs(start.x - end.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'X') {
	        rectStartX = currentPoint.x >= startPoint.x ? startPoint.x : currentPoint.x;
	        rectStartY = end.y;
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(end.y - start.y);
	      } else if (type === 'XY') {
	        if (currentPoint.x >= startPoint.x) {
	          rectStartX = startPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        } else {
	          rectStartX = currentPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        }
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'POLYGON') {
	        polygonPath += 'L ' + currentPoint.x + ' ' + currentPoint.y;
	        me.polygonPath = polygonPath;
	        if (!brushShape) {
	          brushShape = container.addShape('path', {
	            attrs: Util.mix(me.style, {
	              path: polygonPath
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            path: polygonPath
	          }));
	        }
	      }
	      if (type !== 'POLYGON') {
	        if (!brushShape) {
	          brushShape = container.addShape('rect', {
	            attrs: Util.mix(me.style, {
	              x: rectStartX,
	              y: rectStartY,
	              width: rectWidth,
	              height: rectHeight
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            x: rectStartX,
	            y: rectStartY,
	            width: rectWidth,
	            height: rectHeight
	          }));
	        }
	      }

	      me.brushShape = brushShape;
	    } else if (dragging) {
	      canvasDOM.style.cursor = 'move';
	      var selection = me.selection;
	      if (selection && !selection.get('destroyed')) {
	        if (type === 'POLYGON') {
	          var prePoint = me.prePoint;
	          me.selection.translate(currentPoint.x - prePoint.x, currentPoint.y - prePoint.y);
	        } else {
	          me.dragoffX && selection.attr('x', currentPoint.x - me.dragoffX);
	          me.dragoffY && selection.attr('y', currentPoint.y - me.dragoffY);
	        }
	      }
	    }

	    me.prePoint = currentPoint;
	    canvas.draw();

	    var _me$_getSelected = me._getSelected(),
	        data = _me$_getSelected.data,
	        shapes = _me$_getSelected.shapes,
	        xValues = _me$_getSelected.xValues,
	        yValues = _me$_getSelected.yValues;

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: currentPoint.x,
	      y: currentPoint.y
	    };

	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }
	    me.onDragmove && me.onDragmove(eventObj);
	    me.onBrushmove && me.onBrushmove(eventObj);
	  };

	  Brush.prototype._onCanvasMouseUp = function _onCanvasMouseUp(ev) {
	    var me = this;
	    var data = me.data,
	        shapes = me.shapes,
	        xValues = me.xValues,
	        yValues = me.yValues,
	        canvas = me.canvas,
	        type = me.type,
	        startPoint = me.startPoint,
	        chart = me.chart,
	        container = me.container,
	        xScale = me.xScale,
	        yScale = me.yScale;
	    var offsetX = ev.offsetX,
	        offsetY = ev.offsetY;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'default';

	    if (Math.abs(startPoint.x - offsetX) <= 1 && Math.abs(startPoint.y - offsetY) <= 1) {
	      // 防止点击事件
	      me.brushing = false;
	      me.dragging = false;
	      return;
	    }

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: offsetX,
	      y: offsetY
	    };
	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }

	    if (me.dragging) {
	      me.dragging = false;
	      me.onDragend && me.onDragend(eventObj);
	    } else if (me.brushing) {
	      me.brushing = false;
	      var brushShape = me.brushShape;
	      var polygonPath = me.polygonPath;

	      if (type === 'POLYGON') {
	        polygonPath += 'z';

	        brushShape && !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	          path: polygonPath
	        }));
	        me.polygonPath = polygonPath;
	        canvas.draw();
	      }

	      if (me.onBrushend) {
	        me.onBrushend(eventObj);
	      } else if (chart && me.filter) {
	        container.clear(); // clear the brush
	        // filter data
	        if (type === 'X') {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	        } else if (type === 'Y') {
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        } else {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        }
	        chart.repaint();
	      }
	    }
	  };

	  Brush.prototype.setType = function setType(type) {
	    if (!type) {
	      return;
	    }

	    this.type = type.toUpperCase();
	  };

	  Brush.prototype.destroy = function destroy() {
	    this.clearEvents();
	  };

	  Brush.prototype._limitCoordScope = function _limitCoordScope(point) {
	    var plot = this.plot;
	    var start = plot.start,
	        end = plot.end;


	    if (point.x < start.x) {
	      point.x = start.x;
	    }
	    if (point.x > end.x) {
	      point.x = end.x;
	    }
	    if (point.y < end.y) {
	      point.y = end.y;
	    }
	    if (point.y > start.y) {
	      point.y = start.y;
	    }
	    return point;
	  };

	  Brush.prototype._getSelected = function _getSelected() {
	    var chart = this.chart,
	        xScale = this.xScale,
	        yScale = this.yScale,
	        brushShape = this.brushShape,
	        canvas = this.canvas;

	    var pixelRatio = canvas.get('pixelRatio');
	    var selectedShapes = [];
	    var xValues = [];
	    var yValues = [];
	    var selectedData = [];
	    if (chart) {
	      var geoms = chart.get('geoms');
	      geoms.map(function (geom) {
	        var shapes = geom.getShapes();
	        shapes.map(function (shape) {
	          var shapeData = shape.get('origin');
	          if (!Array.isArray(shapeData)) {
	            // 线图、区域图等
	            shapeData = [shapeData];
	          }

	          shapeData.map(function (each) {
	            if (brushShape.isHit(each.x * pixelRatio, each.y * pixelRatio)) {
	              selectedShapes.push(shape);
	              var origin = each._origin;
	              selectedData.push(origin);
	              xScale && xValues.push(origin[xScale.field]);
	              yScale && yValues.push(origin[yScale.field]);
	            }
	            return each;
	          });

	          return shape;
	        });
	        return geom;
	      });
	    }
	    this.shapes = selectedShapes;
	    this.xValues = xValues;
	    this.yValues = yValues;
	    this.data = selectedData;
	    return {
	      data: selectedData,
	      xValues: xValues,
	      yValues: yValues,
	      shapes: selectedShapes
	    };
	  };

	  return Brush;
	}();

	module.exports = Brush;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {

	function _mix(dist, obj) {
	  for (var k in obj) {
	    if (obj.hasOwnProperty(k) && k !== 'constructor' && obj[k] !== undefined) {
	      dist[k] = obj[k];
	    }
	  }
	}

	var Util = {
	  mix: function mix(dist, obj1, obj2, obj3) {
	    if (obj1) {
	      _mix(dist, obj1);
	    }

	    if (obj2) {
	      _mix(dist, obj2);
	    }

	    if (obj3) {
	      _mix(dist, obj3);
	    }
	    return dist;
	  },

	  /**
	   * 添加事件监听器
	   * @param  {Object} target DOM对象
	   * @param  {String} eventType 事件名
	   * @param  {Funtion} callback 回调函数
	   * @return {Object} 返回对象
	   */
	  addEventListener: function addEventListener(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * 封装事件，便于使用上下文this,和便于解除事件时使用
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  wrapBehavior: function wrapBehavior(obj, action) {
	    if (obj['_wrap_' + action]) {
	      return obj['_wrap_' + action];
	    }
	    var method = function method(e) {
	      obj[action](e);
	    };
	    obj['_wrap_' + action] = method;
	    return method;
	  },

	  /**
	   * 获取封装的事件
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  getWrapBehavior: function getWrapBehavior(obj, action) {
	    return obj['_wrap_' + action];
	  }
	};

	module.exports = Util;

	/***/ })
	/******/ ]);
	});

/***/ },
/* 53 */
/***/ function(module, exports) {

	/* eslint-disable no-cond-assign */
	var PEM = 18;
	var DEFAULT_HEIGHT = PEM * 2;
	var DEFAULT_GAP = PEM;

	var DEFAULT_OPTIONS = {
	  getId: function getId(d) {
	    return d.id || d.name;
	  },
	  getHGap: function getHGap(d) {
	    return d.hgap || DEFAULT_GAP;
	  },
	  getVGap: function getVGap(d) {
	    return d.vgap || DEFAULT_GAP;
	  },
	  getChildren: function getChildren(d) {
	    return d.children;
	  },
	  getHeight: function getHeight(d) {
	    return d.height || DEFAULT_HEIGHT;
	  },
	  getWidth: function getWidth(d) {
	    var name = d.name || ' ';
	    return d.width || name.split('').length * PEM; // FIXME DO NOT get width like this
	  }
	};

	function Node(data, options) {
	  var me = this;
	  me.vgap = me.hgap = 0;
	  if (data instanceof Node) return data;
	  me.data = data;
	  /*
	   * Gaps: filling space between nodes
	   * (x, y) ----------------------
	   * |            vgap            |
	   * |    --------------------    h
	   * | h |                    |   e
	   * | g |                    |   i
	   * | a |                    |   g
	   * | p |                    |   h
	   * |   ---------------------    t
	   * |                            |
	   *  -----------width------------
	   */
	  var hgap = options.getHGap(data);
	  var vgap = options.getVGap(data);
	  me.width = options.getWidth(data);
	  me.height = options.getHeight(data);
	  me.id = options.getId(data);
	  me.x = me.y = 0;
	  me.depth = 0;
	  if (!me.children) {
	    me.children = [];
	  }
	  me.addGap(hgap, vgap);
	  return me;
	}

	Object.assign(Node.prototype, {
	  isRoot: function isRoot() {
	    return this.depth === 0;
	  },
	  isLeaf: function isLeaf() {
	    return this.children.length === 0;
	  },
	  addGap: function addGap(hgap, vgap) {
	    var me = this;
	    me.hgap += hgap;
	    me.vgap += vgap;
	    me.width += 2 * hgap;
	    me.height += 2 * vgap;
	  },
	  eachNode: function eachNode(callback) {
	    // Depth First traverse
	    var me = this;
	    var nodes = [me];
	    var current = void 0;
	    while (current = nodes.pop()) {
	      callback(current);
	      nodes = nodes.concat(current.children);
	    }
	  },
	  DFTraverse: function DFTraverse(callback) {
	    // Depth First traverse
	    this.eachNode(callback);
	  },
	  BFTraverse: function BFTraverse(callback) {
	    // Breadth First traverse
	    var me = this;
	    var nodes = [me];
	    var current = void 0;
	    while (current = nodes.shift()) {
	      callback(current);
	      nodes = nodes.concat(current.children);
	    }
	  },
	  getBoundingBox: function getBoundingBox() {
	    // BBox for just one tree node
	    var bb = {
	      left: Number.MAX_VALUE,
	      top: Number.MAX_VALUE,
	      width: 0,
	      height: 0
	    };
	    this.eachNode(function (node) {
	      bb.left = Math.min(bb.left, node.x);
	      bb.top = Math.min(bb.top, node.y);
	      bb.width = Math.max(bb.width, node.x + node.width);
	      bb.height = Math.max(bb.height, node.y + node.height);
	    });
	    return bb;
	  },


	  // translate
	  translate: function translate() {
	    var tx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	    var ty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	    this.eachNode(function (node) {
	      node.x += tx;
	      node.y += ty;
	    });
	  },
	  right2left: function right2left() {
	    var me = this;
	    var bb = me.getBoundingBox();
	    me.eachNode(function (node) {
	      node.x = node.x - (node.x - bb.left) * 2 - node.width;
	      // node.x = - node.x;
	    });
	    me.translate(bb.width, 0);
	  },
	  bottom2top: function bottom2top() {
	    var me = this;
	    var bb = me.getBoundingBox();
	    me.eachNode(function (node) {
	      node.y = node.y - (node.y - bb.top) * 2 - node.height;
	      // node.y = - node.y;
	    });
	    me.translate(0, bb.height);
	  }
	});

	function hierarchy(data) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var isolated = arguments[2];

	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  var root = new Node(data, options);
	  var nodes = [root];
	  var node = void 0;
	  if (!isolated && !data.collapsed) {
	    while (node = nodes.pop()) {
	      if (!node.data.collapsed) {
	        var children = options.getChildren(node.data);
	        var length = children ? children.length : 0;
	        node.children = new Array(length);
	        if (children && length) {
	          for (var i = 0; i < length; i++) {
	            var child = new Node(children[i], options);
	            node.children[i] = child;
	            nodes.push(child);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	        }
	      }
	    }
	  }
	  return root;
	}

	module.exports = hierarchy;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var hierarchy = __webpack_require__(53);

	module.exports = function (root, options) {
	  // separate into left and right trees
	  var left = hierarchy(root.data, options, true); // root only
	  var right = hierarchy(root.data, options, true); // root only
	  // automatically
	  var treeSize = root.children.length;
	  var rightTreeSize = Math.round(treeSize / 2);
	  // separate left and right tree by meta data
	  var getSide = options.getSide || function (child, index) {
	    if (index < rightTreeSize) {
	      return 'right';
	    }
	    return 'left';
	  };
	  for (var i = 0; i < treeSize; i++) {
	    var child = root.children[i];
	    var side = getSide(child, i);
	    if (side === 'right') {
	      right.children.push(child);
	    } else {
	      left.children.push(child);
	    }
	  }
	  left.eachNode(function (node) {
	    if (!node.isRoot()) {
	      node.side = 'left';
	    }
	  });
	  right.eachNode(function (node) {
	    if (!node.isRoot()) {
	      node.side = 'right';
	    }
	  });
	  return {
	    left: left,
	    right: right
	  };
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(43);

	var indexOf = Array.prototype.indexOf;

	var contains = function contains(arr, value) {
	  if (!isArrayLike(arr)) {
	    return false;
	  }
	  return indexOf.call(arr, value) > -1;
	};

	module.exports = contains;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @param {Array} arr The array to flatten.
	 * @param {Array} result The array to return.
	 * @return {Array} Returns the new flattened array.
	 * @example
	 *
	 * flattenDeep([1, [2, [3, [4]], 5]]);  // => [1, 2, 3, 4, 5]
	 */
	var flattenDeep = function flattenDeep(arr) {
	  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  if (!isArray(arr)) {
	    result.push(arr);
	  } else {
	    for (var i = 0; i < arr.length; i += 1) {
	      flattenDeep(arr[i], result);
	    }
	  }
	  return result;
	};

	module.exports = flattenDeep;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(19);
	var isNil = __webpack_require__(35);

	function isMatch(obj, attrs) {
	  var _keys = keys(attrs);
	  var length = _keys.length;
	  if (isNil(obj)) return !length;
	  for (var i = 0; i < length; i += 1) {
	    var key = _keys[i];
	    if (attrs[key] !== obj[key] || !(key in obj)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isMatch;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-geo-projection/ Version 2.1.2. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(59), __webpack_require__(23)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3));
	}(this, (function (exports,d3Geo,d3Array) { 'use strict';

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;

	var cos = Math.cos;
	var exp = Math.exp;
	var floor = Math.floor;
	var log = Math.log;
	var max = Math.max;
	var min = Math.min;
	var pow = Math.pow;
	var round = Math.round;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sin = Math.sin;
	var tan = Math.tan;

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var quarterPi = pi / 4;
	var sqrt1_2 = Math.SQRT1_2;
	var sqrt2 = sqrt(2);
	var sqrtPi = sqrt(pi);
	var tau = pi * 2;
	var degrees = 180 / pi;
	var radians = pi / 180;

	function sinci(x) {
	  return x ? x / Math.sin(x) : 1;
	}

	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function sqrt(x) {
	  return x > 0 ? Math.sqrt(x) : 0;
	}

	function tanh(x) {
	  x = exp(2 * x);
	  return (x - 1) / (x + 1);
	}

	function sinh(x) {
	  return (exp(x) - exp(-x)) / 2;
	}

	function cosh(x) {
	  return (exp(x) + exp(-x)) / 2;
	}

	function arsinh(x) {
	  return log(x + sqrt(x * x + 1));
	}

	function arcosh(x) {
	  return log(x + sqrt(x * x - 1));
	}

	function airyRaw(beta) {
	  var tanBeta_2 = tan(beta / 2),
	      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);

	  function forward(x, y) {
	    var cosx = cos(x),
	        cosy = cos(y),
	        siny = sin(y),
	        cosz = cosy * cosx,
	        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));
	    return [k * cosy * sin(x), k * siny];
	  }

	  forward.invert = function(x, y) {
	    var r = sqrt(x * x + y * y),
	        z = -beta / 2,
	        i = 50, delta;
	    if (!r) return [0, 0];
	    do {
	      var z_2 = z / 2,
	          cosz_2 = cos(z_2),
	          sinz_2 = sin(z_2),
	          tanz_2 = tan(z_2),
	          lnsecz_2 = log(1 / cosz_2);
	      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));
	    } while (abs(delta) > epsilon && --i > 0);
	    var sinz = sin(z);
	    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];
	  };

	  return forward;
	}

	var airy = function() {
	  var beta = halfPi,
	      m = d3Geo.geoProjectionMutator(airyRaw),
	      p = m(beta);

	  p.radius = function(_) {
	    return arguments.length ? m(beta = _ * radians) : beta * degrees;
	  };

	  return p
	      .scale(179.976)
	      .clipAngle(147);
	};

	function aitoffRaw(x, y) {
	  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));
	  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];
	}

	// Abort if [x, y] is not within an ellipse centered at [0, 0] with
	// semi-major axis pi and semi-minor axis pi/2.
	aitoffRaw.invert = function(x, y) {
	  if (x * x + 4 * y * y > pi * pi + epsilon) return;
	  var x1 = x, y1 = y, i = 25;
	  do {
	    var sinx = sin(x1),
	        sinx_2 = sin(x1 / 2),
	        cosx_2 = cos(x1 / 2),
	        siny = sin(y1),
	        cosy = cos(y1),
	        sin_2y = sin(2 * y1),
	        sin2y = siny * siny,
	        cos2y = cosy * cosy,
	        sin2x_2 = sinx_2 * sinx_2,
	        c = 1 - cos2y * cosx_2 * cosx_2,
	        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,
	        f,
	        fx = 2 * e * cosy * sinx_2 - x,
	        fy = e * siny - y,
	        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),
	        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),
	        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),
	        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),
	        z = dxdy * dydx - dydy * dxdx;
	    if (!z) break;
	    var dx = (fy * dxdy - fx * dydy) / z,
	        dy = (fx * dydx - fy * dxdx) / z;
	    x1 -= dx, y1 -= dy;
	  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);
	  return [x1, y1];
	};

	var aitoff = function() {
	  return d3Geo.geoProjection(aitoffRaw)
	      .scale(152.63);
	};

	function armadilloRaw(phi0) {
	  var sinPhi0 = sin(phi0),
	      cosPhi0 = cos(phi0),
	      sPhi0 = phi0 >= 0 ? 1 : -1,
	      tanPhi0 = tan(sPhi0 * phi0),
	      k = (1 + sinPhi0 - cosPhi0) / 2;

	  function forward(lambda, phi) {
	    var cosPhi = cos(phi),
	        cosLambda = cos(lambda /= 2);
	    return [
	      (1 + cosPhi) * sin(lambda),
	      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.
	    ];
	  }

	  forward.invert = function(x, y) {
	    var lambda = 0,
	        phi = 0,
	        i = 50;
	    do {
	      var cosLambda = cos(lambda),
	          sinLambda = sin(lambda),
	          cosPhi = cos(phi),
	          sinPhi = sin(phi),
	          A = 1 + cosPhi,
	          fx = A * sinLambda - x,
	          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,
	          dxdLambda = A * cosLambda / 2,
	          dxdPhi = -sinLambda * sinPhi,
	          dydLambda = sinPhi0 * A * sinLambda / 2,
	          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,
	          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,
	          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,
	          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;
	      lambda -= dLambda, phi -= dPhi;
	    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);
	    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;
	  };

	  return forward;
	}

	var armadillo = function() {
	  var phi0 = 20 * radians,
	      sPhi0 = phi0 >= 0 ? 1 : -1,
	      tanPhi0 = tan(sPhi0 * phi0),
	      m = d3Geo.geoProjectionMutator(armadilloRaw),
	      p = m(phi0),
	      stream_ = p.stream;

	  p.parallel = function(_) {
	    if (!arguments.length) return phi0 * degrees;
	    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);
	    return m(phi0);
	  };

	  p.stream = function(stream) {
	    var rotate = p.rotate(),
	        rotateStream = stream_(stream),
	        sphereStream = (p.rotate([0, 0]), stream_(stream));
	    p.rotate(rotate);
	    rotateStream.sphere = function() {
	      sphereStream.polygonStart(), sphereStream.lineStart();
	      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);
	      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?
	        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);
	      }
	      sphereStream.lineEnd(), sphereStream.polygonEnd();
	    };
	    return rotateStream;
	  };

	  return p
	      .scale(218.695)
	      .center([0, 28.0974]);
	};

	function augustRaw(lambda, phi) {
	  var tanPhi = tan(phi / 2),
	      k = sqrt(1 - tanPhi * tanPhi),
	      c = 1 + k * cos(lambda /= 2),
	      x = sin(lambda) * k / c,
	      y = tanPhi / c,
	      x2 = x * x,
	      y2 = y * y;
	  return [
	    4 / 3 * x * (3 + x2 - 3 * y2),
	    4 / 3 * y * (3 + 3 * x2 - y2)
	  ];
	}

	augustRaw.invert = function(x, y) {
	  x *= 3 / 8, y *= 3 / 8;
	  if (!x && abs(y) > 1) return null;
	  var x2 = x * x,
	      y2 = y * y,
	      s = 1 + x2 + y2,
	      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),
	      eta = asin(sin3Eta) / 3,
	      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,
	      cosEta = cos(eta),
	      coshXi = cosh(xi),
	      d = coshXi * coshXi - cosEta * cosEta;
	  return [
	    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),
	    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)
	  ];
	};

	var august = function() {
	  return d3Geo.geoProjection(augustRaw)
	      .scale(66.1603);
	};

	var sqrt8 = sqrt(8);
	var phi0 = log(1 + sqrt2);

	function bakerRaw(lambda, phi) {
	  var phi0 = abs(phi);
	  return phi0 < quarterPi
	      ? [lambda, log(tan(quarterPi + phi / 2))]
	      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];
	}

	bakerRaw.invert = function(x, y) {
	  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];
	  var phi = quarterPi, i = 25, delta, y0;
	  do {
	    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);
	    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));
	  } while (abs(delta) > epsilon2 && --i > 0);
	  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];
	};

	var baker = function() {
	  return d3Geo.geoProjection(bakerRaw)
	      .scale(112.314);
	};

	function berghausRaw(lobes) {
	  var k = 2 * pi / lobes;

	  function forward(lambda, phi) {
	    var p = d3Geo.geoAzimuthalEquidistantRaw(lambda, phi);
	    if (abs(lambda) > halfPi) { // back hemisphere
	      var theta = atan2(p[1], p[0]),
	          r = sqrt(p[0] * p[0] + p[1] * p[1]),
	          theta0 = k * round((theta - halfPi) / k) + halfPi,
	          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end
	      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;
	      p[0] = r * cos(theta);
	      p[1] = r * sin(theta);
	    }
	    return p;
	  }

	  forward.invert = function(x, y) {
	    var r = sqrt(x * x + y * y);
	    if (r > halfPi) {
	      var theta = atan2(y, x),
	          theta0 = k * round((theta - halfPi) / k) + halfPi,
	          s = theta > theta0 ? -1 : 1,
	          A = r * cos(theta0 - theta),
	          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));
	      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);
	      x = r * cos(theta), y = r * sin(theta);
	    }
	    return d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
	  };

	  return forward;
	}

	var berghaus = function() {
	  var lobes = 5,
	      m = d3Geo.geoProjectionMutator(berghausRaw),
	      p = m(lobes),
	      projectionStream = p.stream,
	      epsilon$$1 = 1e-2,
	      cr = -cos(epsilon$$1 * radians),
	      sr = sin(epsilon$$1 * radians);

	  p.lobes = function(_) {
	    return arguments.length ? m(lobes = +_) : lobes;
	  };

	  p.stream = function(stream) {
	    var rotate = p.rotate(),
	        rotateStream = projectionStream(stream),
	        sphereStream = (p.rotate([0, 0]), projectionStream(stream));
	    p.rotate(rotate);
	    rotateStream.sphere = function() {
	      sphereStream.polygonStart(), sphereStream.lineStart();
	      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {
	        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);
	        if (phi < -90) {
	          sphereStream.point(-90, -180 - phi - epsilon$$1);
	          sphereStream.point(-90, -180 - phi + epsilon$$1);
	        } else {
	          sphereStream.point(90, phi + epsilon$$1);
	          sphereStream.point(90, phi - epsilon$$1);
	        }
	      }
	      sphereStream.lineEnd(), sphereStream.polygonEnd();
	    };
	    return rotateStream;
	  };

	  return p
	      .scale(87.8076)
	      .center([0, 17.1875])
	      .clipAngle(180 - 1e-3);
	};

	function mollweideBromleyTheta(cp, phi) {
	  var cpsinPhi = cp * sin(phi), i = 30, delta;
	  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));
	  while (abs(delta) > epsilon && --i > 0);
	  return phi / 2;
	}

	function mollweideBromleyRaw(cx, cy, cp) {

	  function forward(lambda, phi) {
	    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];
	  }

	  forward.invert = function(x, y) {
	    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];
	  };

	  return forward;
	}

	var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);

	var mollweide = function() {
	  return d3Geo.geoProjection(mollweideRaw)
	      .scale(169.529);
	};

	var k = 2.00276;
	var w = 1.11072;

	function boggsRaw(lambda, phi) {
	  var theta = mollweideBromleyTheta(pi, phi);
	  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];
	}

	boggsRaw.invert = function(x, y) {
	  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;
	  do {
	    phi = ky - sqrt2 * sin(theta);
	    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));
	  } while (abs(delta) > epsilon && --i > 0);
	  phi = ky - sqrt2 * sin(theta);
	  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];
	};

	var boggs = function() {
	  return d3Geo.geoProjection(boggsRaw)
	      .scale(160.857);
	};

	var parallel1 = function(projectAt) {
	  var phi0 = 0,
	      m = d3Geo.geoProjectionMutator(projectAt),
	      p = m(phi0);

	  p.parallel = function(_) {
	    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;
	  };

	  return p;
	};

	function sinusoidalRaw(lambda, phi) {
	  return [lambda * cos(phi), phi];
	}

	sinusoidalRaw.invert = function(x, y) {
	  return [x / cos(y), y];
	};

	var sinusoidal = function() {
	  return d3Geo.geoProjection(sinusoidalRaw)
	      .scale(152.63);
	};

	function bonneRaw(phi0) {
	  if (!phi0) return sinusoidalRaw;
	  var cotPhi0 = 1 / tan(phi0);

	  function forward(lambda, phi) {
	    var rho = cotPhi0 + phi0 - phi,
	        e = rho ? lambda * cos(phi) / rho : rho;
	    return [rho * sin(e), cotPhi0 - rho * cos(e)];
	  }

	  forward.invert = function(x, y) {
	    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),
	        phi = cotPhi0 + phi0 - rho;
	    return [rho / cos(phi) * atan2(x, y), phi];
	  };

	  return forward;
	}

	var bonne = function() {
	  return parallel1(bonneRaw)
	      .scale(123.082)
	      .center([0, 26.1441])
	      .parallel(45);
	};

	function bottomleyRaw(sinPsi) {

	  function forward(lambda, phi) {
	    var rho = halfPi - phi,
	        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;
	    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];
	  }

	  forward.invert = function(x, y) {
	    var x1 = x * sinPsi,
	        y1 = halfPi - y,
	        rho = sqrt(x1 * x1 + y1 * y1),
	        eta = atan2(x1, y1);
	    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];
	  };

	  return forward;
	}

	var bottomley = function() {
	  var sinPsi = 0.5,
	      m = d3Geo.geoProjectionMutator(bottomleyRaw),
	      p = m(sinPsi);

	  p.fraction = function(_) {
	    return arguments.length ? m(sinPsi = +_) : sinPsi;
	  };

	  return p
	      .scale(158.837);
	};

	var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);

	var bromley = function() {
	  return d3Geo.geoProjection(bromleyRaw)
	      .scale(152.63);
	};

	// Azimuthal distance.
	function distance(dPhi, c1, s1, c2, s2, dLambda) {
	  var cosdLambda = cos(dLambda), r;
	  if (abs(dPhi) > 1 || abs(dLambda) > 1) {
	    r = acos(s1 * s2 + c1 * c2 * cosdLambda);
	  } else {
	    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);
	    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));
	  }
	  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];
	}

	// Angle opposite a, and contained between sides of lengths b and c.
	function angle(b, c, a) {
	  return acos((b * b + c * c - a * a) / (2 * b * c));
	}

	// Normalize longitude.
	function longitude(lambda) {
	  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));
	}

	function chamberlinRaw(p0, p1, p2) {
	  var points = [
	    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],
	    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],
	    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]
	  ];

	  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {
	    b = points[i];
	    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
	    a.point = [0, 0];
	  }

	  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),
	      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),
	      beta2 = pi - beta0;

	  points[2].point[1] = 0;
	  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);

	  var mean = [
	    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),
	    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))
	  ];

	  function forward(lambda, phi) {
	    var sinPhi = sin(phi),
	        cosPhi = cos(phi),
	        v = new Array(3), i;

	    // Compute distance and azimuth from control points.
	    for (i = 0; i < 3; ++i) {
	      var p = points[i];
	      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);
	      if (!v[i][0]) return p.point;
	      v[i][1] = longitude(v[i][1] - p.v[1]);
	    }

	    // Arithmetic mean of interception points.
	    var point = mean.slice();
	    for (i = 0; i < 3; ++i) {
	      var j = i == 2 ? 0 : i + 1;
	      var a = angle(points[i].v[0], v[i][0], v[j][0]);
	      if (v[i][1] < 0) a = -a;

	      if (!i) {
	        point[0] += v[i][0] * cos(a);
	        point[1] -= v[i][0] * sin(a);
	      } else if (i == 1) {
	        a = beta1 - a;
	        point[0] -= v[i][0] * cos(a);
	        point[1] -= v[i][0] * sin(a);
	      } else {
	        a = beta2 - a;
	        point[0] += v[i][0] * cos(a);
	        point[1] += v[i][0] * sin(a);
	      }
	    }

	    point[0] /= 3, point[1] /= 3;
	    return point;
	  }

	  return forward;
	}

	function pointRadians(p) {
	  return p[0] *= radians, p[1] *= radians, p;
	}

	function chamberlinAfrica() {
	  return chamberlin([0, 22], [45, 22], [22.5, -22])
	      .scale(380)
	      .center([22.5, 2]);
	}

	function chamberlin(p0, p1, p2) { // TODO order matters!
	  var c = d3Geo.geoCentroid({type: "MultiPoint", coordinates: [p0, p1, p2]}),
	      R = [-c[0], -c[1]],
	      r = d3Geo.geoRotation(R),
	      p = d3Geo.geoProjection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),
	      center = p.center;

	  delete p.rotate;

	  p.center = function(_) {
	    return arguments.length ? center(r(_)) : r.invert(center());
	  };

	  return p
	      .clipAngle(90);
	}

	function collignonRaw(lambda, phi) {
	  var alpha = sqrt(1 - sin(phi));
	  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];
	}

	collignonRaw.invert = function(x, y) {
	  var lambda = (lambda = y / sqrtPi - 1) * lambda;
	  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];
	};

	var collignon = function() {
	  return d3Geo.geoProjection(collignonRaw)
	      .scale(95.6464)
	      .center([0, 30]);
	};

	function craigRaw(phi0) {
	  var tanPhi0 = tan(phi0);

	  function forward(lambda, phi) {
	    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];
	  }

	  forward.invert = tanPhi0 ? function(x, y) {
	    if (x) y *= sin(x) / x;
	    var cosLambda = cos(x);
	    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];
	  } : function(x, y) {
	    return [x, asin(x ? y * tan(x) / x : y)];
	  };

	  return forward;
	}

	var craig = function() {
	  return parallel1(craigRaw)
	      .scale(249.828)
	      .clipAngle(90);
	};

	var sqrt3 = sqrt(3);

	function crasterRaw(lambda, phi) {
	  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];
	}

	crasterRaw.invert = function(x, y) {
	  var phi = 3 * asin(y / (sqrt3 * sqrtPi));
	  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];
	};

	var craster = function() {
	  return d3Geo.geoProjection(crasterRaw)
	      .scale(156.19);
	};

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	var cylindricalEqualArea = function() {
	  return parallel1(cylindricalEqualAreaRaw)
	      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians
	      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)
	};

	function cylindricalStereographicRaw(phi0) {
	  var cosPhi0 = cos(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];
	  };

	  return forward;
	}

	var cylindricalStereographic = function() {
	  return parallel1(cylindricalStereographicRaw)
	      .scale(124.75);
	};

	function eckert1Raw(lambda, phi) {
	  var alpha = sqrt(8 / (3 * pi));
	  return [
	    alpha * lambda * (1 - abs(phi) / pi),
	    alpha * phi
	  ];
	}

	eckert1Raw.invert = function(x, y) {
	  var alpha = sqrt(8 / (3 * pi)),
	      phi = y / alpha;
	  return [
	    x / (alpha * (1 - abs(phi) / pi)),
	    phi
	  ];
	};

	var eckert1 = function() {
	  return d3Geo.geoProjection(eckert1Raw)
	      .scale(165.664);
	};

	function eckert2Raw(lambda, phi) {
	  var alpha = sqrt(4 - 3 * sin(abs(phi)));
	  return [
	    2 / sqrt(6 * pi) * lambda * alpha,
	    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)
	  ];
	}

	eckert2Raw.invert = function(x, y) {
	  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);
	  return [
	    x * sqrt(6 * pi) / (2 * alpha),
	    sign(y) * asin((4 - alpha * alpha) / 3)
	  ];
	};

	var eckert2 = function() {
	  return d3Geo.geoProjection(eckert2Raw)
	      .scale(165.664);
	};

	function eckert3Raw(lambda, phi) {
	  var k = sqrt(pi * (4 + pi));
	  return [
	    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),
	    4 / k * phi
	  ];
	}

	eckert3Raw.invert = function(x, y) {
	  var k = sqrt(pi * (4 + pi)) / 2;
	  return [
	    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),
	    y * k / 2
	  ];
	};

	var eckert3 = function() {
	  return d3Geo.geoProjection(eckert3Raw)
	      .scale(180.739);
	};

	function eckert4Raw(lambda, phi) {
	  var k = (2 + halfPi) * sin(phi);
	  phi /= 2;
	  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {
	    var cosPhi = cos(phi);
	    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));
	  }
	  return [
	    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),
	    2 * sqrt(pi / (4 + pi)) * sin(phi)
	  ];
	}

	eckert4Raw.invert = function(x, y) {
	  var A = y * sqrt((4 + pi) / pi) / 2,
	      k = asin(A),
	      c = cos(k);
	  return [
	    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),
	    asin((k + A * (c + 2)) / (2 + halfPi))
	  ];
	};

	var eckert4 = function() {
	  return d3Geo.geoProjection(eckert4Raw)
	      .scale(180.739);
	};

	function eckert5Raw(lambda, phi) {
	  return [
	    lambda * (1 + cos(phi)) / sqrt(2 + pi),
	    2 * phi / sqrt(2 + pi)
	  ];
	}

	eckert5Raw.invert = function(x, y) {
	  var k = sqrt(2 + pi),
	      phi = y * k / 2;
	  return [
	    k * x / (1 + cos(phi)),
	    phi
	  ];
	};

	var eckert5 = function() {
	  return d3Geo.geoProjection(eckert5Raw)
	      .scale(173.044);
	};

	function eckert6Raw(lambda, phi) {
	  var k = (1 + halfPi) * sin(phi);
	  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {
	    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));
	  }
	  k = sqrt(2 + pi);
	  return [
	    lambda * (1 + cos(phi)) / k,
	    2 * phi / k
	  ];
	}

	eckert6Raw.invert = function(x, y) {
	  var j = 1 + halfPi,
	      k = sqrt(j / 2);
	  return [
	    x * 2 * k / (1 + cos(y *= k)),
	    asin((y + sin(y)) / j)
	  ];
	};

	var eckert6 = function() {
	  return d3Geo.geoProjection(eckert6Raw)
	      .scale(173.044);
	};

	var eisenlohrK = 3 + 2 * sqrt2;

	function eisenlohrRaw(lambda, phi) {
	  var s0 = sin(lambda /= 2),
	      c0 = cos(lambda),
	      k = sqrt(cos(phi)),
	      c1 = cos(phi /= 2),
	      t = sin(phi) / (c1 + sqrt2 * c0 * k),
	      c = sqrt(2 / (1 + t * t)),
	      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));
	  return [
	    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),
	    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))
	  ];
	}

	eisenlohrRaw.invert = function(x, y) {
	  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;
	  var lambda = p[0], phi = p[1], i = 20, p;
	  x /= eisenlohrK, y /= eisenlohrK;
	  do {
	    var _0 = lambda / 2,
	        _1 = phi / 2,
	        s0 = sin(_0),
	        c0 = cos(_0),
	        s1 = sin(_1),
	        c1 = cos(_1),
	        cos1 = cos(phi),
	        k = sqrt(cos1),
	        t = s1 / (c1 + sqrt2 * c0 * k),
	        t2 = t * t,
	        c = sqrt(2 / (1 + t2)),
	        v0 = (sqrt2 * c1 + (c0 + s0) * k),
	        v1 = (sqrt2 * c1 + (c0 - s0) * k),
	        v2 = v0 / v1,
	        v = sqrt(v2),
	        vm1v = v - 1 / v,
	        vp1v = v + 1 / v,
	        fx = c * vm1v - 2 * log(v) - x,
	        fy = c * t * vp1v - 2 * atan(t) - y,
	        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,
	        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),
	        deltacDeltat = -0.5 * t * c * c * c,
	        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,
	        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,
	        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,
	        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,
	        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),
	        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),
	        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),
	        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),
	        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),
	        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
	    if (!denominator) break;
	    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
	        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
	    lambda -= deltaLambda;
	    phi = max(-halfPi, min(halfPi, phi - deltaPhi));
	  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
	  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];
	};

	var eisenlohr = function() {
	  return d3Geo.geoProjection(eisenlohrRaw)
	      .scale(62.5271);
	};

	var faheyK = cos(35 * radians);

	function faheyRaw(lambda, phi) {
	  var t = tan(phi / 2);
	  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];
	}

	faheyRaw.invert = function(x, y) {
	  var t = y / (1 + faheyK);
	  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];
	};

	var fahey = function() {
	  return d3Geo.geoProjection(faheyRaw)
	      .scale(137.152);
	};

	function foucautRaw(lambda, phi) {
	  var k = phi / 2, cosk = cos(k);
	  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];
	}

	foucautRaw.invert = function(x, y) {
	  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;
	  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];
	};

	var foucaut = function() {
	  return d3Geo.geoProjection(foucautRaw)
	      .scale(135.264);
	};

	function gilbertForward(point) {
	  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];
	}

	function gilbertInvert(point) {
	  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];
	}

	var gilbert = function(projectionType) {
	  if (projectionType == null) projectionType = d3Geo.geoOrthographic;
	  var projection = projectionType(),
	      equirectangular = d3Geo.geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting

	  function gilbert(point) {
	    return projection(gilbertForward(point));
	  }

	  if (projection.invert) gilbert.invert = function(point) {
	    return gilbertInvert(projection.invert(point));
	  };

	  gilbert.stream = function(stream) {
	    var s1 = projection.stream(stream), s0 = equirectangular.stream({
	      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },
	      lineStart: function() { s1.lineStart(); },
	      lineEnd: function() { s1.lineEnd(); },
	      polygonStart: function() { s1.polygonStart(); },
	      polygonEnd: function() { s1.polygonEnd(); }
	    });
	    s0.sphere = s1.sphere;
	    return s0;
	  };

	  function property(name) {
	    gilbert[name] = function(_) {
	      return arguments.length ? (projection[name](_), gilbert) : projection[name]();
	    };
	  }

	  gilbert.rotate = function(_) {
	    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();
	  };

	  gilbert.center = function(_) {
	    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());
	  };

	  property("clipAngle");
	  property("clipExtent");
	  property("scale");
	  property("translate");
	  property("precision");

	  return gilbert
	      .scale(249.5);
	};

	function gingeryRaw(rho, n) {
	  var k = 2 * pi / n,
	      rho2 = rho * rho;

	  function forward(lambda, phi) {
	    var p = d3Geo.geoAzimuthalEquidistantRaw(lambda, phi),
	        x = p[0],
	        y = p[1],
	        r2 = x * x + y * y;

	    if (r2 > rho2) {
	      var r = sqrt(r2),
	          theta = atan2(y, x),
	          theta0 = k * round(theta / k),
	          alpha = theta - theta0,
	          rhoCosAlpha = rho * cos(alpha),
	          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),
	          s_ = gingeryLength(alpha, k_),
	          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);

	      x = r;
	      var i = 50, delta;
	      do {
	        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);
	      } while (abs(delta) > epsilon && --i > 0);

	      y = alpha * sin(x);
	      if (x < halfPi) y -= k_ * (x - halfPi);

	      var s = sin(theta0),
	          c = cos(theta0);
	      p[0] = x * c - y * s;
	      p[1] = x * s + y * c;
	    }
	    return p;
	  }

	  forward.invert = function(x, y) {
	    var r2 = x * x + y * y;
	    if (r2 > rho2) {
	      var r = sqrt(r2),
	          theta = atan2(y, x),
	          theta0 = k * round(theta / k),
	          dTheta = theta - theta0;

	      x = r * cos(dTheta);
	      y = r * sin(dTheta);

	      var x_halfPi = x - halfPi,
	          sinx = sin(x),
	          alpha = y / sinx,
	          delta = x < halfPi ? Infinity : 0,
	          i = 10;

	      while (true) {
	        var rhosinAlpha = rho * sin(alpha),
	            rhoCosAlpha = rho * cos(alpha),
	            sinRhoCosAlpha = sin(rhoCosAlpha),
	            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,
	            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,
	            s_ = gingeryLength(alpha, k_);

	        if (abs(delta) < epsilon2 || !--i) break;

	        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (
	          sinx - x_halfPi * 2 * (
	            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -
	            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)
	          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));
	      }
	      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);
	      theta = theta0 + alpha;
	      x = r * cos(theta);
	      y = r * sin(theta);
	    }
	    return d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
	  };

	  return forward;
	}

	function gingeryLength(alpha, k) {
	  return function(x) {
	    var y_ = alpha * cos(x);
	    if (x < halfPi) y_ -= k;
	    return sqrt(1 + y_ * y_);
	  };
	}

	// Numerical integration: trapezoidal rule.
	function gingeryIntegrate(f, a, b) {
	  var n = 50,
	      h = (b - a) / n,
	      s = f(a) + f(b);
	  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);
	  return s * 0.5 * h;
	}

	var gingery = function() {
	  var n = 6,
	      rho = 30 * radians,
	      cRho = cos(rho),
	      sRho = sin(rho),
	      m = d3Geo.geoProjectionMutator(gingeryRaw),
	      p = m(rho, n),
	      stream_ = p.stream,
	      epsilon$$1 = 1e-2,
	      cr = -cos(epsilon$$1 * radians),
	      sr = sin(epsilon$$1 * radians);

	  p.radius = function(_) {
	    if (!arguments.length) return rho * degrees;
	    cRho = cos(rho = _ * radians);
	    sRho = sin(rho);
	    return m(rho, n);
	  };

	  p.lobes = function(_) {
	    if (!arguments.length) return n;
	    return m(rho, n = +_);
	  };

	  p.stream = function(stream) {
	    var rotate = p.rotate(),
	        rotateStream = stream_(stream),
	        sphereStream = (p.rotate([0, 0]), stream_(stream));
	    p.rotate(rotate);
	    rotateStream.sphere = function() {
	      sphereStream.polygonStart(), sphereStream.lineStart();
	      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {
	        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);
	        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);
	      }
	      sphereStream.lineEnd(), sphereStream.polygonEnd();
	    };
	    return rotateStream;
	  };

	  return p
	      .rotate([90, -40])
	      .scale(91.7095)
	      .clipAngle(180 - 1e-3);
	};

	var ginzburgPolyconicRaw = function(a, b, c, d, e, f, g, h) {
	  if (arguments.length < 8) h = 0;

	  function forward(lambda, phi) {
	    if (!phi) return [a * lambda / pi, 0];
	    var phi2 = phi * phi,
	        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
	        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
	        m = (xB * xB + yB * yB) / (2 * yB),
	        alpha = lambda * asin(xB / m) / pi;
	    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];
	  }

	  forward.invert = function(x, y) {
	    var lambda = pi * x / a,
	        phi = y,
	        deltaLambda, deltaPhi, i = 50;
	    do {
	      var phi2 = phi * phi,
	          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),
	          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),
	          p = xB * xB + yB * yB,
	          q = 2 * yB,
	          m = p / q,
	          m2 = m * m,
	          dAlphadLambda = asin(xB / m) / pi,
	          alpha = lambda * dAlphadLambda,
	          xB2 = xB * xB,
	          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,
	          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),
	          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),
	          dqdPhi = 2 * (dyBdPhi - 1),
	          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),
	          cosAlpha = cos(alpha),
	          sinAlpha = sin(alpha),
	          mcosAlpha = m * cosAlpha,
	          msinAlpha = m * sinAlpha,
	          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,
	          fx = msinAlpha - x,
	          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,
	          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,
	          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,
	          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),
	          deltayDeltaLambda = msinAlpha * dAlphadLambda,
	          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
	      if (!denominator) break;
	      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;
	      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
	    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
	    return [lambda, phi];
	  };

	  return forward;
	};

	var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);

	var ginzburg4 = function() {
	  return d3Geo.geoProjection(ginzburg4Raw)
	      .scale(149.995);
	};

	var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);

	var ginzburg5 = function() {
	  return d3Geo.geoProjection(ginzburg5Raw)
	      .scale(153.93);
	};

	var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);

	var ginzburg6 = function() {
	  return d3Geo.geoProjection(ginzburg6Raw)
	      .scale(130.945);
	};

	function ginzburg8Raw(lambda, phi) {
	  var lambda2 = lambda * lambda,
	      phi2 = phi * phi;
	  return [
	    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),
	    phi * (1 + phi2 / 12)
	  ];
	}

	ginzburg8Raw.invert = function(x, y) {
	  var lambda = x,
	      phi = y,
	      i = 50, delta;
	  do {
	    var phi2 = phi * phi;
	    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);
	  } while (abs(delta) > epsilon && --i > 0);
	  i = 50;
	  x /= 1 -0.162388 * phi2;
	  do {
	    var lambda4 = (lambda4 = lambda * lambda) * lambda4;
	    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);
	  } while (abs(delta) > epsilon && --i > 0);
	  return [lambda, phi];
	};

	var ginzburg8 = function() {
	  return d3Geo.geoProjection(ginzburg8Raw)
	      .scale(131.747);
	};

	var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);

	var ginzburg9 = function() {
	  return d3Geo.geoProjection(ginzburg9Raw)
	      .scale(131.087);
	};

	var squareRaw = function(project) {
	  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];

	  function projectSquare(lambda, phi) {
	    var s = lambda > 0 ? -0.5 : 0.5,
	        point = project(lambda + s * pi, phi);
	    point[0] -= s * dx;
	    return point;
	  }

	  if (project.invert) projectSquare.invert = function(x, y) {
	    var s = x > 0 ? -0.5 : 0.5,
	        location = project.invert(x + s * dx, y),
	        lambda = location[0] - s * pi;
	    if (lambda < -pi) lambda += 2 * pi;
	    else if (lambda > pi) lambda -= 2 * pi;
	    location[0] = lambda;
	    return location;
	  };

	  return projectSquare;
	};

	function gringortenRaw(lambda, phi) {
	  var sLambda = sign(lambda),
	      sPhi = sign(phi),
	      cosPhi = cos(phi),
	      x = cos(lambda) * cosPhi,
	      y = sin(lambda) * cosPhi,
	      z = sin(sPhi * phi);
	  lambda = abs(atan2(y, z));
	  phi = asin(x);
	  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;
	  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);
	  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;
	  return (point[0] *= sLambda, point[1] *= -sPhi, point);
	}

	gringortenRaw.invert = function(x, y) {
	  if (abs(x) > 1) x = sign(x) * 2 - x;
	  if (abs(y) > 1) y = sign(y) * 2 - y;
	  var sx = sign(x),
	      sy = sign(y),
	      x0 = -sx * x,
	      y0 = -sy * y,
	      t = y0 / x0 < 1,
	      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),
	      lambda = p[0],
	      phi = p[1],
	      cosPhi = cos(phi);
	  if (t) lambda = -halfPi - lambda;
	  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];
	};

	function gringortenHexadecant(lambda, phi) {
	  if (phi === halfPi) return [0, 0];

	  var sinPhi = sin(phi),
	      r = sinPhi * sinPhi,
	      r2 = r * r,
	      j = 1 + r2,
	      k = 1 + 3 * r2,
	      q = 1 - r2,
	      z = asin(1 / sqrt(j)),
	      v = q + r * j * z,
	      p2 = (1 - sinPhi) / v,
	      p = sqrt(p2),
	      a2 = p2 * j,
	      a = sqrt(a2),
	      h = p * q,
	      x,
	      i;

	  if (lambda === 0) return [0, -(h + r * a)];

	  var cosPhi = cos(phi),
	      secPhi = 1 / cosPhi,
	      drdPhi = 2 * sinPhi * cosPhi,
	      dvdPhi = (-3 * r + z * k) * drdPhi,
	      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
	      dpdPhi = (0.5 * dp2dPhi) / p,
	      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,
	      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,
	      mu = -secPhi * drdPhi,
	      nu = -secPhi * dra2dPhi,
	      zeta = -2 * secPhi * dhdPhi,
	      lambda1 = 4 * lambda / pi,
	      delta;

	  // Slower but accurate bisection method.
	  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {
	    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);
	    if (lambda > pi / 4) return [x, x];
	    var x1 = x, x0 = 0.5 * x;
	    x = 0.5 * (x0 + x1), i = 50;
	    do {
	      var g = sqrt(a2 - x * x),
	          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;
	      if (!f) break;
	      if (f < 0) x0 = x;
	      else x1 = x;
	      x = 0.5 * (x0 + x1);
	    } while (abs(x1 - x0) > epsilon && --i > 0);
	  }

	  // Newton-Raphson.
	  else {
	    x = epsilon, i = 25;
	    do {
	      var x2 = x * x,
	          g2 = sqrt(a2 - x2),
	          zetaMug = zeta + mu * g2,
	          f2 = x * zetaMug + nu * asin(x / a) - lambda1,
	          df = zetaMug + (nu - mu * x2) / g2;
	      x -= delta = g2 ? f2 / df : 0;
	    } while (abs(delta) > epsilon && --i > 0);
	  }

	  return [x, -h - r * sqrt(a2 - x * x)];
	}

	function gringortenHexadecantInvert(x, y) {
	  var x0 = 0,
	      x1 = 1,
	      r = 0.5,
	      i = 50;

	  while (true) {
	    var r2 = r * r,
	        sinPhi = sqrt(r),
	        z = asin(1 / sqrt(1 + r2)),
	        v = (1 - r2) + r * (1 + r2) * z,
	        p2 = (1 - sinPhi) / v,
	        p = sqrt(p2),
	        a2 = p2 * (1 + r2),
	        h = p * (1 - r2),
	        g2 = a2 - x * x,
	        g = sqrt(g2),
	        y0 = y + h + r * g;
	    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;
	    if (y0 > 0) x0 = r;
	    else x1 = r;
	    r = 0.5 * (x0 + x1);
	  }

	  if (!i) return null;

	  var phi = asin(sinPhi),
	      cosPhi = cos(phi),
	      secPhi = 1 / cosPhi,
	      drdPhi = 2 * sinPhi * cosPhi,
	      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,
	      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),
	      dpdPhi = 0.5 * dp2dPhi / p,
	      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,
	      zeta = -2 * secPhi * dhdPhi,
	      mu = -secPhi * drdPhi,
	      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);

	  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];
	}

	var gringorten = function() {
	  return d3Geo.geoProjection(squareRaw(gringortenRaw))
	      .scale(239.75);
	};

	// Returns [sn, cn, dn](u + iv|m).
	function ellipticJi(u, v, m) {
	  var a, b, c;
	  if (!u) {
	    b = ellipticJ(v, 1 - m);
	    return [
	      [0, b[0] / b[1]],
	      [1 / b[1], 0],
	      [b[2] / b[1], 0]
	    ];
	  }
	  a = ellipticJ(u, m);
	  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];
	  b = ellipticJ(v, 1 - m);
	  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
	  return [
	    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],
	    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],
	    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]
	  ];
	}

	// Returns [sn, cn, dn, ph](u|m).
	function ellipticJ(u, m) {
	  var ai, b, phi, t, twon;
	  if (m < epsilon) {
	    t = sin(u);
	    b = cos(u);
	    ai = m * (u - t * b) / 4;
	    return [
	      t - ai * b,
	      b + ai * t,
	      1 - m * t * t / 2,
	      u - ai
	    ];
	  }
	  if (m >= 1 - epsilon) {
	    ai = (1 - m) / 4;
	    b = cosh(u);
	    t = tanh(u);
	    phi = 1 / b;
	    twon = b * sinh(u);
	    return [
	      t + ai * (twon - u) / (b * b),
	      phi - ai * t * phi * (twon - u),
	      phi + ai * t * phi * (twon + u),
	      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b
	    ];
	  }

	  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],
	      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],
	      i = 0;
	  b = sqrt(1 - m);
	  twon = 1;

	  while (abs(c[i] / a[i]) > epsilon && i < 8) {
	    ai = a[i++];
	    c[i] = (ai - b) / 2;
	    a[i] = (ai + b) / 2;
	    b = sqrt(ai * b);
	    twon *= 2;
	  }

	  phi = twon * a[i] * u;
	  do {
	    t = c[i] * sin(b = phi) / a[i];
	    phi = (asin(t) + phi) / 2;
	  } while (--i);

	  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];
	}

	// Calculate F(phi+iPsi|m).
	// See Abramowitz and Stegun, 17.4.11.
	function ellipticFi(phi, psi, m) {
	  var r = abs(phi),
	      i = abs(psi),
	      sinhPsi = sinh(i);
	  if (r) {
	    var cscPhi = 1 / sin(r),
	        cotPhi2 = 1 / (tan(r) * tan(r)),
	        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),
	        c = (m - 1) * cotPhi2,
	        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;
	    return [
	      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),
	      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)
	    ];
	  }
	  return [
	    0,
	    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)
	  ];
	}

	// Calculate F(phi|m) where m = k² = sin²α.
	// See Abramowitz and Stegun, 17.6.7.
	function ellipticF(phi, m) {
	  if (!m) return phi;
	  if (m === 1) return log(tan(phi / 2 + quarterPi));
	  var a = 1,
	      b = sqrt(1 - m),
	      c = sqrt(m);
	  for (var i = 0; abs(c) > epsilon; i++) {
	    if (phi % pi) {
	      var dPhi = atan(b * tan(phi) / a);
	      if (dPhi < 0) dPhi += pi;
	      phi += dPhi + ~~(phi / pi) * pi;
	    } else phi += phi;
	    c = (a + b) / 2;
	    b = sqrt(a * b);
	    c = ((a = c) - b) / 2;
	  }
	  return phi / (pow(2, i) * a);
	}

	function guyouRaw(lambda, phi) {
	  var k_ = (sqrt2 - 1) / (sqrt2 + 1),
	      k = sqrt(1 - k_ * k_),
	      K = ellipticF(halfPi, k * k),
	      f = -1,
	      psi = log(tan(pi / 4 + abs(phi) / 2)),
	      r = exp(f * psi) / sqrt(k_),
	      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),
	      t = ellipticFi(at[0], at[1], k * k);
	  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];
	}

	function guyouComplexAtan(x, y) {
	  var x2 = x * x,
	      y_1 = y + 1,
	      t = 1 - x2 - y * y;
	  return [
	   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),
	    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)
	  ];
	}

	function guyouComplexDivide(a, b) {
	  var denominator = b[0] * b[0] + b[1] * b[1];
	  return [
	    (a[0] * b[0] + a[1] * b[1]) / denominator,
	    (a[1] * b[0] - a[0] * b[1]) / denominator
	  ];
	}

	guyouRaw.invert = function(x, y) {
	  var k_ = (sqrt2 - 1) / (sqrt2 + 1),
	      k = sqrt(1 - k_ * k_),
	      K = ellipticF(halfPi, k * k),
	      f = -1,
	      j = ellipticJi(0.5 * K - y, -x, k * k),
	      tn = guyouComplexDivide(j[0], j[1]),
	      lambda = atan2(tn[1], tn[0]) / f;
	  return [
	    lambda,
	    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi
	  ];
	};

	var guyou = function() {
	  return d3Geo.geoProjection(squareRaw(guyouRaw))
	      .scale(151.496);
	};

	function hammerRaw(A, B) {
	  if (arguments.length < 2) B = A;
	  if (B === 1) return d3Geo.geoAzimuthalEqualAreaRaw;
	  if (B === Infinity) return hammerQuarticAuthalicRaw;

	  function forward(lambda, phi) {
	    var coordinates = d3Geo.geoAzimuthalEqualAreaRaw(lambda / B, phi);
	    coordinates[0] *= A;
	    return coordinates;
	  }

	  forward.invert = function(x, y) {
	    var coordinates = d3Geo.geoAzimuthalEqualAreaRaw.invert(x / A, y);
	    coordinates[0] *= B;
	    return coordinates;
	  };

	  return forward;
	}

	function hammerQuarticAuthalicRaw(lambda, phi) {
	  return [
	    lambda * cos(phi) / cos(phi /= 2),
	    2 * sin(phi)
	  ];
	}

	hammerQuarticAuthalicRaw.invert = function(x, y) {
	  var phi = 2 * asin(y / 2);
	  return [
	    x * cos(phi / 2) / cos(phi),
	    phi
	  ];
	};

	var hammer = function() {
	  var B = 2,
	      m = d3Geo.geoProjectionMutator(hammerRaw),
	      p = m(B);

	  p.coefficient = function(_) {
	    if (!arguments.length) return B;
	    return m(B = +_);
	  };

	  return p
	    .scale(169.529);
	};

	function hammerRetroazimuthalRaw(phi0) {
	  var sinPhi0 = sin(phi0),
	      cosPhi0 = cos(phi0),
	      rotate = hammerRetroazimuthalRotation(phi0);

	  rotate.invert = hammerRetroazimuthalRotation(-phi0);

	  function forward(lambda, phi) {
	    var p = rotate(lambda, phi);
	    lambda = p[0], phi = p[1];
	    var sinPhi = sin(phi),
	        cosPhi = cos(phi),
	        cosLambda = cos(lambda),
	        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),
	        sinz = sin(z),
	        K = abs(sinz) > epsilon ? z / sinz : 1;
	    return [
	      K * cosPhi0 * sin(lambda),
	      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere
	        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)
	    ];
	  }

	  forward.invert = function(x, y) {
	    var rho = sqrt(x * x + y * y),
	        sinz = -sin(rho),
	        cosz = cos(rho),
	        a = rho * cosz,
	        b = -y * sinz,
	        c = rho * sinPhi0,
	        d = sqrt(a * a + b * b - c * c),
	        phi = atan2(a * c + b * d, b * c - a * d),
	        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);
	    return rotate.invert(lambda, phi);
	  };

	  return forward;
	}

	// Latitudinal rotation by phi0.
	// Temporary hack until D3 supports arbitrary small-circle clipping origins.
	function hammerRetroazimuthalRotation(phi0) {
	  var sinPhi0 = sin(phi0),
	      cosPhi0 = cos(phi0);

	  return function(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi);
	    return [
	      atan2(y, x * cosPhi0 - z * sinPhi0),
	      asin(z * cosPhi0 + x * sinPhi0)
	    ];
	  };
	}

	var hammerRetroazimuthal = function() {
	  var phi0 = 0,
	      m = d3Geo.geoProjectionMutator(hammerRetroazimuthalRaw),
	      p = m(phi0),
	      rotate_ = p.rotate,
	      stream_ = p.stream,
	      circle = d3Geo.geoCircle();

	  p.parallel = function(_) {
	    if (!arguments.length) return phi0 * degrees;
	    var r = p.rotate();
	    return m(phi0 = _ * radians).rotate(r);
	  };

	  // Temporary hack; see hammerRetroazimuthalRotation.
	  p.rotate = function(_) {
	    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);
	    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);
	    circle.center([-_[0], -_[1]]);
	    return p;
	  };

	  p.stream = function(stream) {
	    stream = stream_(stream);
	    stream.sphere = function() {
	      stream.polygonStart();
	      var epsilon$$1 = 1e-2,
	          ring = circle.radius(90 - epsilon$$1)().coordinates[0],
	          n = ring.length - 1,
	          i = -1,
	          p;
	      stream.lineStart();
	      while (++i < n) stream.point((p = ring[i])[0], p[1]);
	      stream.lineEnd();
	      ring = circle.radius(90 + epsilon$$1)().coordinates[0];
	      n = ring.length - 1;
	      stream.lineStart();
	      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);
	      stream.lineEnd();
	      stream.polygonEnd();
	    };
	    return stream;
	  };

	  return p
	      .scale(79.4187)
	      .parallel(45)
	      .clipAngle(180 - 1e-3);
	};

	var healpixParallel = 41 + 48 / 36 + 37 / 3600;
	var healpixLambert = cylindricalEqualAreaRaw(0);

	function healpixRaw(H) {
	  var phi0 = healpixParallel * radians,
	      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],
	      y0 = healpixLambert(0, phi0)[1],
	      y1 = collignonRaw(0, phi0)[1],
	      dy1 = sqrtPi - y1,
	      k = tau / H,
	      w = 4 / tau,
	      h = y0 + (dy1 * dy1 * 4) / tau;

	  function forward(lambda, phi) {
	    var point,
	        phi2 = abs(phi);
	    if (phi2 > phi0) {
	      var i = min(H - 1, max(0, floor((lambda + pi) / k)));
	      lambda += pi * (H - 1) / H - i * k;
	      point = collignonRaw(lambda, phi2);
	      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;
	      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;
	      if (phi < 0) point[1] = -point[1];
	    } else {
	      point = healpixLambert(lambda, phi);
	    }
	    point[0] *= w, point[1] /= h;
	    return point;
	  }

	  forward.invert = function(x, y) {
	    x /= w, y *= h;
	    var y2 = abs(y);
	    if (y2 > y0) {
	      var i = min(H - 1, max(0, floor((x + pi) / k)));
	      x = (x + pi * (H - 1) / H - i * k) * dx / tau;
	      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);
	      point[0] -= pi * (H - 1) / H - i * k;
	      if (y < 0) point[1] = -point[1];
	      return point;
	    }
	    return healpixLambert.invert(x, y);
	  };

	  return forward;
	}

	function sphere(step) {
	  return {
	    type: "Polygon",
	    coordinates: [
	      d3Array.range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })
	      .concat(d3Array.range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))
	    ]
	  };
	}

	var healpix = function() {
	  var H = 4,
	      m = d3Geo.geoProjectionMutator(healpixRaw),
	      p = m(H),
	      stream_ = p.stream;

	  p.lobes = function(_) {
	    return arguments.length ? m(H = +_) : H;
	  };

	  p.stream = function(stream) {
	    var rotate = p.rotate(),
	        rotateStream = stream_(stream),
	        sphereStream = (p.rotate([0, 0]), stream_(stream));
	    p.rotate(rotate);
	    rotateStream.sphere = function() { d3Geo.geoStream(sphere(180 / H), sphereStream); };
	    return rotateStream;
	  };

	  return p
	      .scale(239.75);
	};

	function hillRaw(K) {
	  var L = 1 + K,
	      sinBt = sin(1 / L),
	      Bt = asin(sinBt),
	      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),
	      B,
	      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),
	      K2 = K * K,
	      L2 = L * L;

	  function forward(lambda, phi) {
	    var t = 1 - sin(phi),
	        rho,
	        omega;
	    if (t && t < 2) {
	      var theta = halfPi - phi, i = 25, delta;
	      do {
	        var sinTheta = sin(theta),
	            cosTheta = cos(theta),
	            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),
	            C = 1 + L2 - 2 * L * cosTheta;
	        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);
	      } while (abs(delta) > epsilon2 && --i > 0);
	      rho = A * sqrt(C);
	      omega = lambda * Bt_Bt1 / pi;
	    } else {
	      rho = A * (K + t);
	      omega = lambda * Bt / pi;
	    }
	    return [
	      rho * sin(omega),
	      rho0 - rho * cos(omega)
	    ];
	  }

	  forward.invert = function(x, y) {
	    var rho2 = x * x + (y -= rho0) * y,
	        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),
	        theta = acos(cosTheta),
	        sinTheta = sin(theta),
	        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);
	    return [
	      asin(x / sqrt(rho2)) * pi / Bt_Bt1,
	      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)
	    ];
	  };

	  return forward;
	}

	var hill = function() {
	  var K = 1,
	      m = d3Geo.geoProjectionMutator(hillRaw),
	      p = m(K);

	  p.ratio = function(_) {
	    return arguments.length ? m(K = +_) : K;
	  };

	  return p
	      .scale(167.774)
	      .center([0, 18.67]);
	};

	var sinuMollweidePhi = 0.7109889596207567;

	var sinuMollweideY = 0.0528035274542;

	function sinuMollweideRaw(lambda, phi) {
	  return phi > -sinuMollweidePhi
	      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)
	      : sinusoidalRaw(lambda, phi);
	}

	sinuMollweideRaw.invert = function(x, y) {
	  return y > -sinuMollweidePhi
	      ? mollweideRaw.invert(x, y - sinuMollweideY)
	      : sinusoidalRaw.invert(x, y);
	};

	var sinuMollweide = function() {
	  return d3Geo.geoProjection(sinuMollweideRaw)
	      .rotate([-20, -55])
	      .scale(164.263)
	      .center([0, -5.4036]);
	};

	function homolosineRaw(lambda, phi) {
	  return abs(phi) > sinuMollweidePhi
	      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)
	      : sinusoidalRaw(lambda, phi);
	}

	homolosineRaw.invert = function(x, y) {
	  return abs(y) > sinuMollweidePhi
	      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))
	      : sinusoidalRaw.invert(x, y);
	};

	var homolosine = function() {
	  return d3Geo.geoProjection(homolosineRaw)
	      .scale(152.63);
	};

	function pointEqual(a, b) {
	  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
	}

	function interpolateLine(coordinates, m) {
	  var i = -1,
	      n = coordinates.length,
	      p0 = coordinates[0],
	      p1,
	      dx,
	      dy,
	      resampled = [];
	  while (++i < n) {
	    p1 = coordinates[i];
	    dx = (p1[0] - p0[0]) / m;
	    dy = (p1[1] - p0[1]) / m;
	    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);
	    p0 = p1;
	  }
	  resampled.push(p1);
	  return resampled;
	}

	function interpolateSphere(lobes) {
	  var coordinates = [],
	      lobe,
	      lambda0, phi0, phi1,
	      lambda2, phi2,
	      i, n = lobes[0].length;

	  // Northern Hemisphere
	  for (i = 0; i < n; ++i) {
	    lobe = lobes[0][i];
	    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
	    lambda2 = lobe[2][0], phi2 = lobe[2][1];
	    coordinates.push(interpolateLine([
	      [lambda0 + epsilon, phi0 + epsilon],
	      [lambda0 + epsilon, phi1 - epsilon],
	      [lambda2 - epsilon, phi1 - epsilon],
	      [lambda2 - epsilon, phi2 + epsilon]
	    ], 30));
	  }

	  // Southern Hemisphere
	  for (i = lobes[1].length - 1; i >= 0; --i) {
	    lobe = lobes[1][i];
	    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];
	    lambda2 = lobe[2][0], phi2 = lobe[2][1];
	    coordinates.push(interpolateLine([
	      [lambda2 - epsilon, phi2 - epsilon],
	      [lambda2 - epsilon, phi1 + epsilon],
	      [lambda0 + epsilon, phi1 + epsilon],
	      [lambda0 + epsilon, phi0 - epsilon]
	    ], 30));
	  }

	  return {
	    type: "Polygon",
	    coordinates: [d3Array.merge(coordinates)]
	  };
	}

	var interrupt = function(project, lobes) {
	  var sphere = interpolateSphere(lobes);

	  lobes = lobes.map(function(lobe) {
	    return lobe.map(function(l) {
	      return [
	        [l[0][0] * radians, l[0][1] * radians],
	        [l[1][0] * radians, l[1][1] * radians],
	        [l[2][0] * radians, l[2][1] * radians]
	      ];
	    });
	  });

	  var bounds = lobes.map(function(lobe) {
	    return lobe.map(function(l) {
	      var x0 = project(l[0][0], l[0][1])[0],
	          x1 = project(l[2][0], l[2][1])[0],
	          y0 = project(l[1][0], l[0][1])[1],
	          y1 = project(l[1][0], l[1][1])[1],
	          t;
	      if (y0 > y1) t = y0, y0 = y1, y1 = t;
	      return [[x0, y0], [x1, y1]];
	    });
	  });

	  function forward(lambda, phi) {
	    var sign$$1 = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];
	    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);
	    var p = project(lambda - lobe[i][1][0], phi);
	    p[0] += project(lobe[i][1][0], sign$$1 * phi > sign$$1 * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];
	    return p;
	  }

	  // Assumes mutually exclusive bounding boxes for lobes.
	  if (project.invert) forward.invert = function(x, y) {
	    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];
	    for (var i = 0, n = bound.length; i < n; ++i) {
	      var b = bound[i];
	      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
	        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);
	        p[0] += lobe[i][1][0];
	        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;
	      }
	    }
	  };

	  var p = d3Geo.geoProjection(forward),
	      stream_ = p.stream;

	  p.stream = function(stream) {
	    var rotate = p.rotate(),
	        rotateStream = stream_(stream),
	        sphereStream = (p.rotate([0, 0]), stream_(stream));
	    p.rotate(rotate);
	    rotateStream.sphere = function() { d3Geo.geoStream(sphere, sphereStream); };
	    return rotateStream;
	  };

	  return p;
	};

	var lobes = [[ // northern hemisphere
	  [[-180,   0], [-100,  90], [ -40,   0]],
	  [[ -40,   0], [  30,  90], [ 180,   0]]
	], [ // southern hemisphere
	  [[-180,   0], [-160, -90], [-100,   0]],
	  [[-100,   0], [ -60, -90], [ -20,   0]],
	  [[ -20,   0], [  20, -90], [  80,   0]],
	  [[  80,   0], [ 140, -90], [ 180,   0]]
	]];

	var boggs$1 = function() {
	  return interrupt(boggsRaw, lobes)
	      .scale(160.857);
	};

	var lobes$1 = [[ // northern hemisphere
	  [[-180,   0], [-100,  90], [ -40,   0]],
	  [[ -40,   0], [  30,  90], [ 180,   0]]
	], [ // southern hemisphere
	  [[-180,   0], [-160, -90], [-100,   0]],
	  [[-100,   0], [ -60, -90], [ -20,   0]],
	  [[ -20,   0], [  20, -90], [  80,   0]],
	  [[  80,   0], [ 140, -90], [ 180,   0]]
	]];

	var homolosine$1 = function() {
	  return interrupt(homolosineRaw, lobes$1)
	      .scale(152.63);
	};

	var lobes$2 = [[ // northern hemisphere
	  [[-180,   0], [-100,  90], [ -40,   0]],
	  [[ -40,   0], [  30,  90], [ 180,   0]]
	], [ // southern hemisphere
	  [[-180,   0], [-160, -90], [-100,   0]],
	  [[-100,   0], [ -60, -90], [ -20,   0]],
	  [[ -20,   0], [  20, -90], [  80,   0]],
	  [[  80,   0], [ 140, -90], [ 180,   0]]
	]];

	var mollweide$1 = function() {
	  return interrupt(mollweideRaw, lobes$2)
	      .scale(169.529);
	};

	var lobes$3 = [[ // northern hemisphere
	  [[-180,   0], [ -90,  90], [   0,   0]],
	  [[   0,   0], [  90,  90], [ 180,   0]]
	], [ // southern hemisphere
	  [[-180,   0], [ -90, -90], [   0,   0]],
	  [[   0,   0], [  90, -90], [ 180,   0]]
	]];

	var mollweideHemispheres = function() {
	  return interrupt(mollweideRaw, lobes$3)
	      .scale(169.529)
	      .rotate([20, 0]);
	};

	var lobes$4 = [[ // northern hemisphere
	  [[-180,  35], [ -30,  90], [   0,  35]],
	  [[   0,  35], [  30,  90], [ 180,  35]]
	], [ // southern hemisphere
	  [[-180, -10], [-102, -90], [ -65, -10]],
	  [[ -65, -10], [   5, -90], [  77, -10]],
	  [[  77, -10], [ 103, -90], [ 180, -10]]
	]];

	var sinuMollweide$1 = function() {
	  return interrupt(sinuMollweideRaw, lobes$4)
	      .rotate([-20, -55])
	      .scale(164.263)
	      .center([0, -5.4036]);
	};

	var lobes$5 = [[ // northern hemisphere
	  [[-180,   0], [-110,  90], [ -40,   0]],
	  [[ -40,   0], [   0,  90], [  40,   0]],
	  [[  40,   0], [ 110,  90], [ 180,   0]]
	], [ // southern hemisphere
	  [[-180,   0], [-110, -90], [ -40,   0]],
	  [[ -40,   0], [   0, -90], [  40,   0]],
	  [[  40,   0], [ 110, -90], [ 180,   0]]
	]];

	var sinusoidal$1 = function() {
	  return interrupt(sinusoidalRaw, lobes$5)
	      .scale(152.63)
	      .rotate([-20, 0]);
	};

	function kavrayskiy7Raw(lambda, phi) {
	  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];
	}

	kavrayskiy7Raw.invert = function(x, y) {
	  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];
	};

	var kavrayskiy7 = function() {
	  return d3Geo.geoProjection(kavrayskiy7Raw)
	      .scale(158.837);
	};

	function lagrangeRaw(n) {

	  function forward(lambda, phi) {
	    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];
	    var sinPhi = sin(phi),
	        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),
	        c = 0.5 * (v + 1 / v) + cos(lambda *= n);
	    return [
	      2 * sin(lambda) / c,
	      (v - 1 / v) / c
	    ];
	  }

	  forward.invert = function(x, y) {
	    var y0 = abs(y);
	    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];
	    if (y0 > 2) return null;

	    x /= 2, y /= 2;
	    var x2 = x * x,
	        y2 = y * y,
	        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)
	    t = pow((1 + t) / (1 - t), 1 / n);
	    return [
	      atan2(2 * x, 1 - x2 - y2) / n,
	      asin((t - 1) / (t + 1))
	    ];
	  };

	  return forward;
	}

	var lagrange = function() {
	  var n = 0.5,
	      m = d3Geo.geoProjectionMutator(lagrangeRaw),
	      p = m(n);

	  p.spacing = function(_) {
	    return arguments.length ? m(n = +_) : n;
	  };

	  return p
	      .scale(124.75);
	};

	var pi_sqrt2 = pi / sqrt2;

	function larriveeRaw(lambda, phi) {
	  return [
	    lambda * (1 + sqrt(cos(phi))) / 2,
	    phi / (cos(phi / 2) * cos(lambda / 6))
	  ];
	}

	larriveeRaw.invert = function(x, y) {
	  var x0 = abs(x),
	      y0 = abs(y),
	      lambda = epsilon,
	      phi = halfPi;
	  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;
	  else lambda += 6 * acos(pi_sqrt2 / y0);
	  for (var i = 0; i < 25; i++) {
	    var sinPhi = sin(phi),
	        sqrtcosPhi = sqrt(cos(phi)),
	        sinPhi_2 = sin(phi / 2),
	        cosPhi_2 = cos(phi / 2),
	        sinLambda_6 = sin(lambda / 6),
	        cosLambda_6 = cos(lambda / 6),
	        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,
	        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,
	        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,
	        df0dLambda = 0.5 * (1 + sqrtcosPhi),
	        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),
	        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),
	        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,
	        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,
	        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;
	    phi -= dPhi;
	    lambda -= dLambda;
	    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;
	  }
	  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];
	};

	var larrivee = function() {
	  return d3Geo.geoProjection(larriveeRaw)
	      .scale(97.2672);
	};

	function laskowskiRaw(lambda, phi) {
	  var lambda2 = lambda * lambda, phi2 = phi * phi;
	  return [
	    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),
	    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))
	  ];
	}

	laskowskiRaw.invert = function(x, y) {
	  var lambda = sign(x) * pi,
	      phi = y / 2,
	      i = 50;
	  do {
	    var lambda2 = lambda * lambda,
	        phi2 = phi * phi,
	        lambdaPhi = lambda * phi,
	        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,
	        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,
	        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),
	        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),
	        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),
	        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),
	        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,
	        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,
	        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
	    lambda -= deltaLambda, phi -= deltaPhi;
	  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
	  return i && [lambda, phi];
	};

	var laskowski = function() {
	  return d3Geo.geoProjection(laskowskiRaw)
	      .scale(139.98);
	};

	function littrowRaw(lambda, phi) {
	  return [
	    sin(lambda) / cos(phi),
	    tan(phi) * cos(lambda)
	  ];
	}

	littrowRaw.invert = function(x, y) {
	  var x2 = x * x,
	      y2 = y * y,
	      y2_1 = y2 + 1,
	      cosPhi = x
	          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)
	          : 1 / sqrt(y2_1);
	  return [
	    asin(x * cosPhi),
	    sign(y) * acos(cosPhi)
	  ];
	};

	var littrow = function() {
	  return d3Geo.geoProjection(littrowRaw)
	      .scale(144.049)
	      .clipAngle(90 - 1e-3);
	};

	function loximuthalRaw(phi0) {
	  var cosPhi0 = cos(phi0),
	      tanPhi0 = tan(quarterPi + phi0 / 2);

	  function forward(lambda, phi) {
	    var y = phi - phi0,
	        x = abs(y) < epsilon ? lambda * cosPhi0
	            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon
	            ? 0 : lambda * y / log(tan(x) / tanPhi0);
	    return [x, y];
	  }

	  forward.invert = function(x, y) {
	    var lambda,
	        phi = y + phi0;
	    return [
	      abs(y) < epsilon ? x / cosPhi0
	          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0
	          : x * log(tan(lambda) / tanPhi0) / y,
	      phi
	    ];
	  };

	  return forward;
	}

	var loximuthal = function() {
	  return parallel1(loximuthalRaw)
	      .parallel(40)
	      .scale(158.837);
	};

	function millerRaw(lambda, phi) {
	  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];
	}

	millerRaw.invert = function(x, y) {
	  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];
	};

	var miller = function() {
	  return d3Geo.geoProjection(millerRaw)
	      .scale(108.318);
	};

	function modifiedStereographicRaw(C) {
	  var m = C.length - 1;

	  function forward(lambda, phi) {
	    var cosPhi = cos(phi),
	        k = 2 / (1 + cosPhi * cos(lambda)),
	        zr = k * cosPhi * sin(lambda),
	        zi = k * sin(phi),
	        i = m,
	        w = C[i],
	        ar = w[0],
	        ai = w[1],
	        t;
	    while (--i >= 0) {
	      w = C[i];
	      ar = w[0] + zr * (t = ar) - zi * ai;
	      ai = w[1] + zr * ai + zi * t;
	    }
	    ar = zr * (t = ar) - zi * ai;
	    ai = zr * ai + zi * t;
	    return [ar, ai];
	  }

	  forward.invert = function(x, y) {
	    var i = 20,
	        zr = x,
	        zi = y;
	    do {
	      var j = m,
	          w = C[j],
	          ar = w[0],
	          ai = w[1],
	          br = 0,
	          bi = 0,
	          t;

	      while (--j >= 0) {
	        w = C[j];
	        br = ar + zr * (t = br) - zi * bi;
	        bi = ai + zr * bi + zi * t;
	        ar = w[0] + zr * (t = ar) - zi * ai;
	        ai = w[1] + zr * ai + zi * t;
	      }
	      br = ar + zr * (t = br) - zi * bi;
	      bi = ai + zr * bi + zi * t;
	      ar = zr * (t = ar) - zi * ai - x;
	      ai = zr * ai + zi * t - y;

	      var denominator = br * br + bi * bi, deltar, deltai;
	      zr -= deltar = (ar * br + ai * bi) / denominator;
	      zi -= deltai = (ai * br - ar * bi) / denominator;
	    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);

	    if (i) {
	      var rho = sqrt(zr * zr + zi * zi),
	          c = 2 * atan(rho * 0.5),
	          sinc = sin(c);
	      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];
	    }
	  };

	  return forward;
	}

	var alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]];
	var gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]];
	var gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]];
	var miller$1 = [[0.9245, 0], [0, 0], [0.01943, 0]];
	var lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];

	function modifiedStereographicAlaska() {
	  return modifiedStereographic(alaska, [152, -64])
	      .scale(1500)
	      .center([-160.908, 62.4864])
	      .clipAngle(25);
	}

	function modifiedStereographicGs48() {
	  return modifiedStereographic(gs48, [95, -38])
	      .scale(1000)
	      .clipAngle(55)
	      .center([-96.5563, 38.8675]);
	}

	function modifiedStereographicGs50() {
	  return modifiedStereographic(gs50, [120, -45])
	      .scale(359.513)
	      .clipAngle(55)
	      .center([-117.474, 53.0628]);
	}

	function modifiedStereographicMiller() {
	  return modifiedStereographic(miller$1, [-20, -18])
	      .scale(209.091)
	      .center([20, 16.7214])
	      .clipAngle(82);
	}

	function modifiedStereographicLee() {
	  return modifiedStereographic(lee, [165, 10])
	      .scale(250)
	      .clipAngle(130)
	      .center([-165, -10]);
	}

	function modifiedStereographic(coefficients, rotate) {
	  var p = d3Geo.geoProjection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),
	      r = d3Geo.geoRotation(rotate),
	      center = p.center;

	  delete p.rotate;

	  p.center = function(_) {
	    return arguments.length ? center(r(_)) : r.invert(center());
	  };

	  return p;
	}

	var sqrt6 = sqrt(6);
	var sqrt7 = sqrt(7);

	function mtFlatPolarParabolicRaw(lambda, phi) {
	  var theta = asin(7 * sin(phi) / (3 * sqrt6));
	  return [
	    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,
	    9 * sin(theta / 3) / sqrt7
	  ];
	}

	mtFlatPolarParabolicRaw.invert = function(x, y) {
	  var theta = 3 * asin(y * sqrt7 / 9);
	  return [
	    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),
	    asin(sin(theta) * 3 * sqrt6 / 7)
	  ];
	};

	var mtFlatPolarParabolic = function() {
	  return d3Geo.geoProjection(mtFlatPolarParabolicRaw)
	      .scale(164.859);
	};

	function mtFlatPolarQuarticRaw(lambda, phi) {
	  var k = (1 + sqrt1_2) * sin(phi),
	      theta = phi;
	  for (var i = 0, delta; i < 25; i++) {
	    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));
	    if (abs(delta) < epsilon) break;
	  }
	  return [
	    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),
	    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)
	  ];
	}

	mtFlatPolarQuarticRaw.invert = function(x, y) {
	  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),
	      theta = 2 * asin(sinTheta_2);
	  return [
	    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),
	    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))
	  ];
	};

	var mtFlatPolarQuartic = function() {
	  return d3Geo.geoProjection(mtFlatPolarQuarticRaw)
	      .scale(188.209);
	};

	function mtFlatPolarSinusoidalRaw(lambda, phi) {
	  var A = sqrt(6 / (4 + pi)),
	      k = (1 + pi / 4) * sin(phi),
	      theta = phi / 2;
	  for (var i = 0, delta; i < 25; i++) {
	    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));
	    if (abs(delta) < epsilon) break;
	  }
	  return [
	    A * (0.5 + cos(theta)) * lambda / 1.5,
	    A * theta
	  ];
	}

	mtFlatPolarSinusoidalRaw.invert = function(x, y) {
	  var A = sqrt(6 / (4 + pi)),
	      theta = y / A;
	  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;
	  return [
	    1.5 * x / (A * (0.5 + cos(theta))),
	    asin((theta / 2 + sin(theta)) / (1 + pi / 4))
	  ];
	};

	var mtFlatPolarSinusoidal = function() {
	  return d3Geo.geoProjection(mtFlatPolarSinusoidalRaw)
	      .scale(166.518);
	};

	function naturalEarthRaw(lambda, phi) {
	  var phi2 = phi * phi, phi4 = phi2 * phi2;
	  return [
	    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
	    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
	  ];
	}

	naturalEarthRaw.invert = function(x, y) {
	  var phi = y, i = 25, delta;
	  do {
	    var phi2 = phi * phi, phi4 = phi2 * phi2;
	    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
	        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
	  } while (abs(delta) > epsilon && --i > 0);
	  return [
	    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
	    phi
	  ];
	};

	var naturalEarth = function() {
	  return d3Geo.geoProjection(naturalEarthRaw)
	      .scale(175.295);
	};

	function naturalEarth2Raw(lambda, phi) {
	  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;
	  return [
	    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),
	    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))
	  ];
	}

	naturalEarth2Raw.invert = function(x, y) {
	  var phi = y, i = 25, delta, phi2, phi4, phi6;
	  do {
	    phi2 = phi * phi; phi4 = phi2 * phi2;
	    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /
	      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));
	  } while (abs(delta) > epsilon2 && --i > 0);
	  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;
	  return [
	    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),
	    phi
	  ];
	};

	var naturalEarth2 = function() {
	  return d3Geo.geoProjection(naturalEarth2Raw)
	      .scale(175.295);
	};

	function nellHammerRaw(lambda, phi) {
	  return [
	    lambda * (1 + cos(phi)) / 2,
	    2 * (phi - tan(phi / 2))
	  ];
	}

	nellHammerRaw.invert = function(x, y) {
	  var p = y / 2;
	  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {
	    var c = cos(y / 2);
	    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));
	  }
	  return [
	    2 * x / (1 + cos(y)),
	    y
	  ];
	};

	var nellHammer = function() {
	  return d3Geo.geoProjection(nellHammerRaw)
	      .scale(152.63);
	};

	// Based on Java implementation by Bojan Savric.
	// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java

	var pattersonK1 = 1.0148;
	var pattersonK2 = 0.23185;
	var pattersonK3 = -0.14499;
	var pattersonK4 = 0.02406;
	var pattersonC1 = pattersonK1;
	var pattersonC2 = 5 * pattersonK2;
	var pattersonC3 = 7 * pattersonK3;
	var pattersonC4 = 9 * pattersonK4;
	var pattersonYmax = 1.790857183;

	function pattersonRaw(lambda, phi) {
	  var phi2 = phi * phi;
	  return [
	    lambda,
	    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))
	  ];
	}

	pattersonRaw.invert = function(x, y) {
	  if (y > pattersonYmax) y = pattersonYmax;
	  else if (y < -pattersonYmax) y = -pattersonYmax;
	  var yc = y, delta;

	  do { // Newton-Raphson
	    var y2 = yc * yc;
	    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
	  } while (abs(delta) > epsilon);

	  return [x, yc];
	};

	var patterson = function() {
	  return d3Geo.geoProjection(pattersonRaw)
	      .scale(139.319);
	};

	function polyconicRaw(lambda, phi) {
	  if (abs(phi) < epsilon) return [lambda, 0];
	  var tanPhi = tan(phi),
	      k = lambda * sin(phi);
	  return [
	    sin(k) / tanPhi,
	    phi + (1 - cos(k)) / tanPhi
	  ];
	}

	polyconicRaw.invert = function(x, y) {
	  if (abs(y) < epsilon) return [x, 0];
	  var k = x * x + y * y,
	      phi = y * 0.5,
	      i = 10, delta;
	  do {
	    var tanPhi = tan(phi),
	        secPhi = 1 / cos(phi),
	        j = k - 2 * y * phi + phi * phi;
	    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
	  } while (abs(delta) > epsilon && --i > 0);
	  tanPhi = tan(phi);
	  return [
	    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),
	    phi
	  ];
	};

	var polyconic = function() {
	  return d3Geo.geoProjection(polyconicRaw)
	      .scale(103.74);
	};

	// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:
	// [a, b, c,
	//  d, e, f,
	//  0, 0, 1] - this redundant row is left out.

	// Transform matrix for [a0, a1] -> [b0, b1].
	var matrix = function(a, b) {
	  var u = subtract(a[1], a[0]),
	      v = subtract(b[1], b[0]),
	      phi = angle$1(u, v),
	      s = length(u) / length(v);

	  return multiply([
	    1, 0, a[0][0],
	    0, 1, a[0][1]
	  ], multiply([
	    s, 0, 0,
	    0, s, 0
	  ], multiply([
	    cos(phi), sin(phi), 0,
	    -sin(phi), cos(phi), 0
	  ], [
	    1, 0, -b[0][0],
	    0, 1, -b[0][1]
	  ])));
	};

	// Inverts a transform matrix.
	function inverse(m) {
	  var k = 1 / (m[0] * m[4] - m[1] * m[3]);
	  return [
	    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),
	    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])
	  ];
	}

	// Multiplies two 3x2 matrices.
	function multiply(a, b) {
	  return [
	    a[0] * b[0] + a[1] * b[3],
	    a[0] * b[1] + a[1] * b[4],
	    a[0] * b[2] + a[1] * b[5] + a[2],
	    a[3] * b[0] + a[4] * b[3],
	    a[3] * b[1] + a[4] * b[4],
	    a[3] * b[2] + a[4] * b[5] + a[5]
	  ];
	}

	// Subtracts 2D vectors.
	function subtract(a, b) {
	  return [a[0] - b[0], a[1] - b[1]];
	}

	// Magnitude of a 2D vector.
	function length(v) {
	  return sqrt(v[0] * v[0] + v[1] * v[1]);
	}

	// Angle between two 2D vectors.
	function angle$1(a, b) {
	  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);
	}

	// Creates a polyhedral projection.
	//  * root: a spanning tree of polygon faces.  Nodes are automatically
	//    augmented with a transform matrix.
	//  * face: a function that returns the appropriate node for a given {lambda, phi}
	//    point (radians).
	//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for
	//    butterflies).
	var polyhedral = function(root, face, r) {

	  r = r == null ? -pi / 6 : r; // TODO automate

	  recurse(root, {transform: [
	    cos(r), sin(r), 0,
	    -sin(r), cos(r), 0
	  ]});

	  function recurse(node, parent) {
	    node.edges = faceEdges(node.face);
	    // Find shared edge.
	    if (parent.face) {
	      var shared = node.shared = sharedEdge(node.face, parent.face),
	          m = matrix(shared.map(parent.project), shared.map(node.project));
	      node.transform = parent.transform ? multiply(parent.transform, m) : m;
	      // Replace shared edge in parent edges array.
	      var edges = parent.edges;
	      for (var i = 0, n = edges.length; i < n; ++i) {
	        if (pointEqual$1(shared[0], edges[i][1]) && pointEqual$1(shared[1], edges[i][0])) edges[i] = node;
	        if (pointEqual$1(shared[0], edges[i][0]) && pointEqual$1(shared[1], edges[i][1])) edges[i] = node;
	      }
	      edges = node.edges;
	      for (i = 0, n = edges.length; i < n; ++i) {
	        if (pointEqual$1(shared[0], edges[i][0]) && pointEqual$1(shared[1], edges[i][1])) edges[i] = parent;
	        if (pointEqual$1(shared[0], edges[i][1]) && pointEqual$1(shared[1], edges[i][0])) edges[i] = parent;
	      }
	    } else {
	      node.transform = parent.transform;
	    }
	    if (node.children) {
	      node.children.forEach(function(child) {
	        recurse(child, node);
	      });
	    }
	    return node;
	  }

	  function forward(lambda, phi) {
	    var node = face(lambda, phi),
	        point = node.project([lambda * degrees, phi * degrees]),
	        t;
	    if (t = node.transform) {
	      return [
	        t[0] * point[0] + t[1] * point[1] + t[2],
	        -(t[3] * point[0] + t[4] * point[1] + t[5])
	      ];
	    }
	    point[1] = -point[1];
	    return point;
	  }

	  // Naive inverse!  A faster solution would use bounding boxes, or even a
	  // polygonal quadtree.
	  if (hasInverse(root)) forward.invert = function(x, y) {
	    var coordinates = faceInvert(root, [x, -y]);
	    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);
	  };

	  function faceInvert(node, coordinates) {
	    var invert = node.project.invert,
	        t = node.transform,
	        point = coordinates;
	    if (t) {
	      t = inverse(t);
	      point = [
	        t[0] * point[0] + t[1] * point[1] + t[2],
	        (t[3] * point[0] + t[4] * point[1] + t[5])
	      ];
	    }
	    if (invert && node === faceDegrees(p = invert(point))) return p;
	    var p,
	        children = node.children;
	    for (var i = 0, n = children && children.length; i < n; ++i) {
	      if (p = faceInvert(children[i], coordinates)) return p;
	    }
	  }

	  function faceDegrees(coordinates) {
	    return face(coordinates[0] * radians, coordinates[1] * radians);
	  }

	  var proj = d3Geo.geoProjection(forward),
	      stream_ = proj.stream;

	  proj.stream = function(stream) {
	    var rotate = proj.rotate(),
	        rotateStream = stream_(stream),
	        sphereStream = (proj.rotate([0, 0]), stream_(stream));
	    proj.rotate(rotate);
	    rotateStream.sphere = function() {
	      sphereStream.polygonStart();
	      sphereStream.lineStart();
	      outline(sphereStream, root);
	      sphereStream.lineEnd();
	      sphereStream.polygonEnd();
	    };
	    return rotateStream;
	  };

	  return proj;
	};

	function outline(stream, node, parent) {
	  var point,
	      edges = node.edges,
	      n = edges.length,
	      edge,
	      multiPoint = {type: "MultiPoint", coordinates: node.face},
	      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),
	      b = d3Geo.geoBounds({type: "MultiPoint", coordinates: notPoles}),
	      inside = false,
	      j = -1,
	      dx = b[1][0] - b[0][0];
	  // TODO
	  var c = dx === 180 || dx === 360
	      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]
	      : d3Geo.geoCentroid(multiPoint);
	  // First find the shared edge…
	  if (parent) while (++j < n) {
	    if (edges[j] === parent) break;
	  }
	  ++j;
	  for (var i = 0; i < n; ++i) {
	    edge = edges[(i + j) % n];
	    if (Array.isArray(edge)) {
	      if (!inside) {
	        stream.point((point = d3Geo.geoInterpolate(edge[0], c)(epsilon))[0], point[1]);
	        inside = true;
	      }
	      stream.point((point = d3Geo.geoInterpolate(edge[1], c)(epsilon))[0], point[1]);
	    } else {
	      inside = false;
	      if (edge !== parent) outline(stream, edge, node);
	    }
	  }
	}

	// Tests equality of two spherical points.
	function pointEqual$1(a, b) {
	  return a && b && a[0] === b[0] && a[1] === b[1];
	}

	// Finds a shared edge given two clockwise polygons.
	function sharedEdge(a, b) {
	  var x, y, n = a.length, found = null;
	  for (var i = 0; i < n; ++i) {
	    x = a[i];
	    for (var j = b.length; --j >= 0;) {
	      y = b[j];
	      if (x[0] === y[0] && x[1] === y[1]) {
	        if (found) return [found, x];
	        found = x;
	      }
	    }
	  }
	}

	// Converts an array of n face vertices to an array of n + 1 edges.
	function faceEdges(face) {
	  var n = face.length,
	      edges = [];
	  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);
	  return edges;
	}

	function hasInverse(node) {
	  return node.project.invert || node.children && node.children.some(hasInverse);
	}

	// TODO generate on-the-fly to avoid external modification.
	var octahedron = [
	  [0, 90],
	  [-90, 0], [0, 0], [90, 0], [180, 0],
	  [0, -90]
	];

	var octahedron$1 = [
	  [0, 2, 1],
	  [0, 3, 2],
	  [5, 1, 2],
	  [5, 2, 3],
	  [0, 1, 4],
	  [0, 4, 3],
	  [5, 4, 1],
	  [5, 3, 4]
	].map(function(face) {
	  return face.map(function(i) {
	    return octahedron[i];
	  });
	});

	var butterfly = function(faceProjection) {

	  faceProjection = faceProjection || function(face) {
	    var c = d3Geo.geoCentroid({type: "MultiPoint", coordinates: face});
	    return d3Geo.geoGnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
	  };

	  var faces = octahedron$1.map(function(face) {
	    return {face: face, project: faceProjection(face)};
	  });

	  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {
	    var node = faces[d];
	    node && (node.children || (node.children = [])).push(faces[i]);
	  });

	  return polyhedral(faces[0], function(lambda, phi) {
	        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4
	            : lambda < 0 ? phi < 0 ? 2 : 0
	            : lambda < pi / 2 ? phi < 0 ? 3 : 1
	            : phi < 0 ? 7 : 5];
	      })
	      .scale(101.858)
	      .center([0, 45]);
	};

	var kx = 2 / sqrt(3);

	function collignonK(a, b) {
	  var p = collignonRaw(a, b);
	  return [p[0] * kx, p[1]];
	}

	collignonK.invert = function(x,y) {
	  return collignonRaw.invert(x / kx, y);
	};

	var collignon$1 = function(faceProjection) {

	  faceProjection = faceProjection || function(face) {
	    var c = d3Geo.geoCentroid({type: "MultiPoint", coordinates: face});
	    return d3Geo.geoProjection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);
	  };

	  var faces = octahedron$1.map(function(face) {
	    return {face: face, project: faceProjection(face)};
	  });

	  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {
	    var node = faces[d];
	    node && (node.children || (node.children = [])).push(faces[i]);
	  });

	  return polyhedral(faces[0], function(lambda, phi) {
	        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4
	            : lambda < 0 ? phi < 0 ? 2 : 0
	            : lambda < pi / 2 ? phi < 0 ? 3 : 1
	            : phi < 0 ? 7 : 5];
	      })
	      .scale(121.906)
	      .center([0, 48.5904]);
	};

	var waterman = function(faceProjection) {

	  faceProjection = faceProjection || function(face) {
	    var c = face.length === 6 ? d3Geo.geoCentroid({type: "MultiPoint", coordinates: face}) : face[0];
	    return d3Geo.geoGnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
	  };

	  var w5 = octahedron$1.map(function(face) {
	    var xyz = face.map(cartesian),
	        n = xyz.length,
	        a = xyz[n - 1],
	        b,
	        hexagon = [];
	    for (var i = 0; i < n; ++i) {
	      b = xyz[i];
	      hexagon.push(spherical([
	        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,
	        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,
	        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794
	      ]), spherical([
	        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,
	        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,
	        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794
	      ]));
	      a = b;
	    }
	    return hexagon;
	  });

	  var cornerNormals = [];

	  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];

	  w5.forEach(function(hexagon, j) {
	    var face = octahedron$1[j],
	        n = face.length,
	        normals = cornerNormals[j] = [];
	    for (var i = 0; i < n; ++i) {
	      w5.push([
	        face[i],
	        hexagon[(i * 2 + 2) % (2 * n)],
	        hexagon[(i * 2 + 1) % (2 * n)]
	      ]);
	      parents.push(j);
	      normals.push(cross(
	        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),
	        cartesian(hexagon[(i * 2 + 1) % (2 * n)])
	      ));
	    }
	  });

	  var faces = w5.map(function(face) {
	    return {
	      project: faceProjection(face),
	      face: face
	    };
	  });

	  parents.forEach(function(d, i) {
	    var parent = faces[d];
	    parent && (parent.children || (parent.children = [])).push(faces[i]);
	  });

	  function face(lambda, phi) {
	    var cosphi = cos(phi),
	        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];

	    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4
	        : lambda < 0 ? phi < 0 ? 2 : 0
	        : lambda < pi / 2 ? phi < 0 ? 3 : 1
	        : phi < 0 ? 7 : 5;

	    var n = cornerNormals[hexagon];

	    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon
	        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1
	        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2
	        : hexagon];
	  }

	  return polyhedral(faces[0], face)
	      .scale(110.625)
	      .center([0,45]);
	};

	function dot(a, b) {
	  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];
	  return s;
	}

	function cross(a, b) {
	  return [
	    a[1] * b[2] - a[2] * b[1],
	    a[2] * b[0] - a[0] * b[2],
	    a[0] * b[1] - a[1] * b[0]
	  ];
	}

	// Converts 3D Cartesian to spherical coordinates (degrees).
	function spherical(cartesian) {
	  return [
	    atan2(cartesian[1], cartesian[0]) * degrees,
	    asin(max(-1, min(1, cartesian[2]))) * degrees
	  ];
	}

	// Converts spherical coordinates (degrees) to 3D Cartesian.
	function cartesian(coordinates) {
	  var lambda = coordinates[0] * radians,
	      phi = coordinates[1] * radians,
	      cosphi = cos(phi);
	  return [
	    cosphi * cos(lambda),
	    cosphi * sin(lambda),
	    sin(phi)
	  ];
	}

	var noop = function() {};

	var clockwise = function(ring) {
	  if ((n = ring.length) < 4) return false;
	  var i = 0,
	      n,
	      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
	  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
	  return area <= 0;
	};

	var contains = function(ring, point) {
	  var x = point[0],
	      y = point[1],
	      contains = false;
	  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
	    var pi = ring[i], xi = pi[0], yi = pi[1],
	        pj = ring[j], xj = pj[0], yj = pj[1];
	    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;
	  }
	  return contains;
	};

	var index = function(object, projection) {
	  var stream = projection.stream, project;
	  if (!stream) throw new Error("invalid projection");
	  switch (object && object.type) {
	    case "Feature": project = projectFeature; break;
	    case "FeatureCollection": project = projectFeatureCollection; break;
	    default: project = projectGeometry; break;
	  }
	  return project(object, stream);
	};

	function projectFeatureCollection(o, stream) {
	  return {
	    type: "FeatureCollection",
	    features: o.features.map(function(f) {
	      return projectFeature(f, stream);
	    })
	  };
	}

	function projectFeature(o, stream) {
	  return {
	    type: "Feature",
	    id: o.id,
	    properties: o.properties,
	    geometry: projectGeometry(o.geometry, stream)
	  };
	}

	function projectGeometryCollection(o, stream) {
	  return {
	    type: "GeometryCollection",
	    geometries: o.geometries.map(function(o) {
	      return projectGeometry(o, stream);
	    })
	  };
	}

	function projectGeometry(o, stream) {
	  if (!o) return null;
	  if (o.type === "GeometryCollection") return projectGeometryCollection(o, stream);
	  var sink;
	  switch (o.type) {
	    case "Point": sink = sinkPoint; break;
	    case "MultiPoint": sink = sinkPoint; break;
	    case "LineString": sink = sinkLine; break;
	    case "MultiLineString": sink = sinkLine; break;
	    case "Polygon": sink = sinkPolygon; break;
	    case "MultiPolygon": sink = sinkPolygon; break;
	    case "Sphere": sink = sinkPolygon; break;
	    default: return null;
	  }
	  d3Geo.geoStream(o, stream(sink));
	  return sink.result();
	}

	var points = [];
	var lines = [];

	var sinkPoint = {
	  point: function(x, y) {
	    points.push([x, y]);
	  },
	  result: function() {
	    var result = !points.length ? null
	        : points.length < 2 ? {type: "Point", coordinates: points[0]}
	        : {type: "MultiPoint", coordinates: points};
	    points = [];
	    return result;
	  }
	};

	var sinkLine = {
	  lineStart: noop,
	  point: function(x, y) {
	    points.push([x, y]);
	  },
	  lineEnd: function() {
	    if (points.length) lines.push(points), points = [];
	  },
	  result: function() {
	    var result = !lines.length ? null
	        : lines.length < 2 ? {type: "LineString", coordinates: lines[0]}
	        : {type: "MultiLineString", coordinates: lines};
	    lines = [];
	    return result;
	  }
	};

	var sinkPolygon = {
	  polygonStart: noop,
	  lineStart: noop,
	  point: function(x, y) {
	    points.push([x, y]);
	  },
	  lineEnd: function() {
	    var n = points.length;
	    if (n) {
	      do points.push(points[0].slice()); while (++n < 4);
	      lines.push(points), points = [];
	    }
	  },
	  polygonEnd: noop,
	  result: function() {
	    if (!lines.length) return null;
	    var polygons = [],
	        holes = [];

	    // https://github.com/d3/d3/issues/1558
	    lines.forEach(function(ring) {
	      if (clockwise(ring)) polygons.push([ring]);
	      else holes.push(ring);
	    });

	    holes.forEach(function(hole) {
	      var point = hole[0];
	      polygons.some(function(polygon) {
	        if (contains(polygon[0], point)) {
	          polygon.push(hole);
	          return true;
	        }
	      }) || polygons.push([hole]);
	    });

	    lines = [];

	    return !polygons.length ? null
	        : polygons.length > 1 ? {type: "MultiPolygon", coordinates: polygons}
	        : {type: "Polygon", coordinates: polygons[0]};
	  }
	};

	var quincuncial = function(project) {
	  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];

	  function projectQuincuncial(lambda, phi) {
	    var t = abs(lambda) < halfPi,
	        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),
	        x = (p[0] - p[1]) * sqrt1_2,
	        y = (p[0] + p[1]) * sqrt1_2;
	    if (t) return [x, y];
	    var d = dx * sqrt1_2,
	        s = x > 0 ^ y > 0 ? -1 : 1;
	    return [s * x - sign(y) * d, s * y - sign(x) * d];
	  }

	  if (project.invert) projectQuincuncial.invert = function(x0, y0) {
	    var x = (x0 + y0) * sqrt1_2,
	        y = (y0 - x0) * sqrt1_2,
	        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;

	    if (!t) {
	      var d = dx * sqrt1_2,
	          s = x > 0 ^ y > 0 ? -1 : 1,
	          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,
	          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;
	      x = (-x1 - y1) * sqrt1_2;
	      y = (x1 - y1) * sqrt1_2;
	    }

	    var p = project.invert(x, y);
	    if (!t) p[0] += x > 0 ? pi : -pi;
	    return p;
	  };

	  return d3Geo.geoProjection(projectQuincuncial)
	      .rotate([-90, -90, 45])
	      .clipAngle(180 - 1e-3);
	};

	var gringorten$1 = function() {
	  return quincuncial(gringortenRaw)
	      .scale(176.423);
	};

	var peirce = function() {
	  return quincuncial(guyouRaw)
	      .scale(111.48);
	};

	var quantize = function(input, digits) {
	  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error("invalid digits");

	  function quantizePoint(input) {
	    var n = input.length, i = 2, output = new Array(n);
	    output[0] = +input[0].toFixed(digits);
	    output[1] = +input[1].toFixed(digits);
	    while (i < n) output[i] = input[i], ++i;
	    return output;
	  }

	  function quantizePoints(input) {
	    return input.map(quantizePoint);
	  }

	  function quantizePolygon(input) {
	    return input.map(quantizePoints);
	  }

	  function quantizeGeometry(input) {
	    if (input == null) return input;
	    var output;
	    switch (input.type) {
	      case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry)}; break;
	      case "Point": output = {type: "Point", coordinates: quantizePoint(input.coordinates)}; break;
	      case "MultiPoint": case "LineString": output = {type: input.type, coordinates: quantizePoints(input.coordinates)}; break;
	      case "MultiLineString": case "Polygon": output = {type: input.type, coordinates: quantizePolygon(input.coordinates)}; break;
	      case "MultiPolygon": output = {type: "MultiPolygon", coordinates: input.coordinates.map(quantizePolygon)}; break;
	      default: return input;
	    }
	    if (input.bbox != null) output.bbox = input.bbox;
	    return output;
	  }

	  function quantizeFeature(input) {
	    var output = {type: "Feature", properties: input.properties, geometry: quantizeGeometry(input.geometry)};
	    if (input.id != null) output.id = input.id;
	    if (input.bbox != null) output.bbox = input.bbox;
	    return output;
	  }

	  if (input != null) switch (input.type) {
	    case "Feature": return quantizeFeature(input);
	    case "FeatureCollection": {
	      var output = {type: "FeatureCollection", features: input.features.map(quantizeFeature)};
	      if (input.bbox != null) output.bbox = input.bbox;
	      return output;
	    }
	    default: return quantizeGeometry(input);
	  }

	  return input;
	};

	function rectangularPolyconicRaw(phi0) {
	  var sinPhi0 = sin(phi0);

	  function forward(lambda, phi) {
	    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;
	    if (!phi) return [2 * A, -phi0];
	    var E = 2 * atan(A * sin(phi)),
	        cotPhi = 1 / tan(phi);
	    return [
	      sin(E) * cotPhi,
	      phi + (1 - cos(E)) * cotPhi - phi0
	    ];
	  }

	  // TODO return null for points outside outline.
	  forward.invert = function(x, y) {
	    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];
	    var k = x * x + y * y,
	        phi = 0,
	        i = 10, delta;
	    do {
	      var tanPhi = tan(phi),
	          secPhi = 1 / cos(phi),
	          j = k - 2 * y * phi + phi * phi;
	      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
	    } while (abs(delta) > epsilon && --i > 0);
	    var E = x * (tanPhi = tan(phi)),
	        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);
	    return [
	      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,
	      phi
	    ];
	  };

	  return forward;
	}

	var rectangularPolyconic = function() {
	  return parallel1(rectangularPolyconicRaw)
	      .scale(131.215);
	};

	var K = [
	  [0.9986, -0.062],
	  [1.0000, 0.0000],
	  [0.9986, 0.0620],
	  [0.9954, 0.1240],
	  [0.9900, 0.1860],
	  [0.9822, 0.2480],
	  [0.9730, 0.3100],
	  [0.9600, 0.3720],
	  [0.9427, 0.4340],
	  [0.9216, 0.4958],
	  [0.8962, 0.5571],
	  [0.8679, 0.6176],
	  [0.8350, 0.6769],
	  [0.7986, 0.7346],
	  [0.7597, 0.7903],
	  [0.7186, 0.8435],
	  [0.6732, 0.8936],
	  [0.6213, 0.9394],
	  [0.5722, 0.9761],
	  [0.5322, 1.0000]
	];

	K.forEach(function(d) {
	  d[1] *= 1.0144;
	});

	function robinsonRaw(lambda, phi) {
	  var i = min(18, abs(phi) * 36 / pi),
	      i0 = floor(i),
	      di = i - i0,
	      ax = (k = K[i0])[0],
	      ay = k[1],
	      bx = (k = K[++i0])[0],
	      by = k[1],
	      cx = (k = K[min(19, ++i0)])[0],
	      cy = k[1],
	      k;
	  return [
	    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),
	    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)
	  ];
	}

	robinsonRaw.invert = function(x, y) {
	  var yy = y / halfPi,
	      phi = yy * 90,
	      i = min(18, abs(phi / 5)),
	      i0 = max(0, floor(i));
	  do {
	    var ay = K[i0][1],
	        by = K[i0 + 1][1],
	        cy = K[min(19, i0 + 2)][1],
	        u = cy - ay,
	        v = cy - 2 * by + ay,
	        t = 2 * (abs(yy) - by) / u,
	        c = v / u,
	        di = t * (1 - c * t * (1 - 2 * c * t));
	    if (di >= 0 || i0 === 1) {
	      phi = (y >= 0 ? 5 : -5) * (di + i);
	      var j = 50, delta;
	      do {
	        i = min(18, abs(phi) / 5);
	        i0 = floor(i);
	        di = i - i0;
	        ay = K[i0][1];
	        by = K[i0 + 1][1];
	        cy = K[min(19, i0 + 2)][1];
	        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;
	      } while (abs(delta) > epsilon2 && --j > 0);
	      break;
	    }
	  } while (--i0 >= 0);
	  var ax = K[i0][0],
	      bx = K[i0 + 1][0],
	      cx = K[min(19, i0 + 2)][0];
	  return [
	    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),
	    phi * radians
	  ];
	};

	var robinson = function() {
	  return d3Geo.geoProjection(robinsonRaw)
	      .scale(152.63);
	};

	function satelliteVerticalRaw(P) {
	  function forward(lambda, phi) {
	    var cosPhi = cos(phi),
	        k = (P - 1) / (P - cosPhi * cos(lambda));
	    return [
	      k * cosPhi * sin(lambda),
	      k * sin(phi)
	    ];
	  }

	  forward.invert = function(x, y) {
	    var rho2 = x * x + y * y,
	        rho = sqrt(rho2),
	        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));
	    return [
	      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),
	      rho ? asin(y * sinc / rho) : 0
	    ];
	  };

	  return forward;
	}

	function satelliteRaw(P, omega) {
	  var vertical = satelliteVerticalRaw(P);
	  if (!omega) return vertical;
	  var cosOmega = cos(omega),
	      sinOmega = sin(omega);

	  function forward(lambda, phi) {
	    var coordinates = vertical(lambda, phi),
	        y = coordinates[1],
	        A = y * sinOmega / (P - 1) + cosOmega;
	    return [
	      coordinates[0] * cosOmega / A,
	      y / A
	    ];
	  }

	  forward.invert = function(x, y) {
	    var k = (P - 1) / (P - 1 - y * sinOmega);
	    return vertical.invert(k * x, k * y * cosOmega);
	  };

	  return forward;
	}

	var satellite = function() {
	  var distance = 2,
	      omega = 0,
	      m = d3Geo.geoProjectionMutator(satelliteRaw),
	      p = m(distance, omega);

	  // As a multiple of radius.
	  p.distance = function(_) {
	    if (!arguments.length) return distance;
	    return m(distance = +_, omega);
	  };

	  p.tilt = function(_) {
	    if (!arguments.length) return omega * degrees;
	    return m(distance, omega = _ * radians);
	  };

	  return p
	      .scale(432.147)
	      .clipAngle(acos(1 / distance) * degrees - 1e-6);
	};

	var epsilon$1 = 1e-4;
	var epsilonInverse = 1e4;
	var x0 = -180;
	var x0e = x0 + epsilon$1;
	var x1 = 180;
	var x1e = x1 - epsilon$1;
	var y0 = -90;
	var y0e = y0 + epsilon$1;
	var y1 = 90;
	var y1e = y1 - epsilon$1;

	function nonempty(coordinates) {
	  return coordinates.length > 0;
	}

	function quantize$1(x) {
	  return Math.floor(x * epsilonInverse) / epsilonInverse;
	}

	function normalizePoint(y) {
	  return y === y0 || y === y1 ? [0, y] : [x0, quantize$1(y)]; // pole or antimeridian?
	}

	function clampPoint(p) {
	  var x = p[0], y = p[1], clamped = false;
	  if (x <= x0e) x = x0, clamped = true;
	  else if (x >= x1e) x = x1, clamped = true;
	  if (y <= y0e) y = y0, clamped = true;
	  else if (y >= y1e) y = y1, clamped = true;
	  return clamped ? [x, y] : p;
	}

	function clampPoints(points) {
	  return points.map(clampPoint);
	}

	// For each ring, detect where it crosses the antimeridian or pole.
	function extractFragments(rings, polygon, fragments) {
	  for (var j = 0, m = rings.length; j < m; ++j) {
	    var ring = rings[j].slice();

	    // By default, assume that this ring doesn’t need any stitching.
	    fragments.push({index: -1, polygon: polygon, ring: ring});

	    for (var i = 0, n = ring.length; i < n; ++i) {
	      var point = ring[i],
	          x = point[0],
	          y = point[1];

	      // If this is an antimeridian or polar point…
	      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {
	        ring[i] = clampPoint(point);

	        // Advance through any antimeridian or polar points…
	        for (var k = i + 1; k < n; ++k) {
	          var pointk = ring[k],
	              xk = pointk[0],
	              yk = pointk[1];
	          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;
	        }

	        // If this was just a single antimeridian or polar point,
	        // we don’t need to cut this ring into a fragment;
	        // we can just leave it as-is.
	        if (k === i + 1) continue;

	        // Otherwise, if this is not the first point in the ring,
	        // cut the current fragment so that it ends at the current point.
	        // The current point is also normalized for later joining.
	        if (i) {
	          var fragmentBefore = {index: -1, polygon: polygon, ring: ring.slice(0, i + 1)};
	          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);
	          fragments[fragments.length - 1] = fragmentBefore;
	        }

	        // If the ring started with an antimeridian fragment,
	        // we can ignore that fragment entirely.
	        else fragments.pop();

	        // If the remainder of the ring is an antimeridian fragment,
	        // move on to the next ring.
	        if (k >= n) break;

	        // Otherwise, add the remaining ring fragment and continue.
	        fragments.push({index: -1, polygon: polygon, ring: ring = ring.slice(k - 1)});
	        ring[0] = normalizePoint(ring[0][1]);
	        i = -1;
	        n = ring.length;
	      }
	    }
	  }
	}

	// Now stitch the fragments back together into rings.
	function stitchFragments(fragments) {
	  var i, n = fragments.length;

	  // To connect the fragments start-to-end, create a simple index by end.
	  var fragmentByStart = {},
	      fragmentByEnd = {},
	      fragment,
	      start,
	      startFragment,
	      end,
	      endFragment;

	  // For each fragment…
	  for (i = 0; i < n; ++i) {
	    fragment = fragments[i];
	    start = fragment.ring[0];
	    end = fragment.ring[fragment.ring.length - 1];

	    // If this fragment is closed, add it as a standalone ring.
	    if (start[0] === end[0] && start[1] === end[1]) {
	      fragment.polygon.push(fragment.ring);
	      fragments[i] = null;
	      continue;
	    }

	    fragment.index = i;
	    fragmentByStart[start] = fragmentByEnd[end] = fragment;
	  }

	  // For each open fragment…
	  for (i = 0; i < n; ++i) {
	    fragment = fragments[i];
	    if (fragment) {
	      start = fragment.ring[0];
	      end = fragment.ring[fragment.ring.length - 1];
	      startFragment = fragmentByEnd[start];
	      endFragment = fragmentByStart[end];

	      delete fragmentByStart[start];
	      delete fragmentByEnd[end];

	      // If this fragment is closed, add it as a standalone ring.
	      if (start[0] === end[0] && start[1] === end[1]) {
	        fragment.polygon.push(fragment.ring);
	        continue;
	      }

	      if (startFragment) {
	        delete fragmentByEnd[start];
	        delete fragmentByStart[startFragment.ring[0]];
	        startFragment.ring.pop(); // drop the shared coordinate
	        fragments[startFragment.index] = null;
	        fragment = {index: -1, polygon: startFragment.polygon, ring: startFragment.ring.concat(fragment.ring)};

	        if (startFragment === endFragment) {
	          // Connect both ends to this single fragment to create a ring.
	          fragment.polygon.push(fragment.ring);
	        } else {
	          fragment.index = n++;
	          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
	        }
	      } else if (endFragment) {
	        delete fragmentByStart[end];
	        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];
	        fragment.ring.pop(); // drop the shared coordinate
	        fragment = {index: n++, polygon: endFragment.polygon, ring: fragment.ring.concat(endFragment.ring)};
	        fragments[endFragment.index] = null;
	        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
	      } else {
	        fragment.ring.push(fragment.ring[0]); // close ring
	        fragment.polygon.push(fragment.ring);
	      }
	    }
	  }
	}

	function stitchFeature(input) {
	  var output = {type: "Feature", geometry: stitchGeometry(input.geometry)};
	  if (input.id != null) output.id = input.id;
	  if (input.bbox != null) output.bbox = input.bbox;
	  if (input.properties != null) output.properties = input.properties;
	  return output;
	}

	function stitchGeometry(input) {
	  if (input == null) return input;
	  var output, fragments, i, n;
	  switch (input.type) {
	    case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(stitchGeometry)}; break;
	    case "Point": output = {type: "Point", coordinates: clampPoint(input.coordinates)}; break;
	    case "MultiPoint": case "LineString": output = {type: input.type, coordinates: clampPoints(input.coordinates)}; break;
	    case "MultiLineString": output = {type: "MultiLineString", coordinates: input.coordinates.map(clampPoints)}; break;
	    case "Polygon": {
	      var polygon = [];
	      extractFragments(input.coordinates, polygon, fragments = []);
	      stitchFragments(fragments);
	      output = {type: "Polygon", coordinates: polygon};
	      break;
	    }
	    case "MultiPolygon": {
	      fragments = [], i = -1, n = input.coordinates.length;
	      var polygons = new Array(n);
	      while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);
	      stitchFragments(fragments);
	      output = {type: "MultiPolygon", coordinates: polygons.filter(nonempty)};
	      break;
	    }
	    default: return input;
	  }
	  if (input.bbox != null) output.bbox = input.bbox;
	  return output;
	}

	var stitch = function(input) {
	  if (input == null) return input;
	  switch (input.type) {
	    case "Feature": return stitchFeature(input);
	    case "FeatureCollection": {
	      var output = {type: "FeatureCollection", features: input.features.map(stitchFeature)};
	      if (input.bbox != null) output.bbox = input.bbox;
	      return output;
	    }
	    default: return stitchGeometry(input);
	  }
	};

	function timesRaw(lambda, phi) {
	  var t = tan(phi / 2),
	      s = sin(quarterPi * t);
	  return [
	    lambda * (0.74482 - 0.34588 * s * s),
	    1.70711 * t
	  ];
	}

	timesRaw.invert = function(x, y) {
	  var t = y / 1.70711,
	      s = sin(quarterPi * t);
	  return [
	    x / (0.74482 - 0.34588 * s * s),
	    2 * atan(t)
	  ];
	};

	var times = function() {
	  return d3Geo.geoProjection(timesRaw)
	      .scale(146.153);
	};

	// Compute the origin as the midpoint of the two reference points.
	// Rotate one of the reference points by the origin.
	// Apply the spherical law of sines to compute gamma rotation.
	var twoPoint = function(raw, p0, p1) {
	  var i = d3Geo.geoInterpolate(p0, p1),
	      o = i(0.5),
	      a = d3Geo.geoRotation([-o[0], -o[1]])(p0),
	      b = i.distance / 2,
	      y = -asin(sin(a[1] * radians) / sin(b)),
	      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],
	      p = d3Geo.geoProjection(raw(b)).rotate(R),
	      r = d3Geo.geoRotation(R),
	      center = p.center;

	  delete p.rotate;

	  p.center = function(_) {
	    return arguments.length ? center(r(_)) : r.invert(center());
	  };

	  return p
	      .clipAngle(90);
	};

	function twoPointAzimuthalRaw(d) {
	  var cosd = cos(d);

	  function forward(lambda, phi) {
	    var coordinates = d3Geo.geoGnomonicRaw(lambda, phi);
	    coordinates[0] *= cosd;
	    return coordinates;
	  }

	  forward.invert = function(x, y) {
	    return d3Geo.geoGnomonicRaw.invert(x / cosd, y);
	  };

	  return forward;
	}

	function twoPointAzimuthalUsa() {
	  return twoPointAzimuthal([-158, 21.5], [-77, 39])
	      .clipAngle(60)
	      .scale(400);
	}

	function twoPointAzimuthal(p0, p1) {
	  return twoPoint(twoPointAzimuthalRaw, p0, p1);
	}

	// TODO clip to ellipse
	function twoPointEquidistantRaw(z0) {
	  if (!(z0 *= 2)) return d3Geo.geoAzimuthalEquidistantRaw;
	  var lambdaa = -z0 / 2,
	      lambdab = -lambdaa,
	      z02 = z0 * z0,
	      tanLambda0 = tan(lambdab),
	      S = 0.5 / sin(lambdab);

	  function forward(lambda, phi) {
	    var za = acos(cos(phi) * cos(lambda - lambdaa)),
	        zb = acos(cos(phi) * cos(lambda - lambdab)),
	        ys = phi < 0 ? -1 : 1;
	    za *= za, zb *= zb;
	    return [
	      (za - zb) / (2 * z0),
	      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)
	    ];
	  }

	  forward.invert = function(x, y) {
	    var y2 = y * y,
	        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),
	        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),
	        t,
	        d;
	    return [
	      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),
	      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)
	    ];
	  };

	  return forward;
	}

	function twoPointEquidistantUsa() {
	  return twoPointEquidistant([-158, 21.5], [-77, 39])
	      .clipAngle(130)
	      .scale(122.571);
	}

	function twoPointEquidistant(p0, p1) {
	  return twoPoint(twoPointEquidistantRaw, p0, p1);
	}

	function vanDerGrintenRaw(lambda, phi) {
	  if (abs(phi) < epsilon) return [lambda, 0];
	  var sinTheta = abs(phi / halfPi),
	      theta = asin(sinTheta);
	  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];
	  var cosTheta = cos(theta),
	      A = abs(pi / lambda - lambda / pi) / 2,
	      A2 = A * A,
	      G = cosTheta / (sinTheta + cosTheta - 1),
	      P = G * (2 / sinTheta - 1),
	      P2 = P * P,
	      P2_A2 = P2 + A2,
	      G_P2 = G - P2,
	      Q = A2 + G;
	  return [
	    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,
	    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2
	  ];
	}

	vanDerGrintenRaw.invert = function(x, y) {
	  if (abs(y) < epsilon) return [x, 0];
	  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];
	  var x2 = (x /= pi) * x,
	      y2 = (y /= pi) * y,
	      x2_y2 = x2 + y2,
	      z = x2_y2 * x2_y2,
	      c1 = -abs(y) * (1 + x2_y2),
	      c2 = c1 - 2 * y2 + x2,
	      c3 = -2 * c1 + 1 + 2 * y2 + z,
	      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,
	      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,
	      m1 = 2 * sqrt(-a1 / 3),
	      theta1 = acos(3 * d / (a1 * m1)) / 3;
	  return [
	    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),
	    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))
	  ];
	};

	var vanDerGrinten = function() {
	  return d3Geo.geoProjection(vanDerGrintenRaw)
	      .scale(79.4183);
	};

	function vanDerGrinten2Raw(lambda, phi) {
	  if (abs(phi) < epsilon) return [lambda, 0];
	  var sinTheta = abs(phi / halfPi),
	      theta = asin(sinTheta);
	  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];
	  var cosTheta = cos(theta),
	      A = abs(pi / lambda - lambda / pi) / 2,
	      A2 = A * A,
	      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);
	  return [
	    sign(lambda) * pi * x1,
	    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))
	  ];
	}

	vanDerGrinten2Raw.invert = function(x, y) {
	  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];
	  var x1 = abs(x / pi),
	      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),
	      A2 = A * A,
	      B = sqrt(A2 + 1);
	  return [
	    sign(x) * pi * (B - A),
	    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))
	  ];
	};

	var vanDerGrinten2 = function() {
	  return d3Geo.geoProjection(vanDerGrinten2Raw)
	      .scale(79.4183);
	};

	function vanDerGrinten3Raw(lambda, phi) {
	  if (abs(phi) < epsilon) return [lambda, 0];
	  var sinTheta = phi / halfPi,
	      theta = asin(sinTheta);
	  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];
	  var A = (pi / lambda - lambda / pi) / 2,
	      y1 = sinTheta / (1 + cos(theta));
	  return [
	    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),
	    pi * y1
	  ];
	}

	vanDerGrinten3Raw.invert = function(x, y) {
	  if (!y) return [x, 0];
	  var y1 = y / pi,
	      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);
	  return [
	    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,
	    halfPi * sin(2 * atan(y1))
	  ];
	};

	var vanDerGrinten3 = function() {
	  return d3Geo.geoProjection(vanDerGrinten3Raw)
	        .scale(79.4183);
	};

	function vanDerGrinten4Raw(lambda, phi) {
	  if (!phi) return [lambda, 0];
	  var phi0 = abs(phi);
	  if (!lambda || phi0 === halfPi) return [0, phi];
	  var B = phi0 / halfPi,
	      B2 = B * B,
	      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
	      C2 = C * C,
	      BC = B * C,
	      B_C2 = B2 + C2 + 2 * BC,
	      B_3C = B + 3 * C,
	      lambda0 = lambda / halfPi,
	      lambda1 = lambda0 + 1 / lambda0,
	      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),
	      D2 = D * D,
	      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),
	      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);
	  return [
	    sign(lambda) * halfPi * x1,
	    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)
	  ];
	}

	vanDerGrinten4Raw.invert = function(x, y) {
	  var delta;
	  if (!x || !y) return [x, y];
	  y /= pi;
	  var x1 = sign(x) * x / halfPi,
	      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),
	      D2 = D * D,
	      B = 2 * y,
	      i = 50;
	  do {
	    var B2 = B * B,
	        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
	        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),
	        C2 = C * C,
	        BC = B * C,
	        B_C = B + C,
	        B_C2 = B_C * B_C,
	        B_3C = B + 3 * C,
	        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),
	        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),
	        sqrtF = sqrt(F),
	        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),
	        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
	    B -= delta = f / f_;
	  } while (delta > epsilon && --i > 0);
	  return [
	    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,
	    halfPi * B
	  ];
	};

	var vanDerGrinten4 = function() {
	  return d3Geo.geoProjection(vanDerGrinten4Raw)
	      .scale(127.16);
	};

	var A = 4 * pi + 3 * sqrt(3);
	var B = 2 * sqrt(2 * pi * sqrt(3) / A);

	var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);

	var wagner4 = function() {
	  return d3Geo.geoProjection(wagner4Raw)
	      .scale(176.84);
	};

	function wagner6Raw(lambda, phi) {
	  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];
	}

	wagner6Raw.invert = function(x, y) {
	  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];
	};

	var wagner6 = function() {
	  return d3Geo.geoProjection(wagner6Raw)
	      .scale(152.63);
	};

	function wagner7Raw(lambda, phi) {
	  var s = 0.90631 * sin(phi),
	      c0 = sqrt(1 - s * s),
	      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));
	  return [
	    2.66723 * c0 * c1 * sin(lambda),
	    1.24104 * s * c1
	  ];
	}

	wagner7Raw.invert = function(x, y) {
	  var t1 = x / 2.66723,
	      t2 = y / 1.24104,
	      p = sqrt(t1 * t1 + t2 * t2),
	      c = 2 * asin(p / 2);
	  return [
	    3 * atan2(x * tan(c), 2.66723 * p),
	    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))
	  ];
	};

	var wagner7 = function() {
	  return d3Geo.geoProjection(wagner7Raw)
	      .scale(172.632);
	};

	function wiechelRaw(lambda, phi) {
	  var cosPhi = cos(phi),
	      sinPhi = cos(lambda) * cosPhi,
	      sin1_Phi = 1 - sinPhi,
	      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),
	      sinLambda = sin(lambda);
	  cosPhi = sqrt(1 - sinPhi * sinPhi);
	  return [
	    sinLambda * cosPhi - cosLambda * sin1_Phi,
	    -cosLambda * cosPhi - sinLambda * sin1_Phi
	  ];
	}

	wiechelRaw.invert = function(x, y) {
	  var w = (x * x + y * y) / -2,
	      k = sqrt(-w * (2 + w)),
	      b = y * w + x * k,
	      a = x * w - y * k,
	      D = sqrt(a * a + b * b);
	  return [
	    atan2(k * b, D * (1 + w)),
	    D ? -asin(k * a / D) : 0
	  ];
	};

	var wiechel = function() {
	  return d3Geo.geoProjection(wiechelRaw)
	      .rotate([0, -90, 45])
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};

	function winkel3Raw(lambda, phi) {
	  var coordinates = aitoffRaw(lambda, phi);
	  return [
	    (coordinates[0] + lambda / halfPi) / 2,
	    (coordinates[1] + phi) / 2
	  ];
	}

	winkel3Raw.invert = function(x, y) {
	  var lambda = x, phi = y, i = 25;
	  do {
	    var cosphi = cos(phi),
	        sinphi = sin(phi),
	        sin_2phi = sin(2 * phi),
	        sin2phi = sinphi * sinphi,
	        cos2phi = cosphi * cosphi,
	        sinlambda = sin(lambda),
	        coslambda_2 = cos(lambda / 2),
	        sinlambda_2 = sin(lambda / 2),
	        sin2lambda_2 = sinlambda_2 * sinlambda_2,
	        C = 1 - cos2phi * coslambda_2 * coslambda_2,
	        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,
	        F,
	        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,
	        fy = 0.5 * (E * sinphi + phi) - y,
	        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,
	        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),
	        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),
	        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,
	        denominator = dxdphi * dydlambda - dydphi * dxdlambda,
	        dlambda = (fy * dxdphi - fx * dydphi) / denominator,
	        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;
	    lambda -= dlambda, phi -= dphi;
	  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);
	  return [lambda, phi];
	};

	var winkel3 = function() {
	  return d3Geo.geoProjection(winkel3Raw)
	      .scale(158.837);
	};

	exports.geoAiry = airy;
	exports.geoAiryRaw = airyRaw;
	exports.geoAitoff = aitoff;
	exports.geoAitoffRaw = aitoffRaw;
	exports.geoArmadillo = armadillo;
	exports.geoArmadilloRaw = armadilloRaw;
	exports.geoAugust = august;
	exports.geoAugustRaw = augustRaw;
	exports.geoBaker = baker;
	exports.geoBakerRaw = bakerRaw;
	exports.geoBerghaus = berghaus;
	exports.geoBerghausRaw = berghausRaw;
	exports.geoBoggs = boggs;
	exports.geoBoggsRaw = boggsRaw;
	exports.geoBonne = bonne;
	exports.geoBonneRaw = bonneRaw;
	exports.geoBottomley = bottomley;
	exports.geoBottomleyRaw = bottomleyRaw;
	exports.geoBromley = bromley;
	exports.geoBromleyRaw = bromleyRaw;
	exports.geoChamberlin = chamberlin;
	exports.geoChamberlinRaw = chamberlinRaw;
	exports.geoChamberlinAfrica = chamberlinAfrica;
	exports.geoCollignon = collignon;
	exports.geoCollignonRaw = collignonRaw;
	exports.geoCraig = craig;
	exports.geoCraigRaw = craigRaw;
	exports.geoCraster = craster;
	exports.geoCrasterRaw = crasterRaw;
	exports.geoCylindricalEqualArea = cylindricalEqualArea;
	exports.geoCylindricalEqualAreaRaw = cylindricalEqualAreaRaw;
	exports.geoCylindricalStereographic = cylindricalStereographic;
	exports.geoCylindricalStereographicRaw = cylindricalStereographicRaw;
	exports.geoEckert1 = eckert1;
	exports.geoEckert1Raw = eckert1Raw;
	exports.geoEckert2 = eckert2;
	exports.geoEckert2Raw = eckert2Raw;
	exports.geoEckert3 = eckert3;
	exports.geoEckert3Raw = eckert3Raw;
	exports.geoEckert4 = eckert4;
	exports.geoEckert4Raw = eckert4Raw;
	exports.geoEckert5 = eckert5;
	exports.geoEckert5Raw = eckert5Raw;
	exports.geoEckert6 = eckert6;
	exports.geoEckert6Raw = eckert6Raw;
	exports.geoEisenlohr = eisenlohr;
	exports.geoEisenlohrRaw = eisenlohrRaw;
	exports.geoFahey = fahey;
	exports.geoFaheyRaw = faheyRaw;
	exports.geoFoucaut = foucaut;
	exports.geoFoucautRaw = foucautRaw;
	exports.geoGilbert = gilbert;
	exports.geoGingery = gingery;
	exports.geoGingeryRaw = gingeryRaw;
	exports.geoGinzburg4 = ginzburg4;
	exports.geoGinzburg4Raw = ginzburg4Raw;
	exports.geoGinzburg5 = ginzburg5;
	exports.geoGinzburg5Raw = ginzburg5Raw;
	exports.geoGinzburg6 = ginzburg6;
	exports.geoGinzburg6Raw = ginzburg6Raw;
	exports.geoGinzburg8 = ginzburg8;
	exports.geoGinzburg8Raw = ginzburg8Raw;
	exports.geoGinzburg9 = ginzburg9;
	exports.geoGinzburg9Raw = ginzburg9Raw;
	exports.geoGringorten = gringorten;
	exports.geoGringortenRaw = gringortenRaw;
	exports.geoGuyou = guyou;
	exports.geoGuyouRaw = guyouRaw;
	exports.geoHammer = hammer;
	exports.geoHammerRaw = hammerRaw;
	exports.geoHammerRetroazimuthal = hammerRetroazimuthal;
	exports.geoHammerRetroazimuthalRaw = hammerRetroazimuthalRaw;
	exports.geoHealpix = healpix;
	exports.geoHealpixRaw = healpixRaw;
	exports.geoHill = hill;
	exports.geoHillRaw = hillRaw;
	exports.geoHomolosine = homolosine;
	exports.geoHomolosineRaw = homolosineRaw;
	exports.geoInterrupt = interrupt;
	exports.geoInterruptedBoggs = boggs$1;
	exports.geoInterruptedHomolosine = homolosine$1;
	exports.geoInterruptedMollweide = mollweide$1;
	exports.geoInterruptedMollweideHemispheres = mollweideHemispheres;
	exports.geoInterruptedSinuMollweide = sinuMollweide$1;
	exports.geoInterruptedSinusoidal = sinusoidal$1;
	exports.geoKavrayskiy7 = kavrayskiy7;
	exports.geoKavrayskiy7Raw = kavrayskiy7Raw;
	exports.geoLagrange = lagrange;
	exports.geoLagrangeRaw = lagrangeRaw;
	exports.geoLarrivee = larrivee;
	exports.geoLarriveeRaw = larriveeRaw;
	exports.geoLaskowski = laskowski;
	exports.geoLaskowskiRaw = laskowskiRaw;
	exports.geoLittrow = littrow;
	exports.geoLittrowRaw = littrowRaw;
	exports.geoLoximuthal = loximuthal;
	exports.geoLoximuthalRaw = loximuthalRaw;
	exports.geoMiller = miller;
	exports.geoMillerRaw = millerRaw;
	exports.geoModifiedStereographic = modifiedStereographic;
	exports.geoModifiedStereographicRaw = modifiedStereographicRaw;
	exports.geoModifiedStereographicAlaska = modifiedStereographicAlaska;
	exports.geoModifiedStereographicGs48 = modifiedStereographicGs48;
	exports.geoModifiedStereographicGs50 = modifiedStereographicGs50;
	exports.geoModifiedStereographicMiller = modifiedStereographicMiller;
	exports.geoModifiedStereographicLee = modifiedStereographicLee;
	exports.geoMollweide = mollweide;
	exports.geoMollweideRaw = mollweideRaw;
	exports.geoMtFlatPolarParabolic = mtFlatPolarParabolic;
	exports.geoMtFlatPolarParabolicRaw = mtFlatPolarParabolicRaw;
	exports.geoMtFlatPolarQuartic = mtFlatPolarQuartic;
	exports.geoMtFlatPolarQuarticRaw = mtFlatPolarQuarticRaw;
	exports.geoMtFlatPolarSinusoidal = mtFlatPolarSinusoidal;
	exports.geoMtFlatPolarSinusoidalRaw = mtFlatPolarSinusoidalRaw;
	exports.geoNaturalEarth = naturalEarth;
	exports.geoNaturalEarthRaw = naturalEarthRaw;
	exports.geoNaturalEarth2 = naturalEarth2;
	exports.geoNaturalEarth2Raw = naturalEarth2Raw;
	exports.geoNellHammer = nellHammer;
	exports.geoNellHammerRaw = nellHammerRaw;
	exports.geoPatterson = patterson;
	exports.geoPattersonRaw = pattersonRaw;
	exports.geoPolyconic = polyconic;
	exports.geoPolyconicRaw = polyconicRaw;
	exports.geoPolyhedral = polyhedral;
	exports.geoPolyhedralButterfly = butterfly;
	exports.geoPolyhedralCollignon = collignon$1;
	exports.geoPolyhedralWaterman = waterman;
	exports.geoProject = index;
	exports.geoGringortenQuincuncial = gringorten$1;
	exports.geoPeirceQuincuncial = peirce;
	exports.geoPierceQuincuncial = peirce;
	exports.geoQuantize = quantize;
	exports.geoQuincuncial = quincuncial;
	exports.geoRectangularPolyconic = rectangularPolyconic;
	exports.geoRectangularPolyconicRaw = rectangularPolyconicRaw;
	exports.geoRobinson = robinson;
	exports.geoRobinsonRaw = robinsonRaw;
	exports.geoSatellite = satellite;
	exports.geoSatelliteRaw = satelliteRaw;
	exports.geoSinuMollweide = sinuMollweide;
	exports.geoSinuMollweideRaw = sinuMollweideRaw;
	exports.geoSinusoidal = sinusoidal;
	exports.geoSinusoidalRaw = sinusoidalRaw;
	exports.geoStitch = stitch;
	exports.geoTimes = times;
	exports.geoTimesRaw = timesRaw;
	exports.geoTwoPointAzimuthal = twoPointAzimuthal;
	exports.geoTwoPointAzimuthalRaw = twoPointAzimuthalRaw;
	exports.geoTwoPointAzimuthalUsa = twoPointAzimuthalUsa;
	exports.geoTwoPointEquidistant = twoPointEquidistant;
	exports.geoTwoPointEquidistantRaw = twoPointEquidistantRaw;
	exports.geoTwoPointEquidistantUsa = twoPointEquidistantUsa;
	exports.geoVanDerGrinten = vanDerGrinten;
	exports.geoVanDerGrintenRaw = vanDerGrintenRaw;
	exports.geoVanDerGrinten2 = vanDerGrinten2;
	exports.geoVanDerGrinten2Raw = vanDerGrinten2Raw;
	exports.geoVanDerGrinten3 = vanDerGrinten3;
	exports.geoVanDerGrinten3Raw = vanDerGrinten3Raw;
	exports.geoVanDerGrinten4 = vanDerGrinten4;
	exports.geoVanDerGrinten4Raw = vanDerGrinten4Raw;
	exports.geoWagner4 = wagner4;
	exports.geoWagner4Raw = wagner4Raw;
	exports.geoWagner6 = wagner6;
	exports.geoWagner6Raw = wagner6Raw;
	exports.geoWagner7 = wagner7;
	exports.geoWagner7Raw = wagner7Raw;
	exports.geoWiechel = wiechel;
	exports.geoWiechelRaw = wiechelRaw;
	exports.geoWinkel3 = winkel3;
	exports.geoWinkel3Raw = winkel3Raw;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-geo/ Version 1.10.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(23)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Array) { 'use strict';

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	function adder() {
	  return new Adder;
	}

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add(temp, y, this.t);
	    add(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var quarterPi = pi / 4;
	var tau = pi * 2;

	var degrees = 180 / pi;
	var radians = pi / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;

	var log = Math.log;
	var pow = Math.pow;
	var sin = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin(x / 2)) * x;
	}

	function noop() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	function geoStream(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	}

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;

	var areaStream = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop;
	  },
	  sphere: function() {
	    areaSum.add(tau);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos(phi),
	      sinPhi = sin(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos(adLambda),
	      v = k * sdLambda * sin(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	function area(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	}

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
	  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range$1;

	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon) phi1 = 90;
	    else if (deltaSum < -epsilon) phi0 = -90;
	    range$1[0] = lambda0$1, range$1[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range$$1, x) {
	  return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;
	}

	function bounds(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range$1 = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	}

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point

	var centroidStream = {
	  sphere: noop,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroid(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function compose(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	}

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos(deltaPhi),
	      sinDeltaPhi = sin(deltaPhi),
	      cosDeltaGamma = cos(deltaGamma),
	      sinDeltaGamma = sin(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	function rotation(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  };

	  return forward;
	}

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos(radius),
	      sinRadius = sin(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
	}

	function circle() {
	  var center = constant([0, 0]),
	      radius = constant(90),
	      precision = constant(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees, x[1] *= degrees;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
	  };

	  return circle;
	}

	function clipBuffer() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	}

	function pointEqual(a, b) {
	  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
	}

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	}

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var sum = adder();

	function polygonContains(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      sinPhi = sin(phi),
	      normal = [sin(lambda), -cos(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum.reset();

	  if (sinPhi === 1) phi = halfPi + epsilon;
	  else if (sinPhi === -1) phi = -halfPi - epsilon;

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin(phi0),
	        cosPhi0 = cos(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin(phi1),
	          cosPhi1 = cos(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi,
	          k = sinPhi0 * sinPhi1;

	      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
	}

	function clip(pointVisible, clipLine, interpolate, start) {
	  return function(sink) {
	    var line = clipLine(sink),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = d3Array.merge(segments);
	        var startInside = polygonContains(polygon, start);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      line.point(lambda, phi);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      ringSink.point(lambda, phi);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	}

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi, -halfPi]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi : -pi,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi) < epsilon) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon
	      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
	          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi;
	    stream.point(-pi, phi);
	    stream.point(0, phi);
	    stream.point(pi, phi);
	    stream.point(pi, 0);
	    stream.point(pi, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi, -phi);
	    stream.point(-pi, 0);
	    stream.point(-pi, phi);
	  } else if (abs(from[0] - to[0]) > epsilon) {
	    var lambda = from[0] < to[0] ? pi : -pi;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	function clipCircle(radius) {
	  var cr = cos(radius),
	      delta = 6 * radians,
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos(lambda) * cos(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon;
	            point1[1] += epsilon;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi) < epsilon,
	        meridian = polar || delta < epsilon;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
	}

	function clipLine(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;

	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipRectangle(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = d3Array.merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	function extent() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	}

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;

	var lengthStream = {
	  sphere: noop,
	  point: noop,
	  lineStart: lengthLineStart,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin(phi),
	      cosPhi = cos(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos(delta),
	      sinDelta = sin(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	function length(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	}

	var coordinates = [null, null];
	var object = {type: "LineString", coordinates: coordinates};

	function distance(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length(object);
	}

	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};

	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};

	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}

	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}

	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon;
	}

	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}

	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}

	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}

	function contains(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	}

	function graticuleX(y0, y1, dy) {
	  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
	        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
	      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
	}

	function graticule10() {
	  return graticule()();
	}

	function interpolate(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos(y0),
	      sy0 = sin(y0),
	      cy1 = cos(y1),
	      sy1 = sin(y1),
	      kx0 = cy0 * cos(x0),
	      ky0 = cy0 * sin(x0),
	      kx1 = cy1 * cos(x1),
	      ky1 = cy1 * sin(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin(d);

	  var interpolate = d ? function(t) {
	    var B = sin(t *= d) / k,
	        A = sin(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees,
	      atan2(z, sqrt(x * x + y * y)) * degrees
	    ];
	  } : function() {
	    return [x0 * degrees, y0 * degrees];
	  };

	  interpolate.distance = d;

	  return interpolate;
	}

	function identity(x) {
	  return x;
	}

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;

	var areaStream$1 = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;

	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	// TODO Enforce positive area for exterior, negative area for interior?

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;

	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau);
	        break;
	      }
	    }
	  },
	  result: noop
	};

	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;

	var lengthStream$1 = {
	  point: noop,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};

	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}

	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        if (this._circle == null) this._circle = circle$1(this._radius);
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	function index(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	}

	function transform(methods) {
	  return {
	    stream: transformer(methods)
	  };
	}

	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fit(projection, fitBounds, object) {
	  var clip = projection.clipExtent && projection.clipExtent();
	  projection.scale(150).translate([0, 0]);
	  if (clip != null) projection.clipExtent(null);
	  geoStream(object, projection.stream(boundsStream$1));
	  fitBounds(boundsStream$1.result());
	  if (clip != null) projection.clipExtent(clip);
	  return projection;
	}

	function fitExtent(projection, extent, object) {
	  return fit(projection, function(b) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}

	function fitWidth(projection, width, object) {
	  return fit(projection, function(b) {
	    var w = +width,
	        k = w / (b[1][0] - b[0][0]),
	        x = (w - k * (b[1][0] + b[0][0])) / 2,
	        y = -k * b[0][1];
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	function fitHeight(projection, height, object) {
	  return fit(projection, function(b) {
	    var h = +height,
	        k = h / (b[1][1] - b[0][1]),
	        x = -k * b[0][0],
	        y = (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	var maxDepth = 16;
	var cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

	function resample(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	}

	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function transformRotate(rotate) {
	  return transformer({
	    point: function(x, y) {
	      var r = rotate(x, y);
	      return this.stream.point(r[0], r[1]);
	    }
	  });
	}

	function scaleTranslate(k, dx, dy) {
	  function transform$$1(x, y) {
	    return [dx + k * x, dy - k * y];
	  }
	  transform$$1.invert = function(x, y) {
	    return [(x - dx) / k, (dy - y) / k];
	  };
	  return transform$$1;
	}

	function scaleTranslateRotate(k, dx, dy, alpha) {
	  var cosAlpha = cos(alpha),
	      sinAlpha = sin(alpha),
	      a = cosAlpha * k,
	      b = sinAlpha * k,
	      ai = cosAlpha / k,
	      bi = sinAlpha / k,
	      ci = (sinAlpha * dy - cosAlpha * dx) / k,
	      fi = (sinAlpha * dx + cosAlpha * dy) / k;
	  function transform$$1(x, y) {
	    return [a * x - b * y + dx, dy - b * x - a * y];
	  }
	  transform$$1.invert = function(x, y) {
	    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
	  };
	  return transform$$1;
	}

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
	      alpha = 0, // post-rotate
	      theta = null, preclip = clipAntimeridian, // pre-clip angle
	      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent
	      delta2 = 0.5, // precision
	      projectResample,
	      projectTransform,
	      projectRotateTransform,
	      cache,
	      cacheStream;

	  function projection(point) {
	    return projectRotateTransform(point[0] * radians, point[1] * radians);
	  }

	  function invert(point) {
	    point = projectRotateTransform.invert(point[0], point[1]);
	    return point && [point[0] * degrees, point[1] * degrees];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
	  };

	  projection.preclip = function(_) {
	    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
	  };

	  projection.postclip = function(_) {
	    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
	  };

	  projection.angle = function(_) {
	    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };

	  projection.fitWidth = function(width, object) {
	    return fitWidth(projection, width, object);
	  };

	  projection.fitHeight = function(height, object) {
	    return fitHeight(projection, height, object);
	  };

	  function recenter() {
	    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
	        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
	    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
	    projectTransform = compose(project, transform$$1);
	    projectRotateTransform = compose(rotate, projectTransform);
	    projectResample = resample(projectTransform, delta2);
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
	  };

	  return p;
	}

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin(y)) / n;
	    return [r * sin(x *= n), r0 - r * cos(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	function conicEqualArea() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	}

	function albers() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	}

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	function albersUsa() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null, (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    return reset();
	  };

	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };

	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };

	  albersUsa.fitWidth = function(width, object) {
	    return fitWidth(albersUsa, width, object);
	  };

	  albersUsa.fitHeight = function(height, object) {
	    return fitHeight(albersUsa, height, object);
	  };

	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }

	  return albersUsa.scale(1070);
	}

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos(x),
	        cy = cos(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin(x),
	      k * sin(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin(c),
	        cc = cos(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	function azimuthalEqualArea() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	}

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	function azimuthalEquidistant() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	}

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi];
	};

	function mercator() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau);
	}

	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function(_) {
	    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function tany(y) {
	  return tan((halfPi + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
	    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
	    var r = f / pow(tany(y), n);
	    return [r * sin(n * x), f - r * cos(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];
	  };

	  return project;
	}

	function conicConformal() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	}

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	function equirectangular() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	}

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin(nx), g - gy * cos(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	function conicEquidistant() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	}

	function gnomonicRaw(x, y) {
	  var cy = cos(y), k = cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	function gnomonic() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	}

	function scaleTranslate$1(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}

	function identity$1() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect
	      x0 = null, y0, x1, y1, // clip extent
	      postclip = identity,
	      cache,
	      cacheStream,
	      projection;

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));
	    },
	    postclip: function(_) {
	      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    },
	    fitWidth: function(width, object) {
	      return fitWidth(projection, width, object);
	    },
	    fitHeight: function(height, object) {
	      return fitHeight(projection, height, object);
	    }
	  };
	}

	function naturalEarth1Raw(lambda, phi) {
	  var phi2 = phi * phi, phi4 = phi2 * phi2;
	  return [
	    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
	    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
	  ];
	}

	naturalEarth1Raw.invert = function(x, y) {
	  var phi = y, i = 25, delta;
	  do {
	    var phi2 = phi * phi, phi4 = phi2 * phi2;
	    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
	        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
	  } while (abs(delta) > epsilon && --i > 0);
	  return [
	    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
	    phi
	  ];
	};

	function naturalEarth1() {
	  return projection(naturalEarth1Raw)
	      .scale(175.295);
	}

	function orthographicRaw(x, y) {
	  return [cos(y) * sin(x), sin(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	function orthographic() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon);
	}

	function stereographicRaw(x, y) {
	  var cy = cos(y), k = 1 + cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	function stereographic() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	}

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi];
	};

	function transverseMercator() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	}

	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipAntimeridian = clipAntimeridian;
	exports.geoClipCircle = clipCircle;
	exports.geoClipExtent = extent;
	exports.geoClipRectangle = clipRectangle;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate;
	exports.geoLength = length;
	exports.geoPath = index;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$1;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoNaturalEarth1 = naturalEarth1;
	exports.geoNaturalEarth1Raw = naturalEarth1Raw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-path/ Version 1.0.5. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var pi = Math.PI;
	var tau = 2 * pi;
	var epsilon = 1e-6;
	var tauEpsilon = tau - epsilon;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon)) {}

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau + tau;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	exports.path = path;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 61 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var parse = __webpack_require__(193);
	var isarray = __webpack_require__(191);
	var abs = __webpack_require__(163);

	module.exports = Points;

	function Points (path) {
	    if (!(this instanceof Points)) return new Points(path);
	    this._path = isarray(path) ? path : parse(path);
	    this._path = abs(this._path);
	    this._path = zToL(this._path);
	}

	Points.prototype.at = function (pos, opts) {
	    return this._walk(pos, opts).pos;
	};

	Points.prototype.length = function () {
	    return this._walk(null).length;
	};

	Points.prototype._walk = function (pos, opts) {
	    var cur = [ 0, 0 ];
	    var prev = [ 0, 0, 0 ];
	    var len = 0;
	    var fudge = 1.045;
	    if (typeof pos === 'number') pos *= fudge;
	    
	    for (var i = 0; i < this._path.length; i++) {
	        var p = this._path[i];
	        if (p[0] === 'M') {
	            cur[0] = p[1];
	            cur[1] = p[2];
	            if (pos === 0) {
	                return { length: len, pos: cur };
	            }
	        }
	        else if (p[0] === 'C') {
	            prev[0] = cur[0];
	            prev[1] = cur[1];
	            prev[2] = len;
	            
	            var n = 100;
	            for (var j = 0; j <= n; j++) {
	                var t = j / n;
	                var x = xof_C(p, t);
	                var y = yof_C(p, t);
	                len += dist(cur[0], cur[1], x, y);
	                
	                cur[0] = x;
	                cur[1] = y;
	                
	                if (typeof pos === 'number' && len >= pos) {
	                    var dv = (len - pos) / (len - prev[2]);
	                    
	                    var npos = [
	                        cur[0] * (1 - dv) + prev[0] * dv,
	                        cur[1] * (1 - dv) + prev[1] * dv
	                    ];
	                    return { length: len, pos: npos };
	                }
	                prev[0] = cur[0];
	                prev[1] = cur[1];
	                prev[2] = len;
	            }
	        }
	        else if (p[0] === 'Q') {
	            prev[0] = cur[0];
	            prev[1] = cur[1];
	            prev[2] = len;
	            
	            var n = 100;
	            for (var j = 0; j <= n; j++) {
	                var t = j / n;
	                var x = xof_Q(p, t);
	                var y = yof_Q(p, t);
	                len += dist(cur[0], cur[1], x, y);
	                
	                cur[0] = x;
	                cur[1] = y;
	                
	                if (typeof pos === 'number' && len >= pos) {
	                    var dv = (len - pos) / (len - prev[2]);
	                    
	                    var npos = [
	                        cur[0] * (1 - dv) + prev[0] * dv,
	                        cur[1] * (1 - dv) + prev[1] * dv
	                    ];
	                    return { length: len, pos: npos };
	                }
	                prev[0] = cur[0];
	                prev[1] = cur[1];
	                prev[2] = len;
	            }
	        }
	        else if (p[0] === 'L') {
	            prev[0] = cur[0];
	            prev[1] = cur[1];
	            prev[2] = len;

	            len   += dist(cur[0], cur[1], p[1], p[2]);
	            cur[0] = p[1];
	            cur[1] = p[2];

	            if (typeof pos === 'number' && len >= pos) {
	                var dv = (len - pos) / (len - prev[2]);
	                var npos = [
	                    cur[0] * (1 - dv) + prev[0] * dv,
	                    cur[1] * (1 - dv) + prev[1] * dv
	                ];
	                return { length: len, pos: npos };
	            }
	            prev[0] = cur[0];
	            prev[1] = cur[1];
	            prev[2] = len;
	        }
	    }
	    return { length: len / fudge, pos: cur };
	    
	    function xof_C (p, t) {
	        return Math.pow((1-t), 3) * cur[0]
	            + 3 * Math.pow((1-t), 2) * t * p[1]
	            + 3 * (1-t) * Math.pow(t, 2) * p[3]
	            + Math.pow(t, 3) * p[5]
	        ;
	    }
	    function yof_C (p, t) {
	        return Math.pow((1-t), 3) * cur[1]
	            + 3 * Math.pow((1-t), 2) * t * p[2]
	            + 3 * (1-t) * Math.pow(t, 2) * p[4]
	            + Math.pow(t, 3) * p[6]
	        ;
	    }

	    function xof_Q (p, t) {
	        return Math.pow((1-t), 2) * cur[0]
	            + 2 * (1-t) * t * p[1]
	            + Math.pow(t, 2) * p[3]
	        ;
	    }
	    function yof_Q (p, t) {
	        return Math.pow((1-t), 2) * cur[1]
	            + 2 * (1-t) * t * p[2]
	            + Math.pow(t, 2) * p[4]
	        ;
	    }
	};

	function dist (ax, ay, bx, by) {
	    var x = ax - bx;
	    var y = ay - by;
	    return Math.sqrt(x*x + y*y);
	}

	// Convert 'Z' segments to 'L' segments
	function zToL(path){
	    var ret = [];
	    var startPoint = ['L',0,0];

	    for(var i=0, len=path.length; i<len; i++){
	        var pt = path[i];
	        switch(pt[0]){
	            case 'M':
	                startPoint = ['L', pt[1], pt[2]];
	                ret.push(pt);
	                break;
	            case 'Z':
	                ret.push(startPoint);
	                break;
	            default: 
	                ret.push(pt);
	        }
	    }
	    return ret;
	}


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ResetButton = function () {
	  function ResetButton(chart) {
	    _classCallCheck(this, ResetButton);

	    this.chart = chart;
	    this.isShow = false;
	    this.dom = null;

	    this.handleClick = this.handleClick.bind(this);
	  }

	  _createClass(ResetButton, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      e.preventDefault();
	      this.hide();
	    }
	  }, {
	    key: 'show',
	    value: function show() {
	      if (this.isShow) {
	        return;
	      }

	      if (this.dom) {
	        this.dom.style.display = 'block';
	        this.isShow = true;
	      } else {
	        var chart = this.chart;
	        var wrapper = chart.get('wrapperEl');
	        var range = chart.get('plotRange');
	        if (wrapper && range && range.tr) {
	          this.dom = document.createElement('span');
	          this.dom.innerText = '重置';
	          this.dom.className = 'widgets-reset-button';
	          this.dom.style.top = range.tr.y + 'px';
	          this.dom.style.right = chart.get('width') - range.tr.x + 'px';
	          wrapper.appendChild(this.dom);

	          this.isShow = true;

	          this.dom.addEventListener('click', this.handleClick);
	        }
	      }
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      if (this.isShow && this.dom) {
	        this.chart.get('options').filters = {};
	        this.chart.repaint();
	        this.dom.style.display = 'none';
	        this.isShow = false;
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (this.dom) {
	        this.dom.removeEventListener('click', this.handleClick);
	        this.dom.parentNode.removeChild(this.dom);
	        this.dom = null;
	      }
	      this.chart = null;
	    }
	  }]);

	  return ResetButton;
	}();

	exports.default = ResetButton;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\ResetButton.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\ResetButton.js"); } } })();

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	__webpack_require__(172);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-warrow';

	var Wcircle = (_temp = _class = function (_React$Component) {
	  _inherits(Wcircle, _React$Component);

	  function Wcircle() {
	    _classCallCheck(this, Wcircle);

	    return _possibleConstructorReturn(this, (Wcircle.__proto__ || Object.getPrototypeOf(Wcircle)).apply(this, arguments));
	  }

	  _createClass(Wcircle, [{
	    key: 'render',
	    value: function render() {
	      var type = this.props.type;

	      var mainClasses = (0, _classnames2.default)(prefix, prefix + '-' + type);

	      return _react2.default.createElement('i', { className: mainClasses });
	    }
	  }]);

	  return Wcircle;
	}(_react2.default.Component), _class.defaultProps = {
	  type: 'up'
	}, _temp);
	Wcircle.displayName = 'Wcircle';
	exports.default = Wcircle;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\arrow\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\arrow\\index.jsx"); } } })();

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = highchartsDataToG2Data;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function highchartsDataToG2Data(data, config) {
	  if (!data) {
	    return [];
	  }
	  if (!Array.isArray(data)) {
	    data = [data];
	  }
	  var newData = [];
	  if (Array.isArray(config.yAxis)) {
	    data.forEach(function (oneData) {
	      if (!oneData || !Array.isArray(oneData.data)) {
	        return;
	      }

	      var dataName = oneData.name,
	          _oneData$yAxis = oneData.yAxis,
	          yIndex = _oneData$yAxis === undefined ? 0 : _oneData$yAxis,
	          groupExtra = _objectWithoutProperties(oneData, ['name', 'yAxis']);

	      oneData.data.forEach(function (d, i) {
	        if (Array.isArray(d)) {
	          var _newData$push;

	          var _d = _toArray(d),
	              x = _d[0],
	              y = _d[1],
	              extra = _d.slice(2);

	          newData.push((_newData$push = {
	            x: x
	          }, _defineProperty(_newData$push, 'y' + yIndex, y), _defineProperty(_newData$push, 'extra', extra), _defineProperty(_newData$push, 'groupExtra', groupExtra), _defineProperty(_newData$push, 'type', dataName), _newData$push));
	        } else if (config.xAxis && config.xAxis.categories && config.xAxis.categories[i]) {
	          var _newData$push2;

	          var _x = config.xAxis.categories[i];
	          var _y = isNaN(d) ? d[0] : d;
	          newData.push((_newData$push2 = {
	            x: _x
	          }, _defineProperty(_newData$push2, 'y' + yIndex, _y), _defineProperty(_newData$push2, 'extra', []), _defineProperty(_newData$push2, 'groupExtra', groupExtra), _defineProperty(_newData$push2, 'type', dataName), _newData$push2));
	        } else {
	          var _newData$push3;

	          var _x2 = d.x,
	              _y2 = d.y,
	              _extra = _objectWithoutProperties(d, ['x', 'y']);

	          newData.push((_newData$push3 = {
	            x: _x2
	          }, _defineProperty(_newData$push3, 'y' + yIndex, _y2), _defineProperty(_newData$push3, 'extra', _extra), _defineProperty(_newData$push3, 'groupExtra', groupExtra), _defineProperty(_newData$push3, 'type', dataName), _newData$push3));
	        }
	      });
	    });
	  } else {
	    data.forEach(function (oneData) {
	      if (!oneData || !Array.isArray(oneData.data)) {
	        return;
	      }

	      var dataName = oneData.name,
	          facet = oneData.facet,
	          dodge = oneData.dodge,
	          groupExtra = _objectWithoutProperties(oneData, ['name', 'facet', 'dodge']);

	      oneData.data.forEach(function (d, i) {
	        if (Array.isArray(d)) {
	          var _d2 = _toArray(d),
	              x = _d2[0],
	              y = _d2[1],
	              extra = _d2.slice(2);

	          newData.push({
	            x: x,
	            y: y,
	            extra: extra,
	            groupExtra: groupExtra,
	            facet: facet,
	            dodge: dodge,
	            type: dataName
	          });
	        } else if (config.xAxis && config.xAxis.categories && config.xAxis.categories[i]) {
	          var _x3 = config.xAxis.categories[i];
	          var _y3 = isNaN(d) ? d[0] : d;
	          newData.push({
	            x: _x3,
	            y: _y3,
	            extra: [],
	            groupExtra: groupExtra,
	            facet: facet,
	            dodge: dodge,
	            type: dataName
	          });
	        } else {
	          var _x4 = d.x,
	              _y4 = d.y,
	              _extra2 = _objectWithoutProperties(d, ['x', 'y']);

	          newData.push({
	            x: _x4,
	            y: _y4,
	            extra: _extra2,
	            groupExtra: groupExtra,
	            facet: facet,
	            dodge: dodge,
	            type: dataName
	          });
	        }
	      });
	    });
	  }
	  return newData;
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\dataAdapter.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\dataAdapter.js"); } } })();

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _common = __webpack_require__(8);

	var _dataAdapter = __webpack_require__(65);

	var _dataAdapter2 = _interopRequireDefault(_dataAdapter);

	var _g2Theme = __webpack_require__(198);

	var _g2Theme2 = _interopRequireDefault(_g2Theme);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	(0, _g2Theme2.default)(_g2.default);

	// 图表唯一id
	var uniqueId = 0;
	function generateUniqueId() {
	  return 'react-g2-' + uniqueId++;
	}

	var rootClassName = 'aisc-widgets ';
	var rootChildClassName = 'aisc-widgets-children';

	/**
	 * g2Factory 函数
	 * 将非React版的图表类转化为React版
	 *
	 * @param {string} name 组件名称
	 * @param {object} Chart 组件原生代码组
	 * @param {boolean} convertData 控制是否转化数据
	 * */
	function g2Factory(name, Chart) {
	  var convertData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	  var ChartProcess = Chart;

	  var AiscChart = function (_React$Component) {
	    _inherits(AiscChart, _React$Component);

	    function AiscChart(props, context) {
	      _classCallCheck(this, AiscChart);

	      var _this = _possibleConstructorReturn(this, (AiscChart.__proto__ || Object.getPrototypeOf(AiscChart)).call(this, props, context));

	      _this.unmountCallbacks = [];
	      _this.resizeRunning = false;
	      _this.afterRenderCallbacks = [];

	      _this.chart = null;
	      _this.chartDom = null;
	      _this.chartId = generateUniqueId();

	      _this.autoResize = _this.autoResize.bind(_this);

	      // 图表初始化时记录日志
	      (0, _log2.default)(name, 'init');
	      return _this;
	    }

	    _createClass(AiscChart, [{
	      key: 'componentWillMount',
	      value: function componentWillMount() {
	        if (this.props.customChart) {
	          this.chartProcess = ChartProcess = _extends({}, ChartProcess, this.props.customChart);
	        } else {
	          this.chartProcess = ChartProcess;
	        }
	      }
	    }, {
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        // 设置初始高宽
	        this.initSize();

	        this.initChart(this.props);
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        var _this2 = this;

	        var newData = nextProps.data,
	            newWidth = nextProps.width,
	            newHeight = nextProps.height,
	            newPadding = nextProps.padding,
	            newConfig = nextProps.config,
	            changeConfig = nextProps.changeConfig;
	        var _props = this.props,
	            oldData = _props.data,
	            oldWidth = _props.width,
	            oldHeight = _props.height,
	            oldPadding = _props.padding,
	            oldConfig = _props.config;

	        // 配置项有变化，重新生成图表

	        if (changeConfig && !_g2.default.Util.isEqual(newConfig, oldConfig)) {
	          this.componentWillUnmount();

	          (0, _common.requestAnimationFrame)(function () {
	            _this2.initChart(nextProps);
	          });

	          return;
	        }

	        if (newPadding !== oldPadding) {
	          console.warn('padding 不支持修改');
	        }

	        var needAfterRender = false;

	        // 数据有变化
	        if (newData !== oldData || Array.isArray(newData) && Array.isArray(oldData) && newData.length !== oldData.length) {
	          var data = convertData && ChartProcess.convertData !== false && newConfig.dataType !== 'g2' ? (0, _dataAdapter2.default)(newData, newConfig) : newData;
	          this.rawData = newData;
	          if (ChartProcess.changeData) {
	            this.chart && ChartProcess.changeData.call(this, this.chart, newConfig, data);
	          } else {
	            this.chart && this.chart.changeData(data);
	          }

	          needAfterRender = true;
	        }
	        // 传入的长宽有变化
	        if (newWidth !== oldWidth || newHeight !== oldHeight) {
	          if (ChartProcess.changeSize) {
	            this.chart && ChartProcess.changeSize.call(this, this.chart, newConfig, newWidth, newHeight);
	          } else {
	            this.chart && this.chart.changeSize(newWidth, newHeight);
	          }

	          needAfterRender = true;
	        }

	        if (needAfterRender) {
	          this.afterRender(newConfig);
	        }
	      }

	      // 渲染控制，仅 class、style、children 变化会触发渲染

	    }, {
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate(nextProps) {
	        var newClass = nextProps.className,
	            newStyle = nextProps.style,
	            newChild = nextProps.children;
	        var _props2 = this.props,
	            oldClass = _props2.className,
	            oldStyle = _props2.style,
	            oldChild = _props2.children;

	        return newClass !== oldClass || newStyle !== oldStyle || newChild !== oldChild;
	      }

	      // 准备销毁

	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        var _this3 = this;

	        window.removeEventListener('resize', this.autoResize);

	        if (ChartProcess.destroy) {
	          this.chart && ChartProcess.destroy.call(this, this.chart);
	        }
	        if (this.unmountCallbacks.length > 0) {
	          this.unmountCallbacks.forEach(function (cb) {
	            cb && cb.call(_this3, _this3.chart);
	          });
	        }

	        this.chart && this.chart.off();
	        this.chart && this.chart.destroy && this.chart.destroy();
	        this.chart = null;
	        // this.chartDom = null;
	        // this.chartId = null;

	        this.afterRenderCallbacks = [];
	        this.unmountCallbacks = [];
	      }
	    }, {
	      key: 'initChart',
	      value: function initChart(props) {
	        var currentProps = props || this.props;
	        // 开始初始化图表
	        currentProps = ChartProcess.beforeInit ? ChartProcess.beforeInit.call(this, currentProps) : currentProps;

	        var _currentProps = currentProps,
	            _currentProps$width = _currentProps.width,
	            width = _currentProps$width === undefined ? this._size[0] : _currentProps$width,
	            _currentProps$height = _currentProps.height,
	            height = _currentProps$height === undefined ? this._size[1] || 200 : _currentProps$height,
	            initData = _currentProps.data,
	            padding = _currentProps.padding,
	            forceFit = _currentProps.forceFit,
	            config = _currentProps.config,
	            event = _currentProps.event,
	            otherProps = _objectWithoutProperties(_currentProps, ['width', 'height', 'data', 'padding', 'forceFit', 'config', 'event']);
	        // 生成图表实例


	        var chart = new _g2.default.Chart(_extends({
	          container: this.chartDom,
	          width: width,
	          height: height,
	          padding: padding,
	          forceFit: forceFit || false,
	          // auto-padding 时自带的内边距
	          autoPaddingAppend: 1
	        }, otherProps));

	        // 1.x 升级 到 2.x 的提示
	        if (config.xAxis && config.xAxis.type === 'datetime') {
	          console.warn('配置属性 "config.xAxis.type": "datetime" 在 widgets 2.x 中已被废弃，请使用 "config.xAxis.type": "time"。详情请看：http://aisc.alibaba-inc.com/site/pc#/cate/4/page/137。');
	        }

	        // 预处理数据
	        var data = convertData && ChartProcess.convertData !== false && config.dataType !== 'g2' ? (0, _dataAdapter2.default)(initData, config) : initData;
	        this.rawData = initData;
	        chart && ChartProcess.init.call(this, chart, config, data);

	        // 绑定事件，这里透传了G2的所有事件，暂时不做额外封装
	        if (chart && event) {
	          Object.keys(event).forEach(function (eventKey) {
	            chart.on(eventKey, event[eventKey]);
	          });
	        }

	        this.chart = chart;

	        this.afterRender(config);
	      }

	      // 初始化时适配高宽

	    }, {
	      key: 'initSize',
	      value: function initSize() {
	        var element = this.chartDom;
	        var parentSize = (0, _common.getParentSize)(element, this.props.width, this.props.height);
	        this.setSize(parentSize);

	        window.addEventListener('resize', this.autoResize);
	      }

	      // 动态适配高宽，利用 resizeRunning 做节流

	    }, {
	      key: 'autoResize',
	      value: function autoResize() {
	        var _this4 = this;

	        if (this.resizeRunning) {
	          return;
	        }

	        var element = this.chartDom,
	            props = this.props,
	            _size = this._size;

	        this.resizeRunning = true;

	        (0, _common.requestAnimationFrame)(function () {
	          _this4.resizeRunning = false;

	          var parentSize = (0, _common.getParentSize)(element, props.width, props.height);
	          if (!(parentSize[0] === _size[0] && parentSize[1] === _size[1])) {
	            _this4.setSize(parentSize);

	            if (ChartProcess.changeSize) {
	              _this4.chart && ChartProcess.changeSize.call(_this4, _this4.chart, props.config, parentSize[0], parentSize[1]);
	            } else {
	              _this4.chart && _this4.chart.changeSize(parentSize[0], parentSize[1]);
	            }
	          }
	        });
	      }

	      // 设置高宽

	    }, {
	      key: 'setSize',
	      value: function setSize(newSize) {
	        var element = this.chartDom;
	        this._size = newSize;

	        if (newSize[0]) {
	          element.style.width = newSize[0] + 'px';
	        }
	        if (newSize[1]) {
	          element.style.height = newSize[1] + 'px';
	        }
	      }
	    }, {
	      key: 'afterRender',
	      value: function afterRender(config) {
	        var _this5 = this;

	        if (ChartProcess.afterRender || this.afterRenderCallbacks.length > 0) {
	          setTimeout(function () {
	            if (_this5.chart && ChartProcess.afterRender) {
	              ChartProcess.afterRender.call(_this5, _this5.chart, config || _this5.props.config);
	            }
	            if (_this5.afterRenderCallbacks.length > 0) {
	              _this5.afterRenderCallbacks.forEach(function (cb) {
	                cb && cb.call(_this5, _this5.chart, config || _this5.props.config);
	              });
	            }
	          }, 50);
	        }
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this6 = this;

	        var _props3 = this.props,
	            _props3$className = _props3.className,
	            className = _props3$className === undefined ? '' : _props3$className,
	            style = _props3.style,
	            children = _props3.children,
	            data = _props3.data,
	            width = _props3.width,
	            height = _props3.height,
	            padding = _props3.padding,
	            config = _props3.config,
	            otherProps = _objectWithoutProperties(_props3, ['className', 'style', 'children', 'data', 'width', 'height', 'padding', 'config']);

	        return _react2.default.createElement(
	          'div',
	          _extends({ ref: function ref(dom) {
	              return _this6.chartDom = dom;
	            }, id: this.chartId, className: rootClassName + name + ' ' + className, style: style }, otherProps),
	          children ? _react2.default.createElement(
	            'div',
	            { className: rootChildClassName },
	            children
	          ) : null
	        );
	      }
	    }]);

	    return AiscChart;
	  }(_react2.default.Component);

	  AiscChart.displayName = 'AiscChart';


	  AiscChart.propTypes = {
	    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    config: _propTypes2.default.object,
	    data: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.object), _propTypes2.default.object]).isRequired,
	    event: _propTypes2.default.object,
	    forceFit: _propTypes2.default.bool
	  };

	  AiscChart.defaultProps = {
	    config: {}
	  };

	  AiscChart.isG2Chart = true;

	  AiscChart.displayName = 'AiscWidgets' + name;

	  //暴露原版类
	  AiscChart.Chart = Chart;

	  return AiscChart;
	}

	exports.default = g2Factory;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\g2Factory.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\g2Factory.js"); } } })();

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _arrow = __webpack_require__(64);

	var _arrow2 = _interopRequireDefault(_arrow);

	var _common = __webpack_require__(8);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	__webpack_require__(174);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wcircle';

	var Wcircle = (_temp = _class = function (_React$Component) {
	  _inherits(Wcircle, _React$Component);

	  function Wcircle(props) {
	    _classCallCheck(this, Wcircle);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wcircle.__proto__ || Object.getPrototypeOf(Wcircle)).call(this, props));

	    (0, _log2.default)('Wcircle', 'init');
	    return _this;
	  }

	  _createClass(Wcircle, [{
	    key: 'renderBottom',
	    value: function renderBottom() {
	      var bottomTitle = this.props.bottomTitle;
	      var bottomUnit = this.props.bottomUnit;
	      var bottomNumber = this.props.bottomNumber;
	      var bottomTrend = this.props.bottomTrend;

	      var bottomClasses = (0, _classnames2.default)(_defineProperty({}, prefix + '-bottom-block', true));

	      var numberTrendIcon = void 0;
	      var numberClasses = prefix + '-bottom-number';
	      if (bottomTrend === 'raise') {
	        numberClasses += ' raise';
	        numberTrendIcon = _react2.default.createElement(_arrow2.default, { type: 'up' });
	      } else if (bottomTrend === 'drop') {
	        numberClasses += ' drop';
	        numberTrendIcon = _react2.default.createElement(_arrow2.default, { type: 'down' });
	      }

	      if (!!bottomTitle || !!bottomUnit || !!bottomNumber || !!bottomTrend) {
	        return _react2.default.createElement(
	          'div',
	          { className: bottomClasses },
	          bottomTrend && _react2.default.createElement(
	            'span',
	            { className: prefix + '-leftIcon' },
	            numberTrendIcon
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: numberClasses },
	            bottomNumber,
	            bottomUnit && _react2.default.createElement(
	              'span',
	              { className: prefix + '-bottom-unit' },
	              bottomUnit
	            )
	          ),
	          _react2.default.createElement(
	            'p',
	            { className: prefix + '-title' },
	            bottomTitle
	          )
	        );
	      }
	    }
	  }, {
	    key: 'renderMain',
	    value: function renderMain() {
	      var numberTrendIcon = void 0;
	      var numberClasses = prefix + '-number';

	      var _props = this.props,
	          trend = _props.trend,
	          type = _props.type,
	          percent = _props.percent,
	          radius = _props.radius,
	          strokeWidth = _props.strokeWidth,
	          status = _props.status,
	          customColor = _props.color,
	          backgroundColor = _props.backgroundColor;


	      var style = {};
	      if (customColor) {
	        style.color = customColor;
	      }

	      if (trend === 'raise') {
	        numberClasses += ' raise';
	        numberTrendIcon = _react2.default.createElement(_arrow2.default, { type: 'up' });
	      } else if (trend === 'drop') {
	        numberClasses += ' drop';
	        numberTrendIcon = _react2.default.createElement(_arrow2.default, { type: 'down' });
	      }

	      var radiusInner = radius - strokeWidth / 2;
	      var pathString = 'M ' + radius + ',' + radius + ' m 0,' + radiusInner + '\n     a ' + radiusInner + ',' + radiusInner + ' 0 1 1 0,-' + 2 * radiusInner + '\n     a ' + radiusInner + ',' + radiusInner + ' 0 1 1 0,' + 2 * radiusInner;
	      var circleLengh = Math.PI * 2 * radiusInner;

	      var openWidth = void 0,
	          pathDashoffset = void 0,
	          strokeDashoffset = void 0,
	          strokePathStyle = void 0;
	      if (type === 'circle') {
	        openWidth = 0;
	        pathDashoffset = '0px';
	        strokeDashoffset = '-' + circleLengh / 2 + 'px';
	        strokePathStyle = {
	          strokeDasharray: percent * (circleLengh - openWidth) + 'px ' + (1 - percent) * (circleLengh - openWidth) + 'px',
	          strokeDashoffset: strokeDashoffset
	        };
	      } else if (type === 'gauge') {
	        openWidth = Math.PI * 0.45 * radiusInner;
	        pathDashoffset = '-' + openWidth / 2 + 'px';
	        strokeDashoffset = '-' + openWidth / 2 + 'px';
	        strokePathStyle = {
	          strokeDasharray: percent * (circleLengh - openWidth) + 'px ' + circleLengh + 'px',
	          strokeDashoffset: strokeDashoffset
	        };
	      }

	      var pathStyle = {
	        strokeDasharray: circleLengh - openWidth + 'px ' + circleLengh + 'px',
	        strokeDashoffset: pathDashoffset
	      };

	      if (backgroundColor) {
	        pathStyle.stroke = backgroundColor;
	      }

	      var svgStyle = {
	        height: radius * 2,
	        width: radius * 2
	      };

	      return _react2.default.createElement(
	        'div',
	        { className: prefix + '-main ' + (0, _common.getStatusColorName)(status), style: style },
	        _react2.default.createElement(
	          'div',
	          { className: prefix + '-ratio' },
	          _react2.default.createElement(
	            'div',
	            { className: prefix + '-ratio-svg', style: svgStyle },
	            _react2.default.createElement(
	              'svg',
	              { width: '100%', height: '100%', xmlns: 'http://www.w3.org/2000/svg', version: '1.1' },
	              _react2.default.createElement('path', {
	                className: prefix + '-svg-bg',
	                d: pathString,
	                strokeWidth: strokeWidth,
	                style: pathStyle
	              }),
	              _react2.default.createElement('path', {
	                className: prefix + '-svg-ring',
	                d: pathString,
	                strokeWidth: strokeWidth,
	                style: strokePathStyle
	              })
	            )
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: prefix + '-number-block' },
	            _react2.default.createElement(
	              'div',
	              { className: prefix + '-number-middle' },
	              trend && _react2.default.createElement(
	                'span',
	                { className: prefix + '-leftIcon' },
	                numberTrendIcon
	              ),
	              _react2.default.createElement(
	                'span',
	                { className: numberClasses },
	                this.props.children,
	                this.props.unit && _react2.default.createElement(
	                  'span',
	                  { className: prefix + '-unit' },
	                  this.props.unit
	                )
	              ),
	              _react2.default.createElement(
	                'p',
	                { className: prefix + '-title' },
	                this.props.title
	              )
	            )
	          ),
	          type === 'gauge' && this.renderBottom()
	        )
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames2;

	      var _props2 = this.props,
	          className = _props2.className,
	          otherProps = _objectWithoutProperties(_props2, ['className']);

	      var mainClasses = (0, _classnames2.default)((_classNames2 = {}, _defineProperty(_classNames2, prefix, true), _defineProperty(_classNames2, className, !!className), _classNames2));

	      return _react2.default.createElement(
	        'div',
	        _extends({ className: mainClasses }, otherProps),
	        this.renderMain()
	      );
	    }
	  }]);

	  return Wcircle;
	}(_react2.default.Component), _class.displayName = 'Wcircle', _class.defaultProps = {
	  type: 'circle',
	  title: '',
	  percent: 0,
	  unit: '',
	  status: 'normal',
	  radius: 70,
	  strokeWidth: 6
	}, _temp);
	Wcircle.displayName = 'Wcircle';
	exports.default = Wcircle;


	Wcircle.propTypes = {
	  type: _propTypes2.default.oneOf(['gauge', 'circle']),
	  title: _propTypes2.default.node,
	  percent: function percent(props, propName) {
	    if (!(props[propName] >= 0 && props[propName] <= 1)) {
	      return new Error('Validation failed!');
	    }
	  },
	  unit: _propTypes2.default.node,
	  status: _propTypes2.default.oneOf(['normal', 'warning', 'error', 'blue', 'orange', 'red']),
	  // 半径
	  radius: function radius(props, propName) {
	    if (!(props[propName] >= 10 && props[propName] <= 100)) {
	      return new Error('Validation failed!');
	    }
	  },
	  // 粗细
	  strokeWidth: function strokeWidth(props, propName) {
	    if (!(props[propName] >= 2 && props[propName] <= 10)) {
	      return new Error('Validation failed!');
	    }
	  },
	  // 趋势
	  trend: _propTypes2.default.oneOf(['raise', 'drop']),
	  bottomTitle: _propTypes2.default.node,
	  bottomUnit: _propTypes2.default.node,
	  bottomNumber: _propTypes2.default.node,
	  bottomTrend: _propTypes2.default.oneOf(['raise', 'drop'])
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcircle\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcircle\\index.jsx"); } } })();

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * EventEmitter v5.1.0 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */

	;(function (exports) {
	    'use strict';

	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}

	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var originalGlobalValue = exports.EventEmitter;

	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }

	        return -1;
	    }

	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }

	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;

	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }

	        return response;
	    };

	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;

	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }

	        return flatListeners;
	    };

	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;

	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }

	        return response || listeners;
	    };

	    function isValidListener (listener) {
	        if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true
	        } else if (listener && typeof listener === 'object') {
	            return isValidListener(listener.listener)
	        } else {
	            return false
	        }
	    }

	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	        }

	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');

	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };

	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');

	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };

	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };

	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);

	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');

	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };

	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };

	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;

	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }

	        return this;
	    };

	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;

	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }

	        return this;
	    };

	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');

	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listenersMap = this.getListenersAsObject(evt);
	        var listeners;
	        var listener;
	        var i;
	        var key;
	        var response;

	        for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	                listeners = listenersMap[key].slice(0);

	                for (i = 0; i < listeners.length; i++) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[i];

	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }

	                    response = listener.listener.apply(this, args || []);

	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');

	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };

	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };

	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };

	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };

	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };

	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return EventEmitter;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    else if (typeof module === 'object' && module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}(this || {}));


/***/ },
/* 69 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	      return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.toArray = function (children) {
	  var ret = [];
	  _react2.default.Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	};

/***/ },
/* 71 */
/***/ function(module, exports) {

	'use strict';

	function hidden(node) {
	  return node.style.display == 'none';
	}

	function visible(node) {
	  while (node) {
	    if (node === document.body) {
	      break;
	    }
	    if (hidden(node)) {
	      return false;
	    }
	    node = node.parentNode;
	  }
	  return true;
	}

	function focusable(node) {
	  var nodeName = node.nodeName.toLowerCase(),
	      tabIndex = parseInt(node.getAttribute('tabindex'), 10),
	      hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;

	  if (visible(node)) {
	    if (['input', 'select', 'textarea', 'button'].indexOf(nodeName) > -1) {
	      return !node.disabled;
	    } else if (nodeName == 'a') {
	      return node.getAttribute('href') || hasTabIndex;
	    }
	    return hasTabIndex;
	  }
	}

	function getFocusNodeList(node) {
	  var res = [],
	      nodeList = node.querySelectorAll('*'),
	      length = nodeList.length;

	  for (var i = 0; i < length; i++) {
	    var item = nodeList[i];
	    if (focusable(item)) {
	      var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';
	      res[method](item);
	    }
	  }

	  if (focusable(node)) {
	    res.unshift(node);
	  }
	  return res;
	}

	var lastFocusElement = null;

	function saveLastFocusNode() {
	  lastFocusElement = document.activeElement;
	}

	function clearLastFocusNode() {
	  lastFocusElement = null;
	}

	function backLastFocusNode() {
	  if (lastFocusElement) {
	    try {
	      // 元素可能已经被移动了
	      lastFocusElement.focus();
	    } catch (e) {}
	  }
	}

	function limitTabRange(node, e) {
	  if (e.keyCode == 9) {
	    var tabNodeList = getFocusNodeList(node),
	        lastTabNode = tabNodeList[e.shiftKey ? 0 : tabNodeList.length - 1],
	        leavingTab = lastTabNode === document.activeElement || node === document.activeElement;

	    if (leavingTab) {
	      var target = tabNodeList[e.shiftKey ? tabNodeList.length - 1 : 0];
	      target.focus();
	      e.preventDefault();
	    }
	  }
	}

	exports.saveLastFocusNode = saveLastFocusNode;
	exports.clearLastFocusNode = clearLastFocusNode;
	exports.backLastFocusNode = backLastFocusNode;
	exports.getFocusNodeList = getFocusNodeList;
	exports.limitTabRange = limitTabRange;

/***/ },
/* 72 */
/***/ function(module, exports) {

	'use strict';

	exports.makeChain = function (left, right) {
	  var args = [].slice.call(arguments, 0);
	  if (args.length == 2 && !right || args.length == 1) {
	    return left;
	  }
	  return function () {
	    for (var i = args.length - 1; i >= 0; i--) {
	      if (args[i] && typeof args[i] === 'function') {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _focus = __webpack_require__(71);

	var _focus2 = _interopRequireDefault(_focus);

	var _func = __webpack_require__(72);

	var _func2 = _interopRequireDefault(_func);

	var _keyCode = __webpack_require__(75);

	var _keyCode2 = _interopRequireDefault(_keyCode);

	var _pickAttrs = __webpack_require__(78);

	var _pickAttrs2 = _interopRequireDefault(_pickAttrs);

	var _scrollbar = __webpack_require__(80);

	var _scrollbar2 = _interopRequireDefault(_scrollbar);

	var _support = __webpack_require__(81);

	var _support2 = _interopRequireDefault(_support);

	var _log = __webpack_require__(76);

	var _log2 = _interopRequireDefault(_log);

	var _pickOthers = __webpack_require__(79);

	var _pickOthers2 = _interopRequireDefault(_pickOthers);

	var _object = __webpack_require__(77);

	var _object2 = _interopRequireDefault(_object);

	var _children = __webpack_require__(70);

	var _children2 = _interopRequireDefault(_children);

	var _isMobile = __webpack_require__(74);

	var _isMobile2 = _interopRequireDefault(_isMobile);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = {
	  focus: _focus2.default,
	  func: _func2.default,
	  keyCode: _keyCode2.default,
	  pickAttrs: _pickAttrs2.default,
	  scrollbar: _scrollbar2.default,
	  support: _support2.default,
	  log: _log2.default,
	  pickOthers: _pickOthers2.default,
	  obj: _object2.default,
	  children: _children2.default,
	  isMobile: _isMobile2.default
	};

/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';

	exports.isMobile = function () {
	  var userAgentInfo = navigator.userAgent;
	  var Agents = ['iPhone', 'Android', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod'];
	  var flag = false;
	  for (var v = 0; v < Agents.length; v++) {
	    if (userAgentInfo.indexOf(Agents[v]) > 0) {
	      flag = true;
	      break;
	    }
	  }
	  return flag;
	};

/***/ },
/* 75 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  TAB: 9,
	  ENTER: 13,
	  SHIFT: 16,
	  CTRL: 17,
	  ALT: 18,
	  ESCAPE: 27,
	  SPACE: 32,
	  END: 35,
	  HOME: 36,
	  LEFT_ARROW: 37,
	  UP_ARROW: 38,
	  RIGHT_ARROW: 39,
	  DOWN_ARROW: 40
	};

/***/ },
/* 76 */
/***/ function(module, exports) {

	"use strict";

	exports.deprecated = function (props, instead, component) {
	  if (window && window.console && window.console.error) {
	    window.console.error("Warning: " + props + " is deprecated at [ " + component + " ], use [ " + instead + " ] instead of it.");
	  }
	};

	exports.warning = function (msg) {
	  if (window && window.console && window.console.error) {
	    window.console.error("Warning: " + msg);
	  }
	};

/***/ },
/* 77 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function getPrototype(value) {
	  if (Object.getPrototypeOf) {
	    return Object.getPrototypeOf(value);
	  }
	  if (_typeof('test'.__proto__) === 'object') {
	    return value.__proto__;
	  }
	  return false;
	}

	var toString = Object.prototype.toString;
	var hasOwn = Object.prototype.hasOwnProperty;

	function isPlainObject(o) {
	  if (!o || toString.call(o) !== '[object Object]' || o.nodeType || o === o.window) {
	    return false;
	  }

	  var proto = getPrototype(o),
	      funcToString = Function.prototype.toString,
	      objectCtorString = funcToString.call(Object),
	      constructor = void 0;

	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor === 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}

	exports.isPlainObject = isPlainObject;

	function equal(objA, objB, compare, compareContext, deep) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
	  if (ret !== void 0) {
	    return !!ret;
	  }
	  if (objA === objB) {
	    return true;
	  }
	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  var len = keysA.length;

	  if (len !== keysB.length) {
	    return false;
	  }
	  compareContext = compareContext || null;
	  // Test for A's keys different from B.
	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	  for (var i = 0; i < len; i++) {
	    var key = keysA[i];
	    if (!bHasOwnProperty(key)) {
	      return false;
	    }
	    var valueA = objA[key];
	    var valueB = objB[key];

	    var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
	    if (deep) {
	      if (_ret === false || _ret === void 0 && equal(valueA, valueB, compare, compareContext, deep)) {
	        return false;
	      }
	    } else if (_ret === false || _ret === void 0 && valueA !== valueB) {
	      return false;
	    }
	  }
	  return true;
	}

	exports.shallowEqual = function (objA, objB, compare, compareContext) {
	  return equal(objA, objB, compare, compareContext, false);
	};

	exports.deepEqual = function (objA, objB, compare, compareContext) {
	  return equal(objA, objB, compare, compareContext, true);
	};

/***/ },
/* 78 */
/***/ function(module, exports) {

	'use strict';

	var attributes = 'accept acceptCharset accessKey action allowFullScreen allowTransparency\nalt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\ncharSet checked classID className colSpan cols content contentEditable contextMenu\ncontrols coords crossOrigin data dateTime default defer dir disabled download draggable\nencType form formAction formEncType formMethod formNoValidate formTarget frameBorder\nheaders height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\nis keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\nmediaGroup method min minLength multiple muted name noValidate nonce open\noptimum pattern placeholder poster preload radioGroup readOnly rel required\nreversed role rowSpan rows sandbox scope scoped scrolling seamless selected\nshape size sizes span spellCheck src srcDoc srcLang srcSet start step style\nsummary tabIndex target title type useMap value width wmode wrap'.replace(/\s+/g, ' ').replace(/\t|\n|\r/g, '').split(' ');

	var eventsName = 'onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError'.replace(/\s+/g, ' ').replace(/\t|\n|\r/g, '').split(' ');

	var attrsPrefix = ['data-', 'aria-'];

	module.exports = function (props) {
	  var attrs = {};
	  for (var key in props) {
	    if (attributes.indexOf(key) > -1 || eventsName.indexOf(key) > -1) {
	      attrs[key] = props[key];
	    } else if (attrsPrefix.map(function (prefix) {
	      return new RegExp('^' + prefix);
	    }).some(function (reg) {
	      return key.replace(reg, '') != key;
	    })) {
	      attrs[key] = props[key];
	    }
	  }
	  return attrs;
	};

/***/ },
/* 79 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (Class, props) {
	  var propTypes = Class.propTypes;
	  var others = {};
	  for (var key in props) {
	    if (!(key in propTypes)) {
	      others[key] = props[key];
	    }
	  }
	  return others;
	};

/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	  var scrollDiv = document.createElement('div'),
	      scrollbarWidth = void 0,
	      scrollbarHeight = void 0;

	  scrollDiv.style.position = 'absolute';
	  scrollDiv.style.width = '100px';
	  scrollDiv.style.height = '100px';
	  scrollDiv.style.overflow = 'scroll';
	  scrollDiv.style.top = '-9999px';

	  document.body.appendChild(scrollDiv);
	  scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	  document.body.removeChild(scrollDiv);
	  // TODO: adapter old verison.
	  return {
	    width: scrollbarWidth,
	    height: scrollbarWidth
	  };
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var canUseDOM = __webpack_require__(69);

	var animationEndEventNames = {
	  WebkitAnimation: 'webkitAnimationEnd',
	  OAnimation: 'oAnimationEnd',
	  animation: 'animationend'
	};
	var transitionEventNames = {
	  WebkitTransition: 'webkitTransitionEnd',
	  OTransition: 'oTransitionEnd',
	  transition: 'transitionend'
	};

	function supportEnd(names) {
	  var el = document.createElement('div');
	  for (var name in names) {
	    if (names.hasOwnProperty(name) && el.style[name] !== undefined) {
	      return {
	        end: names[name]
	      };
	    }
	  }
	  return false;
	}

	function supportCss(names) {
	  var el = document.createElement('div');
	  var ret = false;

	  for (var key in names) {
	    names[key].forEach(function (item) {
	      // It will be throw error when set unknown property under IE8.
	      try {
	        el.style[key] = item;
	        ret = ret || el.style[key] == item;
	      } catch (e) {}
	    });
	  }

	  return ret;
	}

	var support = exports;

	if (canUseDOM()) {
	  support.animation = supportEnd(animationEndEventNames);
	  support.transition = supportEnd(transitionEventNames);
	  support.flex = supportCss({
	    display: ['flex', '-webkit-flex', '-moz-flex', '-ms-flexbox']
	  });
	} else {
	  support.animation = false;
	  support.transition = false;
	  support.flex = false;
	}

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _class, _temp;

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _coreUtil = __webpack_require__(73);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var breakPoints = ['xxs', 'xs', 's', 'm', 'l', 'xl'];

	var Col = (_temp = _class = function (_Component) {
	  _inherits(Col, _Component);

	  function Col() {
	    _classCallCheck(this, Col);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  Col.prototype.render = function render() {
	    var _this2 = this,
	        _extends2;

	    /* eslint-disable no-unused-vars */
	    var _props = this.props,
	        prefix = _props.prefix,
	        span = _props.span,
	        offset = _props.offset,
	        fixedSpan = _props.fixedSpan,
	        offsetFixed = _props.offsetFixed,
	        _props$fixedOffset = _props.fixedOffset,
	        fixedOffset = _props$fixedOffset === undefined ? offsetFixed : _props$fixedOffset,
	        hidden = _props.hidden,
	        align = _props.align,
	        xxs = _props.xxs,
	        xs = _props.xs,
	        s = _props.s,
	        m = _props.m,
	        l = _props.l,
	        xl = _props.xl,
	        className = _props.className,
	        children = _props.children,
	        others = _objectWithoutProperties(_props, ['prefix', 'span', 'offset', 'fixedSpan', 'offsetFixed', 'fixedOffset', 'hidden', 'align', 'xxs', 'xs', 's', 'm', 'l', 'xl', 'className', 'children']);
	    /* eslint-enable no-unused-vars */

	    offsetFixed && _coreUtil.log.deprecated('offsetFixed', 'fixedOffset', 'Grid.Col');

	    var pointClassObj = breakPoints.reduce(function (ret, point) {
	      var pointProps = {};
	      if (_typeof(_this2.props[point]) === 'object') {
	        pointProps = _this2.props[point];
	      } else {
	        pointProps.span = _this2.props[point];
	      }

	      ret[prefix + 'col-' + point + '-' + pointProps.span] = !!pointProps.span;
	      ret[prefix + 'col-' + point + '-offset-' + pointProps.offset] = !!pointProps.offset;

	      return ret;
	    }, {});

	    var hiddenClassObj = void 0;
	    if (hidden === true) {
	      hiddenClassObj = _defineProperty({}, prefix + 'col-hidden', true);
	    } else if (typeof hidden === 'string') {
	      hiddenClassObj = _defineProperty({}, prefix + 'col-' + hidden + '-hidden', !!hidden);
	    } else if (Array.isArray(hidden)) {
	      hiddenClassObj = hidden.reduce(function (ret, point) {
	        ret[prefix + 'col-' + point + '-hidden'] = !!point;
	        return ret;
	      }, {});
	    }

	    var classes = (0, _classnames2.default)(_extends((_extends2 = {}, _defineProperty(_extends2, prefix + 'col', true), _defineProperty(_extends2, prefix + 'col-' + span, !!span), _defineProperty(_extends2, prefix + 'col-fixed-' + fixedSpan, !!fixedSpan), _defineProperty(_extends2, prefix + 'col-offset-' + offset, !!offset), _defineProperty(_extends2, prefix + 'col-offset-fixed-' + fixedOffset, !!fixedOffset), _defineProperty(_extends2, prefix + 'col-' + align, !!align), _extends2), pointClassObj, hiddenClassObj, _defineProperty({}, className, className)));

	    return _react2.default.createElement(
	      'div',
	      _extends({ className: classes }, others),
	      children
	    );
	  };

	  return Col;
	}(_react.Component), _class.propTypes = {
	  prefix: _propTypes2.default.string,
	  span: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  fixedSpan: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  offset: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  // TODO: deprecated in 1.0 release
	  offsetFixed: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  fixedOffset: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  xxs: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  xs: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  s: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  m: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  l: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  xl: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
	  hidden: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string, _propTypes2.default.array]),
	  align: _propTypes2.default.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.any
	}, _class.defaultProps = {
	  prefix: 'next-'
	}, _temp);
	Col.displayName = 'Col';
	exports.default = Col;
	module.exports = exports['default'];

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _row = __webpack_require__(85);

	var _row2 = _interopRequireDefault(_row);

	var _col = __webpack_require__(82);

	var _col2 = _interopRequireDefault(_col);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  Row: _row2.default,
	  Col: _col2.default
	};
	module.exports = exports['default'];

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _nextDom = __webpack_require__(89);

	var _utils = __webpack_require__(46);

	if (_utils.ieVersion && _utils.ieVersion <= 8 && window && document) {
	  _nextDom.events.on(window, 'resize', hackMediaQuery);
	  hackMediaQuery();
	}

	function hackMediaQuery() {
	  var replace = '';
	  var together = [];

	  var bps = [344, 504, 752, 1022, 1232, 1532];
	  var innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
	  for (var i = 0; i < bps.length; i++) {
	    var current = bps[i];
	    var next = bps[i + 1];
	    if (innerWidth >= current && (!next || innerWidth < next)) {
	      replace = 'next-w' + current;
	      together = bps.slice(0, i + 1).map(function (bp) {
	        return 'next-w' + bp + '-together';
	      });
	      break;
	    }
	  }

	  var classNames = document.body.className;
	  classNames.split(' ').forEach(function (className) {
	    if (/next-w\d+/.test(className)) {
	      _nextDom.classList.removeClass(document.body, className);
	    }
	  });

	  _nextDom.classList.addClass(document.body, replace);
	  together.forEach(function (className) {
	    return _nextDom.classList.addClass(document.body, className);
	  });
	}

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _class, _temp;

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utils = __webpack_require__(46);

	__webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var Row = (_temp = _class = function (_Component) {
	  _inherits(Row, _Component);

	  function Row() {
	    _classCallCheck(this, Row);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  Row.prototype.render = function render() {
	    var _extends2, _extends3;

	    var _props = this.props,
	        prefix = _props.prefix,
	        isMobile = _props.isMobile,
	        type = _props.type,
	        fixedWidth = _props.fixedWidth,
	        justify = _props.justify,
	        align = _props.align,
	        className = _props.className,
	        children = _props.children,
	        others = _objectWithoutProperties(_props, ['prefix', 'isMobile', 'type', 'fixedWidth', 'justify', 'align', 'className', 'children']);

	    var typeClassesObj = {};
	    if (type) {
	      var types = Array.isArray(type) ? type : [type];
	      typeClassesObj = types.reduce(function (ret, type) {
	        if (type) {
	          ret[prefix + 'row-' + type] = true;
	        }
	        return ret;
	      }, {});
	    }

	    var classes = (0, _classnames2.default)(_extends((_extends2 = {}, _defineProperty(_extends2, prefix + 'row', true), _defineProperty(_extends2, prefix + 'mobile', isMobile), _extends2), typeClassesObj, (_extends3 = {}, _defineProperty(_extends3, prefix + 'row-fixed-' + fixedWidth, !!fixedWidth), _defineProperty(_extends3, prefix + 'row-justify-' + justify, !!justify), _defineProperty(_extends3, prefix + 'row-align-' + align, !!align), _defineProperty(_extends3, prefix + 'row-ie9', _utils.ieVersion && _utils.ieVersion <= 9), _defineProperty(_extends3, className, !!className), _extends3)));

	    return _react2.default.createElement(
	      'div',
	      _extends({ className: classes }, others),
	      children
	    );
	  };

	  return Row;
	}(_react.Component), _class.propTypes = {
	  prefix: _propTypes2.default.string,
	  isMobile: _propTypes2.default.bool,
	  // TODO 1.x default layout -> fluid
	  // 'fluid', 'fixed', 'wrap', 'no-wrap', 'no-padding', 'across'
	  type: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),
	  fixedWidth: _propTypes2.default.oneOf(['xxs', 'xs', 's', 'm', 'l', 'xl']),
	  align: _propTypes2.default.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
	  // TODO 1.x start -> left / end -> right
	  justify: _propTypes2.default.oneOf(['start', 'center', 'end', 'space-between', 'space-around']),
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.any
	}, _class.defaultProps = {
	  prefix: 'next-',
	  isMobile: false
	}, _temp);
	Row.displayName = 'Row';
	exports.default = Row;
	module.exports = exports['default'];

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(17));
		else if(typeof define === 'function' && define.amd)
			define(["@antv/g2"], factory);
		else if(typeof exports === 'object')
			exports["Connect"] = factory(require("@antv/g2"));
		else
			root["Connect"] = factory(root["G2_3"]);
	})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__antv_g2__ = __webpack_require__(1);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__antv_g2___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__antv_g2__);


	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



	var G2Connect = function () {
	  function G2Connect() {
	    var _this = this;

	    var charts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, G2Connect);

	    this.charts = [];
	    this.config = {};

	    this.handlePlotmove = function () {
	      var self = _this;
	      return function (e) {
	        // 显式声明this，指向触发事件的图表实例
	        var chartInstance = this;
	        self.charts.forEach(function (chart) {
	          // 过滤自身和已销毁的实例
	          if (chart !== chartInstance && !chart.destroyed) {
	            // 显示tooltip
	            chart.showTooltip(e);
	          }
	        });
	      };
	    }();

	    this.handlePlotleave = function () {
	      var self = _this;
	      return function () {
	        // 显式声明this，指向触发事件的图表实例
	        var chartInstance = this;
	        self.charts.forEach(function (chart) {
	          // 过滤自身和已销毁的实例
	          if (chart !== chartInstance && !chart.destroyed) {
	            // 隐藏tooltip
	            chart.hideTooltip();
	          }
	        });
	      };
	    }();

	    // 配置项
	    _extends(this.config, config);

	    // 添加绑定
	    this.add.apply(this, charts);
	  }

	  // 配置项，后续添加数据联动等配置项


	  G2Connect.prototype.add = function add() {
	    var _this2 = this;

	    for (var _len = arguments.length, charts = Array(_len), _key = 0; _key < _len; _key++) {
	      charts[_key] = arguments[_key];
	    }

	    charts.forEach(function (chart) {
	      if (!isValidChart(chart)) {
	        return;
	      }

	      if (_this2.charts.indexOf(chart) === -1) {
	        // 存储实例的引用
	        _this2.charts.push(chart);

	        // 绑定事件
	        // G2 底层的事件系统 wolfy87-eventemitter 中已经有有去重逻辑，所以直接绑定事件即可。
	        chart.on('plotmove', _this2.handlePlotmove);
	        chart.on('plotleave', _this2.handlePlotleave);
	      }
	    });
	  };

	  G2Connect.prototype.remove = function remove() {
	    var _this3 = this;

	    for (var _len2 = arguments.length, charts = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      charts[_key2] = arguments[_key2];
	    }

	    if (charts.length === 0) {
	      // 清空所有绑定
	      this.charts.forEach(function (chart) {
	        if (!isValidChart(chart)) {
	          return;
	        }

	        chart.off('plotmove', _this3.handlePlotmove);
	        chart.off('plotleave', _this3.handlePlotleave);
	      });

	      this.charts = [];
	    } else {
	      charts.forEach(function (chart) {
	        if (!isValidChart(chart)) {
	          return;
	        }

	        var index = _this3.charts.indexOf(chart);
	        if (index !== -1) {
	          // 去除实例的存储
	          _this3.charts.splice(index, 1);

	          // 绑定事件
	          // G2 底层的事件系统 wolfy87-eventemitter 中已经有有去重逻辑，所以直接绑定事件即可。
	          chart.off('plotmove', _this3.handlePlotmove);
	          chart.off('plotleave', _this3.handlePlotleave);
	        }
	      });
	    }
	  };

	  G2Connect.prototype.destroy = function destroy() {
	    this.remove();
	  };

	  // 事件相关函数
	  // 需要注意的是，这里用闭包创建特殊的行为函数。
	  // 事件函数被调用时，this（chartInstance）会指向触发事件的图表实例，而self指向connect类的实例

	  return G2Connect;
	}();

	/**
	 * 判断图表是否有效
	 * @param {Chart} chart G2图表实例
	 * @return {boolean} 是否有效图例
	 * */


	/* harmony default export */ __webpack_exports__["default"] = (G2Connect);
	function isValidChart(chart) {
	  return chart && !chart.destroyed && chart.constructor === __WEBPACK_IMPORTED_MODULE_0__antv_g2___default.a.Chart;
	}

	/***/ }),
	/* 1 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

	/***/ })
	/******/ ])["default"];
	});

/***/ },
/* 87 */
/***/ function(module, exports) {

	'use strict';

	function addClass(node, className) {
	    if (node.classList) {
	        node.classList.add(className);
	    } else if (!hasClass(node, className)) {
	        node.className = node.className + ' ' + className;
	    }
	}

	function hasClass(node, className) {
	    if (node.classList) {
	        return node.classList.contains(className);
	    } else {
	        return node.className.indexOf(className) > -1;
	    }
	}

	function removeClass(node, className) {
	    if (node.classList) {
	        node.classList.remove(className);
	    } else if (hasClass(node, className)) {
	        node.className = node.className.replace(className, '').replace(/\s+/g, ' ').trim();
	    }
	}

	module.exports = {
	    hasClass: hasClass,
	    addClass: addClass,
	    removeClass: removeClass
	};

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';

	var EVENT_PREFIX = 'next-';

	function on(node, eventName, handler, useCapture) {
	    if (node.addEventListener) {
	        node.addEventListener(eventName, handler, useCapture);
	    } else if (node.attachEvent) {
	        var nextEvent = getNextEventName(eventName);
	        if (Array.isArray(node[nextEvent])) {
	            if (node[nextEvent].indexOf(handler) === -1) {
	                node[nextEvent].push(handler);
	            }
	        } else {
	            node[nextEvent] = [handler];
	            node.attachEvent('on' + eventName, function () {
	                node[nextEvent].forEach(function (handler) {
	                    handler && handler.call(node, shimEvent(window.event, node));
	                });
	            });
	        }
	    }

	    return {
	        off: function off() {
	            _off(node, eventName, handler, useCapture);
	        }
	    };
	}

	function _off(node, eventName, handler, useCapture) {
	    if (node.removeEventListener) {
	        node.removeEventListener(eventName, handler, useCapture);
	    } else {
	        var nextEvent = getNextEventName(eventName);
	        if (Array.isArray(node[nextEvent])) {
	            var index = node[nextEvent].indexOf(handler);
	            if (index > -1) {
	                node[nextEvent].splice(index, 1);
	            }
	        }
	    }
	}

	function shimEvent(e, currentTarget) {
	    if (!e.target) {
	        e.target = e.srcElement;
	        e.currentTarget = currentTarget;
	        e.relatedTarge = e.type === 'mouseover' ? e.fromElement : e.toElement;
	        e.stopPropagation = function () {
	            e.cancelBubble = true;
	        };
	        e.preventDefault = function () {
	            e.returnValue = false;
	        };
	    }

	    return e;
	}

	function getNextEventName(eventName) {
	    return '' + EVENT_PREFIX + eventName;
	}

	module.exports = {
	    on: on,
	    off: _off
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    classList: __webpack_require__(87),
	    events: __webpack_require__(88),
	    position: __webpack_require__(90),
	    style: __webpack_require__(47)
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _class, _temp;

	var _css = __webpack_require__(47);

	var _css2 = _interopRequireDefault(_css);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var VIEWPORT = 'viewport';

	// IE8 not support pageXOffset
	var getPageX = function getPageX() {
	    return window.pageXOffset || document.documentElement.scrollLeft;
	};
	var getPageY = function getPageY() {
	    return window.pageYOffset || document.documentElement.scrollTop;
	};

	var getElementRect = function getElementRect(elem) {
	    var offsetTop = 0,
	        offsetLeft = 0,
	        offsetHeight = elem.offsetHeight,
	        offsetWidth = elem.offsetWidth;

	    do {
	        if (!isNaN(elem.offsetTop)) {
	            offsetTop += elem.offsetTop;
	        }
	        if (!isNaN(elem.offsetLeft)) {
	            offsetLeft += elem.offsetLeft;
	        }
	    } while ((elem = elem.offsetParent) !== null);

	    return {
	        top: offsetTop - (document.documentElement.scrollTop || document.body.scrollTop),
	        left: offsetLeft - (document.documentElement.scrollLeft || document.body.scrollLeft),
	        height: offsetHeight,
	        width: offsetWidth
	    };
	};

	var Position = (_temp = _class = function () {
	    function Position(config) {
	        _classCallCheck(this, Position);

	        this.pinElement = config.pinElement;
	        this.baseElement = config.baseElement;
	        this.align = config.align || 'tl tl';
	        this.offset = config.offset || [0, 0];
	        this.needAdjust = config.needAdjust || false;
	        this.isRtl = config.isRtl || false;
	    }

	    Position.prototype.setPosition = function setPosition() {
	        var pinElement = this.pinElement;
	        var baseElement = this.baseElement;
	        var expectedAlign = this._getExpectedAlign();
	        var isPinFixed = void 0,
	            isBaseFixed = void 0,
	            firstPositionResult = void 0;
	        if (pinElement === VIEWPORT) {
	            return;
	        }
	        if (_css2['default'].get(pinElement, 'position') !== 'fixed') {
	            _css2['default'].set(pinElement, 'position', 'absolute');
	            isPinFixed = false;
	        } else {
	            isPinFixed = true;
	        }
	        if (baseElement === VIEWPORT || _css2['default'].get(baseElement, 'position') !== 'fixed') {
	            isBaseFixed = false;
	        } else {
	            isBaseFixed = true;
	        }
	        // 根据期望的定位
	        for (var i = 0; i < expectedAlign.length; i++) {
	            var align = expectedAlign[i];
	            var pinElementPoints = this._normalizePosition(pinElement, align.split(' ')[0], isPinFixed);
	            var baseElementPoints = this._normalizePosition(baseElement, align.split(' ')[1], isPinFixed);
	            var pinElementParentOffset = this._getParentOffset(pinElement);
	            var baseElementOffset = isPinFixed && isBaseFixed ? this._getLeftTop(baseElement) : baseElementPoints.offset();
	            var top = baseElementOffset.top + baseElementPoints.y - pinElementParentOffset.top - pinElementPoints.y + this.offset[1];
	            var left = baseElementOffset.left + baseElementPoints.x - pinElementParentOffset.left - pinElementPoints.x + this.offset[0];
	            _css2['default'].set(pinElement, {
	                left: left + 'px',
	                top: top + 'px'
	            });
	            if (!firstPositionResult) {
	                firstPositionResult = {
	                    left: left,
	                    top: top
	                };
	            }
	            if (this._isInViewport(pinElement)) {
	                return align;
	            }
	        }

	        var inViewportLeft = this._makeElementInViewport(pinElement, firstPositionResult.left, 'Left', isPinFixed);
	        var inViewportTop = this._makeElementInViewport(pinElement, firstPositionResult.top, 'Top', isPinFixed);

	        _css2['default'].set(pinElement, {
	            left: inViewportLeft + 'px',
	            top: inViewportTop + 'px'
	        });

	        return expectedAlign[0];
	    };

	    Position.prototype._getParentOffset = function _getParentOffset(element) {
	        var parent = element.offsetParent || document.documentElement;
	        var offset = void 0;
	        if (parent === document.body && _css2['default'].get(parent, 'position') === 'static') {
	            offset = {
	                top: 0,
	                left: 0
	            };
	        } else {
	            offset = this._getElementOffset(parent);
	        }

	        offset.top += parseFloat(_css2['default'].get(parent, 'border-top-width'), 10);
	        offset.left += parseFloat(_css2['default'].get(parent, 'border-left-width'), 10);

	        return offset;
	    };

	    Position.prototype._makeElementInViewport = function _makeElementInViewport(pinElement, number, type, isPinFixed) {
	        var result = number,
	            docElement = document.documentElement,
	            offsetParent = pinElement.offsetParent || document.documentElement;

	        if (result < 0) {
	            if (isPinFixed) {
	                result = 0;
	            } else if (offsetParent === document.body && _css2['default'].get(offsetParent, 'position') === 'static') {
	                //Only when div's offsetParent is document.body, we set new position result.
	                result = Math.max(docElement['scroll' + type], document.body['scroll' + type]);
	            }
	        }
	        return result;
	    };

	    Position.prototype._normalizePosition = function _normalizePosition(element, align, isPinFixed) {
	        var points = this._normalizeElement(element, isPinFixed);
	        this._normalizeXY(points, align);
	        return points;
	    };

	    Position.prototype._normalizeXY = function _normalizeXY(points, align) {
	        var x = align.split('')[1];
	        var y = align.split('')[0];
	        points.x = this._xyConverter(x, points, 'width');
	        points.y = this._xyConverter(y, points, 'height');
	        return points;
	    };

	    Position.prototype._xyConverter = function _xyConverter(align, points, type) {
	        var res = align.replace(/t|l/gi, '0%').replace(/c/gi, '50%').replace(/b|r/gi, '100%').replace(/(\d+)%/gi, function (m, d) {
	            return points.size()[type] * (d / 100);
	        });
	        return parseFloat(res, 10) || 0;
	    };

	    Position.prototype._getLeftTop = function _getLeftTop(element) {
	        return {
	            left: parseFloat(_css2['default'].get(element, 'left')) || 0,
	            top: parseFloat(_css2['default'].get(element, 'top')) || 0
	        };
	    };

	    Position.prototype._normalizeElement = function _normalizeElement(element, isPinFixed) {
	        var _this = this;

	        var result = {
	            element: element,
	            x: 0,
	            y: 0
	        },
	            isViewport = element === VIEWPORT,
	            docElement = document.documentElement;

	        result.offset = function () {
	            if (isPinFixed) {
	                return {
	                    left: 0,
	                    top: 0
	                };
	            } else if (isViewport) {
	                return {
	                    left: getPageX(),
	                    top: getPageY()
	                };
	            } else {
	                return _this._getElementOffset(element);
	            }
	        };

	        result.size = function () {
	            if (isViewport) {
	                return {
	                    width: docElement.clientWidth,
	                    height: docElement.clientHeight
	                };
	            } else {
	                return {
	                    width: element.offsetWidth,
	                    height: element.offsetHeight
	                };
	            }
	        };
	        return result;
	    };

	    Position.prototype._getElementOffset = function _getElementOffset(element) {
	        var rect = element.getBoundingClientRect();
	        var docElement = document.documentElement;
	        var body = document.body;
	        var docClientLeft = docElement.clientLeft || body.clientLeft || 0;
	        var docClientTop = docElement.clientTop || body.clientTop || 0;

	        return {
	            left: rect.left + (getPageX() - docClientLeft),
	            top: rect.top + (getPageY() - docClientTop)
	        };
	    };
	    // According to the location of the overflow to calculate the desired positioning


	    Position.prototype._getExpectedAlign = function _getExpectedAlign() {
	        var align = this.isRtl ? this._replaceAlignDir(this.align, /l|r/g, { l: 'r', r: 'l' }) : this.align;
	        var expectedAlign = [align];

	        if (this.needAdjust) {
	            if (/t|b/g.test(align)) {
	                expectedAlign.push(this._replaceAlignDir(align, /t|b/g, { t: 'b', b: 't' }));
	            }
	            if (/l|r/g.test(align)) {
	                expectedAlign.push(this._replaceAlignDir(align, /l|r/g, { l: 'r', r: 'l' }));
	            }
	            if (/c/g.test(align)) {
	                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'l' }));
	                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'r' }));
	            }
	            expectedAlign.push(this._replaceAlignDir(align, /l|r|t|b/g, { l: 'r', r: 'l', t: 'b', b: 't' }));
	        }
	        return expectedAlign;
	    };
	    // Transform align order.


	    Position.prototype._replaceAlignDir = function _replaceAlignDir(align, regExp, map) {
	        return align.replace(regExp, function (res) {
	            return map[res];
	        });
	    };
	    // Detecting element is in the window， we want to adjust position later.


	    Position.prototype._isInViewport = function _isInViewport(element) {
	        var viewportSize = {
	            width: document.documentElement.clientWidth,
	            height: document.documentElement.clientHeight
	        };
	        //Avoid animate problem that use offsetWidth instead of getBoundingClientRect.
	        var elementRect = getElementRect(element);
	        return elementRect.left >= 0 && elementRect.left + element.offsetWidth <= viewportSize.width && elementRect.top >= 0 && elementRect.top + element.offsetHeight <= viewportSize.height;
	    };

	    return Position;
	}(), _class.VIEWPORT = VIEWPORT, _temp);


	Position.place = function (pinElement, baseElement, align, offset, needAdjust, isRtl) {
	    return new Position({
	        pinElement: pinElement,
	        baseElement: baseElement,
	        align: align,
	        offset: offset,
	        needAdjust: needAdjust,
	        isRtl: isRtl
	    }).setPosition();
	};

	exports['default'] = Position;
	module.exports = exports['default'];

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);

	var _require = __webpack_require__(28),
	    _geoArea = _require.geoArea,
	    _geoCentroid = _require.geoCentroid,
	    _geoContains = _require.geoContains,
	    _geoDistance = _require.geoDistance,
	    _geoLength = _require.geoLength;

	var _require2 = __webpack_require__(58),
	    _geoProject = _require2.geoProject;

	var View = __webpack_require__(25);
	var getGeoProjection = __webpack_require__(49);

	assign(View.prototype, {
	  // geo maintain
	  geoArea: function geoArea(feature) {
	    return _geoArea(feature);
	  },
	  geoAreaByName: function geoAreaByName(name) {
	    return _geoArea(this.geoFeatureByName(name));
	  },
	  geoCentroid: function geoCentroid(feature) {
	    return _geoCentroid(feature);
	  },
	  geoCentroidByName: function geoCentroidByName(name) {
	    return _geoCentroid(this.geoFeatureByName(name));
	  },
	  geoDistance: function geoDistance(p1, p2) {
	    return _geoDistance(p1, p2);
	  },
	  geoLength: function geoLength(feature) {
	    return _geoLength(feature);
	  },
	  geoLengthByName: function geoLengthByName(name) {
	    return _geoLength(this.geoFeatureByName(name));
	  },
	  geoContains: function geoContains(feature, position /* [longitude, latitude] */) {
	    return _geoContains(feature, position);
	  },
	  geoFeatureByName: function geoFeatureByName(name) {
	    var rows = this.rows;
	    var result = void 0;
	    rows.some(function (feature) {
	      if (feature.name === name) {
	        result = feature;
	        return true;
	      }
	      return false;
	    });
	    return result;
	  },
	  geoFeatureByPosition: function geoFeatureByPosition(position) {
	    var rows = this.rows;
	    var result = void 0;
	    rows.some(function (feature) {
	      if (_geoContains(feature, position)) {
	        result = feature;
	        return true;
	      }
	      return false;
	    });
	    return result;
	  },
	  geoNameByPosition: function geoNameByPosition(position) {
	    var feature = this.geoFeatureByPosition(position);
	    if (feature) {
	      return feature.name;
	    }
	  },

	  // projection
	  // export getGeoProjection for custom used.
	  getGeoProjection: getGeoProjection,
	  geoProject: function geoProject(feature, projection, exportRaw) {
	    projection = getGeoProjection(projection, exportRaw);
	    return _geoProject(feature, projection);
	  },
	  geoProjectByName: function geoProjectByName(name, projection, exportRaw) {
	    projection = getGeoProjection(projection, exportRaw);
	    return _geoProject(this.geoFeatureByName(name), projection);
	  },
	  geoProjectPosition: function geoProjectPosition(position, projection, exportRaw) {
	    projection = getGeoProjection(projection, exportRaw);
	    return projection(position);
	  },
	  geoProjectInvert: function geoProjectInvert(point /* [x, y] */, projection, exportRaw) {
	    projection = getGeoProjection(projection, exportRaw);
	    return projection.invert(point);
	  }
	});

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable no-cond-assign, no-loop-func */
	var assign = __webpack_require__(2);
	var View = __webpack_require__(25);

	assign(View.prototype, {
	  getAllNodes: function getAllNodes() {
	    var nodes = [];
	    this.root.each(function (node) {
	      nodes.push(node);
	    });
	    return nodes;
	  },
	  getAllLinks: function getAllLinks() {
	    var links = [];
	    var nodes = [this.root];
	    var node = void 0;
	    while (node = nodes.pop()) {
	      var children = node.children;
	      if (children) {
	        children.forEach(function (child) {
	          links.push({
	            source: node,
	            target: child
	          });
	          nodes.push(child);
	        });
	      }
	    }
	    return links;
	  }
	});

	assign(View.prototype, {
	  getAllEdges: View.prototype.getAllLinks
	});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var values = __webpack_require__(42);
	var _partition = __webpack_require__(14);
	var View = __webpack_require__(25);

	assign(View.prototype, {
	  partition: function partition() {
	    var group_by = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    var order_by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	    return _partition(this.rows, group_by, order_by);
	  },
	  group: function group(group_by, order_by) {
	    var groups = this.partition(group_by, order_by);
	    return values(groups);
	  },
	  groups: function groups(group_by, order_by) {
	    return this.group(group_by, order_by);
	  }
	});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var flattenDeep = __webpack_require__(56);
	var isArray = __webpack_require__(3);
	var simpleStatistics = __webpack_require__(16);
	var View = __webpack_require__(25);
	var pByFraction = __webpack_require__(50);

	var _require = __webpack_require__(38),
	    STATISTICS_METHODS = _require.STATISTICS_METHODS;

	function getColumnValues(me, column) {
	  var values = me.getColumn(column);
	  if (isArray(values) && isArray(values[0])) {
	    values = flattenDeep(values);
	  }
	  return values;
	}

	// statistics
	STATISTICS_METHODS.forEach(function (method) {
	  View.prototype[method] = function (column) {
	    return simpleStatistics[method](getColumnValues(this, column));
	  };
	});

	var _quantile = simpleStatistics.quantile;


	assign(View.prototype, {
	  average: View.prototype.mean,
	  quantile: function quantile(column, p) {
	    return _quantile(getColumnValues(this, column), p);
	  },
	  quantiles: function quantiles(column, pArr) {
	    var columnArr = getColumnValues(this, column);
	    return pArr.map(function (p) {
	      return _quantile(columnArr, p);
	    });
	  },
	  quantilesByFraction: function quantilesByFraction(column, fraction) {
	    return this.quantiles(column, pByFraction(fraction));
	  },
	  range: function range(column) {
	    var me = this;
	    return [me.min(column), me.max(column)];
	  },
	  extent: function extent(column) {
	    // alias
	    return this.range(column);
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var isString = __webpack_require__(6);
	var cloneDeep = __webpack_require__(26);

	var _require = __webpack_require__(1),
	    registerConnector = _require.registerConnector;

	registerConnector('default', function (dataView, dataSet) {
	  if (isString(dataView)) {
	    dataView = dataSet.getView(dataView);
	  }
	  if (!dataView) {
	    throw new TypeError('Invalid dataView');
	  }
	  return cloneDeep(dataView.rows);
	});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var isString = __webpack_require__(6);

	var _require = __webpack_require__(166),
	    dsvFormat = _require.dsvFormat,
	    csvParse = _require.csvParse,
	    tsvParse = _require.tsvParse;

	var _require2 = __webpack_require__(1),
	    registerConnector = _require2.registerConnector;

	registerConnector('dsv', function (str) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var delimiter = options.delimiter || ',';
	  if (!isString(delimiter)) {
	    throw new TypeError('Invalid delimiter: must be a string!');
	  }
	  return dsvFormat(delimiter).parse(str);
	});

	registerConnector('csv', function (str) {
	  return csvParse(str);
	});

	registerConnector('tsv', function (str) {
	  return tsvParse(str);
	});

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(28),
	    geoGraticule = _require.geoGraticule;

	var _require2 = __webpack_require__(1),
	    registerConnector = _require2.registerConnector;

	function connector(options, dataView) {
	  dataView.dataType = 'geo-graticule';
	  var data = geoGraticule().lines();

	  data.map(function (row, index) {
	    row.index = '' + index;
	    return row;
	  });

	  dataView.rows = data;
	  return data;
	}

	registerConnector('geo-graticule', connector);

	module.exports = connector;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var isFunction = __webpack_require__(11);

	var _require = __webpack_require__(1),
	    GRAPH = _require.GRAPH,
	    registerConnector = _require.registerConnector;

	var DEFAULT_OPTIONS = {
	  nodes: function nodes(d) {
	    // optional
	    return d.nodes;
	  },
	  edges: function edges(d) {
	    // optional
	    return d.edges;
	  }
	};

	function connector(data, options, dataView) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  dataView.dataType = GRAPH;
	  var _options = options,
	      nodes = _options.nodes,
	      edges = _options.edges;

	  if (nodes && !isFunction(nodes)) {
	    throw new TypeError('Invalid nodes: must be a function!');
	  }
	  if (edges && !isFunction(edges)) {
	    throw new TypeError('Invalid edges: must be a function!');
	  }
	  dataView.rows = dataView.graph = {
	    nodes: nodes(data),
	    edges: edges(data)
	  };
	  assign(dataView, dataView.graph);
	  return dataView.rows;
	}

	registerConnector('graph', connector);
	registerConnector('diagram', connector);

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var cloneDeep = __webpack_require__(26);

	var _require = __webpack_require__(168),
	    getGridForHexJSON = _require.getGridForHexJSON,
	    renderHexJSON = _require.renderHexJSON;

	var _require2 = __webpack_require__(1),
	    HEX = _require2.HEX,
	    registerConnector = _require2.registerConnector;

	var DEFAULT_OPTIONS = {
	  width: 1,
	  height: 1
	};

	function processRow(row) {
	  row.cx = row.x;
	  row.cy = row.y;
	  row.x = [];
	  row.y = [];
	  row.vertices.forEach(function (v) {
	    row.x.push(v.x + row.cx);
	    row.y.push(v.y + row.cy);
	  });
	  return row;
	}

	function HexJSONConnector(data, options, dataView) {
	  dataView.dataType = HEX;
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var _options = options,
	      width = _options.width,
	      height = _options.height;

	  var HexJSON = cloneDeep(data);
	  dataView._HexJSON = HexJSON;
	  var grid = dataView._GridHexJSON = getGridForHexJSON(HexJSON);
	  var rows = dataView.rows = renderHexJSON(HexJSON, width, height).map(processRow);
	  dataView._gridRows = renderHexJSON(grid, width, height).map(processRow);
	  return rows;
	}

	registerConnector('hex', HexJSONConnector);
	registerConnector('hexjson', HexJSONConnector);
	registerConnector('hex-json', HexJSONConnector);
	registerConnector('HexJSON', HexJSONConnector);

	module.exports = HexJSONConnector;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(11);

	var _require = __webpack_require__(24),
	    hierarchy = _require.hierarchy;

	var _require2 = __webpack_require__(1),
	    HIERARCHY = _require2.HIERARCHY,
	    registerConnector = _require2.registerConnector;

	/*
	 * options: {
	 *   children(d) { // optional
	 *     return d.children
	 *   },
	 * }
	 */

	function connector(data, options, dataView) {
	  dataView.dataType = HIERARCHY;
	  var children = options && options.children ? options.children : null;

	  if (children && !isFunction(children)) {
	    throw new TypeError('Invalid children: must be a function!');
	  }

	  if (!options.pureData) {
	    dataView.rows = dataView.root = hierarchy(data, children);
	  } else {
	    dataView.rows = dataView.root = data;
	  }
	  return data;
	}

	registerConnector('hierarchy', connector);
	registerConnector('tree', connector);

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var isString = __webpack_require__(6);

	var _require = __webpack_require__(238),
	    feature = _require.feature;

	var GeoJSONConnector = __webpack_require__(48);

	var _require2 = __webpack_require__(1),
	    registerConnector = _require2.registerConnector;

	function TopoJSONConnector(data, options, dataView) {
	  var object = options.object;
	  if (!isString(object)) {
	    throw new TypeError('Invalid object: must be a string!');
	  }
	  var geoData = feature(data, data.objects[object]);
	  return GeoJSONConnector(geoData, options, dataView);
	}

	registerConnector('topojson', TopoJSONConnector);
	registerConnector('TopoJSON', TopoJSONConnector);

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var flattenDeep = __webpack_require__(56);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);
	var keys = __webpack_require__(19);
	var uniq = __webpack_require__(155);
	var simpleStatistics = __webpack_require__(16);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(38),
	    STATISTICS_METHODS = _require2.STATISTICS_METHODS;

	var _require3 = __webpack_require__(4),
	    getFields = _require3.getFields;

	var DEFAULT_OPTIONS = {
	  as: [],
	  fields: [],
	  groupBy: [],
	  operations: []
	};
	var DEFAULT_OPERATION = 'count';

	var aggregates = {
	  count: function count(data) {
	    return data.length;
	  },
	  distinct: function distinct(data, field) {
	    var values = uniq(data.map(function (row) {
	      return row[field];
	    }));
	    return values.length;
	  }
	};
	STATISTICS_METHODS.forEach(function (method) {
	  aggregates[method] = function (data, field) {
	    var values = data.map(function (row) {
	      return row[field];
	    });
	    if (isArray(values) && isArray(values[0])) {
	      values = flattenDeep(values);
	    }
	    return simpleStatistics[method](values);
	  };
	});
	aggregates.average = aggregates.mean;

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields)) {
	    throw new TypeError('Invalid fields: it must be an array with one or more strings!');
	  }
	  var outputNames = options.as || [];
	  if (isString(outputNames)) {
	    outputNames = [outputNames];
	  }
	  var operations = options.operations;
	  if (isString(operations)) {
	    operations = [operations];
	  }
	  var DEFAULT_OPERATIONS = [DEFAULT_OPERATION];
	  if (!isArray(operations) || !operations.length) {
	    console.warn('operations is not defined, will use [ "count" ] directly.');
	    operations = DEFAULT_OPERATIONS;
	    outputNames = operations;
	  }
	  if (!(operations.length === 1 && operations[0] === DEFAULT_OPERATION)) {
	    if (operations.length !== fields.length) {
	      throw new TypeError('Invalid operations: it\'s length must be the same as fields!');
	    }
	    if (outputNames.length !== fields.length) {
	      throw new TypeError('Invalid as: it\'s length must be the same as fields!');
	    }
	  }
	  var groups = partition(dataView.rows, options.groupBy);
	  var results = [];
	  forIn(groups, function (group) {
	    var result = group[0];
	    operations.forEach(function (operation, i) {
	      var outputName = outputNames[i];
	      var field = fields[i];
	      result[outputName] = aggregates[operation](group, field);
	    });
	    results.push(result);
	  });
	  dataView.rows = results;
	}

	registerTransform('aggregate', transform);
	registerTransform('summary', transform);

	module.exports = {
	  VALID_AGGREGATES: keys(aggregates)
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'y', 'count'],
	  bins: [30, 30], // Numeric vector giving number of bins in both horizontal and vertical directions
	  offset: [0, 0],
	  sizeByCount: false // calculate bin size by binning count
	  // fields: ['field0', 'field1'], // required
	  // binWidth: [ 30, 30 ], // Numeric vector giving bin width in both horizontal and vertical directions. Overrides bins if both set.
	};
	var SQRT3 = Math.sqrt(3);
	var THIRD_PI = Math.PI / 3;
	var ANGLES = [0, THIRD_PI, 2 * THIRD_PI, 3 * THIRD_PI, 4 * THIRD_PI, 5 * THIRD_PI];

	function distance(x0, y0, x1, y1) {
	  return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));
	}
	function nearestBinsCenters(value, scale, offset) {
	  var temp = value - offset;
	  scale = scale / 2;
	  var div = Math.floor(temp / scale);
	  var rounded = scale * (div + (Math.abs(div % 2) === 1 ? 1 : 0));
	  var roundedScaled = scale * (div + (Math.abs(div % 2) === 1 ? 0 : 1));
	  return [rounded + offset, roundedScaled + offset];
	}
	function generateBins(points) {
	  var binWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1];
	  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];
	  // processing aligned data
	  var bins = {};
	  var binWidthX = binWidth[0],
	      binWidthY = binWidth[1];
	  var offsetX = offset[0],
	      offsetY = offset[1];

	  points.forEach(function (point) {
	    var x = point[0],
	        y = point[1];
	    // step3.1: nearest two centers

	    var _nearestBinsCenters = nearestBinsCenters(x, binWidthX, offsetX),
	        xRounded = _nearestBinsCenters[0],
	        xRoundedScaled = _nearestBinsCenters[1];

	    var _nearestBinsCenters2 = nearestBinsCenters(y, binWidthY, offsetY),
	        yRounded = _nearestBinsCenters2[0],
	        yRoundedScaled = _nearestBinsCenters2[1];
	    // step3.2: compare distances


	    var d1 = distance(x, y, xRounded, yRounded);
	    var d2 = distance(x, y, xRoundedScaled, yRoundedScaled);
	    var binKey = void 0;
	    var binX = void 0;
	    var binY = void 0;

	    if (d1 < d2) {
	      binKey = 'x' + xRounded + 'y' + yRounded;
	      binX = xRounded;
	      binY = yRounded;
	    } else {
	      binKey = 'x' + xRoundedScaled + 'y' + yRoundedScaled;
	      binX = xRoundedScaled;
	      binY = yRoundedScaled;
	    }
	    bins[binKey] = bins[binKey] || {
	      x: binX,
	      y: binY,
	      count: 0
	    };
	    bins[binKey].count++;
	  });
	  return bins;
	}

	function transform(dataView, options) {
	  // step1: get binWidth, etc.
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields) || fields.length !== 2) {
	    throw new TypeError('Invalid fields: it must be an array with 2 strings!');
	  }
	  var fieldX = fields[0],
	      fieldY = fields[1];

	  var rangeFieldX = dataView.range(fieldX);
	  var rangeFieldY = dataView.range(fieldY);
	  var widthX = rangeFieldX[1] - rangeFieldX[0];
	  var widthY = rangeFieldY[1] - rangeFieldY[0];
	  var binWidth = options.binWidth || [];
	  if (binWidth.length !== 2) {
	    var _options$bins = options.bins,
	        binsX = _options$bins[0],
	        binsY = _options$bins[1];

	    if (binsX <= 0 || binsY <= 0) {
	      throw new TypeError('Invalid bins: must be an array with two positive numbers (e.g. [ 30, 30 ])!');
	    }
	    binWidth = [widthX / binsX, widthY / binsY];
	  }
	  // step2: align scale (squash Y)
	  /*
	   * binWidthX / binWidthY should be Math.sqrt3 / 1.5
	   * -: binWidthX |: binWidthY
	   *           3
	   *           |
	   *   4       |        2
	   *           |
	   *           |
	   *   5----------------1
	   *
	   *           0
	   */
	  var _options$offset = options.offset,
	      offsetX = _options$offset[0],
	      offsetY = _options$offset[1];

	  var yScale = 3 * binWidth[0] / (SQRT3 * binWidth[1]);
	  // const yScale = binWidth[0] / (SQRT3 * binWidth[1]);
	  var points = dataView.rows.map(function (row) {
	    return [row[fieldX], yScale * row[fieldY]];
	  });
	  // step3: binning
	  var bins = generateBins(points, [binWidth[0], yScale * binWidth[1]], [offsetX, yScale * offsetY]);
	  // step4: restore scale (for Y)
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1],
	      asCount = _options$as[2];

	  if (!asX || !asY || !asCount) {
	    throw new TypeError('Invalid as: it must be an array with three elements (e.g. [ "x", "y", "count" ])!');
	  }
	  var radius = binWidth[0] / SQRT3;
	  var hexagonPoints = ANGLES.map(function (angle) {
	    return [Math.sin(angle) * radius, -Math.cos(angle) * radius];
	  });
	  var result = [];
	  var maxCount = 0;
	  if (options.sizeByCount) {
	    forIn(bins, function (bin) {
	      if (bin.count > maxCount) {
	        maxCount = bin.count;
	      }
	    });
	  }
	  forIn(bins, function (bin) {
	    var x = bin.x,
	        y = bin.y,
	        count = bin.count;

	    var row = {};
	    row[asCount] = count;
	    if (options.sizeByCount) {
	      row[asX] = hexagonPoints.map(function (p) {
	        return x + bin.count / maxCount * p[0];
	      });
	      row[asY] = hexagonPoints.map(function (p) {
	        return (y + bin.count / maxCount * p[1]) / yScale;
	      });
	    } else {
	      row[asX] = hexagonPoints.map(function (p) {
	        return x + p[0];
	      });
	      row[asY] = hexagonPoints.map(function (p) {
	        return (y + p[1]) / yScale;
	      });
	    }
	    result.push(row);
	  });

	  dataView.rows = result;
	}

	registerTransform('bin.hexagon', transform);
	registerTransform('bin.hex', transform);
	registerTransform('hexbin', transform);

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var pick = __webpack_require__(22);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'count'],
	  bins: 30,
	  offset: 0,
	  groupBy: []
	  // field: '', // required
	  // binWidth: 10, // override bins
	};

	function nearestBin(value, scale, offset) {
	  var temp = value - offset;
	  var div = Math.floor(temp / scale);
	  return [div * scale + offset, (div + 1) * scale + offset];
	}

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  if (dataView.rows.length === 0) {
	    return;
	  }
	  var range = dataView.range(field);
	  var width = range[1] - range[0];
	  var binWidth = options.binWidth;
	  if (!binWidth) {
	    var bins = options.bins;
	    if (bins <= 0) {
	      throw new TypeError('Invalid bins: it must be a positive number!');
	    }
	    binWidth = width / bins;
	  }
	  var offset = options.offset % binWidth;

	  // grouping
	  var rows = [];
	  var groupBy = options.groupBy;
	  var groups = partition(dataView.rows, groupBy);
	  forIn(groups, function (group) {
	    var bins = {};
	    var column = group.map(function (row) {
	      return row[field];
	    });
	    column.forEach(function (value) {
	      var _nearestBin = nearestBin(value, binWidth, offset),
	          x0 = _nearestBin[0],
	          x1 = _nearestBin[1];

	      var binKey = x0 + '-' + x1;
	      bins[binKey] = bins[binKey] || {
	        x0: x0,
	        x1: x1,
	        count: 0
	      };
	      bins[binKey].count++;
	    });
	    var _options$as = options.as,
	        asX = _options$as[0],
	        asCount = _options$as[1];

	    if (!asX || !asCount) {
	      throw new TypeError('Invalid as: it must be an array with 2 elements (e.g. [ "x", "count" ])!');
	    }

	    var meta = pick(group[0], groupBy);
	    forIn(bins, function (bin) {
	      var row = assign({}, meta);
	      row[asX] = [bin.x0, bin.x1];
	      row[asCount] = bin.count;
	      rows.push(row);
	    });
	  });
	  dataView.rows = rows;
	}

	registerTransform('bin.histogram', transform);
	registerTransform('bin.dot', transform);

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(16),
	    quantile = _require.quantile;

	var partition = __webpack_require__(14);
	var pByFraction = __webpack_require__(50);

	var _require2 = __webpack_require__(1),
	    registerTransform = _require2.registerTransform;

	var _require3 = __webpack_require__(4),
	    getField = _require3.getField;

	var DEFAULT_OPTIONS = {
	  as: '_bin',
	  groupBy: [], // optional
	  fraction: 4 // default
	  // p: [0.5, 0.3], // array of p parameter
	  // field: 'y', // required
	};

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var as = options.as;
	  if (!isString(as)) {
	    throw new TypeError('Invalid as: it must be a string (e.g. "_bin")!');
	  }
	  var pArray = options.p;
	  var fraction = options.fraction;
	  if (!isArray(pArray) || pArray.length === 0) {
	    pArray = pByFraction(fraction);
	  }
	  var rows = dataView.rows;
	  var groupBy = options.groupBy;
	  var groups = partition(rows, groupBy);
	  var result = [];
	  forIn(groups, function (group) {
	    // const resultRow = pick(group[0], groupBy);
	    var resultRow = group[0];
	    var binningColumn = group.map(function (row) {
	      return row[field];
	    });
	    var quantiles = pArray.map(function (p) {
	      return quantile(binningColumn, p);
	    });
	    resultRow[as] = quantiles;
	    result.push(resultRow);
	  });
	  dataView.rows = result;
	}

	registerTransform('bin.quantile', transform);

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'y', 'count'],
	  bins: [30, 30], // Numeric vector giving number of bins in both horizontal and vertical directions
	  offset: [0, 0],
	  sizeByCount: false // calculate bin size by binning count
	  // fields: ['field0', 'field1'], // required
	  // binWidth: [ 30, 30 ], // Numeric vector giving bin width in both horizontal and vertical directions. Overrides bins if both set.
	};

	function nearestBin(value, scale, offset) {
	  var temp = value - offset;
	  var div = Math.floor(temp / scale);
	  return [div * scale + offset, (div + 1) * scale + offset];
	}

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var _getFields = getFields(options),
	      fieldX = _getFields[0],
	      fieldY = _getFields[1];

	  if (!fieldX || !fieldY) {
	    throw new TypeError('Invalid fields: must be an array with 2 strings!');
	  }
	  var rangeFieldX = dataView.range(fieldX);
	  var rangeFieldY = dataView.range(fieldY);
	  var widthX = rangeFieldX[1] - rangeFieldX[0];
	  var widthY = rangeFieldY[1] - rangeFieldY[0];
	  var binWidth = options.binWidth || [];
	  if (binWidth.length !== 2) {
	    var _options$bins = options.bins,
	        binsX = _options$bins[0],
	        binsY = _options$bins[1];

	    if (binsX <= 0 || binsY <= 0) {
	      throw new TypeError('Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!');
	    }
	    binWidth = [widthX / binsX, widthY / binsY];
	  }
	  var points = dataView.rows.map(function (row) {
	    return [row[fieldX], row[fieldY]];
	  });
	  var bins = {};
	  var _options$offset = options.offset,
	      offsetX = _options$offset[0],
	      offsetY = _options$offset[1];

	  points.forEach(function (point) {
	    var _nearestBin = nearestBin(point[0], binWidth[0], offsetX),
	        x0 = _nearestBin[0],
	        x1 = _nearestBin[1];

	    var _nearestBin2 = nearestBin(point[1], binWidth[1], offsetY),
	        y0 = _nearestBin2[0],
	        y1 = _nearestBin2[1];

	    var binKey = x0 + '-' + x1 + '-' + y0 + '-' + y1;
	    bins[binKey] = bins[binKey] || {
	      x0: x0,
	      x1: x1,
	      y0: y0,
	      y1: y1,
	      count: 0
	    };
	    bins[binKey].count++;
	  });
	  var rows = [];
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1],
	      asCount = _options$as[2];

	  if (!asX || !asY || !asCount) {
	    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "count" ])!');
	  }
	  /* points
	   * 3---2
	   * |   |
	   * 0---1
	   */
	  if (!options.sizeByCount) {
	    forIn(bins, function (bin) {
	      var row = {};
	      row[asX] = [bin.x0, bin.x1, bin.x1, bin.x0];
	      row[asY] = [bin.y0, bin.y0, bin.y1, bin.y1];
	      row[asCount] = bin.count;
	      rows.push(row);
	    });
	  } else {
	    var maxCount = 0;
	    forIn(bins, function (bin) {
	      if (bin.count > maxCount) {
	        maxCount = bin.count;
	      }
	    });
	    forIn(bins, function (bin) {
	      var x0 = bin.x0,
	          x1 = bin.x1,
	          y0 = bin.y0,
	          y1 = bin.y1,
	          count = bin.count;

	      var scale = count / maxCount;
	      var cx = (x0 + x1) / 2,
	          cy = (y0 + y1) / 2;

	      var rx = (x1 - x0) * scale / 2;
	      var ry = (y1 - y0) * scale / 2;
	      var x01 = cx - rx;
	      var x11 = cx + rx;
	      var y01 = cy - ry;
	      var y11 = cy + ry;
	      var row = {};
	      row[asX] = [x01, x11, x11, x01];
	      row[asY] = [y01, y01, y11, y11];
	      row[asCount] = count;
	      rows.push(row);
	    });
	  }
	  dataView.rows = rows;
	}

	registerTransform('bin.rectangle', transform);
	registerTransform('bin.rect', transform);

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	registerTransform('default', function (dataView) {
	  return dataView;
	});

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * for Arc Diagram (edges without weight) / Chord Diagram (edges with source and target weight)
	 * graph data required (nodes, edges)
	 */
	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var values = __webpack_require__(42);
	var isFunction = __webpack_require__(11);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {
	  y: 0,
	  thickness: 0.05, // thickness of the node, (0, 1)
	  weight: false,
	  marginRatio: 0.1, // margin ratio, [0, 1)
	  id: function id(node) {
	    return node.id;
	  },
	  source: function source(edge) {
	    return edge.source;
	  },
	  target: function target(edge) {
	    return edge.target;
	  },
	  sourceWeight: function sourceWeight(edge) {
	    return edge.value || 1;
	  },
	  targetWeight: function targetWeight(edge) {
	    return edge.value || 1;
	  },
	  sortBy: null // optional, id | weight | frequency | {function}
	};

	function _nodesFromEdges(edges, options) {
	  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	  edges.forEach(function (edge) {
	    var sId = options.edgeSource(edge);
	    var tId = options.edgeTarget(edge);
	    if (!map[sId]) {
	      map[sId] = {
	        id: sId
	      };
	    }
	    if (!map[tId]) {
	      map[tId] = {
	        id: tId
	      };
	    }
	  });
	  return values(map);
	}

	function _processGraph(nodeById, edges, options) {
	  forIn(nodeById, function (node, id) {
	    // in edges, out edges
	    node.inEdges = edges.filter(function (edge) {
	      return '' + options.target(edge) === '' + id;
	    });
	    node.outEdges = edges.filter(function (edge) {
	      return '' + options.source(edge) === '' + id;
	    });
	    // frequency
	    node.edges = node.outEdges.concat(node.inEdges);
	    node.frequency = node.edges.length;
	    // weight
	    node.value = 0;
	    node.inEdges.forEach(function (edge) {
	      node.value += options.targetWeight(edge);
	    });
	    node.outEdges.forEach(function (edge) {
	      node.value += options.sourceWeight(edge);
	    });
	  });
	}

	function _sortNodes(nodes, options) {
	  var sortMethods = {
	    weight: function weight(a, b) {
	      return b.value - a.value;
	    },
	    frequency: function frequency(a, b) {
	      return b.frequency - a.frequency;
	    },
	    id: function id(a, b) {
	      return ('' + options.id(a)).localeCompare('' + options.id(b));
	    }
	  };
	  var method = sortMethods[options.sortBy];
	  if (!method && isFunction(options.sortBy)) {
	    method = options.sortBy;
	  }
	  if (method) {
	    nodes.sort(method);
	  }
	}

	function _layoutNodes(nodes, options) {
	  var len = nodes.length;
	  if (!len) {
	    throw new TypeError('Invalid nodes: it\'s empty!');
	  }
	  if (options.weight) {
	    var marginRatio = options.marginRatio;
	    if (marginRatio < 0 || marginRatio >= 1) {
	      throw new TypeError('Invalid marginRatio: it must be in range [0, 1)!');
	    }
	    var margin = marginRatio / (2 * len);
	    var thickness = options.thickness;
	    if (thickness <= 0 || thickness >= 1) {
	      throw new TypeError('Invalid thickness: it must be in range (0, 1)!');
	    }
	    var totalValue = 0;
	    nodes.forEach(function (node) {
	      totalValue += node.value;
	    });
	    nodes.forEach(function (node) {
	      node.weight = node.value / totalValue;
	      node.width = node.weight * (1 - marginRatio);
	      node.height = thickness;
	    });
	    nodes.forEach(function (node, index) {
	      // x
	      var deltaX = 0;
	      for (var i = index - 1; i >= 0; i--) {
	        deltaX += nodes[i].width + 2 * margin;
	      }
	      var minX = node.minX = margin + deltaX;
	      var maxX = node.maxX = node.minX + node.width;
	      var minY = node.minY = options.y - thickness / 2;
	      var maxY = node.maxY = minY + thickness;
	      node.x = [minX, maxX, maxX, minX];
	      node.y = [minY, minY, maxY, maxY];
	      /* points
	       * 3---2
	       * |   |
	       * 0---1
	       */
	      // node.x = minX + 0.5 * node.width;
	      // node.y = options.y;
	    });
	  } else {
	    var deltaX = 1 / len;
	    nodes.forEach(function (node, index) {
	      node.x = (index + 0.5) * deltaX;
	      node.y = options.y;
	    });
	  }
	}

	function _locatingEdges(nodeById, edges, options) {
	  if (options.weight) {
	    var valueById = {};
	    forIn(nodeById, function (node, id) {
	      valueById[id] = node.value;
	    });
	    edges.forEach(function (edge) {
	      var sId = options.source(edge);
	      var tId = options.target(edge);
	      var sNode = nodeById[sId];
	      var tNode = nodeById[tId];
	      if (sNode && tNode) {
	        var sValue = valueById[sId];
	        var currentSValue = options.sourceWeight(edge);
	        var sStart = sNode.minX + (sNode.value - sValue) / sNode.value * sNode.width;
	        var sEnd = sStart + currentSValue / sNode.value * sNode.width;
	        valueById[sId] -= currentSValue;

	        var tValue = valueById[tId];
	        var currentTValue = options.targetWeight(edge);
	        var tStart = tNode.minX + (tNode.value - tValue) / tNode.value * tNode.width;
	        var tEnd = tStart + currentTValue / tNode.value * tNode.width;
	        valueById[tId] -= currentTValue;

	        var y = options.y;
	        edge.x = [sStart, sEnd, tStart, tEnd];
	        edge.y = [y, y, y, y];
	      }
	    });
	  } else {
	    edges.forEach(function (edge) {
	      var sNode = nodeById[options.source(edge)];
	      var tNode = nodeById[options.target(edge)];
	      if (sNode && tNode) {
	        edge.x = [sNode.x, tNode.x];
	        edge.y = [sNode.y, tNode.y];
	      }
	    });
	  }
	}

	function transform(dv, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var nodeById = {};
	  var nodes = dv.nodes;
	  var edges = dv.edges;
	  if (!isArray(nodes) || nodes.length === 0) {
	    nodes = _nodesFromEdges(edges, options, nodeById);
	  }
	  nodes.forEach(function (node) {
	    var id = options.id(node);
	    nodeById[id] = node;
	  });
	  _processGraph(nodeById, edges, options);
	  _sortNodes(nodes, options);
	  _layoutNodes(nodes, options);
	  _locatingEdges(nodeById, edges, options);
	  dv.nodes = nodes;
	  dv.edges = edges;
	}

	registerTransform('diagram.arc', transform);
	registerTransform('arc', transform);

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * for Sankey Diagram
	 * graph data required (nodes, edges)
	 */
	var assign = __webpack_require__(2);
	var isString = __webpack_require__(6);
	var isFunction = __webpack_require__(11);

	var _require = __webpack_require__(169),
	    sankey = _require.sankey,
	    sankeyLeft = _require.sankeyLeft,
	    sankeyRight = _require.sankeyRight,
	    sankeyCenter = _require.sankeyCenter,
	    sankeyJustify = _require.sankeyJustify;

	var _require2 = __webpack_require__(1),
	    registerTransform = _require2.registerTransform;

	var ALIGN_METHOD = {
	  sankeyLeft: sankeyLeft,
	  sankeyRight: sankeyRight,
	  sankeyCenter: sankeyCenter,
	  sankeyJustify: sankeyJustify
	};

	var DEFAULT_OPTIONS = {
	  // nodeId: node => node.index,
	  value: function value(node) {
	    return node.value;
	  },
	  source: function source(edge) {
	    return edge.source;
	  },
	  target: function target(edge) {
	    return edge.target;
	  },
	  nodeAlign: 'sankeyJustify',
	  nodeWidth: 0.02,
	  nodePadding: 0.02
	};

	function transform(dv, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var nodeAlign = null;
	  if (isString(options.nodeAlign)) {
	    nodeAlign = ALIGN_METHOD[options.nodeAlign];
	  } else if (isFunction(options.nodeAlign)) {
	    nodeAlign = options.nodeAlign;
	  }
	  var sankeyProcessor = sankey().links(function (d) {
	    return d.edges;
	  }).nodeWidth(options.nodeWidth).nodePadding(options.nodePadding).extent([[0, 0], [1, 1]]);
	  if (isFunction(options.nodeId)) {
	    sankeyProcessor.nodeId(options.nodeId);
	  }
	  if (nodeAlign) {
	    sankeyProcessor.nodeAlign(nodeAlign);
	  }
	  sankeyProcessor(dv);
	  // post process (x, y), etc.
	  dv.nodes.forEach(function (node) {
	    var x0 = node.x0,
	        x1 = node.x1,
	        y0 = node.y0,
	        y1 = node.y1;
	    /* points
	     * 3---2
	     * |   |
	     * 0---1
	     */

	    node.x = [x0, x1, x1, x0];
	    node.y = [y0, y0, y1, y1];
	  });
	  dv.edges.forEach(function (edge) {
	    var source = edge.source,
	        target = edge.target;

	    var sx = source.x1;
	    var tx = target.x0;
	    edge.x = [sx, sx, tx, tx];
	    var offset = edge.width / 2;
	    edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];
	  });
	}

	registerTransform('diagram.sankey', transform);
	registerTransform('sankey', transform);

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Voronoi = __webpack_require__(171);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var DEFAULT_OPTIONS = {
	  // fields: [ 'x', 'y' ] // field x and field y, required
	  // extend: [[x0, y0], [x1, y1]], // optional
	  // size: [width, height], // optional
	  as: ['_x', '_y']
	};

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: must be an array with two strings!');
	  }
	  var xField = as[0];
	  var yField = as[1];

	  var fields = getFields(options);
	  if (!isArray(fields) && fields.length !== 2) {
	    throw new TypeError('Invalid fields: must be an array with two strings!');
	  }
	  var x = fields[0];
	  var y = fields[1];

	  var rows = dataView.rows;
	  var data = rows.map(function (row) {
	    return [row[x], row[y]];
	  });
	  var voronoi = d3Voronoi.voronoi();
	  if (options.extend) {
	    voronoi.extent(options.extend);
	  }
	  if (options.size) {
	    voronoi.size(options.size);
	  }
	  var polygons = voronoi(data).polygons();
	  rows.forEach(function (row, i) {
	    var polygon = polygons[i].filter(function (point) {
	      return !!point;
	    }); // some points are null
	    row[xField] = polygon.map(function (point) {
	      return point[0];
	    });
	    row[yField] = polygon.map(function (point) {
	      return point[1];
	    });
	  });
	}

	registerTransform('diagram.voronoi', transform);
	registerTransform('voronoi', transform);

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {
	  fillBy: 'group', // group | order
	  groupBy: [],
	  orderBy: []
	};

	function arrayDifference(arr1, arr2) {
	  // arrayDifference([1, 1, 1, 2], [1, 2]) => [1, 1]
	  var shadow = arr1.map(function (item) {
	    return item;
	  }); // shadow copy
	  arr2.forEach(function (item) {
	    var index = shadow.indexOf(item);
	    if (index > -1) {
	      shadow.splice(index, 1);
	    }
	  });
	  return shadow;
	}

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  var rows = dataView.rows;
	  var groupBy = options.groupBy;
	  var orderBy = options.orderBy;
	  var groups = partition(rows, groupBy, orderBy);
	  var maxLength = 0;
	  var referenceGroup = [];
	  forIn(groups, function (group) {
	    if (group.length > maxLength) {
	      maxLength = group.length;
	      referenceGroup = group;
	    }
	  });
	  var referenceOrderByKeys = [];
	  var referenceRowByOrderByKey = {};
	  referenceGroup.forEach(function (row) {
	    var key = orderBy.map(function (col) {
	      return row[col];
	    }).join('-');
	    referenceOrderByKeys.push(key);
	    referenceRowByOrderByKey[key] = row;
	  });
	  if (options.fillBy === 'order') {
	    var first = referenceGroup[0];
	    var allOrderByKeys = [];
	    var rowByOrderByKey = {};
	    rows.forEach(function (row) {
	      var key = orderBy.map(function (col) {
	        return row[col];
	      }).join('-');
	      if (allOrderByKeys.indexOf(key) === -1) {
	        allOrderByKeys.push(key);
	        rowByOrderByKey[key] = row;
	      }
	    });
	    var _missingOrderByKeys = arrayDifference(allOrderByKeys, referenceOrderByKeys);
	    _missingOrderByKeys.forEach(function (key) {
	      var row = {};
	      groupBy.forEach(function (col) {
	        row[col] = first[col];
	      });
	      orderBy.forEach(function (col) {
	        row[col] = rowByOrderByKey[key][col];
	      });
	      rows.push(row);
	      referenceGroup.push(row);
	      referenceOrderByKeys.push(key);
	      referenceRowByOrderByKey[key] = row;
	    });
	    maxLength = referenceGroup.length;
	  }
	  forIn(groups, function (group) {
	    if (group !== referenceGroup && group.length < maxLength) {
	      var _first = group[0];
	      // missing orderBy keys
	      var orderByKeys = [];
	      group.forEach(function (row) {
	        orderByKeys.push(orderBy.map(function (col) {
	          return row[col];
	        }).join('-'));
	      });
	      var missingOrderByKeys = arrayDifference(referenceOrderByKeys, orderByKeys);
	      missingOrderByKeys.some(function (key, i) {
	        if (i >= maxLength - group.length) {
	          // group length overflow
	          return true;
	        }
	        var referenceRow = referenceRowByOrderByKey[key];
	        var row = {};
	        groupBy.forEach(function (col) {
	          row[col] = _first[col];
	        });
	        orderBy.forEach(function (col) {
	          row[col] = referenceRow[col];
	        });
	        rows.push(row);
	        return false;
	      });
	    }
	  });
	}

	registerTransform('fill-rows', transform);
	registerTransform('fillRows', transform);

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	/*
	 * options: {
	 *   type: 'filter',
	 *   callback,
	 * }
	 */

	function defaultCallback(row) {
	  return !!row;
	}

	registerTransform('filter', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  dataView.rows = dataView.rows.filter(options.callback || defaultCallback);
	});

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var difference = __webpack_require__(152);
	var pick = __webpack_require__(22);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var DEFAULT_OPTIONS = {
	  fields: [],
	  key: 'key',
	  retains: [],
	  value: 'value'
	};

	registerTransform('fold', function (dataView, options) {
	  var columns = dataView.getColumnNames();
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (fields.length === 0) {
	    console.warn('warning: option fields is not specified, will fold all columns.');
	    fields = columns;
	  }
	  var key = options.key;
	  var value = options.value;
	  var retains = options.retains;
	  if (retains.length === 0) {
	    retains = difference(columns, fields);
	  }
	  var resultRows = [];
	  dataView.rows.forEach(function (row) {
	    fields.forEach(function (field) {
	      var resultRow = pick(row, retains);
	      resultRow[key] = field;
	      resultRow[value] = row[field];
	      resultRows.push(resultRow);
	    });
	  });
	  dataView.rows = resultRows;
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  // field: 'name', // required
	  // geoView: view, // required
	  // geoDataView: view, // alias
	  as: ['_centroid_x', '_centroid_y']
	};

	function transform(view, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var geoView = options.geoView || options.geoDataView; // alias
	  if (isString(geoView)) {
	    geoView = view.dataSet.getView(geoView);
	  }
	  if (!geoView || geoView.dataType !== 'geo') {
	    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');
	  }
	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "cX", "cY" ])!');
	  }

	  var centroidX = as[0];
	  var centroidY = as[1];
	  view.rows.forEach(function (row) {
	    var feature = geoView.geoFeatureByName(row[field]);
	    if (feature) {
	      if (geoView._projectedAs) {
	        row[centroidX] = feature[geoView._projectedAs[2]];
	        row[centroidY] = feature[geoView._projectedAs[3]];
	      } else {
	        row[centroidX] = feature.centroidX;
	        row[centroidY] = feature.centroidY;
	      }
	    }
	  });
	}

	registerTransform('geo.centroid', transform);

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Geo = __webpack_require__(28);
	var getPointAtLength = __webpack_require__(62);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var getGeoProjection = __webpack_require__(49);

	var geoPath = d3Geo.geoPath;

	var DEFAULT_OPTIONS = {
	  // projection: '', // default to null
	  as: ['_x', '_y', '_centroid_x', '_centroid_y']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== 'geo' && dataView.dataType !== 'geo-graticule') {
	    throw new TypeError('Invalid dataView: this transform is for Geo data only!');
	  }
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var projection = options.projection;
	  if (!projection) {
	    throw new TypeError('Invalid projection!');
	  }
	  projection = getGeoProjection(projection);
	  var geoPathGenerator = geoPath(projection);
	  var as = options.as;
	  if (!isArray(as) || as.length !== 4) {
	    throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ "x", "y", "cX", "cY" ])!');
	  }
	  dataView._projectedAs = as;
	  var lonField = as[0],
	      latField = as[1],
	      centroidX = as[2],
	      centroidY = as[3];

	  dataView.rows.forEach(function (row) {
	    row[lonField] = [];
	    row[latField] = [];
	    var pathData = geoPathGenerator(row);
	    if (pathData) {
	      // TODO projection returns null
	      var points = getPointAtLength(pathData);
	      points._path.forEach(function (point) {
	        row[lonField].push(point[1]);
	        row[latField].push(point[2]);
	      });
	      var centroid = geoPathGenerator.centroid(row);
	      row[centroidX] = centroid[0];
	      row[centroidY] = centroid[1];
	    }
	  });
	  dataView.rows = dataView.rows.filter(function (row) {
	    return row[lonField].length !== 0;
	  });
	}

	registerTransform('geo.projection', transform);

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  // field: 'name', // required
	  // geoView: view, // required
	  // geoDataView: view, // alias
	  as: ['_x', '_y']
	};

	function transform(view, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var geoView = options.geoView || options.geoDataView; // alias
	  if (isString(geoView)) {
	    geoView = view.dataSet.getView(geoView);
	  }
	  if (!geoView || geoView.dataType !== 'geo') {
	    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');
	  }
	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
	  }
	  var lonField = as[0];
	  var latField = as[1];
	  view.rows.forEach(function (row) {
	    var feature = geoView.geoFeatureByName(row[field]);
	    if (feature) {
	      if (geoView._projectedAs) {
	        row[lonField] = feature[geoView._projectedAs[0]];
	        row[latField] = feature[geoView._projectedAs[1]];
	      } else {
	        row[lonField] = feature.longitude;
	        row[latField] = feature.latitude;
	      }
	    }
	  });
	}

	registerTransform('geo.region', transform);

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Hierarchy = __webpack_require__(24);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  field: 'value',
	  size: [1, 1], // width, height
	  nodeSize: null,
	  separation: null,
	  as: ['x', 'y']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }
	  var root = dataView.root;
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
	  }

	  var field = void 0;
	  try {
	    field = getField(options);
	  } catch (e) {
	    console.warn(e);
	  }
	  if (field) {
	    root.sum(function (d) {
	      return d[field];
	    });
	  }

	  var clusterLayout = d3Hierarchy.cluster();
	  clusterLayout.size(options.size);
	  if (options.nodeSize) {
	    clusterLayout.nodeSize(options.nodeSize);
	  }
	  if (options.separation) {
	    clusterLayout.separation(options.separation);
	  }
	  clusterLayout(root);

	  var x = as[0];
	  var y = as[1];
	  root.each(function (node) {
	    node[x] = node.x;
	    node[y] = node.y;
	  });
	}

	registerTransform('hierarchy.cluster', transform);
	registerTransform('dendrogram', transform);

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var hierarchy = __webpack_require__(40);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {};

	function transform(dataView, options) {
	  var root = dataView.root;
	  options = Object.assign({}, DEFAULT_OPTIONS, options);

	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }

	  dataView.root = hierarchy.compactBox(root, options);
	}

	registerTransform('hierarchy.compact-box', transform);
	registerTransform('compact-box-tree', transform);
	registerTransform('non-layered-tidy-tree', transform);
	registerTransform('mindmap-logical', transform);

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var hierarchy = __webpack_require__(40);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {};

	function transform(dataView, options) {
	  var root = dataView.root;
	  options = Object.assign({}, DEFAULT_OPTIONS, options);

	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }

	  dataView.root = hierarchy.dendrogram(root, options);
	}

	registerTransform('hierarchy.dendrogram', transform);
	registerTransform('dendrogram', transform);

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var hierarchy = __webpack_require__(40);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {};

	function transform(dataView, options) {
	  var root = dataView.root;
	  options = Object.assign({}, DEFAULT_OPTIONS, options);

	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }

	  dataView.root = hierarchy.indented(root, options);
	}

	registerTransform('hierarchy.indented', transform);
	registerTransform('indented-tree', transform);

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Hierarchy = __webpack_require__(24);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  field: 'value',
	  size: [1, 1], // width, height
	  padding: 0,
	  as: ['x', 'y', 'r']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }
	  var root = dataView.root;
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 3) {
	    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ "x", "y", "r" ])!');
	  }

	  var field = void 0;
	  try {
	    field = getField(options);
	  } catch (e) {
	    console.warn(e);
	  }
	  if (field) {
	    root.sum(function (d) {
	      return d[field];
	    }).sort(function (a, b) {
	      return b[field] - a[field];
	    });
	  }

	  var packLayout = d3Hierarchy.pack();
	  packLayout.size(options.size);

	  if (options.padding) {
	    packLayout.padding(options.padding);
	  }
	  packLayout(root);

	  var x = as[0];
	  var y = as[1];
	  var r = as[2];
	  root.each(function (node) {
	    node[x] = node.x;
	    node[y] = node.y;
	    node[r] = node.r;
	  });
	}

	registerTransform('hierarchy.pack', transform);
	registerTransform('hierarchy.circle-packing', transform);
	registerTransform('circle-packing', transform);

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Hierarchy = __webpack_require__(24);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  field: 'value',
	  size: [1, 1], // width, height
	  round: false,
	  // ratio: 1.618033988749895, // golden ratio
	  padding: 0,
	  sort: true,
	  as: ['x', 'y']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }
	  var root = dataView.root;
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
	  }

	  var field = void 0;
	  try {
	    field = getField(options);
	  } catch (e) {
	    console.warn(e);
	  }
	  if (field) {
	    root.sum(function (d) {
	      return d[field];
	    });
	  }

	  var partitionLayout = d3Hierarchy.partition();
	  partitionLayout.size(options.size).round(options.round).padding(options.padding);
	  partitionLayout(root);

	  /*
	   * points:
	   *   3  2
	   *   0  1
	   */
	  var x = as[0];
	  var y = as[1];
	  root.each(function (node) {
	    node[x] = [node.x0, node.x1, node.x1, node.x0];
	    node[y] = [node.y1, node.y1, node.y0, node.y0];
	    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {
	      if (as.indexOf(prop) === -1) {
	        delete node[prop];
	      }
	    });
	  });
	}

	registerTransform('hierarchy.partition', transform);
	registerTransform('adjacency', transform);

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Hierarchy = __webpack_require__(24);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  field: 'value',
	  size: [1, 1], // width, height
	  nodeSize: null,
	  separation: null,
	  as: ['x', 'y']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }
	  var root = dataView.root;
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
	  }

	  var field = void 0;
	  try {
	    field = getField(options);
	  } catch (e) {
	    console.warn(e);
	  }
	  if (field) {
	    root.sum(function (d) {
	      return d[field];
	    });
	  }

	  var treeLayout = d3Hierarchy.tree();
	  treeLayout.size(options.size);
	  if (options.nodeSize) {
	    treeLayout.nodeSize(options.nodeSize);
	  }
	  if (options.separation) {
	    treeLayout.separation(options.separation);
	  }
	  treeLayout(root);

	  var x = as[0];
	  var y = as[1];
	  root.each(function (node) {
	    node[x] = node.x;
	    node[y] = node.y;
	  });
	}

	registerTransform('hierarchy.tree', transform);
	registerTransform('tree', transform);

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var d3Hierarchy = __webpack_require__(24);
	var isArray = __webpack_require__(3);

	var _require = __webpack_require__(1),
	    HIERARCHY = _require.HIERARCHY,
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  field: 'value',
	  tile: 'treemapSquarify', // treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify
	  size: [1, 1], // width, height
	  round: false,
	  // ratio: 1.618033988749895, // golden ratio
	  padding: 0,
	  paddingInner: 0,
	  paddingOuter: 0,
	  paddingTop: 0,
	  paddingRight: 0,
	  paddingBottom: 0,
	  paddingLeft: 0,
	  as: ['x', 'y']
	};

	function transform(dataView, options) {
	  if (dataView.dataType !== HIERARCHY) {
	    throw new TypeError('Invalid DataView: This transform is for Hierarchy data only!');
	  }
	  var root = dataView.root;
	  options = assign({}, DEFAULT_OPTIONS, options);

	  var as = options.as;
	  if (!isArray(as) || as.length !== 2) {
	    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
	  }

	  var field = void 0;
	  try {
	    field = getField(options);
	  } catch (e) {
	    console.warn(e);
	  }
	  if (field) {
	    root.sum(function (d) {
	      return d[field];
	    });
	  }

	  var treemapLayout = d3Hierarchy.treemap();
	  treemapLayout.tile(d3Hierarchy[options.tile]).size(options.size).round(options.round).padding(options.padding).paddingInner(options.paddingInner).paddingOuter(options.paddingOuter).paddingTop(options.paddingTop).paddingRight(options.paddingRight).paddingBottom(options.paddingBottom).paddingLeft(options.paddingLeft);
	  treemapLayout(root);

	  /*
	   * points:
	   *   3  2
	   *   0  1
	   */
	  var x = as[0];
	  var y = as[1];
	  root.each(function (node) {
	    node[x] = [node.x0, node.x1, node.x1, node.x0];
	    node[y] = [node.y1, node.y1, node.y0, node.y0];
	    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {
	      if (as.indexOf(prop) === -1) {
	        delete node[prop];
	      }
	    });
	  });
	}

	registerTransform('hierarchy.treemap', transform);
	registerTransform('treemap', transform);

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var has = __webpack_require__(159);
	var isFunction = __webpack_require__(11);
	var isUndefined = __webpack_require__(161);
	var isString = __webpack_require__(6);
	var simpleStatistics = __webpack_require__(16);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  // field: '', // required
	  // method: 'value', // required
	  // value: 10, // required if (method === 'value')
	  groupBy: []
	};

	function notUndefinedValues(values) {
	  return values.filter(function (value) {
	    return !isUndefined(value);
	  });
	}

	var STATISTICS_METHODS = ['mean', 'median', 'max', 'min'];
	var imputations = {};
	STATISTICS_METHODS.forEach(function (method) {
	  imputations[method] = function (row, values) {
	    return simpleStatistics[method](values);
	  };
	});
	imputations.value = function (row, values, value) {
	  return value;
	};

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var method = options.method;
	  if (!method) {
	    throw new TypeError('Invalid method!');
	  }
	  if (method === 'value' && !has(options, 'value')) {
	    throw new TypeError('Invalid value: it is nil.');
	  }
	  var column = notUndefinedValues(dataView.getColumn(field));
	  var groups = partition(dataView.rows, options.groupBy);
	  forIn(groups, function (group) {
	    var fieldValues = notUndefinedValues(group.map(function (row) {
	      return row[field];
	    }));
	    if (fieldValues.length === 0) {
	      fieldValues = column;
	    }
	    group.forEach(function (row) {
	      if (isUndefined(row[field])) {
	        if (isFunction(method)) {
	          row[field] = method(row, fieldValues, options.value, group);
	        } else if (isString(method)) {
	          row[field] = imputations[method](row, fieldValues, options.value);
	        } else {
	          throw new TypeError('Invalid method: must be a function or one of ' + STATISTICS_METHODS.join(', '));
	        }
	      }
	    });
	  });
	}

	registerTransform('impute', transform);

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * kernel density estimation
	 */
	var assign = __webpack_require__(2);
	var each = __webpack_require__(5);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isFunction = __webpack_require__(11);
	var isNumber = __webpack_require__(36);
	var isString = __webpack_require__(6);
	var keys = __webpack_require__(19);
	var pick = __webpack_require__(22);
	var getSeriesValues = __webpack_require__(33);
	var kernel = __webpack_require__(39);
	var bandwidth = __webpack_require__(32);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var _require3 = __webpack_require__(16),
	    kernelDensityEstimation = _require3.kernelDensityEstimation;

	var DEFAULT_OPTIONS = {
	  minSize: 0.01,
	  as: ['key', 'y', 'size'],
	  // fields: [ 'y1', 'y2' ], // required, one or more fields
	  extent: [], // extent to execute regression function, default: [ [ min(x), max(x) ], [ min(y), max(y) ] ]
	  method: 'gaussian', // kernel method: should be one of keys(kernel)
	  bandwidth: 'nrd', // bandwidth method to execute kernel function // nrd, silverman or a fixed bandwidth value
	  step: 0,
	  groupBy: []
	};

	var KERNEL_METHODS = keys(kernel);
	var BANDWIDTH_METHODS = keys(bandwidth);

	function transform(dv, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields) || fields.length < 1) {
	    throw new TypeError('invalid fields: must be an array of at least 1 strings!');
	  }
	  var as = options.as;
	  if (!isArray(as) || as.length !== 3) {
	    throw new TypeError('invalid as: must be an array of 3 strings!');
	  }
	  var method = options.method;
	  if (isString(method)) {
	    if (KERNEL_METHODS.indexOf(method) === -1) {
	      throw new TypeError('invalid method: ' + method + '. Must be one of ' + KERNEL_METHODS.join(', '));
	    }
	    method = kernel[method];
	  }
	  if (!isFunction(method)) {
	    throw new TypeError('invalid method: kernel method must be a function!');
	  }

	  var extent = options.extent;
	  if (!isArray(extent) || extent.length === 0) {
	    var rangeArr = [];
	    each(fields, function (field) {
	      var range = dv.range(field);
	      rangeArr = rangeArr.concat(range);
	    });
	    extent = [Math.min.apply(Math, rangeArr), Math.max.apply(Math, rangeArr)];
	  }
	  var bw = options.bandwidth;
	  if (isString(bw) && bandwidth[bw]) {
	    bw = bandwidth[bw](dv.getColumn(fields[0]));
	  } else if (isFunction(bw)) {
	    bw = bw(dv.getColumn(fields[0]));
	  } else if (!isNumber(bw) || bw <= 0) {
	    bw = bandwidth.nrd(dv.getColumn(fields[0]));
	  }
	  var seriesValues = getSeriesValues(extent, options.step ? options.step : bw);
	  var result = [];

	  var groupBy = options.groupBy;
	  var groups = partition(dv.rows, groupBy);
	  forIn(groups, function (group) {
	    var probalityDensityFunctionByField = {};
	    each(fields, function (field) {
	      var row = pick(group[0], groupBy);
	      probalityDensityFunctionByField[field] = kernelDensityEstimation(group.map(function (item) {
	        return item[field];
	      }), method, bw);
	      var key = as[0],
	          y = as[1],
	          size = as[2];

	      row[key] = field;
	      row[y] = [];
	      row[size] = [];
	      each(seriesValues, function (yValue) {
	        var sizeValue = probalityDensityFunctionByField[field](yValue);
	        if (sizeValue >= options.minSize) {
	          row[y].push(yValue);
	          row[size].push(sizeValue);
	        }
	      });
	      result.push(row);
	    });
	  });

	  dv.rows = result;
	}

	registerTransform('kernel-density-estimation', transform);
	registerTransform('kde', transform);
	registerTransform('KDE', transform);

	module.exports = {
	  KERNEL_METHODS: KERNEL_METHODS,
	  BANDWIDTH_METHODS: BANDWIDTH_METHODS
	};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js
	 */
	var assign = __webpack_require__(2);
	var isArray = __webpack_require__(3);
	var isFunction = __webpack_require__(11);
	var isNumber = __webpack_require__(36);
	var isString = __webpack_require__(6);
	var keys = __webpack_require__(19);
	// const regression = require('regression');
	var getSeriesValues = __webpack_require__(33);
	// const enclideanDistance = require('../../util/euclidean-distance');
	var kernel = __webpack_require__(39);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var _require3 = __webpack_require__(32),
	    silverman = _require3.silverman;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'y', 'z'],
	  // fields: [ 'x', 'y' ], // required, one or two fields
	  method: 'gaussian', // kernel method: should be one of keys(kernel)
	  extent: [], // extent to execute regression function, default: [ [ min(x), max(x) ], [ min(y), max(y) ] ]
	  bandwidth: [] // bandWidth to execute kernel function
	};

	var KERNEL_METHODS = keys(kernel);

	function transform(dv, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields) || fields.length !== 2) {
	    throw new TypeError('invalid fields: must be an array of 2 strings!');
	  }
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1],
	      asZ = _options$as[2];

	  if (!isString(asX) || !isString(asY) || !isString(asZ)) {
	    throw new TypeError('invalid as: must be an array of 3 strings!');
	  }
	  var method = options.method;
	  if (isString(method)) {
	    if (KERNEL_METHODS.indexOf(method) === -1) {
	      throw new TypeError('invalid method: ' + method + '. Must be one of ' + KERNEL_METHODS.join(', '));
	    }
	    method = kernel[method];
	  }
	  if (!isFunction(method)) {
	    throw new TypeError('invalid method: kernel method must be a function!');
	  }

	  var xField = fields[0],
	      yField = fields[1];
	  var _options$extent = options.extent,
	      extentX = _options$extent[0],
	      extentY = _options$extent[1];

	  if (!isArray(extentX) || !isArray(extentY)) {
	    extentX = dv.range(xField);
	    extentY = dv.range(yField);
	  }
	  var _options$bandwidth = options.bandwidth,
	      bwX = _options$bandwidth[0],
	      bwY = _options$bandwidth[1];

	  if (!isNumber(bwX) || bwX <= 0 || !isNumber(bwY) || bwY <= 0) {
	    bwX = silverman(dv.getColumn(xField));
	    bwY = silverman(dv.getColumn(yField));
	  }
	  var seriesValuesX = getSeriesValues(extentX, bwX);
	  var seriesValuesY = getSeriesValues(extentY, bwY);
	  var count = dv.rows.length;
	  var result = [];

	  for (var i = 0; i < seriesValuesX.length; i++) {
	    for (var j = 0; j < seriesValuesY.length; j++) {
	      var sum = 0;
	      var x = seriesValuesX[i];
	      var y = seriesValuesY[j];
	      for (var k = 0; k < count; k++) {
	        sum += method((x - dv.rows[k][xField]) / bwX) * method((y - dv.rows[k][yField]) / bwY);
	      }
	      var z = 1 / (count * bwX * bwY) * sum;
	      var row = {};
	      row[asX] = x;
	      row[asY] = y;
	      row[asZ] = z;
	      result.push(row);
	    }
	  }

	  dv.rows = result;
	}

	registerTransform('kernel-smooth.density', transform);
	registerTransform('kernel.density', transform);

	module.exports = {
	  KERNEL_METHODS: KERNEL_METHODS
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @reference: https://github.com/Planeshifter/kernel-smooth/blob/master/lib/index.js
	 */
	var assign = __webpack_require__(2);
	var isArray = __webpack_require__(3);
	var isFunction = __webpack_require__(11);
	var isNil = __webpack_require__(35);
	var isNumber = __webpack_require__(36);
	var isString = __webpack_require__(6);
	var keys = __webpack_require__(19);
	// const regression = require('regression');

	var _require = __webpack_require__(16),
	    sum = _require.sum;

	var getSeriesValues = __webpack_require__(33);
	// const enclideanDistance = require('../../util/euclidean-distance');
	var kernel = __webpack_require__(39);

	var _require2 = __webpack_require__(1),
	    registerTransform = _require2.registerTransform;

	var _require3 = __webpack_require__(4),
	    getFields = _require3.getFields;

	var _require4 = __webpack_require__(32),
	    silverman = _require4.silverman;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'y'],
	  // fields: [ 'x', 'y' ], // required, one or two fields
	  method: 'gaussian' // kernel method: should be one of keys(kernel)
	  // extent: [], // extent to execute regression function, default: [ min(x), max(x) ]
	  // bandwidth: 0.5 // bandWidth to execute kernel function
	};

	var KERNEL_METHODS = keys(kernel);

	// calculates weight for i-th obs
	function weight(kernel, bandwidth, x_0, x_i) {
	  var arg = (x_i - x_0) / bandwidth;
	  return kernel(arg);
	}
	// calculates weight for i-th obs when p > 1
	// function weight_vectors(kernel, bandwidth, x_0, x_i) {
	//   const arg = enclideanDistance(x_i, x_0) / bandwidth;
	//   return kernel(arg);
	// }
	function vectorize(fun) {
	  return function (x) {
	    if (!isArray(x)) {
	      return fun(x);
	    }
	    return x.map(function (x) {
	      return fun(x);
	    });
	  };
	}

	function transform(dv, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields) || fields.length !== 1 && fields.length !== 2) {
	    throw new TypeError('invalid fields: must be an array of 1 or 2 strings!');
	  }
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1];

	  if (!isString(asX) || !isString(asY)) {
	    throw new TypeError('invalid as: must be an array of 2 strings!');
	  }
	  var method = options.method;
	  if (isString(method)) {
	    if (KERNEL_METHODS.indexOf(method) === -1) {
	      throw new TypeError('invalid method: ' + method + '. Must be one of ' + KERNEL_METHODS.join(', '));
	    }
	    method = kernel[method];
	  }
	  if (!isFunction(method)) {
	    throw new TypeError('invalid method: kernel method must be a function!');
	  }

	  var xField = fields[0],
	      yField = fields[1];

	  var xs = dv.getColumn(xField);

	  var extent = options.extent;
	  if (!isArray(extent)) {
	    extent = dv.range(xField);
	  }
	  var bandwidth = options.bandwidth;
	  if (!isNumber(bandwidth) || bandwidth <= 0) {
	    bandwidth = silverman(xs);
	  }
	  var seriesValues = getSeriesValues(extent, bandwidth);
	  var xCount = xs.length;
	  var weightFunc = weight.bind(null, method, bandwidth);
	  var kernelSmoother = void 0;

	  if (isNil(yField)) {
	    // KDE
	    kernelSmoother = vectorize(function (x) {
	      var weights = xs.map(function (x_i) {
	        return weightFunc(x, x_i);
	      });
	      var num = sum(weights);
	      var denom = xCount * bandwidth;
	      if (!num || !denom) return 0;
	      return num / denom;
	    });
	  } else {
	    // kernel regression smoothing
	    var ys = dv.getColumn(yField);
	    kernelSmoother = vectorize(function (x) {
	      var weights = xs.map(function (x_i) {
	        return weightFunc(x, x_i);
	      });
	      var num = sum(weights.map(function (w, i) {
	        return w * ys[i];
	      }));
	      var denom = sum(weights);
	      if (!num || !denom) return 0;
	      return num / denom;
	    });
	  }

	  var result = seriesValues.map(function (x) {
	    var row = {};
	    row[asX] = x;
	    row[asY] = kernelSmoother(x);
	    return row;
	  });
	  dv.rows = result;
	}

	registerTransform('kernel-smooth.regression', transform);
	registerTransform('kernel.regression', transform);

	module.exports = {
	  KERNEL_METHODS: KERNEL_METHODS
	};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	/*
	 * options: {
	 *   type: 'map',
	 *   callback,
	 * }
	 */

	function defaultCallback(row) {
	  return row;
	}

	registerTransform('map', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  dataView.rows = dataView.rows.map(options.callback || defaultCallback);
	});

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var values = __webpack_require__(42);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var DEFAULT_OPTIONS = {
	  groupBy: [], // optional
	  orderBy: []
	};

	registerTransform('partition', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  dataView.rows = partition(dataView.rows, options.groupBy, options.orderBy);
	});

	function group(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  dataView.rows = values(partition(dataView.rows, options.groupBy, options.orderBy));
	}

	registerTransform('group', group);
	registerTransform('groups', group);

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(16),
	    sum = _require.sum;

	var partition = __webpack_require__(14);

	var _require2 = __webpack_require__(1),
	    registerTransform = _require2.registerTransform;

	var _require3 = __webpack_require__(4),
	    getField = _require3.getField;

	var DEFAULT_OPTIONS = {
	  // field: 'y', // required
	  // dimension: 'x', // required
	  groupBy: [], // optional
	  as: '_percent'
	};

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var dimension = options.dimension;
	  var groupBy = options.groupBy;
	  var as = options.as;
	  if (!isString(dimension)) {
	    throw new TypeError('Invalid dimension: must be a string!');
	  }
	  if (isArray(as)) {
	    console.warn('Invalid as: must be a string, will use the first element of the array specified.');
	    as = as[0];
	  }
	  if (!isString(as)) {
	    throw new TypeError('Invalid as: must be a string!');
	  }
	  var rows = dataView.rows;
	  var result = [];
	  var groups = partition(rows, groupBy);
	  forIn(groups, function (group) {
	    var totalSum = sum(group.map(function (row) {
	      return row[field];
	    }));
	    if (totalSum === 0) {
	      console.warn('Invalid data: total sum of field ' + field + ' is 0!');
	    }
	    var innerGroups = partition(group, [dimension]);
	    forIn(innerGroups, function (innerGroup) {
	      var innerSum = sum(innerGroup.map(function (row) {
	        return row[field];
	      }));
	      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));
	      var resultRow = innerGroup[0];
	      // FIXME in case dimension and field is the same
	      var dimensionValue = resultRow[dimension];
	      resultRow[field] = innerSum;
	      resultRow[dimension] = dimensionValue;
	      if (totalSum === 0) {
	        resultRow[as] = 0;
	      } else {
	        resultRow[as] = innerSum / totalSum;
	      }
	      result.push(resultRow);
	    });
	  });
	  dataView.rows = result;
	}

	registerTransform('percent', transform);

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var pick = __webpack_require__(22);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	/*
	 * options: {
	 *   type: 'pick',
	 *   fields: [],
	 * }
	 */

	registerTransform('pick', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var columns = getFields(options, dataView.getColumnNames());
	  dataView.rows = dataView.rows.map(function (row) {
	    return pick(row, columns);
	  });
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var forIn = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var isString = __webpack_require__(6);
	var partition = __webpack_require__(14);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getField = _require2.getField;

	var DEFAULT_OPTIONS = {
	  // field: 'y', // required
	  // dimension: 'x', // required
	  groupBy: [], // optional
	  as: '_proportion'
	};

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = assign({}, DEFAULT_OPTIONS, options);
	  var field = getField(options);
	  var dimension = options.dimension;
	  var groupBy = options.groupBy;
	  var as = options.as;
	  if (!isString(dimension)) {
	    throw new TypeError('Invalid dimension: must be a string!');
	  }
	  if (isArray(as)) {
	    console.warn('Invalid as: must be a string, will use the first element of the array specified.');
	    as = as[0];
	  }
	  if (!isString(as)) {
	    throw new TypeError('Invalid as: must be a string!');
	  }
	  var rows = dataView.rows;
	  var result = [];
	  var groups = partition(rows, groupBy);
	  forIn(groups, function (group) {
	    var totalCount = group.length;
	    var innerGroups = partition(group, [dimension]);
	    forIn(innerGroups, function (innerGroup) {
	      var innerCount = innerGroup.length;
	      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));
	      var resultRow = innerGroup[0];
	      // FIXME in case dimension and field is the same
	      var dimensionValue = resultRow[dimension];
	      resultRow[field] = innerCount;
	      resultRow[dimension] = dimensionValue;
	      resultRow[as] = innerCount / totalCount;
	      result.push(resultRow);
	    });
	  });
	  dataView.rows = result;
	}

	registerTransform('proportion', transform);

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var isArray = __webpack_require__(3);
	var isNumber = __webpack_require__(36);
	var regression = __webpack_require__(233);
	var getSeriesValues = __webpack_require__(33);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var _require3 = __webpack_require__(32),
	    silverman = _require3.silverman;

	var DEFAULT_OPTIONS = {
	  as: ['x', 'y'],
	  // fields: [ 'x', 'y' ], // required two fields
	  method: 'linear', // regression method: linear, exponential, logarithmic, power, polynomial
	  // extent: [], // extent to execute regression function, default: [ min(x), max(x) ]
	  // bandwidth: 1, // bandWidth to execute regression function
	  order: 2, // order of the polynomial curve
	  precision: 2 // the number of significant figures the output is rounded to
	};

	var REGRESSION_METHODS = ['linear', 'exponential', 'logarithmic', 'power', 'polynomial'];

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  if (!isArray(fields) || fields.length !== 2) {
	    throw new TypeError('invalid fields: must be an array of 2 strings.');
	  }
	  var xField = fields[0],
	      yField = fields[1];

	  var method = options.method;
	  if (REGRESSION_METHODS.indexOf(method) === -1) {
	    throw new TypeError('invalid method: ' + method + '. Must be one of ' + REGRESSION_METHODS.join(', '));
	  }
	  var points = dataView.rows.map(function (row) {
	    return [row[xField], row[yField]];
	  });
	  var regressionResult = regression[method](points, options);
	  var extent = options.extent;
	  if (!isArray(extent) || extent.length !== 2) {
	    extent = dataView.range(xField);
	  }
	  var bandwidth = options.bandwidth;
	  if (!isNumber(bandwidth) || bandwidth <= 0) {
	    bandwidth = silverman(dataView.getColumn(xField));
	  }
	  var valuesToPredict = getSeriesValues(extent, bandwidth);
	  var result = [];
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1];

	  valuesToPredict.forEach(function (value) {
	    var row = {};

	    var _regressionResult$pre = regressionResult.predict(value),
	        x = _regressionResult$pre[0],
	        y = _regressionResult$pre[1];

	    row[asX] = x;
	    row[asY] = y;
	    if (isFinite(y)) {
	      result.push(row);
	    }
	  });
	  dataView.rows = result;
	}

	registerTransform('regression', transform);

	module.exports = {
	  REGRESSION_METHODS: REGRESSION_METHODS
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var forIn = __webpack_require__(5);
	var isPlainObject = __webpack_require__(45);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	/*
	 * options: {
	 *   type: 'pick',
	 *   fields: [],
	 * }
	 */

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var map = options.map || {};
	  var cleanMap = {};
	  if (isPlainObject(map)) {
	    forIn(map, function (value, key) {
	      if (isString(value) && isString(key)) {
	        cleanMap[key] = value;
	      }
	    });
	  }
	  dataView.rows.forEach(function (row) {
	    forIn(map, function (newKey, key) {
	      var temp = row[key];
	      delete row[key];
	      row[newKey] = temp;
	    });
	  });
	}

	registerTransform('rename', transform);
	registerTransform('rename-fields', transform);

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	/*
	 * options: {
	 *   type: 'reverse',
	 * }
	 */

	registerTransform('reverse', function (dataView) {
	  dataView.rows.reverse();
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3);
	var sortBy = __webpack_require__(154);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	/*
	 * options: {
	 *   type: 'sort-by',
	 *   fields: [],
	 *   order: 'ASC' // 'DESC'
	 * }
	 */

	var VALID_ORDERS = ['ASC', 'DESC'];

	function transform(dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var fields = getFields(options, [dataView.getColumnName(0)]);
	  if (!isArray(fields)) {
	    throw new TypeError('Invalid fields: must be an array with strings!');
	  }
	  dataView.rows = sortBy(dataView.rows, fields);
	  var order = options.order;
	  if (order && VALID_ORDERS.indexOf(order) === -1) {
	    throw new TypeError('Invalid order: ' + order + ' must be one of ' + VALID_ORDERS.join(', '));
	  } else if (order === 'DESC') {
	    dataView.rows.reverse();
	  }
	}
	registerTransform('sort-by', transform);
	registerTransform('sortBy', transform);

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	/*
	 * options: {
	 *   type: 'sort',
	 *   callback,
	 * }
	 */

	registerTransform('sort', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var columnName = dataView.getColumnName(0);
	  dataView.rows.sort(options.callback || function (a, b) {
	    return a[columnName] - b[columnName];
	  });
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	/*
	 * options: {
	 *   type: 'subset',
	 *   startRowIndex: 0,
	 *   endRowIndex: 1,
	 *   fields: [],
	 * }
	 */

	registerTransform('subset', function (dataView) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var startIndex = options.startRowIndex || 0;
	  var endIndex = options.endRowIndex || dataView.rows.length - 1;
	  var columns = getFields(options, dataView.getColumnNames());
	  dataView.rows = dataView.getSubset(startIndex, endIndex, columns);
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var isString = __webpack_require__(6);

	var _require = __webpack_require__(1),
	    registerTransform = _require.registerTransform;

	var tagCloud = __webpack_require__(143);

	var _require2 = __webpack_require__(4),
	    getFields = _require2.getFields;

	var DEFAULT_OPTIONS = {
	  fields: ['text', 'value'], // fields to keep
	  font: function font() {
	    return 'serif';
	  },
	  padding: 1,
	  size: [500, 500],
	  spiral: 'archimedean', // 'archimedean' || 'rectangular' || {function}
	  // timeInterval: Infinity // max execute time
	  timeInterval: 500 // max execute time
	  // imageMask: '', // instance of Image, must be loaded
	};

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var layout = tagCloud();
	  ['font', 'fontSize', 'padding', 'rotate', 'size', 'spiral', 'timeInterval'].forEach(function (key) {
	    if (options[key]) {
	      layout[key](options[key]);
	    }
	  });
	  var fields = getFields(options);
	  var text = fields[0],
	      value = fields[1];

	  if (!isString(text) || !isString(value)) {
	    throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ "text", "value" ])!');
	  }
	  var words = dataView.rows.map(function (row) {
	    row.text = row[text];
	    row.value = row[value];
	    return row;
	  });
	  layout.words(words);
	  if (options.imageMask) {
	    layout.createMask(options.imageMask);
	  }
	  var result = layout.start();
	  var tags = result._tags;
	  var bounds = result._bounds;
	  tags.forEach(function (tag) {
	    tag.x += options.size[0] / 2;
	    tag.y += options.size[1] / 2;
	  });
	  var _options$size = options.size,
	      w = _options$size[0],
	      h = _options$size[1];

	  var hasImage = result.hasImage;
	  tags.push({
	    text: '',
	    value: 0,
	    x: hasImage ? 0 : bounds[0].x,
	    y: hasImage ? 0 : bounds[0].y,
	    opacity: 0
	  });
	  tags.push({
	    text: '',
	    value: 0,
	    x: hasImage ? w : bounds[1].x,
	    y: hasImage ? h : bounds[1].y,
	    opacity: 0
	  });
	  dataView.rows = tags;
	  dataView._tagCloud = result;
	}

	registerTransform('tag-cloud', transform);
	registerTransform('word-cloud', transform);

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(2);
	var each = __webpack_require__(5);
	var forIn = __webpack_require__(5);
	var keys = __webpack_require__(19);
	var map = __webpack_require__(158);
	var pick = __webpack_require__(22);

	var _require = __webpack_require__(16),
	    sum = _require.sum;

	var partition = __webpack_require__(14);

	var _require2 = __webpack_require__(1),
	    registerTransform = _require2.registerTransform;

	var _require3 = __webpack_require__(4),
	    getFields = _require3.getFields;

	var DEFAULT_OPTIONS = {
	  fields: ['name', 'value'], // fields
	  rows: 5,
	  size: [1, 1],
	  scale: 1,
	  groupBy: [],
	  maxCount: 1000,
	  gapRatio: 0.1,
	  as: ['x', 'y']
	};

	function transform(dataView, options) {
	  options = assign({}, DEFAULT_OPTIONS, options);
	  var fields = getFields(options);
	  var nameField = fields[0],
	      valueField = fields[1];
	  var _options$as = options.as,
	      asX = _options$as[0],
	      asY = _options$as[1];

	  var groupBy = options.groupBy;
	  var groups = partition(dataView.rows, groupBy);
	  var groupKeys = keys(groups);
	  var _options$size = options.size,
	      width = _options$size[0],
	      height = _options$size[1];

	  var maxCount = options.maxCount;
	  var groupCount = groupKeys.length;
	  var partHeight = height / groupCount;
	  var rows = options.rows;
	  var gapRatio = options.gapRatio;
	  var result = [];
	  var scale = options.scale;
	  var currentGroupIndex = 0;
	  var wStep = 0;

	  // getting suitable scale and width step
	  forIn(groups, function (group) {
	    var totalValue = sum(map(group, function (row) {
	      return row[valueField];
	    }));
	    var cols = Math.ceil(totalValue * scale / rows);
	    if (totalValue * scale > maxCount) {
	      scale = maxCount / totalValue;
	      cols = Math.ceil(totalValue * scale / rows);
	    }
	    wStep = width / cols;
	  });

	  // distributing values into grid
	  forIn(groups, function (group) {
	    var heightRange = [currentGroupIndex * partHeight, (currentGroupIndex + 1) * partHeight];
	    var h = heightRange[1] - heightRange[0];
	    var hStep = h * (1 - gapRatio) / rows;
	    var currentCol = 0;
	    var currentRow = 0;
	    each(group, function (row) {
	      var value = row[valueField];
	      var count = Math.round(value * scale);
	      for (var i = 0; i < count; i++) {
	        if (currentRow === rows) {
	          currentRow = 0;
	          currentCol++;
	        }
	        var resultRow = pick(row, [nameField, valueField].concat(groupBy));
	        resultRow[asX] = currentCol * wStep + wStep / 2;
	        resultRow[asY] = currentRow * hStep + hStep / 2 + heightRange[0];
	        resultRow._wStep = wStep;
	        resultRow._hStep = hStep;
	        currentRow++;
	        result.push(resultRow);
	      }
	    });
	    currentGroupIndex += 1;
	  });

	  dataView.rows = result;
	}

	registerTransform('waffle', transform);

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3);
	var isFunction = __webpack_require__(11);
	var isString = __webpack_require__(6);

	module.exports = function (arr) {
	  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  var comparer = void 0;
	  if (isFunction(keys)) {
	    comparer = keys;
	  } else if (isArray(keys)) {
	    comparer = function comparer(a, b) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (a[key] < b[key]) {
	          return -1;
	        }
	        if (a[key] > b[key]) {
	          return 1;
	        }
	      }
	      return 0;
	    };
	  } else if (isString(keys)) {
	    comparer = function comparer(a, b) {
	      if (a[keys] < b[keys]) {
	        return -1;
	      }
	      if (a[keys] > b[keys]) {
	        return 1;
	      }
	      return 0;
	    };
	  }
	  return arr.sort(comparer);
	};

/***/ },
/* 143 */
/***/ function(module, exports) {

	/*
	 * Synchronous version of d3-cloud
	 */
	// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
	// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
	/* eslint-disable no-return-assign, no-cond-assign */

	var cloudRadians = Math.PI / 180,
	    cw = 1 << 11 >> 5,
	    ch = 1 << 11;

	function cloudText(d) {
	  return d.text;
	}

	function cloudFont() {
	  return 'serif';
	}

	function cloudFontNormal() {
	  return 'normal';
	}

	function cloudFontSize(d) {
	  return d.value;
	}

	function cloudRotate() {
	  return ~~(Math.random() * 2) * 90;
	}

	function cloudPadding() {
	  return 1;
	}

	// Fetches a monochrome sprite bitmap for the specified text.
	// Load in batches for speed.
	function cloudSprite(contextAndRatio, d, data, di) {
	  if (d.sprite) return;
	  var c = contextAndRatio.context,
	      ratio = contextAndRatio.ratio;

	  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
	  var x = 0,
	      y = 0,
	      maxh = 0;
	  var n = data.length;
	  --di;
	  while (++di < n) {
	    d = data[di];
	    c.save();
	    c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;
	    var w = c.measureText(d.text + 'm').width * ratio,
	        h = d.size << 1;
	    if (d.rotate) {
	      var sr = Math.sin(d.rotate * cloudRadians),
	          cr = Math.cos(d.rotate * cloudRadians),
	          wcr = w * cr,
	          wsr = w * sr,
	          hcr = h * cr,
	          hsr = h * sr;
	      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
	      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
	    } else {
	      w = w + 0x1f >> 5 << 5;
	    }
	    if (h > maxh) maxh = h;
	    if (x + w >= cw << 5) {
	      x = 0;
	      y += maxh;
	      maxh = 0;
	    }
	    if (y + h >= ch) break;
	    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
	    if (d.rotate) c.rotate(d.rotate * cloudRadians);
	    c.fillText(d.text, 0, 0);
	    if (d.padding) {
	      c.lineWidth = 2 * d.padding;
	      c.strokeText(d.text, 0, 0);
	    }
	    c.restore();
	    d.width = w;
	    d.height = h;
	    d.xoff = x;
	    d.yoff = y;
	    d.x1 = w >> 1;
	    d.y1 = h >> 1;
	    d.x0 = -d.x1;
	    d.y0 = -d.y1;
	    d.hasText = true;
	    x += w;
	  }
	  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
	      sprite = [];
	  while (--di >= 0) {
	    d = data[di];
	    if (!d.hasText) continue;
	    var _w = d.width,
	        w32 = _w >> 5;
	    var _h = d.y1 - d.y0;
	    // Zero the buffer
	    for (var i = 0; i < _h * w32; i++) {
	      sprite[i] = 0;
	    }x = d.xoff;
	    if (x == null) return;
	    y = d.yoff;
	    var seen = 0,
	        seenRow = -1;
	    for (var j = 0; j < _h; j++) {
	      for (var _i = 0; _i < _w; _i++) {
	        var k = w32 * j + (_i >> 5),
	            m = pixels[(y + j) * (cw << 5) + (x + _i) << 2] ? 1 << 31 - _i % 32 : 0;
	        sprite[k] |= m;
	        seen |= m;
	      }
	      if (seen) seenRow = j;else {
	        d.y0++;
	        _h--;
	        j--;
	        y++;
	      }
	    }
	    d.y1 = d.y0 + seenRow;
	    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
	  }
	}

	// Use mask-based collision detection.
	function cloudCollide(tag, board, sw) {
	  sw >>= 5;
	  var sprite = tag.sprite,
	      w = tag.width >> 5,
	      lx = tag.x - (w << 4),
	      sx = lx & 0x7f,
	      msx = 32 - sx,
	      h = tag.y1 - tag.y0;
	  var x = (tag.y + tag.y0) * sw + (lx >> 5),
	      last = void 0;
	  for (var j = 0; j < h; j++) {
	    last = 0;
	    for (var i = 0; i <= w; i++) {
	      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
	    }
	    x += sw;
	  }
	  return false;
	}

	function cloudBounds(bounds, d) {
	  var b0 = bounds[0],
	      b1 = bounds[1];
	  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
	  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
	  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
	  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
	}

	function collideRects(a, b) {
	  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
	}

	function archimedeanSpiral(size) {
	  var e = size[0] / size[1];
	  return function (t) {
	    return [e * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];
	  };
	}

	function rectangularSpiral(size) {
	  var dy = 4,
	      dx = dy * size[0] / size[1];
	  var x = 0,
	      y = 0;
	  return function (t) {
	    var sign = t < 0 ? -1 : 1;
	    // See triangular numbers: T_n = n * (n + 1) / 2.
	    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
	      case 0:
	        x += dx;break;
	      case 1:
	        y += dy;break;
	      case 2:
	        x -= dx;break;
	      default:
	        y -= dy;break;
	    }
	    return [x, y];
	  };
	}

	// TODO reuse arrays?
	function zeroArray(n) {
	  var a = [];
	  var i = -1;
	  while (++i < n) {
	    a[i] = 0;
	  }return a;
	}

	function cloudCanvas() {
	  return document.createElement('canvas');
	}

	function functor(d) {
	  return typeof d === 'function' ? d : function () {
	    return d;
	  };
	}

	var spirals = {
	  archimedean: archimedeanSpiral,
	  rectangular: rectangularSpiral
	};

	module.exports = function () {
	  var size = [256, 256],
	      text = cloudText,
	      font = cloudFont,
	      fontSize = cloudFontSize,
	      fontStyle = cloudFontNormal,
	      fontWeight = cloudFontNormal,
	      rotate = cloudRotate,
	      padding = cloudPadding,
	      spiral = archimedeanSpiral,
	      words = [],
	      timeInterval = Infinity,
	      random = Math.random,
	      canvas = cloudCanvas;
	  var cloud = {};

	  cloud.canvas = function (_) {
	    return arguments.length ? (canvas = functor(_), cloud) : canvas;
	  };

	  cloud.start = function () {
	    var _size = size,
	        width = _size[0],
	        height = _size[1];

	    var contextAndRatio = getContext(canvas()),
	        board = cloud.board ? cloud.board : zeroArray((size[0] >> 5) * size[1]),
	        n = words.length,
	        tags = [],
	        data = words.map(function (d, i) {
	      d.text = text.call(this, d, i);
	      d.font = font.call(this, d, i);
	      d.style = fontStyle.call(this, d, i);
	      d.weight = fontWeight.call(this, d, i);
	      d.rotate = rotate.call(this, d, i);
	      d.size = ~~fontSize.call(this, d, i);
	      d.padding = padding.call(this, d, i);
	      return d;
	    }).sort(function (a, b) {
	      return b.size - a.size;
	    });
	    var i = -1,
	        bounds = !cloud.board ? null : [{
	      x: 0,
	      y: 0
	    }, {
	      x: width,
	      y: height
	    }];

	    step();

	    function step() {
	      var start = Date.now();
	      while (Date.now() - start < timeInterval && ++i < n) {
	        var d = data[i];
	        d.x = width * (random() + 0.5) >> 1;
	        d.y = height * (random() + 0.5) >> 1;
	        cloudSprite(contextAndRatio, d, data, i);
	        if (d.hasText && place(board, d, bounds)) {
	          tags.push(d);
	          if (bounds) {
	            if (!cloud.hasImage) {
	              // update bounds if image mask not set
	              cloudBounds(bounds, d);
	            }
	          } else {
	            bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];
	          }
	          // Temporary hack
	          d.x -= size[0] >> 1;
	          d.y -= size[1] >> 1;
	        }
	      }
	      cloud._tags = tags;
	      cloud._bounds = bounds;
	    }

	    return cloud;
	  };

	  function getContext(canvas) {
	    canvas.width = canvas.height = 1;
	    var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);
	    canvas.width = (cw << 5) / ratio;
	    canvas.height = ch / ratio;

	    var context = canvas.getContext('2d');
	    context.fillStyle = context.strokeStyle = 'red';
	    context.textAlign = 'center';
	    return { context: context, ratio: ratio };
	  }

	  function place(board, tag, bounds) {
	    // const perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],
	    var startX = tag.x,
	        startY = tag.y,
	        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
	        s = spiral(size),
	        dt = random() < 0.5 ? 1 : -1;
	    var dxdy = void 0,
	        t = -dt,
	        dx = void 0,
	        dy = void 0;

	    while (dxdy = s(t += dt)) {
	      dx = ~~dxdy[0];
	      dy = ~~dxdy[1];

	      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;

	      tag.x = startX + dx;
	      tag.y = startY + dy;

	      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
	      // TODO only check for collisions within current bounds.
	      if (!bounds || !cloudCollide(tag, board, size[0])) {
	        if (!bounds || collideRects(tag, bounds)) {
	          var sprite = tag.sprite,
	              w = tag.width >> 5,
	              sw = size[0] >> 5,
	              lx = tag.x - (w << 4),
	              sx = lx & 0x7f,
	              msx = 32 - sx,
	              h = tag.y1 - tag.y0;
	          var last = void 0,
	              x = (tag.y + tag.y0) * sw + (lx >> 5);
	          for (var j = 0; j < h; j++) {
	            last = 0;
	            for (var i = 0; i <= w; i++) {
	              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
	            }
	            x += sw;
	          }
	          delete tag.sprite;
	          return true;
	        }
	      }
	    }
	    return false;
	  }

	  cloud.createMask = function (img) {
	    var can = document.createElement('canvas');
	    var _size2 = size,
	        width = _size2[0],
	        height = _size2[1];

	    var w32 = width >> 5;
	    var board = zeroArray((width >> 5) * height);
	    can.width = width;
	    can.height = height;
	    var cxt = can.getContext('2d');
	    cxt.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
	    var imageData = cxt.getImageData(0, 0, width, height).data;
	    for (var j = 0; j < height; j++) {
	      for (var i = 0; i < width; i++) {
	        var k = w32 * j + (i >> 5);
	        var tmp = j * width + i << 2;
	        var flag = imageData[tmp] >= 250 && imageData[tmp + 1] >= 250 && imageData[tmp + 2] >= 250;
	        var m = flag ? 1 << 31 - i % 32 : 0;
	        board[k] |= m;
	      }
	    }
	    cloud.board = board;
	    cloud.hasImage = true;
	  };

	  cloud.timeInterval = function (_) {
	    return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;
	  };

	  cloud.words = function (_) {
	    return arguments.length ? (words = _, cloud) : words;
	  };

	  cloud.size = function (_) {
	    return arguments.length ? (size = [+_[0], +_[1]], cloud) : size;
	  };

	  cloud.font = function (_) {
	    return arguments.length ? (font = functor(_), cloud) : font;
	  };

	  cloud.fontStyle = function (_) {
	    return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;
	  };

	  cloud.fontWeight = function (_) {
	    return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;
	  };

	  cloud.rotate = function (_) {
	    return arguments.length ? (rotate = functor(_), cloud) : rotate;
	  };

	  cloud.text = function (_) {
	    return arguments.length ? (text = functor(_), cloud) : text;
	  };

	  cloud.spiral = function (_) {
	    return arguments.length ? (spiral = spirals[_] || _, cloud) : spiral;
	  };

	  cloud.fontSize = function (_) {
	    return arguments.length ? (fontSize = functor(_), cloud) : fontSize;
	  };

	  cloud.padding = function (_) {
	    return arguments.length ? (padding = functor(_), cloud) : padding;
	  };

	  cloud.random = function (_) {
	    return arguments.length ? (random = _, cloud) : random;
	  };

	  return cloud;
	};

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TreeLayout = __webpack_require__(34);
	var nonLayeredTidyTree = __webpack_require__(150);
	var doTreeLayout = __webpack_require__(41);

	var CompactBoxTreeLayout = function (_TreeLayout) {
	  _inherits(CompactBoxTreeLayout, _TreeLayout);

	  function CompactBoxTreeLayout() {
	    _classCallCheck(this, CompactBoxTreeLayout);

	    return _possibleConstructorReturn(this, _TreeLayout.apply(this, arguments));
	  }

	  CompactBoxTreeLayout.prototype.execute = function execute() {
	    var me = this;
	    return doTreeLayout(me.rootNode, me.options, nonLayeredTidyTree);
	  };

	  return CompactBoxTreeLayout;
	}(TreeLayout);

	var DEFAULT_OPTIONS = {};

	function compactBoxLayout(root, options) {
	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  return new CompactBoxTreeLayout(root, options).execute();
	}

	module.exports = compactBoxLayout;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TreeLayout = __webpack_require__(34);
	var dendrogram = __webpack_require__(147);
	var doTreeLayout = __webpack_require__(41);

	var DendrogramLayout = function (_TreeLayout) {
	  _inherits(DendrogramLayout, _TreeLayout);

	  function DendrogramLayout() {
	    _classCallCheck(this, DendrogramLayout);

	    return _possibleConstructorReturn(this, _TreeLayout.apply(this, arguments));
	  }

	  DendrogramLayout.prototype.execute = function execute() {
	    var me = this;
	    me.rootNode.width = 0;
	    return doTreeLayout(me.rootNode, me.options, dendrogram);
	  };

	  return DendrogramLayout;
	}(TreeLayout);

	var DEFAULT_OPTIONS = {};

	function dendrogramLayout(root, options) {
	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  return new DendrogramLayout(root, options).execute();
	}

	module.exports = dendrogramLayout;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TreeLayout = __webpack_require__(34);
	var indentedTree = __webpack_require__(148);
	var separateTree = __webpack_require__(54);

	var VALID_DIRECTIONS = ['LR', // left to right
	'RL', // right to left
	'H' // horizontal
	];
	var DEFAULT_DIRECTION = VALID_DIRECTIONS[0];

	var IndentedLayout = function (_TreeLayout) {
	  _inherits(IndentedLayout, _TreeLayout);

	  function IndentedLayout() {
	    _classCallCheck(this, IndentedLayout);

	    return _possibleConstructorReturn(this, _TreeLayout.apply(this, arguments));
	  }

	  IndentedLayout.prototype.execute = function execute() {
	    var me = this;
	    var options = me.options;
	    var root = me.rootNode;
	    options.isHorizontal = true;
	    var indent = options.indent;
	    var direction = options.direction || DEFAULT_DIRECTION;
	    if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {
	      throw new TypeError('Invalid direction: ' + direction);
	    }
	    if (direction === VALID_DIRECTIONS[0]) {
	      // LR
	      indentedTree(root, indent);
	    } else if (direction === VALID_DIRECTIONS[1]) {
	      // RL
	      indentedTree(root, indent);
	      root.right2left();
	    } else if (direction === VALID_DIRECTIONS[2]) {
	      // H
	      // separate into left and right trees
	      var _separateTree = separateTree(root, options),
	          left = _separateTree.left,
	          right = _separateTree.right;

	      indentedTree(left, indent);
	      left.right2left();
	      indentedTree(right, indent);
	      var bbox = left.getBoundingBox();
	      right.translate(bbox.width, 0);
	      root.x = right.x - root.width / 2;
	    }
	    return root;
	  };

	  return IndentedLayout;
	}(TreeLayout);

	var DEFAULT_OPTIONS = {};

	function indentedLayout(root, options) {
	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  return new IndentedLayout(root, options).execute();
	}

	module.exports = indentedLayout;

/***/ },
/* 147 */
/***/ function(module, exports) {

	// wrap tree node
	// TODO considering size
	function WrappedTree() {
	  var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  var me = this;
	  me.x = me.y = 0;
	  me.leftChild = me.rightChild = null;
	  me.height = 0;
	  me.children = children;
	}

	var DEFAULT_OPTIONS = {
	  isHorizontal: true,
	  nodeSep: 20,
	  nodeSize: 20,
	  rankSep: 200,
	  subTreeSep: 10
	};

	function convertBack(converted /* WrappedTree */, root /* TreeNode */, isHorizontal) {
	  if (isHorizontal) {
	    root.x = converted.x;
	    root.y = converted.y;
	  } else {
	    root.x = converted.y;
	    root.y = converted.x;
	  }
	  converted.children.forEach(function (child, i) {
	    convertBack(child, root.children[i], isHorizontal);
	  });
	}

	module.exports = function (root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = Object.assign({}, DEFAULT_OPTIONS, options);

	  var maxDepth = 0;
	  function wrappedTreeFromNode(n) {
	    if (!n) return null;
	    n.width = 0;
	    if (n.depth && n.depth > maxDepth) {
	      maxDepth = n.depth; // get the max depth
	    }
	    var children = n.children;
	    var childrenCount = children.length;
	    var t = new WrappedTree(n.height, []);
	    children.forEach(function (child, i) {
	      var childWT = wrappedTreeFromNode(child);
	      t.children.push(childWT);
	      if (i === 0) {
	        // t.leftChild = childWT.leftChild ? childWT.leftChild : childWT
	        t.leftChild = childWT;
	      }
	      if (i === childrenCount - 1) {
	        // t.rightChild = childWT.rightChild ? childWT.rightChild : childWT
	        t.rightChild = childWT;
	      }
	    });
	    t.originNode = n;
	    t.isLeaf = n.isLeaf();
	    return t;
	  }

	  function getDrawingDepth(t) {
	    if (t.isLeaf || t.children.length === 0) {
	      t.drawingDepth = maxDepth;
	    } else {
	      var depths = t.children.map(function (child) {
	        return getDrawingDepth(child);
	      });
	      var minChildDepth = Math.min.apply(null, depths);
	      t.drawingDepth = minChildDepth - 1;
	    }
	    return t.drawingDepth;
	  }

	  var prevLeaf = void 0;

	  function position(t) {
	    t.x = t.drawingDepth * options.rankSep;
	    if (t.isLeaf) {
	      t.y = 0;
	      if (prevLeaf) {
	        t.y = prevLeaf.y + prevLeaf.height + options.nodeSep;
	        if (t.originNode.parent !== prevLeaf.originNode.parent) {
	          t.y += options.subTreeSep;
	        }
	      }
	      prevLeaf = t;
	    } else {
	      t.children.forEach(function (child) {
	        position(child);
	      });
	      t.y = (t.leftChild.y + t.rightChild.y) / 2;
	    }
	  }

	  // wrap node
	  var wt = wrappedTreeFromNode(root);
	  // get depth for drawing
	  getDrawingDepth(wt);
	  // get position
	  position(wt);
	  // get x, y
	  convertBack(wt, root, options.isHorizontal);
	  return root;
	};

/***/ },
/* 148 */
/***/ function(module, exports) {

	
	var DEFAULT_INDENT = 20;
	function positionNode(node, previousNode, dx) {
	  node.x += dx * node.depth;
	  node.y = previousNode ? previousNode.y + previousNode.height : 0;
	}
	module.exports = function (root) {
	  var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_INDENT;

	  var previousNode = null;
	  root.eachNode(function (node) {
	    positionNode(node, previousNode, indent);
	    previousNode = node;
	  });
	};

/***/ },
/* 149 */
/***/ function(module, exports) {

	
	function secondWalk(node, options) {
	  var totalHeight = 0;
	  if (!node.children.length) {
	    totalHeight = node.height;
	  } else {
	    node.children.forEach(function (c) {
	      totalHeight += secondWalk(c, options);
	    });
	  }
	  node._subTreeSep = options.getSubTreeSep(node.data);
	  node.totalHeight = Math.max(node.height, totalHeight) + 2 * node._subTreeSep;
	  return node.totalHeight;
	}

	function thirdWalk(node) {
	  var children = node.children;
	  var len = children.length;
	  if (len) {
	    children.forEach(function (c) {
	      thirdWalk(c);
	    });
	    var first = children[0];
	    var last = children[len - 1];
	    var childrenHeight = last.y - first.y + last.height;
	    var childrenTotalHeight = 0;
	    children.forEach(function (child) {
	      childrenTotalHeight += child.totalHeight;
	    });
	    if (childrenHeight > node.height) {
	      // 当子节点总高度大于父节点高度
	      node.y = first.y + childrenHeight / 2 - node.height / 2;
	    } else if (children.length !== 1 || node.height > childrenTotalHeight) {
	      // 多于一个子节点或者父节点大于所有子节点的总高度
	      var offset = node.y + (node.height - childrenHeight) / 2 - first.y;
	      children.forEach(function (c) {
	        c.translate(0, offset);
	      });
	    } else {
	      // 只有一个子节点
	      node.y = (first.y + first.height / 2 + last.y + last.height / 2) / 2 - node.height / 2;
	    }
	  }
	}

	var DEFAULT_OPTIONS = {
	  getSubTreeSep: function getSubTreeSep() {
	    return 0;
	  }
	};

	module.exports = function (root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  root.parent = {
	    x: 0,
	    width: 0,
	    height: 0,
	    y: 0
	  };
	  // first walk
	  root.BFTraverse(function (node) {
	    node.x = node.parent.x + node.parent.width; // simply get x
	  });
	  root.parent = null;
	  // second walk
	  secondWalk(root, options); // assign sub tree totalHeight
	  // adjusting
	  // separating nodes
	  root.startY = 0;
	  root.y = root.totalHeight / 2 - root.height / 2;
	  root.eachNode(function (node) {
	    var children = node.children;
	    var len = children.length;
	    if (len) {
	      var first = children[0];
	      first.startY = node.startY + node._subTreeSep;
	      if (len === 1) {
	        first.y = node.y + node.height / 2 - first.height / 2;
	      } else {
	        first.y = first.startY + first.totalHeight / 2 - first.height / 2;
	        for (var i = 1; i < len; i++) {
	          var c = children[i];
	          c.startY = children[i - 1].startY + children[i - 1].totalHeight;
	          c.y = c.startY + c.totalHeight / 2 - c.height / 2;
	        }
	      }
	    }
	  });

	  // third walk
	  thirdWalk(root);
	};

/***/ },
/* 150 */
/***/ function(module, exports) {

	// wrap tree node
	function WrappedTree(w, h, y) {
	  var c = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

	  var me = this;
	  // size
	  me.w = w || 0;
	  me.h = h || 0;

	  // position
	  me.y = y || 0;
	  me.x = 0;

	  // children
	  me.c = c || [];
	  me.cs = c.length;

	  // modified
	  me.prelim = 0;
	  me.mod = 0;
	  me.shift = 0;
	  me.change = 0;

	  // left/right tree
	  me.tl = null;
	  me.tr = null;

	  // extreme left/right tree
	  me.el = null;
	  me.er = null;

	  // modified left/right tree
	  me.msel = 0;
	  me.mser = 0;
	}

	WrappedTree.fromNode = function (root, isHorizontal) {
	  if (!root) return null;
	  var children = [];
	  root.children.forEach(function (child) {
	    children.push(WrappedTree.fromNode(child, isHorizontal));
	  });
	  if (isHorizontal) return new WrappedTree(root.height, root.width, root.x, children);
	  return new WrappedTree(root.width, root.height, root.y, children);
	};

	// node utils
	function moveRight(node, move, isHorizontal) {
	  if (isHorizontal) {
	    node.y += move;
	  } else {
	    node.x += move;
	  }
	  node.children.forEach(function (child) {
	    moveRight(child, move, isHorizontal);
	  });
	}

	function getMin(node, isHorizontal) {
	  var res = isHorizontal ? node.y : node.x;
	  node.children.forEach(function (child) {
	    res = Math.min(getMin(child, isHorizontal), res);
	  });
	  return res;
	}

	function normalize(node, isHorizontal) {
	  var min = getMin(node, isHorizontal);
	  moveRight(node, -min, isHorizontal);
	}

	function convertBack(converted /* WrappedTree */, root /* TreeNode */, isHorizontal) {
	  if (isHorizontal) {
	    root.y = converted.x;
	  } else {
	    root.x = converted.x;
	  }
	  converted.c.forEach(function (child, i) {
	    convertBack(child, root.children[i], isHorizontal);
	  });
	}

	function layer(node, isHorizontal) {
	  var d = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  if (isHorizontal) {
	    node.x = d;
	    d += node.width;
	  } else {
	    node.y = d;
	    d += node.height;
	  }
	  node.children.forEach(function (child) {
	    layer(child, isHorizontal, d);
	  });
	}

	module.exports = function (root) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var isHorizontal = options.isHorizontal;
	  function firstWalk(t) {
	    if (t.cs === 0) {
	      setExtremes(t);
	      return;
	    }
	    firstWalk(t.c[0]);
	    var ih = updateIYL(bottom(t.c[0].el), 0, null);
	    for (var i = 1; i < t.cs; ++i) {
	      firstWalk(t.c[i]);
	      var min = bottom(t.c[i].er);
	      separate(t, i, ih);
	      ih = updateIYL(min, i, ih);
	    }
	    positionRoot(t);
	    setExtremes(t);
	  }

	  function setExtremes(t) {
	    if (t.cs === 0) {
	      t.el = t;
	      t.er = t;
	      t.msel = t.mser = 0;
	    } else {
	      t.el = t.c[0].el;
	      t.msel = t.c[0].msel;
	      t.er = t.c[t.cs - 1].er;
	      t.mser = t.c[t.cs - 1].mser;
	    }
	  }

	  function separate(t, i, ih) {
	    var sr = t.c[i - 1];
	    var mssr = sr.mod;
	    var cl = t.c[i];
	    var mscl = cl.mod;
	    while (sr !== null && cl !== null) {
	      if (bottom(sr) > ih.low) ih = ih.nxt;
	      var dist = mssr + sr.prelim + sr.w - (mscl + cl.prelim);
	      if (dist > 0) {
	        mscl += dist;
	        moveSubtree(t, i, ih.index, dist);
	      }
	      var sy = bottom(sr);
	      var cy = bottom(cl);
	      if (sy <= cy) {
	        sr = nextRightContour(sr);
	        if (sr !== null) mssr += sr.mod;
	      }
	      if (sy >= cy) {
	        cl = nextLeftContour(cl);
	        if (cl !== null) mscl += cl.mod;
	      }
	    }
	    if (!sr && !!cl) {
	      setLeftThread(t, i, cl, mscl);
	    } else if (!!sr && !cl) {
	      setRightThread(t, i, sr, mssr);
	    }
	  }

	  function moveSubtree(t, i, si, dist) {
	    t.c[i].mod += dist;
	    t.c[i].msel += dist;
	    t.c[i].mser += dist;
	    distributeExtra(t, i, si, dist);
	  }

	  function nextLeftContour(t) {
	    return t.cs === 0 ? t.tl : t.c[0];
	  }

	  function nextRightContour(t) {
	    return t.cs === 0 ? t.tr : t.c[t.cs - 1];
	  }

	  function bottom(t) {
	    return t.y + t.h;
	  }

	  function setLeftThread(t, i, cl, modsumcl) {
	    var li = t.c[0].el;
	    li.tl = cl;
	    var diff = modsumcl - cl.mod - t.c[0].msel;
	    li.mod += diff;
	    li.prelim -= diff;
	    t.c[0].el = t.c[i].el;
	    t.c[0].msel = t.c[i].msel;
	  }

	  function setRightThread(t, i, sr, modsumsr) {
	    var ri = t.c[i].er;
	    ri.tr = sr;
	    var diff = modsumsr - sr.mod - t.c[i].mser;
	    ri.mod += diff;
	    ri.prelim -= diff;
	    t.c[i].er = t.c[i - 1].er;
	    t.c[i].mser = t.c[i - 1].mser;
	  }

	  function positionRoot(t) {
	    t.prelim = (t.c[0].prelim + t.c[0].mod + t.c[t.cs - 1].mod + t.c[t.cs - 1].prelim + t.c[t.cs - 1].w) / 2 - t.w / 2;
	  }

	  function secondWalk(t, modsum) {
	    modsum += t.mod;
	    t.x = t.prelim + modsum;
	    addChildSpacing(t);
	    for (var i = 0; i < t.cs; i++) {
	      secondWalk(t.c[i], modsum);
	    }
	  }

	  function distributeExtra(t, i, si, dist) {
	    if (si !== i - 1) {
	      var nr = i - si;
	      t.c[si + 1].shift += dist / nr;
	      t.c[i].shift -= dist / nr;
	      t.c[i].change -= dist - dist / nr;
	    }
	  }

	  function addChildSpacing(t) {
	    var d = 0;
	    var modsumdelta = 0;
	    for (var i = 0; i < t.cs; i++) {
	      d += t.c[i].shift;
	      modsumdelta += d + t.c[i].change;
	      t.c[i].mod += modsumdelta;
	    }
	  }

	  function updateIYL(low, index, ih) {
	    while (ih !== null && low >= ih.low) {
	      ih = ih.nxt;
	    }
	    return {
	      low: low,
	      index: index,
	      nxt: ih
	    };
	  }

	  // do layout
	  layer(root, isHorizontal);
	  var wt = WrappedTree.fromNode(root, isHorizontal);
	  firstWalk(wt);
	  secondWalk(wt, 0);
	  convertBack(wt, root, isHorizontal);
	  normalize(root, isHorizontal);

	  return root;
	};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TreeLayout = __webpack_require__(34);
	var mindmap = __webpack_require__(149);
	var doTreeLayout = __webpack_require__(41);

	var MindmapLayout = function (_TreeLayout) {
	  _inherits(MindmapLayout, _TreeLayout);

	  function MindmapLayout() {
	    _classCallCheck(this, MindmapLayout);

	    return _possibleConstructorReturn(this, _TreeLayout.apply(this, arguments));
	  }

	  MindmapLayout.prototype.execute = function execute() {
	    var me = this;
	    return doTreeLayout(me.rootNode, me.options, mindmap);
	  };

	  return MindmapLayout;
	}(TreeLayout);

	var DEFAULT_OPTIONS = {};

	function mindmapLayout(root, options) {
	  options = Object.assign({}, DEFAULT_OPTIONS, options);
	  return new MindmapLayout(root, options).execute();
	}

	module.exports = mindmapLayout;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var filter = __webpack_require__(156);
	var contains = __webpack_require__(55);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @param {Array} arr The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @return {Array} Returns the new array of filtered values.
	 * @example
	 * difference([2, 1], [2, 3]);  // => [1]
	 */
	var difference = function difference(arr) {
	  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  return filter(arr, function (value) {
	    return !contains(values, value);
	  });
	};

	module.exports = difference;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(11);
	var isPlainObject = __webpack_require__(45);
	var isMatch = __webpack_require__(57);

	function find(arr, predicate) {
	  var _predicate = void 0;
	  if (isFunction(predicate)) {
	    _predicate = predicate;
	  }
	  if (isPlainObject(predicate)) {
	    _predicate = function _predicate(a) {
	      return isMatch(a, predicate);
	    };
	  }
	  if (_predicate) {
	    for (var i = 0; i < arr.length; i += 1) {
	      if (_predicate(arr[i])) {
	        return arr[i];
	      }
	    }
	  }
	  return null;
	}

	module.exports = find;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var isString = __webpack_require__(6);
	var isFunction = __webpack_require__(11);
	var isArray = __webpack_require__(3);

	function sortBy(arr, key) {
	  var comparer = void 0;
	  if (isFunction(key)) {
	    comparer = function comparer(a, b) {
	      return key(a) - key(b);
	    };
	  } else {
	    var keys = [];
	    if (isString(key)) {
	      keys.push(key);
	    } else if (isArray(key)) {
	      keys = key;
	    }
	    comparer = function comparer(a, b) {
	      for (var i = 0; i < keys.length; i += 1) {
	        var prop = keys[i];
	        if (a[prop] > b[prop]) {
	          return 1;
	        }
	        if (a[prop] < b[prop]) {
	          return -1;
	        }
	      }
	      return 0;
	    };
	  }

	  arr.sort(comparer);
	  return arr;
	}

	module.exports = sortBy;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var contains = __webpack_require__(55);

	var uniq = function uniq(arr) {
	  var resultArr = [];
	  each(arr, function (item) {
	    if (!contains(resultArr, item)) {
	      resultArr.push(item);
	    }
	  });
	  return resultArr;
	};

	module.exports = uniq;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isArrayLike = __webpack_require__(43);

	var filter = function filter(arr, func) {
	  if (!isArrayLike(arr)) {
	    return arr;
	  }
	  var result = [];
	  each(arr, function (value, index) {
	    if (func(value, index)) {
	      result.push(value);
	    }
	  });
	  return result;
	};

	module.exports = filter;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isArray = __webpack_require__(3);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var groupBy = function groupBy(data, condition) {
	  if (!condition || !isArray(data)) {
	    return data;
	  }
	  var result = {};
	  var key = null;
	  each(data, function (item) {
	    key = condition(item);
	    if (hasOwnProperty.call(result, key)) {
	      result[key].push(item);
	    } else {
	      result[key] = [item];
	    }
	  });
	  return result;
	};

	module.exports = groupBy;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(5);
	var isArrayLike = __webpack_require__(43);

	var map = function map(arr, func) {
	  if (!isArrayLike(arr)) {
	    return arr;
	  }
	  var result = [];
	  each(arr, function (value, index) {
	    result.push(func(value, index));
	  });
	  return result;
	};

	module.exports = map;

/***/ },
/* 159 */
/***/ function(module, exports) {

	
	module.exports = function (obj, key) {
	  return obj.hasOwnProperty(key);
	};

/***/ },
/* 160 */
/***/ function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isObjectLike = function isObjectLike(value) {
	  /**
	   * isObjectLike({}) => true
	   * isObjectLike([1, 2, 3]) => true
	   * isObjectLike(Function) => false
	   * isObjectLike(null) => false
	   */
	  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;
	};

	module.exports = isObjectLike;

/***/ },
/* 161 */
/***/ function(module, exports) {

	var isUndefined = function isUndefined(value) {
	  return value === undefined;
	};

	module.exports = isUndefined;

/***/ },
/* 162 */
/***/ function(module, exports) {

	var uniqueId = function () {
	  var map = {};
	  return function (prefix) {
	    prefix = prefix || 'g';
	    if (!map[prefix]) {
	      map[prefix] = 1;
	    } else {
	      map[prefix] += 1;
	    }
	    return prefix + map[prefix];
	  };
	}();

	module.exports = uniqueId;

/***/ },
/* 163 */
/***/ function(module, exports) {

	
	module.exports = absolutize

	/**
	 * redefine `path` with absolute coordinates
	 *
	 * @param {Array} path
	 * @return {Array}
	 */

	function absolutize(path){
		var startX = 0
		var startY = 0
		var x = 0
		var y = 0

		return path.map(function(seg){
			seg = seg.slice()
			var type = seg[0]
			var command = type.toUpperCase()

			// is relative
			if (type != command) {
				seg[0] = command
				switch (type) {
					case 'a':
						seg[6] += x
						seg[7] += y
						break
					case 'v':
						seg[1] += y
						break
					case 'h':
						seg[1] += x
						break
					default:
						for (var i = 1; i < seg.length;) {
							seg[i++] += x
							seg[i++] += y
						}
				}
			}

			// update cursor state
			switch (command) {
				case 'Z':
					x = startX
					y = startY
					break
				case 'H':
					x = seg[1]
					break
				case 'V':
					y = seg[1]
					break
				case 'M':
					x = startX = seg[1]
					y = startY = seg[2]
					break
				default:
					x = seg[seg.length - 2]
					y = seg[seg.length - 1]
			}

			return seg
		})
	}


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-collection/ Version 1.0.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var prefix = "$";

	function Map() {}

	Map.prototype = map.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};

	function map(object, f) {
	  var map = new Map;

	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;

	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) {
	      if (sortValues != null) array.sort(sortValues);
	      return rollup != null ? rollup(array) : array;
	    }

	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map(),
	        values,
	        result = createResult();

	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }

	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });

	    return result;
	  }

	  function entries(map$$1, depth) {
	    if (++depth > keys.length) return map$$1;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map$$1.entries();
	    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }

	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};

	function createObject() {
	  return {};
	}

	function setObject(object, key, value) {
	  object[key] = value;
	}

	function createMap() {
	  return map();
	}

	function setMap(map$$1, key, value) {
	  map$$1.set(key, value);
	}

	function Set() {}

	var proto = map.prototype;

	Set.prototype = set.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};

	function set(object, f) {
	  var set = new Set;

	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};

	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};

	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};

	exports.nest = nest;
	exports.set = set;
	exports.map = map;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	// http://geoexamples.com/d3-composite-projections/ Version 1.2.0. Copyright 2017 Roger Veciana i Rovira.
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(167), __webpack_require__(60)) :
	  typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-path'], factory) :
	  (factory((global.d3 = global.d3 || {}),global.d3,global.d3));
	}(this, function (exports,d3Geo,d3Path) { 'use strict';

	  var epsilon = 1e-6;

	  function noop() {}

	  var x0 = Infinity;
	  var y0 = x0;
	  var x1 = -x0;
	  var y1 = x1;
	  var boundsStream = {
	    point: boundsPoint,
	    lineStart: noop,
	    lineEnd: noop,
	    polygonStart: noop,
	    polygonEnd: noop,
	    result: function() {
	      var bounds = [[x0, y0], [x1, y1]];
	      x1 = y1 = -(y0 = x0 = Infinity);
	      return bounds;
	    }
	  };

	  function boundsPoint(x, y) {
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }

	  function fitExtent(projection, extent, object) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        clip = projection.clipExtent && projection.clipExtent();

	    projection
	        .scale(150)
	        .translate([0, 0]);

	    if (clip != null) projection.clipExtent(null);

	    d3Geo.geoStream(object, projection.stream(boundsStream));

	    var b = boundsStream.result(),
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

	    if (clip != null) projection.clipExtent(clip);

	    return projection
	        .scale(k * 150)
	        .translate([x, y]);
	  }

	  function fitSize(projection, size, object) {
	    return fitExtent(projection, [[0, 0], size], object);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	    };
	  }

	  // A composite projection for the United States, configured by default for
	  // 960×500. The projection also works quite well at 960×600 if you change the
	  // scale to 1285 and adjust the translate accordingly. The set of standard
	  // parallels for each region comes from USGS, which is published here:
	  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	  function albersUsa() {
	    var cache,
	        cacheStream,
	        lower48 = d3Geo.geoAlbers(), lower48Point,
	        alaska = d3Geo.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	        hawaii = d3Geo.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (lower48Point.point(x, y), point)
	          || (alaskaPoint.point(x, y), point)
	          || (hawaiiPoint.point(x, y), point);
	    }

	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(),
	          t = lower48.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;
	      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	          : lower48).invert(coordinates);
	    };

	    albersUsa.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	    };

	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	      return reset();
	    };

	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };

	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];

	      lower48Point = lower48
	          .translate(_)
	          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	          .stream(pointStream);

	      alaskaPoint = alaska
	          .translate([x - 0.307 * k, y + 0.201 * k])
	          .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
	          .stream(pointStream);

	      hawaiiPoint = hawaii
	          .translate([x - 0.205 * k, y + 0.212 * k])
	          .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    albersUsa.fitExtent = function(extent, object) {
	      return fitExtent(albersUsa, extent, object);
	    };

	    albersUsa.fitSize = function(size, object) {
	      return fitSize(albersUsa, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return albersUsa;
	  }

	    albersUsa.drawCompositionBorders = function(context) {
	      var hawaii1 = lower48([-102.91, 26.3]);
	      var hawaii2 = lower48([-104.0, 27.5]);
	      var hawaii3 = lower48([-108.0, 29.1]);
	      var hawaii4 = lower48([-110.0, 29.1]);

	      var alaska1 = lower48([-110.0, 26.7]);
	      var alaska2 = lower48([-112.8, 27.6]);
	      var alaska3 = lower48([-114.3, 30.6]);
	      var alaska4 = lower48([-119.3, 30.1]);

	      context.moveTo(hawaii1[0], hawaii1[1]);
	      context.lineTo(hawaii2[0], hawaii2[1]);
	      context.lineTo(hawaii3[0], hawaii3[1]);
	      context.lineTo(hawaii4[0], hawaii4[1]);

	      context.moveTo(alaska1[0], alaska1[1]);
	      context.lineTo(alaska2[0], alaska2[1]);
	      context.lineTo(alaska3[0], alaska3[1]);
	      context.lineTo(alaska4[0], alaska4[1]);

	    };
	    albersUsa.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();

	    };


	    return albersUsa.scale(1070);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$1(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	    };
	  }

	  // A composite projection for the United States, configured by default for
	  // 960×500. Also works quite well at 960×600 with scale 1285. The set of
	  // standard parallels for each region comes from USGS, which is published here:
	  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	  function albersUsaTerritories() {
	    var cache,
	        cacheStream,
	        lower48 = d3Geo.geoAlbers(), lower48Point,
	        alaska = d3Geo.geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	        hawaii = d3Geo.geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	        puertoRico = d3Geo.geoConicEqualArea().rotate([66, 0]).center([0, 18]).parallels([8, 18]), puertoRicoPoint, //Taken from https://bl.ocks.org/mbostock/5629120
	        samoa = d3Geo.geoEquirectangular().rotate([173, 14]), samoaPoint, // EPSG:4169
	        guam = d3Geo.geoEquirectangular().rotate([-145, -16.8]), guamPoint,
	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var puertoRicoBbox = [[-68.3, 19], [-63.9, 17]];
	        var samoaBbox = [[-171, -14], [-168, -14.8]];
	        var guamBbox = [[144, 20.8], [146.5, 12.7]];
	        */

	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];

	      return point = null,
	          (lower48Point.point(x, y), point) ||
	          (alaskaPoint.point(x, y), point)  ||
	          (hawaiiPoint.point(x, y), point)  ||
	          (puertoRicoPoint.point(x, y), point) ||
	          (samoaPoint.point(x, y), point)   ||
	          (guamPoint.point(x, y), point);
	    }

	    albersUsa.invert = function(coordinates) {

	      var k = lower48.scale(),
	          t = lower48.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;
	          /*
	          //How are the return values calculated:
	          console.info("******");
	          var c0 = puertoRico(puertoRicoBbox[0]);
	          var x0 = (c0[0] - t[0]) / k;
	          var y0 = (c0[1] - t[1]) / k;

	          console.info("p0 puertoRico", x0 + ' - ' + y0);

	          var c1 = puertoRico(puertoRicoBbox[1]);
	          var x1 = (c1[0] - t[0]) / k;
	          var y1 = (c1[1] - t[1]) / k;

	          console.info("p1 puertoRico", x1 + ' - ' + y1);

	          c0 = samoa(samoaBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 samoa", x0 + ' - ' + y0);

	          c1 = samoa(samoaBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 samoa", x1 + ' - ' + y1);

	          c0 = guam(guamBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 guam", x0 + ' - ' + y0);

	          c1 = guam(guamBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 guam", x1 + ' - ' + y1);
	          */

	      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	          : y >= 0.2064 && y < 0.2413 && x >= 0.312 && x < 0.385 ? puertoRico
	          : y >= 0.09 && y < 0.1197 && x >= -0.4243 && x < -0.3232 ? samoa
	          : y >= -0.0518 && y < 0.0895 && x >= -0.4243 && x < -0.3824 ? guam
	          : lower48).invert(coordinates);

	    };

	    albersUsa.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$1([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream), puertoRico.stream(stream), samoa.stream(stream), guam.stream(stream)]);
	    };

	    albersUsa.precision = function(_) {
	      if (!arguments.length) {return lower48.precision();}
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      puertoRico.precision(_);
	      samoa.precision(_);
	      guam.precision(_);
	      return reset();
	    };

	    albersUsa.scale = function(_) {
	      if (!arguments.length) {return lower48.scale();}
	      lower48.scale(_);
	      alaska.scale(_ * 0.35);
	      hawaii.scale(_);
	      puertoRico.scale(_);
	      samoa.scale(_* 2);
	      guam.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };

	    albersUsa.translate = function(_) {
	      if (!arguments.length) {return lower48.translate();}
	      var k = lower48.scale(), x = +_[0], y = +_[1];

	      /*
	      var c0 = puertoRico.translate([x + 0.350 * k, y + 0.224 * k])(puertoRicoBbox[0]);
	      var x0 = (x - c0[0]) / k;
	      var y0 = (y - c0[1]) / k;

	      var c1 = puertoRico.translate([x + 0.350 * k, y + 0.224 * k])(puertoRicoBbox[1]);
	      var x1 = (x - c1[0]) / k;
	      var y1 = (y - c1[1]) / k;

	      console.info('puertoRico: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	      console.info('.clipExtent([[x '+
	       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	       ' * k + epsilon, y '+
	       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	       ' * k + epsilon],[x '+
	       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	       ' * k - epsilon, y '+
	       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	       ' * k - epsilon]])');

	        c0 = samoa.translate([x - 0.492 * k, y + 0.09 * k])(samoaBbox[0]);
	        x0 = (x - c0[0]) / k;
	        y0 = (y - c0[1]) / k;

	        c1 = samoa.translate([x - 0.492 * k, y + 0.09 * k])(samoaBbox[1]);
	        x1 = (x - c1[0]) / k;
	        y1 = (y - c1[1]) / k;

	       console.info('samoa: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	       console.info('.clipExtent([[x '+
	        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	        ' * k + epsilon, y '+
	        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	        ' * k + epsilon],[x '+
	        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	        ' * k - epsilon, y '+
	        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	        ' * k - epsilon]])');

	        c0 = guam.translate([x - 0.408 * k, y + 0.018 * k])(guamBbox[0]);
	        x0 = (x - c0[0]) / k;
	        y0 = (y - c0[1]) / k;

	        c1 = guam.translate([x - 0.408 * k, y + 0.018 * k])(guamBbox[1]);
	        x1 = (x - c1[0]) / k;
	        y1 = (y - c1[1]) / k;

	       console.info('guam: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	       console.info('.clipExtent([[x '+
	        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	        ' * k + epsilon, y '+
	        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	        ' * k + epsilon],[x '+
	        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	        ' * k - epsilon, y '+
	        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	        ' * k - epsilon]])');
	        */

	      lower48Point = lower48
	          .translate(_)
	          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	          .stream(pointStream);

	      alaskaPoint = alaska
	          .translate([x - 0.307 * k, y + 0.201 * k])
	          .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.233 * k - epsilon]])
	          .stream(pointStream);

	      hawaiiPoint = hawaii
	          .translate([x - 0.205 * k, y + 0.212 * k])
	          .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.233 * k - epsilon]])
	          .stream(pointStream);

	      puertoRicoPoint = puertoRico
	          .translate([x + 0.350 * k, y + 0.224 * k])
	          .clipExtent([[x + 0.312 * k + epsilon, y + 0.2064 * k + epsilon],[x + 0.385 * k - epsilon, y + 0.233 * k - epsilon]])
	          .stream(pointStream);

	      samoaPoint = samoa
	          .translate([x - 0.492 * k, y + 0.09 * k])
	          .clipExtent([[x - 0.4243 * k + epsilon, y + 0.0903 * k + epsilon],[x - 0.3233 * k - epsilon, y + 0.1197 * k - epsilon]])
	          .stream(pointStream);

	      guamPoint = guam
	          .translate([x - 0.408 * k, y + 0.018 * k])
	          .clipExtent([[x - 0.4244 * k + epsilon, y - 0.0519 * k + epsilon],[x - 0.3824 * k - epsilon, y + 0.0895 * k - epsilon]])
	          .stream(pointStream);


	      return reset();
	    };

	    albersUsa.fitExtent = function(extent, object) {
	      return fitExtent(albersUsa, extent, object);
	    };

	    albersUsa.fitSize = function(size, object) {
	      return fitSize(albersUsa, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return albersUsa;
	    }

	    albersUsa.drawCompositionBorders = function(context) {

	      /*
	      console.info("CLIP EXTENT hawaii: ", hawaii.clipExtent());
	      console.info("UL BBOX:", lower48.invert([hawaii.clipExtent()[0][0], hawaii.clipExtent()[0][1]]));
	      console.info("UR BBOX:", lower48.invert([hawaii.clipExtent()[1][0], hawaii.clipExtent()[0][1]]));
	      console.info("LD BBOX:", lower48.invert([hawaii.clipExtent()[1][0], hawaii.clipExtent()[1][1]]));
	      console.info("LL BBOX:", lower48.invert([hawaii.clipExtent()[0][0], hawaii.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT alaska: ", alaska.clipExtent());
	      console.info("UL BBOX:", lower48.invert([alaska.clipExtent()[0][0], alaska.clipExtent()[0][1]]));
	      console.info("UR BBOX:", lower48.invert([alaska.clipExtent()[1][0], alaska.clipExtent()[0][1]]));
	      console.info("LD BBOX:", lower48.invert([alaska.clipExtent()[1][0], alaska.clipExtent()[1][1]]));
	      console.info("LL BBOX:", lower48.invert([alaska.clipExtent()[0][0], alaska.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT puertoRico: ", puertoRico.clipExtent());
	      console.info("UL BBOX:", lower48.invert([puertoRico.clipExtent()[0][0], puertoRico.clipExtent()[0][1]]));
	      console.info("UR BBOX:", lower48.invert([puertoRico.clipExtent()[1][0], puertoRico.clipExtent()[0][1]]));
	      console.info("LD BBOX:", lower48.invert([puertoRico.clipExtent()[1][0], puertoRico.clipExtent()[1][1]]));
	      console.info("LL BBOX:", lower48.invert([puertoRico.clipExtent()[0][0], puertoRico.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT samoa: ", samoa.clipExtent());
	      console.info("UL BBOX:", lower48.invert([samoa.clipExtent()[0][0], samoa.clipExtent()[0][1]]));
	      console.info("UR BBOX:", lower48.invert([samoa.clipExtent()[1][0], samoa.clipExtent()[0][1]]));
	      console.info("LD BBOX:", lower48.invert([samoa.clipExtent()[1][0], samoa.clipExtent()[1][1]]));
	      console.info("LL BBOX:", lower48.invert([samoa.clipExtent()[0][0], samoa.clipExtent()[1][1]]));


	      console.info("CLIP EXTENT guam: ", guam.clipExtent());
	      console.info("UL BBOX:", lower48.invert([guam.clipExtent()[0][0], guam.clipExtent()[0][1]]));
	      console.info("UR BBOX:", lower48.invert([guam.clipExtent()[1][0], guam.clipExtent()[0][1]]));
	      console.info("LD BBOX:", lower48.invert([guam.clipExtent()[1][0], guam.clipExtent()[1][1]]));
	      console.info("LL BBOX:", lower48.invert([guam.clipExtent()[0][0], guam.clipExtent()[1][1]]));
	      */

	      var ulhawaii = lower48([-110.4641, 28.2805]);
	      var urhawaii = lower48([-104.0597, 28.9528]);
	      var ldhawaii = lower48([-103.7049, 25.1031]);
	      var llhawaii = lower48([-109.8337, 24.4531]);

	      var ulalaska = lower48([ -124.4745, 28.1407]);
	      var uralaska = lower48([ -110.931, 30.8844]);
	      var ldalaska = lower48([-109.8337, 24.4531]);
	      var llalaska = lower48([-122.4628, 21.8562]);

	      var ulpuertoRico = lower48([-76.8579, 25.1544]);
	      var urpuertoRico = lower48([-72.429, 24.2097]);
	      var ldpuertoRico = lower48([-72.8265, 22.7056]);
	      var llpuertoRico = lower48([-77.1852, 23.6392]);


	      var ulsamoa = lower48([-125.0093, 29.7791]);
	      var ursamoa = lower48([-118.5193, 31.3262]);
	      var ldsamoa = lower48([-118.064, 29.6912]);
	      var llsamoa = lower48([-124.4369, 28.169]);

	      var ulguam = lower48([-128.1314, 37.4582]);
	      var urguam = lower48([-125.2132, 38.214]);
	      var ldguam = lower48([-122.3616, 30.5115]);
	      var llguam = lower48([-125.0315, 29.8211]);

	      context.moveTo(ulhawaii[0], ulhawaii[1]);
	      context.lineTo(urhawaii[0], urhawaii[1]);
	      context.lineTo(ldhawaii[0], ldhawaii[1]);
	      context.lineTo(ldhawaii[0], ldhawaii[1]);
	      context.lineTo(llhawaii[0], llhawaii[1]);
	      context.closePath();

	      context.moveTo(ulalaska[0], ulalaska[1]);
	      context.lineTo(uralaska[0], uralaska[1]);
	      context.lineTo(ldalaska[0], ldalaska[1]);
	      context.lineTo(ldalaska[0], ldalaska[1]);
	      context.lineTo(llalaska[0], llalaska[1]);
	      context.closePath();

	      context.moveTo(ulpuertoRico[0], ulpuertoRico[1]);
	      context.lineTo(urpuertoRico[0], urpuertoRico[1]);
	      context.lineTo(ldpuertoRico[0], ldpuertoRico[1]);
	      context.lineTo(ldpuertoRico[0], ldpuertoRico[1]);
	      context.lineTo(llpuertoRico[0], llpuertoRico[1]);
	      context.closePath();

	      context.moveTo(ulsamoa[0], ulsamoa[1]);
	      context.lineTo(ursamoa[0], ursamoa[1]);
	      context.lineTo(ldsamoa[0], ldsamoa[1]);
	      context.lineTo(ldsamoa[0], ldsamoa[1]);
	      context.lineTo(llsamoa[0], llsamoa[1]);
	      context.closePath();

	      context.moveTo(ulguam[0], ulguam[1]);
	      context.lineTo(urguam[0], urguam[1]);
	      context.lineTo(ldguam[0], ldguam[1]);
	      context.lineTo(ldguam[0], ldguam[1]);
	      context.lineTo(llguam[0], llguam[1]);
	      context.closePath();

	    };
	    albersUsa.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();

	    };


	    return albersUsa.scale(1070);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$2(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Spain, configured by default for 960×500.
	  function conicConformalSpain() {
	    var cache,
	        cacheStream,

	        iberianPeninsule = d3Geo.geoConicConformal().rotate([5, -38.6]).parallels([0,60]), iberianPeninsulePoint,
	        canaryIslands = d3Geo.geoConicConformal().rotate([5, -38.6]).parallels([0,60]), canaryIslandsPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var iberianPeninsuleBbox = [[-11, 46], [4, 35]];
	        var canaryIslandsBbox = [[-19.0, 28.85], [-12.7, 28.1]];
	        */

	    function conicConformalSpain(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (iberianPeninsulePoint.point(x, y), point) ||
	          (canaryIslandsPoint.point(x, y), point);
	    }

	    conicConformalSpain.invert = function(coordinates) {
	      var k = iberianPeninsule.scale(),
	          t = iberianPeninsule.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          return (y >= 0.05346 && y< 0.0897 && x >= -0.13388 && x < -0.0322 ? canaryIslands
	              : iberianPeninsule).invert(coordinates);
	    };

	    conicConformalSpain.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$2([iberianPeninsule.stream(cacheStream = stream), canaryIslands.stream(stream)]);
	    };

	    conicConformalSpain.precision = function(_) {
	      if (!arguments.length) {return iberianPeninsule.precision();}
	      iberianPeninsule.precision(_);
	      canaryIslands.precision(_);
	      return reset();
	    };

	    conicConformalSpain.scale = function(_) {
	      if (!arguments.length) {return iberianPeninsule.scale();}
	      iberianPeninsule.scale(_);
	      canaryIslands.scale(_);
	      return conicConformalSpain.translate(iberianPeninsule.translate());
	    };

	    conicConformalSpain.translate = function(_) {
	      if (!arguments.length) {return iberianPeninsule.translate();}
	      var k = iberianPeninsule.scale(), x = +_[0], y = +_[1];
	      /*
	      var c0 = iberianPeninsule(iberianPeninsuleBbox[0]);
	     var x0 = (x - c0[0]) / k;
	     var y0 = (y - c0[1]) / k;

	     var c1 = iberianPeninsule(iberianPeninsuleBbox[1]);
	     var x1 = (x - c1[0]) / k;
	     var y1 = (y - c1[1]) / k;

	     console.info('Iberian Peninsula: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);

	     c0 = canaryIslands.translate([x + 0.1 * k, y - 0.094 * k])(canaryIslandsBbox[0]);
	     x0 = (x - c0[0]) / k;
	     y0 = (y - c0[1]) / k;

	     c1 = canaryIslands.translate([x + 0.1 * k, y - 0.094 * k])(canaryIslandsBbox[1]);
	     x1 = (x - c1[0]) / k;
	     y1 = (y - c1[1]) / k;

	     console.info('Canry Islands: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     */
	      iberianPeninsulePoint = iberianPeninsule
	          .translate(_)
	          .clipExtent([[x - 0.06857 * k, y - 0.1288 * k],[x + 0.13249 * k, y + 0.06 * k]])
	          .stream(pointStream);

	      canaryIslandsPoint = canaryIslands
	          .translate([x + 0.1 * k, y - 0.094 * k])
	          .clipExtent([[x - 0.1331 * k + epsilon, y + 0.053457 * k + epsilon],[x  - 0.0354 * k - epsilon, y + 0.08969 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    conicConformalSpain.fitExtent = function(extent, object) {
	      return fitExtent(conicConformalSpain, extent, object);
	    };

	    conicConformalSpain.fitSize = function(size, object) {
	      return fitSize(conicConformalSpain, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return conicConformalSpain;
	    }

	    conicConformalSpain.drawCompositionBorders = function(context) {
	      /*
	      console.info("CLIP EXTENT: ", canaryIslands.clipExtent());
	      console.info("UL BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[0][0], canaryIslands.clipExtent()[0][1]]));
	      console.info("UR BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[1][0], canaryIslands.clipExtent()[0][1]]));
	      console.info("LD BBOX:", iberianPeninsule.invert([canaryIslands.clipExtent()[1][0], canaryIslands.clipExtent()[1][1]]));
	      */

	      var ulCanaryIslands = iberianPeninsule([-14.0346750, 34.965007]);
	      var urCanaryIslands = iberianPeninsule([-7.4208899, 35.536988]);
	      var ldCanaryIslands = iberianPeninsule([-7.3148275, 33.54359]);

	      context.moveTo(ulCanaryIslands[0], ulCanaryIslands[1]);
	      context.lineTo(urCanaryIslands[0], urCanaryIslands[1]);
	      context.lineTo(ldCanaryIslands[0], ldCanaryIslands[1]);
	    };
	    conicConformalSpain.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return conicConformalSpain.scale(2700);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$3(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Portugal, configured by default for 960×500.
	  function conicConformalPortugal() {
	    var cache,
	        cacheStream,
	        iberianPeninsule = d3Geo.geoConicConformal().rotate([10, -39.3]).parallels([0, 60]), iberianPeninsulePoint,
	        madeira = d3Geo.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]), madeiraPoint,
	        azores = d3Geo.geoConicConformal().rotate([27.8, -38.6]).parallels([0, 60]), azoresPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var iberianPeninsuleBbox = [[-11, 46], [4, 34]];
	        var madeiraBbox = [[-17.85, 33.6], [-16, 32.02]];
	        var azoresBbox = [[-32, 40.529], [-23.98, 35.75]];
	        */


	    function conicConformalPortugal(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (iberianPeninsulePoint.point(x, y), point) ||
	          (madeiraPoint.point(x, y), point) ||
	          (azoresPoint.point(x, y), point);
	    }

	    conicConformalPortugal.invert = function(coordinates) {
	      var k = iberianPeninsule.scale(),
	          t = iberianPeninsule.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          /*
	          //How are the return values calculated:
	          console.info("******");
	          var c0 = madeira(madeiraBbox[0]);
	          var x0 = (c0[0] - t[0]) / k;
	          var y0 = (c0[1] - t[1]) / k;

	          console.info("p0 madeira", x0 + ' - ' + y0);

	          var c1 = madeira(madeiraBbox[1]);
	          var x1 = (c1[0] - t[0]) / k;
	          var y1 = (c1[1] - t[1]) / k;

	          console.info("p1 madeira", x1 + ' - ' + y1);

	          c0 = azores(azoresBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 azores", x0 + ' - ' + y0);

	          c1 = azores(azoresBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 azores", x1 + ' - ' + y1);
	          */

	          return (y >= 0.0093 && y< 0.03678 && x >= -0.03875 && x < -0.0116 ? madeira
	              : y >= -0.0412 && y< 0.0091 && x >= -0.07782 && x < -0.01166 ? azores
	              : iberianPeninsule).invert(coordinates);
	    };

	    conicConformalPortugal.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$3([iberianPeninsule.stream(cacheStream = stream), madeira.stream(stream), azores.stream(stream)]);
	    };

	    conicConformalPortugal.precision = function(_) {
	      if (!arguments.length) {return iberianPeninsule.precision();}
	      iberianPeninsule.precision(_);
	      madeira.precision(_);
	      azores.precision(_);
	      return reset();
	    };

	    conicConformalPortugal.scale = function(_) {
	      if (!arguments.length) {return iberianPeninsule.scale();}
	      iberianPeninsule.scale(_);
	      madeira.scale(_);
	      azores.scale(_ * 0.6);
	      return conicConformalPortugal.translate(iberianPeninsule.translate());
	    };

	    conicConformalPortugal.translate = function(_) {
	      if (!arguments.length) {return iberianPeninsule.translate();}
	      var k = iberianPeninsule.scale(), x = +_[0], y = +_[1];
	      /*
	      var c0 = iberianPeninsule(iberianPeninsuleBbox[0]);
	     var x0 = (x - c0[0]) / k;
	     var y0 = (y - c0[1]) / k;

	     var c1 = iberianPeninsule(iberianPeninsuleBbox[1]);
	     var x1 = (x - c1[0]) / k;
	     var y1 = (y - c1[1]) / k;

	     console.info('Iberian Peninsula: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k]])');

	     c0 = madeira.translate([x - 0.0265 * k, y + 0.025 * k])(madeiraBbox[0]);
	     x0 = (x - c0[0]) / k;
	     y0 = (y - c0[1]) / k;

	     c1 = madeira.translate([x - 0.0265 * k, y + 0.025 * k])(madeiraBbox[1]);
	     x1 = (x - c1[0]) / k;
	     y1 = (y - c1[1]) / k;

	     console.info('Madeira: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k + epsilon, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k + epsilon],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k - epsilon, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k - epsilon]])');

	      c0 = azores.translate([x - 0.045 * k, y + -0.02 * k])(azoresBbox[0]);
	      x0 = (x - c0[0]) / k;
	      y0 = (y - c0[1]) / k;

	      c1 = azores.translate([x - 0.045 * k, y + -0.02 * k])(azoresBbox[1]);
	      x1 = (x - c1[0]) / k;
	      y1 = (y - c1[1]) / k;

	      console.info('Azores: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	      console.info('.clipExtent([[x '+
	       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	       ' * k + epsilon, y '+
	       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	       ' * k + epsilon],[x '+
	       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	       ' * k - epsilon, y '+
	       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	       ' * k - epsilon]])');
	       */
	      iberianPeninsulePoint = iberianPeninsule
	          .translate(_)
	          .clipExtent([[x - 0.0115 * k, y - 0.1138 * k],[x +0.2105 * k, y +0.0673 * k]])
	          .stream(pointStream);


	      madeiraPoint = madeira
	          .translate([x - 0.0265 * k, y + 0.025 * k])
	          .clipExtent([[x - 0.0388 * k + epsilon, y + 0.0093 * k + epsilon],[x - 0.0116 * k - epsilon, y + 0.0368 * k - epsilon]])
	          .stream(pointStream);

	      azoresPoint = azores
	          .translate([x - 0.045 * k, y + -0.02 * k])
	          .clipExtent([[x - 0.0778 * k + epsilon, y - 0.0413 * k + epsilon],[x - 0.0117 * k - epsilon, y + 0.0091 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    conicConformalPortugal.fitExtent = function(extent, object) {
	      return fitExtent(conicConformalPortugal, extent, object);
	    };

	    conicConformalPortugal.fitSize = function(size, object) {
	      return fitSize(conicConformalPortugal, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return conicConformalPortugal;
	    }

	    conicConformalPortugal.drawCompositionBorders = function(context) {
	      /*
	      console.info("CLIP EXTENT MADEIRA: ", madeira.clipExtent());
	      console.info("UL BBOX:", iberianPeninsule.invert([madeira.clipExtent()[0][0], madeira.clipExtent()[0][1]]));
	      console.info("UR BBOX:", iberianPeninsule.invert([madeira.clipExtent()[1][0], madeira.clipExtent()[0][1]]));
	      console.info("LD BBOX:", iberianPeninsule.invert([madeira.clipExtent()[1][0], madeira.clipExtent()[1][1]]));
	      console.info("LL BBOX:", iberianPeninsule.invert([madeira.clipExtent()[0][0], madeira.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT AZORES: ", azores.clipExtent());
	      console.info("UL BBOX:", iberianPeninsule.invert([azores.clipExtent()[0][0], azores.clipExtent()[0][1]]));
	      console.info("UR BBOX:", iberianPeninsule.invert([azores.clipExtent()[1][0], azores.clipExtent()[0][1]]));
	      console.info("LD BBOX:", iberianPeninsule.invert([azores.clipExtent()[1][0], azores.clipExtent()[1][1]]));
	      console.info("LL BBOX:", iberianPeninsule.invert([azores.clipExtent()[0][0], azores.clipExtent()[1][1]]));
	      */

	      var ulmadeira = iberianPeninsule([-12.8351, 38.7113]);
	      var urmadeira = iberianPeninsule([-10.8482, 38.7633]);
	      var ldmadeira = iberianPeninsule([-10.8181, 37.2072]);
	      var llmadeira = iberianPeninsule([-12.7345, 37.1573]);

	      var ulazores = iberianPeninsule([-16.0753, 41.4436]);
	      var urazores = iberianPeninsule([-10.9168, 41.6861]);
	      var ldazores = iberianPeninsule([-10.8557, 38.7747]);
	      var llazores = iberianPeninsule([-15.6728, 38.5505]);

	      context.moveTo(ulmadeira[0], ulmadeira[1]);
	      context.lineTo(urmadeira[0], urmadeira[1]);
	      context.lineTo(ldmadeira[0], ldmadeira[1]);
	      context.lineTo(ldmadeira[0], ldmadeira[1]);
	      context.lineTo(llmadeira[0], llmadeira[1]);
	      context.closePath();

	      context.moveTo(ulazores[0], ulazores[1]);
	      context.lineTo(urazores[0], urazores[1]);
	      context.lineTo(ldazores[0], ldazores[1]);
	      context.lineTo(ldazores[0], ldazores[1]);
	      context.lineTo(llazores[0], llazores[1]);
	      context.closePath();

	    };
	    conicConformalPortugal.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return conicConformalPortugal.scale(4200);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$4(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Ecuador, configured by default for 960×500.
	  function mercatorEcuador() {
	    var cache,
	        cacheStream,

	        mainland = d3Geo.geoMercator().rotate([80, 1.5]), mainlandPoint,
	        galapagos = d3Geo.geoMercator().rotate([90.73, 1]), galapagosPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var mainlandBbox = [[-81.5, 2.7], [-70.0, -6.0]];
	        var galapagosBbox = [[-92.2, 0.58], [-88.8, -1.8]];
	        */

	    function mercatorEcuador(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (mainlandPoint.point(x, y), point) ||
	          (galapagosPoint.point(x, y), point);
	    }

	    mercatorEcuador.invert = function(coordinates) {
	      var k = mainland.scale(),
	          t = mainland.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;
	          /*
	          //How are the return values calculated:
	          var c0 = galapagos(galapagosBbox[0]);
	          var x0 = (c0[0] - t[0]) / k;
	          var y0 = (c0[1] - t[1]) / k;

	          console.info("p0 galapagos", x0 + ' - ' + y0);


	          var c1 = galapagos(galapagosBbox[1]);
	          var x1 = (c1[0] - t[0]) / k;
	          var y1 = (c1[1] - t[1]) / k;

	          console.info("p1 galapagos", x1 + ' - ' + y1);
	          */
	          return (y >= -0.0676 && y< -0.026 && x >= -0.0857 && x < -0.0263 ? galapagos
	              : mainland).invert(coordinates);
	    };

	    mercatorEcuador.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$4([mainland.stream(cacheStream = stream), galapagos.stream(stream)]);
	    };

	    mercatorEcuador.precision = function(_) {
	      if (!arguments.length) {return mainland.precision();}
	      mainland.precision(_);
	      galapagos.precision(_);
	      return reset();
	    };

	    mercatorEcuador.scale = function(_) {
	      if (!arguments.length) {return mainland.scale();}
	      mainland.scale(_);
	      galapagos.scale(_);
	      return mercatorEcuador.translate(mainland.translate());
	    };

	    mercatorEcuador.translate = function(_) {
	      if (!arguments.length) {return mainland.translate();}
	      var k = mainland.scale(), x = +_[0], y = +_[1];
	      /*
	      var c0 = mainland(mainlandBbox[0]);
	     var x0 = (x - c0[0]) / k;
	     var y0 = (y - c0[1]) / k;

	     var c1 = mainland(mainlandBbox[1]);
	     var x1 = (x - c1[0]) / k;
	     var y1 = (y - c1[1]) / k;

	     console.info('mainland: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k]])');

	     c0 = galapagos.translate([x - 0.06 * k, y - 0.04 * k])(galapagosBbox[0]);
	     x0 = (x - c0[0]) / k;
	     y0 = (y - c0[1]) / k;

	     c1 = galapagos.translate([x - 0.06 * k, y - 0.04 * k])(galapagosBbox[1]);
	     x1 = (x - c1[0]) / k;
	     y1 = (y - c1[1]) / k;

	     console.info('galapagos: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k + epsilon, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k + epsilon],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k - epsilon, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k - epsilon]])');*/

	      mainlandPoint = mainland
	          .translate(_)
	          .clipExtent([[x - 0.0262 * k, y - 0.0734 * k],[x + 0.1741 * k, y + 0.079 * k]])
	          .stream(pointStream);

	      galapagosPoint = galapagos
	          .translate([x - 0.06 * k, y - 0.04 * k])
	          .clipExtent([[x - 0.0857 * k + epsilon, y - 0.0676 * k + epsilon],[x - 0.0263 * k - epsilon, y - 0.026 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    mercatorEcuador.fitExtent = function(extent, object) {
	      return fitExtent(mercatorEcuador, extent, object);
	    };

	    mercatorEcuador.fitSize = function(size, object) {
	      return fitSize(mercatorEcuador, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return mercatorEcuador;
	    }

	    mercatorEcuador.drawCompositionBorders = function(context) {
	      /*
	      console.info("CLIP EXTENT: ", galapagos.clipExtent());
	      console.info("UL BBOX:", mainland.invert([galapagos.clipExtent()[0][0], galapagos.clipExtent()[0][1]]));
	      console.info("UR BBOX:", mainland.invert([galapagos.clipExtent()[1][0], galapagos.clipExtent()[0][1]]));
	      console.info("LD BBOX:", mainland.invert([galapagos.clipExtent()[1][0], galapagos.clipExtent()[1][1]]));
	      console.info("LL BBOX:", mainland.invert([galapagos.clipExtent()[0][0], galapagos.clipExtent()[1][1]]));
	      */

	      var ulgalapagos = mainland([-84.9032, 2.3757]);
	      var urgalapagos = mainland([-81.5047, 2.3708]);
	      var ldgalapagos = mainland([-81.5063, -0.01]);
	      var llgalapagos = mainland([-84.9086, -0.005]);

	      context.moveTo(ulgalapagos[0], ulgalapagos[1]);
	      context.lineTo(urgalapagos[0], urgalapagos[1]);
	      context.lineTo(ldgalapagos[0], ldgalapagos[1]);
	      context.lineTo(llgalapagos[0], llgalapagos[1]);
	      context.closePath();

	    };
	    mercatorEcuador.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return mercatorEcuador.scale(3500);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$5(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Chile, configured by default for 960×500.
	  function transverseMercatorChile() {
	    var cache,
	        cacheStream,
	        mainland = d3Geo.geoTransverseMercator().rotate([72, 37]), mainlandPoint,
	        antarctic = d3Geo.geoStereographic().rotate([72, 0]), antarcticPoint,
	        juanFernandez = d3Geo.geoMercator().rotate([80, 33.5]), juanFernandezPoint,
	        pascua = d3Geo.geoMercator().rotate([110, 25]), pascuaPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	      /*
	      var mainlandBbox = [[-75.5, -15.0], [-32, -49.0]];
	      var antarcticBbox = [[-91.0, -60.0], [-43.0, -90.0]];
	      var juanFernandezBbox = [[-81.0, -33.0], [-78.5, -34.0]];
	      var pascuaBbox = [[-110, -26.6], [-108.7, -27.5]];
	      */

	    function transverseMercatorChile(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (mainlandPoint.point(x, y), point) ||
	          (antarcticPoint.point(x, y), point) ||
	          (juanFernandezPoint.point(x, y), point) ||
	          (pascuaPoint.point(x, y), point);
	    }

	    transverseMercatorChile.invert = function(coordinates) {
	      var k = mainland.scale(),
	          t = mainland.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          /*
	          //How are the return values calculated:
	          console.info("******");
	          var c0 = antarctic(antarcticBbox[0]);
	          var x0 = (c0[0] - t[0]) / k;
	          var y0 = (c0[1] - t[1]) / k;

	          console.info("p0 antarctic", x0 + ' - ' + y0);

	          var c1 = antarctic(antarcticBbox[1]);
	          var x1 = (c1[0] - t[0]) / k;
	          var y1 = (c1[1] - t[1]) / k;

	          console.info("p1 antarctic", x1 + ' - ' + y1);

	          c0 = juanFernandez(juanFernandezBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 juanFernandez", x0 + ' - ' + y0);

	          c1 = juanFernandez(juanFernandezBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 juanFernandez", x1 + ' - ' + y1);

	          c0 = pascua(pascuaBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 pascua", x0 + ' - ' + y0);

	          c1 = pascua(pascuaBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 pascua", x1 + ' - ' + y1);
	          */

	          return (y >= 0.2582 && y< 0.32 && x >= -0.1036 && x < -0.087 ? antarctic
	              : y >= -0.01298 && y< 0.0133 && x >= -0.11396 && x < -0.05944 ? juanFernandez
	              : y >= 0.01539 && y< 0.03911 && x >= -0.089 && x < -0.0588 ? pascua
	              : mainland).invert(coordinates);
	    };

	    transverseMercatorChile.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$5([mainland.stream(cacheStream = stream), antarctic.stream(stream), juanFernandez.stream(stream), pascua.stream(stream)]);
	    };

	    transverseMercatorChile.precision = function(_) {
	      if (!arguments.length) {return mainland.precision();}
	      mainland.precision(_);
	      antarctic.precision(_);
	      juanFernandez.precision(_);
	      pascua.precision(_);
	      return reset();
	    };

	    transverseMercatorChile.scale = function(_) {
	      if (!arguments.length) {return mainland.scale();}
	      mainland.scale(_);
	      antarctic.scale(_ * 0.15);
	      juanFernandez.scale(_ * 1.5);
	      pascua.scale(_ * 1.5);
	      return transverseMercatorChile.translate(mainland.translate());
	    };

	    transverseMercatorChile.translate = function(_) {
	      if (!arguments.length) {return mainland.translate();}
	      var k = mainland.scale(), x = +_[0], y = +_[1];

	      /*
	      var c0 = mainland(mainlandBbox[0]);
	     var x0 = (x - c0[0]) / k;
	     var y0 = (y - c0[1]) / k;

	     var c1 = mainland(mainlandBbox[1]);
	     var x1 = (x - c1[0]) / k;
	     var y1 = (y - c1[1]) / k;

	     console.info('Mainland: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k]])');

	     c0 = antarctic.translate([x - 0.1 * k, y + 0.17 * k])(antarcticBbox[0]);
	     x0 = (x - c0[0]) / k;
	     y0 = (y - c0[1]) / k;

	     c1 = antarctic.translate([x - 0.1 * k, y + 0.17 * k])(antarcticBbox[1]);
	     x1 = (x - c1[0]) / k;
	     y1 = (y - c1[1]) / k;

	     console.info('antarctic: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('Doesn t work due to -90 latitude!' + '.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k + epsilon, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k + epsilon],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k - epsilon, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k - epsilon]])');

	      c0 = juanFernandez.translate([x - 0.092 * k, y -0 * k])(juanFernandezBbox[0]);
	      x0 = (x - c0[0]) / k;
	      y0 = (y - c0[1]) / k;

	      c1 = juanFernandez.translate([x - 0.092 * k, y -0 * k])(juanFernandezBbox[1]);
	      x1 = (x - c1[0]) / k;
	      y1 = (y - c1[1]) / k;

	      console.info('juanFernandez: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	      console.info('.clipExtent([[x '+
	       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	       ' * k + epsilon, y '+
	       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	       ' * k + epsilon],[x '+
	       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	       ' * k - epsilon, y '+
	       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	       ' * k - epsilon]])');

	       c0 = pascua.translate([x - 0.089 * k, y -0.0265 * k])(pascuaBbox[0]);
	       x0 = (x - c0[0]) / k;
	       y0 = (y - c0[1]) / k;

	       c1 = pascua.translate([x - 0.089 * k, y -0.0265 * k])(pascuaBbox[1]);
	       x1 = (x - c1[0]) / k;
	       y1 = (y - c1[1]) / k;

	       console.info('pascua: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	       console.info('.clipExtent([[x '+
	        (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	        ' * k + epsilon, y '+
	        (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	        ' * k + epsilon],[x '+
	        (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	        ' * k - epsilon, y '+
	        (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	        ' * k - epsilon]])');
	        */
	      mainlandPoint = mainland
	          .translate(_)
	          .clipExtent([[x - 0.059 * k, y - 0.3835 * k],[x + 0.4498 * k, y + 0.3375 * k]])
	          .stream(pointStream);

	      antarcticPoint = antarctic
	          .translate([x - 0.087 * k, y + 0.17 * k])
	          .clipExtent([[x - 0.1166 * k + epsilon, y + 0.2582 * k + epsilon],[x - 0.06 * k - epsilon, y + 0.32 * k - epsilon]])
	          .stream(pointStream);

	      juanFernandezPoint = juanFernandez
	          .translate([x - 0.092 * k, y - 0 * k])
	          .clipExtent([[x - 0.114 * k + epsilon, y - 0.013 * k + epsilon],[x - 0.0594 * k - epsilon, y + 0.0133 * k - epsilon]])
	          .stream(pointStream);

	      pascuaPoint = pascua
	          .translate([x - 0.089 * k, y - 0.0265 * k])
	          .clipExtent([[x - 0.089 * k + epsilon, y + 0.0154 * k + epsilon],[x - 0.0588 * k - epsilon, y + 0.0391 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    transverseMercatorChile.fitExtent = function(extent, object) {
	      return fitExtent(transverseMercatorChile, extent, object);
	    };

	    transverseMercatorChile.fitSize = function(size, object) {
	      return fitSize(transverseMercatorChile, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return transverseMercatorChile;
	    }

	    transverseMercatorChile.drawCompositionBorders = function(context) {
	      /*
	      console.info("CLIP EXTENT antarctic: ", antarctic.clipExtent());
	      console.info("UL BBOX:", mainland.invert([antarctic.clipExtent()[0][0], antarctic.clipExtent()[0][1]]));
	      console.info("UR BBOX:", mainland.invert([antarctic.clipExtent()[1][0], antarctic.clipExtent()[0][1]]));
	      console.info("LD BBOX:", mainland.invert([antarctic.clipExtent()[1][0], antarctic.clipExtent()[1][1]]));
	      console.info("LL BBOX:", mainland.invert([antarctic.clipExtent()[0][0], antarctic.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT juanFernandez: ", juanFernandez.clipExtent());
	      console.info("UL BBOX:", mainland.invert([juanFernandez.clipExtent()[0][0], juanFernandez.clipExtent()[0][1]]));
	      console.info("UR BBOX:", mainland.invert([juanFernandez.clipExtent()[1][0], juanFernandez.clipExtent()[0][1]]));
	      console.info("LD BBOX:", mainland.invert([juanFernandez.clipExtent()[1][0], juanFernandez.clipExtent()[1][1]]));
	      console.info("LL BBOX:", mainland.invert([juanFernandez.clipExtent()[0][0], juanFernandez.clipExtent()[1][1]]));

	      console.info("CLIP EXTENT pascua: ", pascua.clipExtent());
	      console.info("UL BBOX:", mainland.invert([pascua.clipExtent()[0][0], pascua.clipExtent()[0][1]]));
	      console.info("UR BBOX:", mainland.invert([pascua.clipExtent()[1][0], pascua.clipExtent()[0][1]]));
	      console.info("LD BBOX:", mainland.invert([pascua.clipExtent()[1][0], pascua.clipExtent()[1][1]]));
	      console.info("LL BBOX:", mainland.invert([pascua.clipExtent()[0][0], pascua.clipExtent()[1][1]]));
	      */

	      var ulantarctic = mainland([-82.6999, -51.3043]);
	      var urantarctic = mainland([-77.5442, -51.6631]);
	      var ldantarctic = mainland([-78.0254, -55.1860]);
	      var llantarctic = mainland([-83.6106, -54.7785]);

	      var uljuanFernandez = mainland([-80.0638, -35.9840]);
	      var urjuanFernandez = mainland([-76.2153, -36.1811]);
	      var ldjuanFernandez = mainland([-76.2994, -37.6839]);
	      var lljuanFernandez = mainland([-80.2231, -37.4757]);

	      var ulpascua = mainland([-78.442, -37.706]);
	      var urpascua = mainland([-76.263, -37.8054]);
	      var ldpascua = mainland([-76.344, -39.1595]);
	      var llpascua = mainland([-78.5638, -39.0559]);

	      context.moveTo(ulantarctic[0], ulantarctic[1]);
	      context.lineTo(urantarctic[0], urantarctic[1]);
	      context.lineTo(ldantarctic[0], ldantarctic[1]);
	      context.lineTo(ldantarctic[0], ldantarctic[1]);
	      context.lineTo(llantarctic[0], llantarctic[1]);
	      context.closePath();

	      context.moveTo(uljuanFernandez[0], uljuanFernandez[1]);
	      context.lineTo(urjuanFernandez[0], urjuanFernandez[1]);
	      context.lineTo(ldjuanFernandez[0], ldjuanFernandez[1]);
	      context.lineTo(ldjuanFernandez[0], ldjuanFernandez[1]);
	      context.lineTo(lljuanFernandez[0], lljuanFernandez[1]);
	      context.closePath();

	      context.moveTo(ulpascua[0], ulpascua[1]);
	      context.lineTo(urpascua[0], urpascua[1]);
	      context.lineTo(ldpascua[0], ldpascua[1]);
	      context.lineTo(ldpascua[0], ldpascua[1]);
	      context.lineTo(llpascua[0], llpascua[1]);
	      context.closePath();


	    };
	    transverseMercatorChile.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return transverseMercatorChile.scale(700);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$6(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Portugal, configured by default for 960×500.
	  function conicEquidistantJapan() {
	    var cache,
	        cacheStream,
	        mainland = d3Geo.geoConicEquidistant().rotate([-136, -22]).parallels([40, 34]), mainlandPoint, //gis.stackexchange.com/a/73135
	        hokkaido = d3Geo.geoConicEquidistant().rotate([-146, -26]).parallels([40, 34]), hokkaidoPoint,
	        okinawa = d3Geo.geoConicEquidistant().rotate([-126, -19]).parallels([40, 34]), okinawaPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var mainlandBbox = [[126.0, 41.606], [142.97, 29.97]];
	        var hokkaidoBbox = [[138.7, 45.61], [146.2, 41.2]];
	        var okinawaBbox = [[122.6, 29.0], [130, 23.7]];
	        */


	    function conicEquidistantJapan(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (mainlandPoint.point(x, y), point) ||
	          (hokkaidoPoint.point(x, y), point) ||
	          (okinawaPoint.point(x, y), point);
	    }

	    conicEquidistantJapan.invert = function(coordinates) {
	      var k = mainland.scale(),
	          t = mainland.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          /*
	          //How are the return values calculated:
	          console.info("******");
	          var c0 = hokkaido(hokkaidoBbox[0]);
	          var x0 = (c0[0] - t[0]) / k;
	          var y0 = (c0[1] - t[1]) / k;

	          console.info("p0 hokkaido", x0 + ' - ' + y0);

	          var c1 = hokkaido(hokkaidoBbox[1]);
	          var x1 = (c1[0] - t[0]) / k;
	          var y1 = (c1[1] - t[1]) / k;

	          console.info("p1 hokkaido", x1 + ' - ' + y1);

	          c0 = okinawa(okinawaBbox[0]);
	          x0 = (c0[0] - t[0]) / k;
	          y0 = (c0[1] - t[1]) / k;

	          console.info("p0 okinawa", x0 + ' - ' + y0);

	          c1 = okinawa(okinawaBbox[1]);
	          x1 = (c1[0] - t[0]) / k;
	          y1 = (c1[1] - t[1]) / k;

	          console.info("p1 okinawa", x1 + ' - ' + y1);
	          */

	          return (y >= -0.10925 && y< -0.02701 && x >= -0.135 && x < -0.0397 ? hokkaido
	              : y >= 0.04713 && y< 0.11138 && x >= -0.03986 && x < 0.051 ? okinawa
	              : mainland).invert(coordinates);

	    };

	    conicEquidistantJapan.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$6([mainland.stream(cacheStream = stream), hokkaido.stream(stream), okinawa.stream(stream)]);
	    };

	    conicEquidistantJapan.precision = function(_) {
	      if (!arguments.length) {return mainland.precision();}
	      mainland.precision(_);
	      hokkaido.precision(_);
	      okinawa.precision(_);
	      return reset();
	    };

	    conicEquidistantJapan.scale = function(_) {
	      if (!arguments.length) {return mainland.scale();}
	      mainland.scale(_);
	      hokkaido.scale(_);
	      okinawa.scale(_ * 0.7);
	      return conicEquidistantJapan.translate(mainland.translate());
	    };

	    conicEquidistantJapan.translate = function(_) {
	      if (!arguments.length) {return mainland.translate();}
	      var k = mainland.scale(), x = +_[0], y = +_[1];

	      /*
	      var c0 = mainland(mainlandBbox[0]);
	     var x0 = (x - c0[0]) / k;
	     var y0 = (y - c0[1]) / k;

	     var c1 = mainland(mainlandBbox[1]);
	     var x1 = (x - c1[0]) / k;
	     var y1 = (y - c1[1]) / k;

	     console.info('Main: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k]])');

	     c0 = hokkaido.translate([x - 0.0425 * k, y - 0.005 * k])(hokkaidoBbox[0]);
	     x0 = (x - c0[0]) / k;
	     y0 = (y - c0[1]) / k;

	     c1 = hokkaido.translate([x - 0.0425 * k, y - 0.005 * k])(hokkaidoBbox[1]);
	     x1 = (x - c1[0]) / k;
	     y1 = (y - c1[1]) / k;

	     console.info('hokkaido: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	     console.info('.clipExtent([[x '+
	      (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	      ' * k + epsilon, y '+
	      (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	      ' * k + epsilon],[x '+
	      (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	      ' * k - epsilon, y '+
	      (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	      ' * k - epsilon]])');

	      c0 = okinawa.translate([x - 0 * k, y + 0 * k])(okinawaBbox[0]);
	      x0 = (x - c0[0]) / k;
	      y0 = (y - c0[1]) / k;

	      c1 = okinawa.translate([x - 0 * k, y + 0 * k])(okinawaBbox[1]);
	      x1 = (x - c1[0]) / k;
	      y1 = (y - c1[1]) / k;

	      console.info('okinawa: p0: ' + x0 + ', ' + y0 + ' , p1: ' + x1 + ' - ' + y1);
	      console.info('.clipExtent([[x '+
	       (x0<0?'+ ':'- ') + Math.abs(x0.toFixed(4))+
	       ' * k + epsilon, y '+
	       (y0<0?'+ ':'- ') + Math.abs(y0.toFixed(4))+
	       ' * k + epsilon],[x '+
	       (x1<0?'+ ':'- ') + Math.abs(x1.toFixed(4))+
	       ' * k - epsilon, y '+
	       (y1<0?'+ ':'- ') + Math.abs(y1.toFixed(4))+
	       ' * k - epsilon]])');
	       */

	      mainlandPoint = mainland
	          .translate(_)
	          .clipExtent([[x - 0.1352 * k, y - 0.1091 * k],[x + 0.117 * k, y + 0.098 * k]])
	          .stream(pointStream);


	      hokkaidoPoint = hokkaido
	          .translate([x - 0.0425 * k, y - 0.005 * k])
	          .clipExtent([[x - 0.135 * k + epsilon, y - 0.1093 * k + epsilon],[x - 0.0397 * k - epsilon, y - 0.027 * k - epsilon]])
	          .stream(pointStream);

	      okinawaPoint = okinawa
	          .translate(_)
	          .clipExtent([[x - 0.0399 * k + epsilon, y + 0.0471 * k + epsilon],[x + 0.051 * k - epsilon, y + 0.1114 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    conicEquidistantJapan.fitExtent = function(extent, object) {
	      return fitExtent(conicEquidistantJapan, extent, object);
	    };

	    conicEquidistantJapan.fitSize = function(size, object) {
	      return fitSize(conicEquidistantJapan, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return conicEquidistantJapan;
	    }

	    conicEquidistantJapan.drawCompositionBorders = function(context) {
	      /*
	      console.info("CLIP EXTENT hokkaido: ", hokkaido.clipExtent());
	      console.info("UL BBOX:", mainland.invert([hokkaido.clipExtent()[0][0], hokkaido.clipExtent()[0][1]]));
	      console.info("UR BBOX:", mainland.invert([hokkaido.clipExtent()[1][0], hokkaido.clipExtent()[0][1]]));
	      console.info("LD BBOX:", mainland.invert([hokkaido.clipExtent()[1][0], hokkaido.clipExtent()[1][1]]));
	      console.info("LL BBOX:", mainland.invert([hokkaido.clipExtent()[0][0], hokkaido.clipExtent()[1][1]]));
	      */

	      var ulhokkaido = mainland([ 126.01320483689143, 41.621090310215585 ]);
	      var urhokkaido = mainland([ 133.04304387025903, 42.15087523707186 ]);
	      var ldhokkaido = mainland([ 133.3021766080688, 37.43975444725098 ]);
	      var llhokkaido = mainland([ 126.87889168628224, 36.95488945159779 ]);

	      var llokinawa = mainland([132.9, 29.8]);
	      var lmokinawa = mainland([134, 33]);
	      var lrokinawa = mainland([139.3, 33.2]);
	      var llrokinawa = mainland([139.16, 30.5]);


	      context.moveTo(ulhokkaido[0], ulhokkaido[1]);
	      context.lineTo(urhokkaido[0], urhokkaido[1]);
	      context.lineTo(ldhokkaido[0], ldhokkaido[1]);
	      context.lineTo(llhokkaido[0], llhokkaido[1]);
	      context.closePath();

	      context.moveTo(llokinawa[0], llokinawa[1]);
	      context.lineTo(lmokinawa[0], lmokinawa[1]);
	      context.lineTo(lrokinawa[0], lrokinawa[1]);
	      context.lineTo(llrokinawa[0], llrokinawa[1]);

	    };
	    conicEquidistantJapan.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return conicEquidistantJapan.scale(2200);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$7(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for France, configured by default for 960×500.
	  function conicConformalFrance() {
	    var cache,
	        cacheStream,
	        europe = d3Geo.geoConicConformal().rotate([-3, -46.2]).parallels([0, 60]), europePoint,
	        guyane = d3Geo.geoMercator().center([-53.2, 3.9]), guyanePoint,
	        martinique = d3Geo.geoMercator().center([-61.03, 14.67]), martiniquePoint,
	        guadeloupe = d3Geo.geoMercator().center([-61.46, 16.14]), guadeloupePoint,
	        saintBarthelemy = d3Geo.geoMercator().center([-62.85, 17.92]), saintBarthelemyPoint,
	        stPierreMiquelon = d3Geo.geoMercator().center([-56.23, 46.93]), stPierreMiquelonPoint,
	        mayotte = d3Geo.geoMercator().center([45.16, -12.8]), mayottePoint,
	        reunion = d3Geo.geoMercator().center([55.52, -21.13]), reunionPoint,
	        nouvelleCaledonie = d3Geo.geoMercator().center([165.8, -21.07]), nouvelleCaledoniePoint,
	        wallisFutuna = d3Geo.geoMercator().center([-178.1, -14.3]), wallisFutunaPoint,
	        polynesie = d3Geo.geoMercator().center([-150.55, -17.11]), polynesiePoint,
	        polynesie2 = d3Geo.geoMercator().center([-150.55, -17.11]), polynesie2Point,
	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var europeBbox = [[-6.5, 51], [10, 41]];
	        var guyaneBbox = [[-54.5, 6.29], [-50.9, 1.48]];
	        */


	    function conicConformalFrance(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (europePoint.point(x, y), point) ||
	          (guyanePoint.point(x, y), point) ||
	          (martiniquePoint.point(x, y), point) ||
	          (guadeloupePoint.point(x, y), point) ||
	          (saintBarthelemyPoint.point(x, y), point) ||
	          (stPierreMiquelonPoint.point(x, y), point) ||
	          (mayottePoint.point(x, y), point) ||
	          (reunionPoint.point(x, y), point) ||
	          (nouvelleCaledoniePoint.point(x, y), point) ||
	          (wallisFutunaPoint.point(x, y), point) ||
	          (polynesiePoint.point(x, y), point) ||
	          (polynesie2Point.point(x, y), point);
	    }

	    conicConformalFrance.invert = function(coordinates) {
	      var k = europe.scale(),
	          t = europe.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          return (y >= 0.029 && y< 0.0864 && x >= -0.14 && x < -0.0996 ? guyane
	              : y >= 0 && y< 0.029 && x >= -0.14 && x < -0.0996 ? martinique
	              : y >= -0.032 && y< 0 && x >= -0.14 && x < -0.0996 ? guadeloupe
	              : y >= -0.052 && y< -0.032 && x >= -0.14 && x < -0.0996 ? saintBarthelemy
	              : y >= -0.076 && y< 0.052 && x >= -0.14 && x < -0.0996 ? stPierreMiquelon
	              : y >= -0.076 && y< -0.052 && x >= 0.0967 && x < 0.1371 ? mayotte
	              : y >= -0.052 && y< -0.02 && x >= 0.0967 && x < 0.1371 ? reunion
	              : y >= -0.02 && y< 0.012 && x >= 0.0967 && x < 0.1371 ? nouvelleCaledonie
	              : y >= 0.012 && y< 0.033 && x >= 0.0967 && x < 0.1371 ? wallisFutuna
	              : y >= 0.033 && y< 0.0864 && x >= 0.0967 && x < 0.1371 ? polynesie
	              : europe).invert(coordinates);
	    };

	    conicConformalFrance.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$7([europe.stream(cacheStream = stream), guyane.stream(stream), martinique.stream(stream), guadeloupe.stream(stream), saintBarthelemy.stream(stream), stPierreMiquelon.stream(stream), mayotte.stream(stream), reunion.stream(stream), nouvelleCaledonie.stream(stream), wallisFutuna.stream(stream), polynesie.stream(stream), polynesie2.stream(stream)]);
	    };

	    conicConformalFrance.precision = function(_) {
	      if (!arguments.length) {return europe.precision();}
	      europe.precision(_);
	      guyane.precision(_);
	      martinique.precision(_);
	      guadeloupe.precision(_);
	      saintBarthelemy.precision(_);
	      stPierreMiquelon.precision(_);
	      mayotte.precision(_);
	      reunion.precision(_);
	      nouvelleCaledonie.precision(_);
	      wallisFutuna.precision(_);
	      polynesie.precision(_);
	      polynesie2.precision(_);

	      return reset();
	    };

	    conicConformalFrance.scale = function(_) {
	      if (!arguments.length) {return europe.scale();}
	      europe.scale(_);
	      guyane.scale(_ * 0.6);
	      martinique.scale(_ * 1.6);
	      guadeloupe.scale(_ * 1.4);
	      saintBarthelemy.scale(_ * 5);
	      stPierreMiquelon.scale(_ * 1.3);
	      mayotte.scale(_ * 1.6);
	      reunion.scale(_ * 1.2);
	      nouvelleCaledonie.scale(_ * 0.3);
	      wallisFutuna.scale(_ * 2.7);
	      polynesie.scale(_ * 0.5);
	      polynesie2.scale(_ * 0.06);
	      return conicConformalFrance.translate(europe.translate());
	    };

	    conicConformalFrance.translate = function(_) {
	      if (!arguments.length) {return europe.translate();}
	      var k = europe.scale(), x = +_[0], y = +_[1];

	      europePoint = europe
	          .translate(_)
	          .clipExtent([[x - 0.0996 * k, y - 0.0908 * k],[x + 0.0967 * k, y + 0.0864 * k]])
	          .stream(pointStream);


	      guyanePoint = guyane
	          .translate([x - 0.12 * k, y + 0.0575 * k])
	          .clipExtent([[x - 0.14 * k + epsilon, y + 0.029 * k + epsilon],[x - 0.0996 * k - epsilon, y + 0.0864 * k - epsilon]])
	          .stream(pointStream);

	      martiniquePoint = martinique
	          .translate([x - 0.12 * k, y + 0.013 * k])
	          .clipExtent([[x - 0.14 * k + epsilon, y + 0 * k + epsilon],[x - 0.0996 * k - epsilon, y + 0.029 * k - epsilon]])
	          .stream(pointStream);

	      guadeloupePoint = guadeloupe
	          .translate([x - 0.12 * k, y -0.014 * k])
	          .clipExtent([[x - 0.14 * k + epsilon, y - 0.032 * k + epsilon],[x - 0.0996 * k - epsilon, y + 0 * k - epsilon]])
	          .stream(pointStream);

	      saintBarthelemyPoint = saintBarthelemy
	          .translate([x - 0.12 * k, y - 0.044 * k])
	          .clipExtent([[x - 0.14 * k + epsilon, y - 0.052 * k + epsilon],[x - 0.0996 * k - epsilon, y - 0.032 * k - epsilon]])
	          .stream(pointStream);

	      stPierreMiquelonPoint = stPierreMiquelon
	          .translate([x - 0.12 * k, y - 0.065 * k])
	          .clipExtent([[x - 0.14 * k + epsilon, y - 0.076 * k + epsilon],[x - 0.0996 * k - epsilon, y - 0.052 * k - epsilon]])
	          .stream(pointStream);

	      mayottePoint = mayotte
	          .translate([x + 0.117 * k, y - 0.064 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y - 0.076 * k + epsilon],[x + 0.1371 * k - epsilon, y - 0.052 * k - epsilon]])
	          .stream(pointStream);

	      reunionPoint = reunion
	          .translate([x + 0.116 * k, y - 0.0355 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y - 0.052 * k + epsilon],[x + 0.1371 * k - epsilon, y - 0.02 * k - epsilon]])
	          .stream(pointStream);

	      nouvelleCaledoniePoint = nouvelleCaledonie
	          .translate([x + 0.116 * k, y - 0.0048 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y - 0.02 * k + epsilon],[x + 0.1371 * k - epsilon, y + 0.012 * k - epsilon]])
	          .stream(pointStream);

	      wallisFutunaPoint = wallisFutuna
	          .translate([x + 0.116 * k, y + 0.022 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y + 0.012 * k + epsilon],[x + 0.1371 * k - epsilon, y + 0.033 * k - epsilon]])
	          .stream(pointStream);

	      polynesie2Point = polynesie2
	          .translate([x + 0.11 * k, y + 0.045 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y + 0.033 * k + epsilon],[x + 0.1371 * k - epsilon, y  + 0.06 * k - epsilon]])
	          .stream(pointStream);

	      polynesiePoint = polynesie
	          .translate([x + 0.115 * k, y + 0.075 * k])
	          .clipExtent([[x + 0.0967 * k + epsilon, y + 0.06 * k + epsilon],[x + 0.1371 * k - epsilon, y  + 0.0864 * k - epsilon]])
	          .stream(pointStream);


	      return reset();
	    };

	    conicConformalFrance.fitExtent = function(extent, object) {
	      return fitExtent(conicConformalFrance, extent, object);
	    };

	    conicConformalFrance.fitSize = function(size, object) {
	      return fitSize(conicConformalFrance, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return conicConformalFrance;
	    }

	    conicConformalFrance.drawCompositionBorders = function(context) {

	      /*
	      console.log("var ul, ur, ld, ll;");
	      var projs = [guyane, martinique, guadeloupe, saintBarthelemy, stPierreMiquelon, mayotte, reunion, nouvelleCaledonie, wallisFutuna, polynesie, polynesie2];
	      for (var i in projs){
	        var ul = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
	        var ur = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
	        var ld = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
	        var ll = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);

	        console.log("ul = europe(["+ul+"]);");
	        console.log("ur = europe(["+ur+"]);");
	        console.log("ld = europe(["+ld+"]);");
	        console.log("ll = europe(["+ll+"]);");

	        console.log("context.moveTo(ul[0], ul[1]);");
	        console.log("context.lineTo(ur[0], ur[1]);");
	        console.log("context.lineTo(ld[0], ld[1]);");
	        console.log("context.lineTo(ll[0], ll[1]);");
	        console.log("context.closePath();");

	      }*/

	      var ul, ur, ld, ll;
	      ul = europe([-7.938886725111036,43.7219460918835]);
	      ur = europe([-4.832080896458295,44.12930268549372]);
	      ld = europe([-4.205299743793263,40.98096346967365]);
	      ll = europe([-7.071796453126152,40.610037319181444]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([-8.42751373617692,45.32889452553031]);
	      ur = europe([-5.18599305777107,45.7566442062976]);
	      ld = europe([-4.832080905154431,44.129302726751426]);
	      ll = europe([-7.938886737126192,43.72194613263854]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([-9.012656899657046,47.127733821030176]);
	      ur = europe([-5.6105244772793155,47.579777861410626]);
	      ld = europe([-5.185993067168585,45.756644248170346]);
	      ll = europe([-8.427513749141811,45.32889456686326]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([-9.405747558985553,48.26506375557457]);
	      ur = europe([-5.896175018439575,48.733352850851624]);
	      ld = europe([-5.610524487556043,47.57977790393761]);
	      ll = europe([-9.012656913808351,47.127733862971255]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([-9.908436061346974,49.642448789505856]);
	      ur = europe([-6.262026716233124,50.131426841787174]);
	      ld = europe([-5.896175029331232,48.73335289377258]);
	      ll = europe([-9.40574757396393,48.26506379787767]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([11.996907706504462,50.16039028163579]);
	      ur = europe([15.649907879773343,49.68279246765253]);
	      ld = europe([15.156712840526632,48.30371557625831]);
	      ll = europe([11.64122661754411,48.761078240546816]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([11.641226606955788,48.7610781975889]);
	      ur = europe([15.156712825832164,48.30371553390465]);
	      ld = europe([14.549932166241172,46.4866532486199]);
	      ll = europe([11.204443787952183,46.91899233914248]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([11.204443778297161,46.918992296823646]);
	      ur = europe([14.549932152815039,46.486653206856396]);
	      ld = europe([13.994409796764009,44.695833444323256]);
	      ll = europe([10.805306599253848,45.105133870684924]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([10.805306590412085,45.10513382903308]);
	      ur = europe([13.99440978444733,44.695833403183606]);
	      ld = europe([13.654633799024392,43.53552468558152]);
	      ll = europe([10.561516803980956,43.930671459798624]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();

	      ul = europe([10.561516795617383,43.93067141859757]);
	      ur = europe([13.654633787361952,43.5355246448671]);
	      ld = europe([12.867691604239901,40.640701985019405]);
	      ll = europe([9.997809515987688,41.00288343254471]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();

	      ul = europe([10.8,42.4]);
	      ur = europe([12.8,42.13]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);

	    };
	    conicConformalFrance.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return conicConformalFrance.scale(2700);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$8(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Portugal, configured by default for 960×500.
	  function conicConformalEurope() {
	    var cache,
	        cacheStream,
	        europe = d3Geo.geoConicConformal().rotate([-10, -53]).parallels([0, 60]), europePoint,
	        guadeloupe = d3Geo.geoMercator().center([-61.46, 16.14]), guadeloupePoint,
	        guyane = d3Geo.geoMercator().center([-53.2, 3.9]), guyanePoint,
	        azores = d3Geo.geoConicConformal().rotate([27.8, -38.9]).parallels([0, 60]), azoresPoint,
	        azores2 = d3Geo.geoConicConformal().rotate([25.43, -37.398]).parallels([0, 60]), azores2Point,
	        azores3 = d3Geo.geoConicConformal().rotate([31.17, -39.539]).parallels([0, 60]), azores3Point,
	        madeira = d3Geo.geoConicConformal().rotate([17, -32.7]).parallels([0, 60]), madeiraPoint,
	        canaryIslands = d3Geo.geoConicConformal().rotate([16, -28.5]).parallels([0,60]), canaryIslandsPoint,
	        martinique = d3Geo.geoMercator().center([-61.03, 14.67]), martiniquePoint,
	        mayotte = d3Geo.geoMercator().center([45.16, -12.8]), mayottePoint,
	        reunion = d3Geo.geoMercator().center([55.52, -21.13]), reunionPoint,
	        malta = d3Geo.geoConicConformal().rotate([-14.4, -35.95]).parallels([0, 60]), maltaPoint,





	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	        /*
	        var europeBbox = [[-6.5, 51], [10, 41]];
	        var guyaneBbox = [[-54.5, 6.29], [-50.9, 1.48]];
	        */


	    function conicConformalEurope(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (europePoint.point(x, y), point) ||
	          (guyanePoint.point(x, y), point) ||
	          (martiniquePoint.point(x, y), point) ||
	          (guadeloupePoint.point(x, y), point) ||
	          (canaryIslandsPoint.point(x, y), point) ||
	          (madeiraPoint.point(x, y), point) ||
	          (mayottePoint.point(x, y), point) ||
	          (reunionPoint.point(x, y), point) ||
	          (maltaPoint.point(x, y), point) ||
	          (azoresPoint.point(x, y), point) ||
	          (azores2Point.point(x, y), point) ||
	          (azores3Point.point(x, y), point);
	    }

	    conicConformalEurope.invert = function(coordinates) {
	      var k = europe.scale(),
	          t = europe.translate(),
	          x = (coordinates[0] - (t[0] + 0.08 * k)) / k,
	          y = (coordinates[1] - t[1]) / k;

	          return (y >= -0.31 && y< -0.24 && x >= 0.14 && x < 0.24 ? guadeloupe
	              : y >= -0.24 && y< -0.17 && x >= 0.14 && x < 0.24 ? guyane
	              : y >= -0.17 && y< -0.12 && x >= 0.21 && x < 0.24 ? azores2
	              : y >= -0.17 && y< -0.14 && x >= 0.14 && x < 0.165 ? azores3
	              : y >= -0.17 && y< -0.1 && x >= 0.14 && x < 0.24 ? azores
	              : y >= -0.1 && y< -0.03 && x >= 0.14 && x < 0.24 ? madeira
	              : y >= -0.03 && y< 0.04 && x >= 0.14 && x < 0.24 ? canaryIslands
	              : y >= -0.31 && y< -0.24 && x >= 0.24 && x < 0.34 ? martinique
	              : y >= -0.24 && y< -0.17 && x >= 0.24 && x < 0.34 ? mayotte
	              : y >= -0.17 && y< -0.1 && x >= 0.24 && x < 0.34 ? reunion
	              : y >= -0.1 && y< -0.03 && x >= 0.24 && x < 0.34 ? malta
	              : europe).invert(coordinates);

	    };

	    conicConformalEurope.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$8([europe.stream(cacheStream = stream), guyane.stream(stream), martinique.stream(stream), guadeloupe.stream(stream), canaryIslands.stream(stream), madeira.stream(stream), mayotte.stream(stream), reunion.stream(stream), malta.stream(stream), azores.stream(stream), azores2.stream(stream), azores3.stream(stream)]);
	    };

	    conicConformalEurope.precision = function(_) {
	      if (!arguments.length) {return europe.precision();}
	      europe.precision(_);
	      guyane.precision(_);
	      martinique.precision(_);
	      guadeloupe.precision(_);
	      canaryIslands.precision(_);
	      madeira.precision(_);
	      mayotte.precision(_);
	      reunion.precision(_);
	      malta.precision(_);

	      azores.precision(_);
	      azores2.precision(_);
	      azores3.precision(_);

	      return reset();
	    };

	    conicConformalEurope.scale = function(_) {
	      if (!arguments.length) {return europe.scale();}
	      europe.scale(_);
	      guadeloupe.scale(_ * 3);
	      guyane.scale(_ * 0.8);
	      martinique.scale(_ * 3.5);
	      reunion.scale(_ * 2.7);
	      azores.scale(_ * 2);
	      azores2.scale(_ * 2);
	      azores3.scale(_ * 2);
	      madeira.scale(_ * 3);
	      canaryIslands.scale(_);

	      mayotte.scale(_ * 5.5);
	      malta.scale(_ * 6);



	      return conicConformalEurope.translate(europe.translate());
	    };

	    conicConformalEurope.translate = function(_) {
	      if (!arguments.length) {return europe.translate();}
	      var k = europe.scale(), x = +_[0], y = +_[1];

	      europePoint = europe
	          .translate([x - 0.08 * k, y])
	          .clipExtent([[x - 0.51 * k, y - 0.33 * k],[x + 0.5 * k, y + 0.33 * k]])
	          .stream(pointStream);

	      guadeloupePoint = guadeloupe
	          .translate([x + 0.19 * k, y - 0.275 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.31 * k + epsilon],[x + 0.24 * k - epsilon, y - 0.24 * k - epsilon]])
	          .stream(pointStream);

	      guyanePoint = guyane
	          .translate([x + 0.19 * k, y - 0.205 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.24 * k + epsilon],[x + 0.24 * k - epsilon, y - 0.17 * k - epsilon]])
	          .stream(pointStream);

	      azoresPoint = azores
	          .translate([x + 0.19 * k, y - 0.135 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.17 * k + epsilon],[x + 0.24 * k - epsilon, y - 0.1 * k - epsilon]])
	          .stream(pointStream);

	      azores2Point = azores2
	          .translate([x + 0.225 * k, y - 0.147 * k])
	          .clipExtent([[x + 0.21 * k + epsilon, y - 0.17 * k + epsilon],[x + 0.24 * k - epsilon, y - 0.12 * k - epsilon]])
	          .stream(pointStream);

	      azores3Point = azores3
	          .translate([x + 0.153 * k, y - 0.15 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.17 * k + epsilon],[x + 0.165 * k - epsilon, y - 0.14 * k - epsilon]])
	          .stream(pointStream);

	      madeiraPoint = madeira
	          .translate([x + 0.19 * k, y - 0.065 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.1 * k + epsilon],[x + 0.24 * k - epsilon, y - 0.03 * k - epsilon]])
	          .stream(pointStream);

	      canaryIslandsPoint = canaryIslands
	          .translate([x + 0.19 * k, y + 0.005 * k])
	          .clipExtent([[x + 0.14 * k + epsilon, y - 0.03 * k + epsilon],[x + 0.24 * k - epsilon, y + 0.04 * k - epsilon]])
	          .stream(pointStream);

	      martiniquePoint = martinique
	          .translate([x + 0.29 * k, y - 0.275 * k])
	          .clipExtent([[x + 0.24 * k + epsilon, y - 0.31 * k + epsilon],[x + 0.34 * k - epsilon, y - 0.24 * k - epsilon]])
	          .stream(pointStream);

	      mayottePoint = mayotte
	          .translate([x + 0.29 * k, y - 0.205 * k])
	          .clipExtent([[x + 0.24 * k + epsilon, y - 0.24 * k + epsilon],[x + 0.34 * k - epsilon, y - 0.17 * k - epsilon]])
	          .stream(pointStream);

	      reunionPoint = reunion
	          .translate([x + 0.29 * k, y - 0.135 * k])
	          .clipExtent([[x + 0.24 * k + epsilon, y - 0.17 * k + epsilon],[x + 0.34 * k - epsilon, y - 0.1 * k - epsilon]])
	          .stream(pointStream);

	      maltaPoint = malta
	          .translate([x + 0.29 * k, y - 0.065 * k])
	          .clipExtent([[x + 0.24 * k + epsilon, y - 0.1 * k + epsilon],[x + 0.34 * k - epsilon, y - 0.03 * k - epsilon]])
	          .stream(pointStream);



	      return reset();
	    };

	    conicConformalEurope.fitExtent = function(extent, object) {
	      return fitExtent(conicConformalEurope, extent, object);
	    };

	    conicConformalEurope.fitSize = function(size, object) {
	      return fitSize(conicConformalEurope, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return conicConformalEurope;
	    }

	    conicConformalEurope.drawCompositionBorders = function(context) {

	      /*
	      console.log("var ul, ur, ld, ll;");
	      var projs = [guyane, martinique, guadeloupe, canaryIslands, madeira, mayotte, reunion, malta, azores, azores2, azores3];
	      for (var i in projs){
	        var ul = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
	        var ur = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
	        var ld = europe.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
	        var ll = europe.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);

	        console.log("ul = europe(["+ul+"]);");
	        console.log("ur = europe(["+ur+"]);");
	        console.log("ld = europe(["+ld+"]);");
	        console.log("ll = europe(["+ll+"]);");

	        console.log("context.moveTo(ul[0], ul[1]);");
	        console.log("context.lineTo(ur[0], ur[1]);");
	        console.log("context.lineTo(ld[0], ld[1]);");
	        console.log("context.lineTo(ll[0], ll[1]);");
	        console.log("context.closePath();");

	      }*/

	      var ul, ur, ld, ll;
	      ul = europe([42.45755610828648,63.343658547914934]);
	      ur = europe([52.65837266667029,59.35045080290929]);
	      ld = europe([47.19754502247785,56.12653496548117]);
	      ll = europe([37.673034273363044,59.61638268506111]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([59.41110754003403,62.35069727399336]);
	      ur = europe([66.75050228640794,57.11797303636038]);
	      ld = europe([60.236065725110436,54.63331433818992]);
	      ll = europe([52.65837313153311,59.350450804599355]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([48.81091130080243,66.93353402634641]);
	      ur = europe([59.41110730654679,62.35069740653086]);
	      ld = europe([52.6583728974441,59.3504509222445]);
	      ll = europe([42.45755631675751,63.34365868805821]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([31.054198418446475,52.1080673766184]);
	      ur = europe([39.09869284884117,49.400700047190554]);
	      ld = europe([36.0580811499175,46.02944174908498]);
	      ll = europe([28.690508588835726,48.433126979386415]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([33.977877745912025,55.849945501331]);
	      ur = europe([42.75328432167726,52.78455122462353]);
	      ld = europe([39.09869297540224,49.400700176148625]);
	      ll = europe([31.05419851807008,52.10806751810923]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([52.658372900759296,59.35045068526415]);
	      ur = europe([60.23606549583304,54.63331423800264]);
	      ld = europe([54.6756370953122,51.892298789399455]);
	      ll = europe([47.19754524788189,56.126534861222794]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([47.19754506082455,56.126534735591456]);
	      ur = europe([54.675636900123514,51.892298681337095]);
	      ld = europe([49.94448648951486,48.98775484983285]);
	      ll = europe([42.75328468716108,52.78455126060818]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([42.75328453416769,52.78455113209101]);
	      ur = europe([49.94448632339758,48.98775473706457]);
	      ld = europe([45.912339990394315,45.99361784987003]);
	      ll = europe([39.09869317356607,49.40070009378711]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([37.673034114296634,59.61638254183119]);
	      ur = europe([47.197544835420544,56.126534839849846]);
	      ld = europe([42.75328447467064,52.78455135314068]);
	      ll = europe([33.977877870363905,55.849945644671145]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([44.56748486446032,57.26489367845818]);
	      ld = europe([43.9335791193588,53.746540942601726]);
	      ll = europe([43,56]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = europe([37.673034114296634,59.61638254183119]);
	      ur = europe([40.25902691953466,58.83002044222639]);
	      ld = europe([38.458270492742024,57.26232178028002]);
	      ll = europe([35.97754948030156,58.00266637992386]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();



	    };
	    conicConformalEurope.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return conicConformalEurope.scale(750);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$9(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Malaysia, configured by default for 960×500.
	  function mercatorMalaysia() {
	    var cache,
	        cacheStream,

	        peninsular = d3Geo.geoMercator().center([105.25, 4.00]), peninsularPoint,
	        borneo = d3Geo.geoMercator().center([118.65,2.86]), borneoPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};


	    function mercatorMalaysia(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (peninsularPoint.point(x, y), point) ||
	          (borneoPoint.point(x, y), point);
	    }

	    mercatorMalaysia.invert = function(coordinates) {
	      var k = peninsular.scale(),
	          t = peninsular.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;

	          return (y >=  -0.0521 && y < 0.0229 && x >= -0.0111 && x < 0.1000 ? borneo
	              : peninsular).invert(coordinates);
	    };

	    mercatorMalaysia.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$9([peninsular.stream(cacheStream = stream), borneo.stream(stream)]);
	    };

	    mercatorMalaysia.precision = function(_) {
	      if (!arguments.length) {return peninsular.precision();}
	      peninsular.precision(_);
	      borneo.precision(_);
	      return reset();
	    };

	    mercatorMalaysia.scale = function(_) {
	      if (!arguments.length) {return peninsular.scale();}
	      peninsular.scale(_);
	      borneo.scale(_ * 0.615);
	      return mercatorMalaysia.translate(peninsular.translate());
	    };

	    mercatorMalaysia.translate = function(_) {
	      if (!arguments.length) {return peninsular.translate();}
	      var k = peninsular.scale(), x = +_[0], y = +_[1];

	      peninsularPoint = peninsular
	          .translate(_)
	          .clipExtent([[x - 0.1100 * k, y - 0.0521 * k],[x - 0.0111 * k, y + 0.0521 * k]])
	          .stream(pointStream);

	      borneoPoint = borneo
	          .translate([x + 0.09000 * k, y - 0.00 * k])
	          .clipExtent([[x - 0.0111 * k + epsilon, y -0.0521 * k + epsilon],[x + 0.1000 * k - epsilon, y + 0.024 * k - epsilon]])
	          .stream(pointStream);

	      return reset();
	    };

	    mercatorMalaysia.fitExtent = function(extent, object) {
	      return fitExtent(mercatorMalaysia, extent, object);
	    };

	    mercatorMalaysia.fitSize = function(size, object) {
	      return fitSize(mercatorMalaysia, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return mercatorMalaysia;
	    }

	    mercatorMalaysia.drawCompositionBorders = function(context) {
	    
	      var llbor = peninsular([106.3214, 2.0228]);
	  		var lmbor = peninsular([105.1843, 2.3761]);
	  		var lrbor = peninsular([104.2151, 3.3618]);
	  		var llrbor = peninsular([104.2150, 4.5651]);

	      context.moveTo(llbor[0], llbor[1]);
	      context.lineTo(lmbor[0], lmbor[1]);
	      context.lineTo(lrbor[0], lrbor[1]);
	      context.lineTo(llrbor[0], llrbor[1]);

	    };
	    mercatorMalaysia.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return mercatorMalaysia.scale(4800);
	  }

	  // The projections must have mutually exclusive clip regions on the sphere,
	  // as this will avoid emitting interleaving lines and polygons.
	  function multiplex$10(streams) {
	    var n = streams.length;
	    return {
	      point: function(x, y) { var i = -1; while (++i < n) {streams[i].point(x, y); }},
	      sphere: function() { var i = -1; while (++i < n) {streams[i].sphere(); }},
	      lineStart: function() { var i = -1; while (++i < n) {streams[i].lineStart(); }},
	      lineEnd: function() { var i = -1; while (++i < n) {streams[i].lineEnd(); }},
	      polygonStart: function() { var i = -1; while (++i < n) {streams[i].polygonStart(); }},
	      polygonEnd: function() { var i = -1; while (++i < n) {streams[i].polygonEnd(); }}
	    };
	  }

	  // A composite projection for Equatorial Guinea, configured by default for 960×500.
	  function mercatorEquatorialGuinea() {
	    var cache,
	        cacheStream,
	        continent = d3Geo.geoMercator().rotate([-9.5, -1.5]), continentPoint,
	        bioko = d3Geo.geoMercator().rotate([-8.6, -3.5]), biokoPoint,
	        annobon = d3Geo.geoMercator().rotate([-5.6, 1.45]), annobonPoint,

	        point, pointStream = {point: function(x, y) { point = [x, y]; }};

	    function mercatorEquatorialGuinea(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      return point = null,
	          (continentPoint.point(x, y), point) ||
	          (biokoPoint.point(x, y), point) ||
	          (annobonPoint.point(x, y), point);
	    }

	    mercatorEquatorialGuinea.invert = function(coordinates) {
	      var k = continent.scale(),
	          t = continent.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;
	          return (y >= -0.02 && y< 0 && x >= -0.038 && x < -0.005 ? bioko
	              : y >= 0 && y< 0.02 && x >= -0.038 && x < -0.005 ? annobon
	              : continent).invert(coordinates);
	    };

	    mercatorEquatorialGuinea.stream = function(stream) {
	      return cache && cacheStream === stream ? cache : cache = multiplex$10([continent.stream(cacheStream = stream), bioko.stream(stream), annobon.stream(stream)]);
	    };

	    mercatorEquatorialGuinea.precision = function(_) {
	      if (!arguments.length) {return continent.precision();}
	      continent.precision(_);
	      bioko.precision(_);
	      annobon.precision(_);
	      return reset();
	    };

	    mercatorEquatorialGuinea.scale = function(_) {
	      if (!arguments.length) {return continent.scale();}
	      continent.scale(_);
	      bioko.scale(_* 1.5);
	      annobon.scale(_* 4);
	      return mercatorEquatorialGuinea.translate(continent.translate());
	    };

	    mercatorEquatorialGuinea.translate = function(_) {
	      if (!arguments.length) {return continent.translate();}
	      var k = continent.scale(), x = +_[0], y = +_[1];
	      continentPoint = continent
	          .translate(_)
	          .clipExtent([[x - 0.005 * k, y - 0.02 * k],[x + 0.038 * k, y +0.02 * k]])
	          .stream(pointStream);

	      biokoPoint = bioko
	          .translate([x - 0.025 * k, y - 0.01 * k])
	          .clipExtent([[x - 0.038 * k + epsilon, y - 0.02 * k + epsilon],[x - 0.005 * k - epsilon, y + 0 * k - epsilon]])
	          .stream(pointStream);

	      annobonPoint = annobon
	          .translate([x - 0.025 * k, y + 0.01 * k])
	          .clipExtent([[x - 0.038 * k + epsilon, y - 0 * k + epsilon],[x - 0.005 * k - epsilon, y + 0.02 * k - epsilon]])
	          .stream(pointStream);


	      return reset();
	    };

	    mercatorEquatorialGuinea.fitExtent = function(extent, object) {
	      return fitExtent(mercatorEquatorialGuinea, extent, object);
	    };

	    mercatorEquatorialGuinea.fitSize = function(size, object) {
	      return fitSize(mercatorEquatorialGuinea, size, object);
	    };

	    function reset() {
	      cache = cacheStream = null;
	      return mercatorEquatorialGuinea;
	    }

	    mercatorEquatorialGuinea.drawCompositionBorders = function(context) {
	      /*
	      console.log("var ul, ur, ld, ll;");
	      var projs = [continent, bioko, annobon];
	      for (var i in projs){
	        var ul = continent.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[0][1]]);
	        var ur = continent.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[0][1]]);
	        var ld = continent.invert([projs[i].clipExtent()[1][0], projs[i].clipExtent()[1][1]]);
	        var ll = continent.invert([projs[i].clipExtent()[0][0], projs[i].clipExtent()[1][1]]);

	        console.log("ul = continent(["+ul+"]);");
	        console.log("ur = continent(["+ur+"]);");
	        console.log("ld = continent(["+ld+"]);");
	        console.log("ll = continent(["+ll+"]);");

	        console.log("context.moveTo(ul[0], ul[1]);");
	        console.log("context.lineTo(ur[0], ur[1]);");
	        console.log("context.lineTo(ld[0], ld[1]);");
	        console.log("context.lineTo(ll[0], ll[1]);");
	        console.log("context.closePath();");

	      }*/

	      var ul, ur, ld, ll;
	      ul = continent([9.21327272751682,2.645820439454123]);
	      ur = continent([11.679126293239872,2.644755519268689]);
	      ld = continent([11.676845389029227,0.35307824637606433]);
	      ll = continent([9.213572917774014,0.35414205204417754]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = continent([7.320873711543669,2.64475551449975]);
	      ur = continent([9.213272722738658,2.645820434679803]);
	      ld = continent([9.213422896480349,1.4999812505283054]);
	      ll = continent([7.322014760520787,1.4989168878985566]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();
	      ul = continent([7.3220147605302905,1.4989168783492766]);
	      ur = continent([9.213422896481598,1.499981240979021]);
	      ld = continent([9.213572912999604,0.354142056817247]);
	      ll = continent([7.323154615739809,0.353078251154504]);
	      context.moveTo(ul[0], ul[1]);
	      context.lineTo(ur[0], ur[1]);
	      context.lineTo(ld[0], ld[1]);
	      context.lineTo(ll[0], ll[1]);
	      context.closePath();

	    };
	    mercatorEquatorialGuinea.getCompositionBorders = function() {
	      var context = d3Path.path();
	      this.drawCompositionBorders(context);
	      return context.toString();
	    };

	    return mercatorEquatorialGuinea.scale(12000);
	  }

	  exports.geoAlbersUsa = albersUsa;
	  exports.geoAlbersUsaTerritories = albersUsaTerritories;
	  exports.geoConicConformalSpain = conicConformalSpain;
	  exports.geoConicConformalPortugal = conicConformalPortugal;
	  exports.geoMercatorEcuador = mercatorEcuador;
	  exports.geoTransverseMercatorChile = transverseMercatorChile;
	  exports.geoConicEquidistantJapan = conicEquidistantJapan;
	  exports.geoConicConformalFrance = conicConformalFrance;
	  exports.geoConicConformalEurope = conicConformalEurope;
	  exports.geoMercatorMalaysia = mercatorMalaysia;
	  exports.geoMercatorEquatorialGuinea = mercatorEquatorialGuinea;

	  Object.defineProperty(exports, '__esModule', { value: true });

	}));

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-dsv/ v1.0.10 Copyright 2018 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var EOL = {},
	    EOF = {},
	    QUOTE = 34,
	    NEWLINE = 10,
	    RETURN = 13;

	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}

	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}

	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];

	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });

	  return columns;
	}

	function dsv(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      DELIMITER = delimiter.charCodeAt(0);

	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns || [];
	    return rows;
	  }

	  function parseRows(text, f) {
	    var rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // current line number
	        t, // current token
	        eof = N <= 0, // current token followed by EOF?
	        eol = false; // current token followed by EOL?

	    // Strip the trailing newline.
	    if (text.charCodeAt(N - 1) === NEWLINE) --N;
	    if (text.charCodeAt(N - 1) === RETURN) --N;

	    function token() {
	      if (eof) return EOF;
	      if (eol) return eol = false, EOL;

	      // Unescape quotes.
	      var i, j = I, c;
	      if (text.charCodeAt(j) === QUOTE) {
	        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
	        if ((i = I) >= N) eof = true;
	        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
	      }

	      // Find next delimiter or newline.
	      while (I < N) {
	        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        else if (c !== DELIMITER) continue;
	        return text.slice(j, i);
	      }

	      // Return last token before EOF.
	      return eof = true, text.slice(j, N);
	    }

	    while ((t = token()) !== EOF) {
	      var row = [];
	      while (t !== EOL && t !== EOF) row.push(t), t = token();
	      if (f && (row = f(row, n++)) == null) continue;
	      rows.push(row);
	    }

	    return rows;
	  }

	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }

	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }

	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }

	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\""
	        : text;
	  }

	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	}

	var csv = dsv(",");

	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;

	var tsv = dsv("\t");

	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;

	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-geo/ Version 1.2.4. Copyright 2016 Mike Bostock.
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(23)) :
	  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
	  (factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Array) { 'use strict';

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	function adder() {
	  return new Adder;
	}

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add(temp, y, this.t);
	    add(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var quarterPi = pi / 4;
	var tau = pi * 2;

	var degrees = 180 / pi;
	var radians = pi / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;
	var log = Math.log;
	var pow = Math.pow;
	var sin = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin(x / 2)) * x;
	}

	function noop() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(feature, stream) {
	    streamGeometry(feature.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	function geoStream(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	}

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;
	var areaStream = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop;
	  },
	  sphere: function() {
	    areaSum.add(tau);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos(phi),
	      sinPhi = sin(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos(adLambda),
	      v = k * sdLambda * sin(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	function area(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	}

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
	  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range$1;
	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon) phi1 = 90;
	    else if (deltaSum < -epsilon) phi0 = -90;
	    range$1[0] = lambda0$1, range$1[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees * sign,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
	      phii = inflection[1] * degrees;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
	      phii = -inflection[1] * degrees;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    boundsPoint(lambda, phi);
	  }
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range, x) {
	  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	}

	function bounds(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range$1 = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	}

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0;
	// previous point

	var centroidStream = {
	  sphere: noop,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      u = x0 * x + y0 * y + z0 * z,
	      v = m && -acos(u) / m, // area weight
	      w = atan2(m, u); // line weight
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroid(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function compose(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	}

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos(deltaPhi),
	      sinDeltaPhi = sin(deltaPhi),
	      cosDeltaGamma = cos(deltaGamma),
	      sinDeltaGamma = sin(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	function rotation(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  };

	  return forward;
	}

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos(radius),
	      sinRadius = sin(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
	}

	function circle() {
	  var center = constant([0, 0]),
	      radius = constant(90),
	      precision = constant(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees, x[1] *= degrees;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
	  };

	  return circle;
	}

	function clipBuffer() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	}

	function clipLine(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	}

	function pointEqual(a, b) {
	  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
	}

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	}

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;
	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipExtent(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = d3Array.merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	function extent() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	}

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;
	var lengthStream = {
	  sphere: noop,
	  point: noop,
	  lineStart: lengthLineStart,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin(phi),
	      cosPhi = cos(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos(delta),
	      sinDelta = sin(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	function length(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	}

	var coordinates = [null, null];
	var object = {type: "LineString", coordinates: coordinates};
	function distance(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length(object);
	}

	function graticuleX(y0, y1, dy) {
	  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
	        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
	      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
	}

	function interpolate(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos(y0),
	      sy0 = sin(y0),
	      cy1 = cos(y1),
	      sy1 = sin(y1),
	      kx0 = cy0 * cos(x0),
	      ky0 = cy0 * sin(x0),
	      kx1 = cy1 * cos(x1),
	      ky1 = cy1 * sin(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin(d);

	  var interpolate = d ? function(t) {
	    var B = sin(t *= d) / k,
	        A = sin(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees,
	      atan2(z, sqrt(x * x + y * y)) * degrees
	    ];
	  } : function() {
	    return [x0 * degrees, y0 * degrees];
	  };

	  interpolate.distance = d;

	  return interpolate;
	}

	function identity(x) {
	  return x;
	}

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;
	var areaStream$1 = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;
	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;
	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau);
	        break;
	      }
	    }
	  },
	  result: noop
	};

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    return this._circle = circle$1(_), this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	function index() {
	  var pointRadius = 4.5,
	      projection,
	      projectionStream,
	      context,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = (projection = _) == null ? identity : _.stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = (context = _) == null ? new PathString : new PathContext(_);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(null).context(null);
	}

	var sum = adder();

	function polygonContains(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin(lambda), -cos(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum.reset();

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin(phi0),
	        cosPhi0 = cos(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin(phi1),
	          cosPhi1 = cos(phi1),
	          delta = lambda1 - lambda0,
	          sign = delta >= 0 ? 1 : -1,
	          absDelta = sign * delta,
	          antimeridian = absDelta > pi,
	          k = sinPhi0 * sinPhi1;

	      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
	      angle += antimeridian ? delta + sign * tau : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
	}

	function clip(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = d3Array.merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	}

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi, -halfPi]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi : -pi,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi) < epsilon) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon
	      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
	          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi;
	    stream.point(-pi, phi);
	    stream.point(0, phi);
	    stream.point(pi, phi);
	    stream.point(pi, 0);
	    stream.point(pi, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi, -phi);
	    stream.point(-pi, 0);
	    stream.point(-pi, phi);
	  } else if (abs(from[0] - to[0]) > epsilon) {
	    var lambda = from[0] < to[0] ? pi : -pi;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	function clipCircle(radius, delta) {
	  var cr = cos(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos(lambda) * cos(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon;
	            point1[1] += epsilon;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi) < epsilon,
	        meridian = polar || delta < epsilon;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
	}

	function transform(prototype) {
	  return {
	    stream: transform$1(prototype)
	  };
	}

	function transform$1(prototype) {
	  function T() {}
	  var p = T.prototype = Object.create(Transform.prototype);
	  for (var k in prototype) p[k] = prototype[k];
	  return function(stream) {
	    var t = new T;
	    t.stream = stream;
	    return t;
	  };
	}

	function Transform() {}

	Transform.prototype = {
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fit(project, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = project.clipExtent && project.clipExtent();

	  project
	      .scale(150)
	      .translate([0, 0]);

	  if (clip != null) project.clipExtent(null);

	  geoStream(object, project.stream(boundsStream$1));

	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

	  if (clip != null) project.clipExtent(clip);

	  return project
	      .scale(k * 150)
	      .translate([x, y]);
	}

	function fitSize(project) {
	  return function(size, object) {
	    return fit(project, [[0, 0], size], object);
	  };
	}

	function fitExtent(project) {
	  return function(extent, object) {
	    return fit(project, extent, object);
	  };
	}

	var maxDepth = 16;
	var cosMinDistance = cos(30 * radians);
	// cos(minimum angular distance)

	function resample(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	}

	function resampleNone(project) {
	  return transform$1({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transform$1({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;

	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }

	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees, point[1] * degrees];
	  }

	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = fitExtent(projection);

	  projection.fitSize = fitSize(projection);

	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
	  };

	  return p;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin(y0),
	      n = (sy0 + sin(y1)) / 2,
	      c = 1 + sy0 * (2 * n - sy0),
	      r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin(y)) / n;
	    return [r * sin(x *= n), r0 - r * cos(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, r0y) / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	function conicEqualArea() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	}

	function albers() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	}

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	function albersUsa() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return albersUsa;
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    return albersUsa;
	  };

	  albersUsa.fitExtent = fitExtent(albersUsa);

	  albersUsa.fitSize = fitSize(albersUsa);

	  return albersUsa.scale(1070);
	}

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos(x),
	        cy = cos(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin(x),
	      k * sin(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin(c),
	        cc = cos(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	function azimuthalEqualArea() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	}

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	function azimuthalEquidistant() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	}

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi];
	};

	function mercator() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau);
	}

	function mercatorProjection(project) {
	  var m = projection(project),
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      clipAuto;

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
	  };

	  m.clipExtent = function(_) {
	    if (!arguments.length) return clipAuto ? null : clipExtent();
	    if (clipAuto = _ == null) {
	      var k = pi * scale(),
	          t = translate();
	      _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];
	    }
	    clipExtent(_);
	    return m;
	  };

	  return m.clipExtent(null);
	}

	function tany(y) {
	  return tan((halfPi + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
	    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
	    var r = f / pow(tany(y), n);
	    return [r * sin(n * x), f - r * cos(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, fy) / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];
	  };

	  return project;
	}

	function conicConformal() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	}

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	function equirectangular() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	}

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin(nx), g - gy * cos(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, gy) / n, g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	function conicEquidistant() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	}

	function gnomonicRaw(x, y) {
	  var cy = cos(y), k = cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	function gnomonic() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	}

	function orthographicRaw(x, y) {
	  return [cos(y) * sin(x), sin(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	function orthographic() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon);
	}

	function stereographicRaw(x, y) {
	  var cy = cos(y), k = 1 + cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	function stereographic() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	}

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi];
	};

	function transverseMercator() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	}

	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoInterpolate = interpolate;
	exports.geoLength = length;
	exports.geoPath = index;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(23)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, function (exports,d3Array) { 'use strict';

		// Main render method
		function renderHexJSON (hexjson, width, height) {
			// Get the layout
			var layout = hexjson.layout;

			// Get the hex objects as an array
			var hexes = [];
			var hexRadius = 0;

			Object.keys(hexjson.hexes).forEach(function (key) {
				hexjson.hexes[key].key = key;
				hexes.push(hexjson.hexes[key]);
			});

			// Calculate the number of rows and columns
			var qmax = d3Array.max(hexes, function (d) { return +d.q }),
				qmin = d3Array.min(hexes, function (d) { return +d.q }),
				rmax = d3Array.max(hexes, function (d) { return +d.r }),
				rmin = d3Array.min(hexes, function (d) { return +d.r });

			var qnum = qmax - qmin + 1,
				rnum = rmax - rmin + 1;

			// Calculate maximum radius the hexagons can have to fit the svg
			if (layout === "odd-r" || layout === "even-r") {
				hexRadius = d3Array.min([(width) / ((qnum + 0.5) * Math.sqrt(3)),
					height / ((rnum + 1 / 3) * 1.5)]);
			} else {
				hexRadius = d3Array.min([(height) / ((rnum + 0.5) * Math.sqrt(3)),
					width / ((qnum + 1 / 3) * 1.5)]);
			}

			// Calculate the hexagon width
			var hexWidth = hexRadius * Math.sqrt(3);

			// Get the vertices and points for this layout
			var vertices = getVertices(layout, hexWidth, hexRadius);
			var points = getPoints(vertices);

			// Calculate the values needed to render each hex and add to hexes
			hexes.forEach(function (hex) {
				// Calculate the absolute co-ordinates of each hex
				hex.qc = hex.q - qmin;
				hex.rc = rmax - hex.r;

				// Calculate the x and y position of each hex for this svg
				hex.x = getX(hex, layout, hexWidth, hexRadius);
				hex.y = getY(hex, layout, hexWidth, hexRadius);

				// Add the vertex positions and points relative to x and y
				hex.vertices = vertices;
				hex.points = points;
			});

			return hexes;
		}

		// Get the x position for a hex
		function getX (hex, layout, hexWidth, hexRadius) {
			var x = 0,
				xOffset = 0;

			switch (layout) {
				case "odd-r":
					xOffset = (hex.rc % 2 === 1) ? hexWidth : (hexWidth / 2);
					x = (hex.qc * hexWidth) + xOffset;
					break;

				case "even-r":
					xOffset = (hex.rc % 2 === 0) ? hexWidth : (hexWidth / 2);
					x = (hex.qc * hexWidth) + xOffset;
					break;

				case "odd-q":
				case "even-q":
					x = (hex.qc * hexRadius * 1.5) + hexRadius;
					break;
			}

			return x;
		}

		// Get the y position for a hex
		function getY (hex, layout, hexWidth, hexRadius) {
			var y = 0,
				yOffset = 0;

			switch (layout) {
				case "odd-r":
				case "even-r":
					y = (hex.rc * hexRadius * 1.5) + hexRadius;
					break;

				case "odd-q":
					yOffset = (hex.qc % 2 === 1) ? hexWidth : (hexWidth / 2);
					y = (hex.rc * hexWidth) + yOffset;
					break;

				case "even-q":
					yOffset = (hex.qc % 2 === 0) ? hexWidth : (hexWidth / 2);
					y = (hex.rc * hexWidth) + yOffset;
					break;
			}

			return y;
		}

		// Get the positions of the vertices for the hex:
		// - Row layouts are ordered from the topmost vertex clockwise
		// - Column layouts are ordered from the leftmost vertex clockwise
		function getVertices (layout, hexWidth, hexRadius) {
			var vertices = [];

			switch (layout) {
				case "odd-r":
				case "even-r":

					vertices.push({x: 0, y: (0 - hexRadius)});
					vertices.push({x: (0 + hexWidth * 0.5), y: (0 - 0.5 * hexRadius)});
					vertices.push({x: (0 + hexWidth * 0.5), y: (0 + 0.5 * hexRadius)});
					vertices.push({x: 0, y: (0 + hexRadius)});
					vertices.push({x: (0 - hexWidth * 0.5), y: (0 + 0.5 * hexRadius)});
					vertices.push({x: (0 - hexWidth * 0.5), y: (0 - 0.5 * hexRadius)});
					break;

				case "odd-q":
				case "even-q":

					vertices.push({x: (0 - hexRadius), y: 0});
					vertices.push({x: (0 - 0.5 * hexRadius), y: (0 - hexWidth * 0.5)});
					vertices.push({x: (0 + 0.5 * hexRadius), y: (0 - hexWidth * 0.5)});
					vertices.push({x: (0 + hexRadius), y: 0});
					vertices.push({x: (0 + 0.5 * hexRadius), y: (0 + hexWidth * 0.5)});
					vertices.push({x: (0 - 0.5 * hexRadius), y: (0 + hexWidth * 0.5)});
					break;
			}

			return vertices;
		}

		// Get the points attribute for a polygon with these vertices
		function getPoints (vertices) {
			var points = "";
			vertices.forEach(function (v) { points += v.x + "," + v.y + " " });
			return points.substring(0, points.length - 1);
		}

		// Creates a hexjson grid with the layout and dimensions of the given hexjson
		function getGridForHexJSON (hexjson) {
			// Create a new HexJSON object for the grid
			var grid = {};
			grid.layout = hexjson.layout;
			grid.hexes = {};

			// Get the hex objects from the hexjson as an array
			var hexes = [];

			Object.keys(hexjson.hexes).forEach(function (key) {
				hexes.push(hexjson.hexes[key]);
			});

			// Calculate the number of rows and columns in the grid
			var qmax = d3Array.max(hexes, function (d) { return +d.q }),
				qmin = d3Array.min(hexes, function (d) { return +d.q }),
				rmax = d3Array.max(hexes, function (d) { return +d.r }),
				rmin = d3Array.min(hexes, function (d) { return +d.r });

			// Create the hexjson grid
			var i, j, fkey;
			for (i = qmin; i <= qmax; i++) {
				for (j = rmin; j <= rmax; j++) {
					fkey = "Q" + i + "R" + j;
					grid.hexes[fkey] = {q: i, r: j};
				}
			}

			return grid;
		}

		exports.renderHexJSON = renderHexJSON;
		exports.getGridForHexJSON = getGridForHexJSON;

		Object.defineProperty(exports, '__esModule', { value: true });

	}));

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/d3/d3-sankey Version 0.7.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(23), __webpack_require__(164), __webpack_require__(170)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-collection', 'd3-shape'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Array,d3Collection,d3Shape) { 'use strict';

	function targetDepth(d) {
	  return d.target.depth;
	}

	function left(node) {
	  return node.depth;
	}

	function right(node, n) {
	  return n - 1 - node.height;
	}

	function justify(node, n) {
	  return node.sourceLinks.length ? node.depth : n - 1;
	}

	function center(node) {
	  return node.targetLinks.length ? node.depth
	      : node.sourceLinks.length ? d3Array.min(node.sourceLinks, targetDepth) - 1
	      : 0;
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function ascendingSourceBreadth(a, b) {
	  return ascendingBreadth(a.source, b.source) || a.index - b.index;
	}

	function ascendingTargetBreadth(a, b) {
	  return ascendingBreadth(a.target, b.target) || a.index - b.index;
	}

	function ascendingBreadth(a, b) {
	  return a.y0 - b.y0;
	}

	function value(d) {
	  return d.value;
	}

	function nodeCenter(node) {
	  return (node.y0 + node.y1) / 2;
	}

	function weightedSource(link) {
	  return nodeCenter(link.source) * link.value;
	}

	function weightedTarget(link) {
	  return nodeCenter(link.target) * link.value;
	}

	function defaultId(d) {
	  return d.index;
	}

	function defaultNodes(graph) {
	  return graph.nodes;
	}

	function defaultLinks(graph) {
	  return graph.links;
	}

	function find(nodeById, id) {
	  var node = nodeById.get(id);
	  if (!node) throw new Error("missing: " + id);
	  return node;
	}

	var sankey = function() {
	  var x0 = 0, y0 = 0, x1 = 1, y1 = 1, // extent
	      dx = 24, // nodeWidth
	      py = 8, // nodePadding
	      id = defaultId,
	      align = justify,
	      nodes = defaultNodes,
	      links = defaultLinks,
	      iterations = 32;

	  function sankey() {
	    var graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};
	    computeNodeLinks(graph);
	    computeNodeValues(graph);
	    computeNodeDepths(graph);
	    computeNodeBreadths(graph, iterations);
	    computeLinkBreadths(graph);
	    return graph;
	  }

	  sankey.update = function(graph) {
	    computeLinkBreadths(graph);
	    return graph;
	  };

	  sankey.nodeId = function(_) {
	    return arguments.length ? (id = typeof _ === "function" ? _ : constant(_), sankey) : id;
	  };

	  sankey.nodeAlign = function(_) {
	    return arguments.length ? (align = typeof _ === "function" ? _ : constant(_), sankey) : align;
	  };

	  sankey.nodeWidth = function(_) {
	    return arguments.length ? (dx = +_, sankey) : dx;
	  };

	  sankey.nodePadding = function(_) {
	    return arguments.length ? (py = +_, sankey) : py;
	  };

	  sankey.nodes = function(_) {
	    return arguments.length ? (nodes = typeof _ === "function" ? _ : constant(_), sankey) : nodes;
	  };

	  sankey.links = function(_) {
	    return arguments.length ? (links = typeof _ === "function" ? _ : constant(_), sankey) : links;
	  };

	  sankey.size = function(_) {
	    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];
	  };

	  sankey.extent = function(_) {
	    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];
	  };

	  sankey.iterations = function(_) {
	    return arguments.length ? (iterations = +_, sankey) : iterations;
	  };

	  // Populate the sourceLinks and targetLinks for each node.
	  // Also, if the source and target are not objects, assume they are indices.
	  function computeNodeLinks(graph) {
	    graph.nodes.forEach(function(node, i) {
	      node.index = i;
	      node.sourceLinks = [];
	      node.targetLinks = [];
	    });
	    var nodeById = d3Collection.map(graph.nodes, id);
	    graph.links.forEach(function(link, i) {
	      link.index = i;
	      var source = link.source, target = link.target;
	      if (typeof source !== "object") source = link.source = find(nodeById, source);
	      if (typeof target !== "object") target = link.target = find(nodeById, target);
	      source.sourceLinks.push(link);
	      target.targetLinks.push(link);
	    });
	  }

	  // Compute the value (size) of each node by summing the associated links.
	  function computeNodeValues(graph) {
	    graph.nodes.forEach(function(node) {
	      node.value = Math.max(
	        d3Array.sum(node.sourceLinks, value),
	        d3Array.sum(node.targetLinks, value)
	      );
	    });
	  }

	  // Iteratively assign the depth (x-position) for each node.
	  // Nodes are assigned the maximum depth of incoming neighbors plus one;
	  // nodes with no incoming links are assigned depth zero, while
	  // nodes with no outgoing links are assigned the maximum depth.
	  function computeNodeDepths(graph) {
	    var nodes, next, x;

	    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {
	      nodes.forEach(function(node) {
	        node.depth = x;
	        node.sourceLinks.forEach(function(link) {
	          if (next.indexOf(link.target) < 0) {
	            next.push(link.target);
	          }
	        });
	      });
	    }

	    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {
	      nodes.forEach(function(node) {
	        node.height = x;
	        node.targetLinks.forEach(function(link) {
	          if (next.indexOf(link.source) < 0) {
	            next.push(link.source);
	          }
	        });
	      });
	    }

	    var kx = (x1 - x0 - dx) / (x - 1);
	    graph.nodes.forEach(function(node) {
	      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;
	    });
	  }

	  function computeNodeBreadths(graph) {
	    var columns = d3Collection.nest()
	        .key(function(d) { return d.x0; })
	        .sortKeys(d3Array.ascending)
	        .entries(graph.nodes)
	        .map(function(d) { return d.values; });

	    //
	    initializeNodeBreadth();
	    resolveCollisions();
	    for (var alpha = 1, n = iterations; n > 0; --n) {
	      relaxRightToLeft(alpha *= 0.99);
	      resolveCollisions();
	      relaxLeftToRight(alpha);
	      resolveCollisions();
	    }

	    function initializeNodeBreadth() {
	      var ky = d3Array.min(columns, function(nodes) {
	        return (y1 - y0 - (nodes.length - 1) * py) / d3Array.sum(nodes, value);
	      });

	      columns.forEach(function(nodes) {
	        nodes.forEach(function(node, i) {
	          node.y1 = (node.y0 = i) + node.value * ky;
	        });
	      });

	      graph.links.forEach(function(link) {
	        link.width = link.value * ky;
	      });
	    }

	    function relaxLeftToRight(alpha) {
	      columns.forEach(function(nodes) {
	        nodes.forEach(function(node) {
	          if (node.targetLinks.length) {
	            var dy = (d3Array.sum(node.targetLinks, weightedSource) / d3Array.sum(node.targetLinks, value) - nodeCenter(node)) * alpha;
	            node.y0 += dy, node.y1 += dy;
	          }
	        });
	      });
	    }

	    function relaxRightToLeft(alpha) {
	      columns.slice().reverse().forEach(function(nodes) {
	        nodes.forEach(function(node) {
	          if (node.sourceLinks.length) {
	            var dy = (d3Array.sum(node.sourceLinks, weightedTarget) / d3Array.sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;
	            node.y0 += dy, node.y1 += dy;
	          }
	        });
	      });
	    }

	    function resolveCollisions() {
	      columns.forEach(function(nodes) {
	        var node,
	            dy,
	            y = y0,
	            n = nodes.length,
	            i;

	        // Push any overlapping nodes down.
	        nodes.sort(ascendingBreadth);
	        for (i = 0; i < n; ++i) {
	          node = nodes[i];
	          dy = y - node.y0;
	          if (dy > 0) node.y0 += dy, node.y1 += dy;
	          y = node.y1 + py;
	        }

	        // If the bottommost node goes outside the bounds, push it back up.
	        dy = y - py - y1;
	        if (dy > 0) {
	          y = (node.y0 -= dy), node.y1 -= dy;

	          // Push any overlapping nodes back up.
	          for (i = n - 2; i >= 0; --i) {
	            node = nodes[i];
	            dy = node.y1 + py - y;
	            if (dy > 0) node.y0 -= dy, node.y1 -= dy;
	            y = node.y0;
	          }
	        }
	      });
	    }
	  }

	  function computeLinkBreadths(graph) {
	    graph.nodes.forEach(function(node) {
	      node.sourceLinks.sort(ascendingTargetBreadth);
	      node.targetLinks.sort(ascendingSourceBreadth);
	    });
	    graph.nodes.forEach(function(node) {
	      var y0 = node.y0, y1 = y0;
	      node.sourceLinks.forEach(function(link) {
	        link.y0 = y0 + link.width / 2, y0 += link.width;
	      });
	      node.targetLinks.forEach(function(link) {
	        link.y1 = y1 + link.width / 2, y1 += link.width;
	      });
	    });
	  }

	  return sankey;
	};

	function horizontalSource(d) {
	  return [d.source.x1, d.y0];
	}

	function horizontalTarget(d) {
	  return [d.target.x0, d.y1];
	}

	var sankeyLinkHorizontal = function() {
	  return d3Shape.linkHorizontal()
	      .source(horizontalSource)
	      .target(horizontalTarget);
	};

	exports.sankey = sankey;
	exports.sankeyCenter = center;
	exports.sankeyLeft = left;
	exports.sankeyRight = right;
	exports.sankeyJustify = justify;
	exports.sankeyLinkHorizontal = sankeyLinkHorizontal;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-shape/ Version 1.2.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(60)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Path) { 'use strict';

	var constant = function(x) {
	  return function constant() {
	    return x;
	  };
	};

	var abs = Math.abs;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var max = Math.max;
	var min = Math.min;
	var sin = Math.sin;
	var sqrt = Math.sqrt;

	var epsilon = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var tau = 2 * pi;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}

	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;

	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi,
	        a1 = endAngle.apply(this, arguments) - halfPi,
	        da = abs(a1 - a0),
	        cw = a1 > a0;

	    if (!context) context = buffer = d3Path.path();

	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

	    // Is it a point?
	    if (!(r1 > epsilon)) context.moveTo(0, 0);

	    // Or is it a circle or annulus?
	    else if (da > tau - epsilon) {
	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon) {
	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }

	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
	          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;

	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon) {
	        var p0 = asin(rp / r0 * sin(ap)),
	            p1 = asin(rp / r1 * sin(ap));
	        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos(a01),
	          y01 = r1 * sin(a01),
	          x10 = r0 * cos(a10),
	          y10 = r0 * sin(a10);

	      // Apply rounded corners?
	      if (rc > epsilon) {
	        var x11 = r1 * cos(a11),
	            y11 = r1 * sin(a11),
	            x00 = r0 * cos(a00),
	            y00 = r0 * sin(a00);

	        // Restrict the corner radius according to the sector angle.
	        if (da < pi) {
	          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min(rc, (r0 - lc) / (kc - 1));
	          rc1 = min(rc, (r1 - lc) / (kc + 1));
	        }
	      }

	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon)) context.moveTo(x01, y01);

	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }

	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
	    return [cos(a) * r, sin(a) * r];
	  };

	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
	  };

	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
	  };

	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
	  };

	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
	  };

	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };

	  return arc;
	};

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	var curveLinear = function(context) {
	  return new Linear(context);
	};

	function x(p) {
	  return p[0];
	}

	function y(p) {
	  return p[1];
	}

	var line = function() {
	  var x$$1 = x,
	      y$$1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = d3Path.path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), line) : x$$1;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), line) : y$$1;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	};

	var area = function() {
	  var x0 = x,
	      x1 = null,
	      y0 = constant(0),
	      y1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = d3Path.path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var identity = function(d) {
	  return d;
	};

	var pie = function() {
	  var value = identity,
	      sortValues = descending,
	      sort = null,
	      startAngle = constant(0),
	      endAngle = constant(tau),
	      padAngle = constant(0);

	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }

	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
	  };

	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
	  };

	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
	  };

	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
	  };

	  return pie;
	};

	var curveRadialLinear = curveRadial(curveLinear);

	function Radial(curve) {
	  this._curve = curve;
	}

	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};

	function curveRadial(curve) {

	  function radial(context) {
	    return new Radial(curve(context));
	  }

	  radial._curve = curve;

	  return radial;
	}

	function lineRadial(l) {
	  var c = l.curve;

	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;

	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return l;
	}

	var lineRadial$1 = function() {
	  return lineRadial(line().curve(curveRadialLinear));
	};

	var areaRadial = function() {
	  var a = area().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;

	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return a;
	};

	var pointRadial = function(x, y) {
	  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
	};

	var slice = Array.prototype.slice;

	function linkSource(d) {
	  return d.source;
	}

	function linkTarget(d) {
	  return d.target;
	}

	function link(curve) {
	  var source = linkSource,
	      target = linkTarget,
	      x$$1 = x,
	      y$$1 = y,
	      context = null;

	  function link() {
	    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
	    if (!context) context = buffer = d3Path.path();
	    curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  link.source = function(_) {
	    return arguments.length ? (source = _, link) : source;
	  };

	  link.target = function(_) {
	    return arguments.length ? (target = _, link) : target;
	  };

	  link.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), link) : x$$1;
	  };

	  link.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), link) : y$$1;
	  };

	  link.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), link) : context;
	  };

	  return link;
	}

	function curveHorizontal(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
	}

	function curveVertical(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
	}

	function curveRadial$1(context, x0, y0, x1, y1) {
	  var p0 = pointRadial(x0, y0),
	      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
	      p2 = pointRadial(x1, y0),
	      p3 = pointRadial(x1, y1);
	  context.moveTo(p0[0], p0[1]);
	  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
	}

	function linkHorizontal() {
	  return link(curveHorizontal);
	}

	function linkVertical() {
	  return link(curveVertical);
	}

	function linkRadial() {
	  var l = link(curveRadial$1);
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	  return l;
	}

	var circle = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau);
	  }
	};

	var cross = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;

	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10);
	var kx = Math.sin(tau / 10) * kr;
	var ky = -Math.cos(tau / 10) * kr;

	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;

	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};

	var symbols = [
	  circle,
	  cross,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];

	var symbol = function() {
	  var type = constant(circle),
	      size = constant(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = d3Path.path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	};

	var noop = function() {};

	function point(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basis = function(context) {
	  return new Basis(context);
	};

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisClosed = function(context) {
	  return new BasisClosed(context);
	};

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};

	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}

	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;

	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;

	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }

	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	var bundle = ((function custom(beta) {

	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }

	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };

	  return bundle;
	}))(0.85);

	function point$1(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}

	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$1(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinal = ((function custom(tension) {

	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalClosed = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalOpen = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function point$2(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;

	  if (that._l01_a > epsilon) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }

	  if (that._l23_a > epsilon) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }

	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}

	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRom = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomClosed = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomOpen = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};

	function sign(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$3(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	var natural = function(context) {
	  return new Natural(context);
	};

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	var step = function(context) {
	  return new Step(context, 0.5);
	};

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	var none = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};

	var none$1 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};

	function stackValue(d, key) {
	  return d[key];
	}

	var stack = function() {
	  var keys = constant([]),
	      order = none$1,
	      offset = none,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
	  };

	  return stack;
	};

	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none(series, order);
	};

	var diverging = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
	    for (yp = yn = 0, i = 0; i < n; ++i) {
	      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
	        d[0] = yp, d[1] = yp += dy;
	      } else if (dy < 0) {
	        d[1] = yn, d[0] = yn += dy;
	      } else {
	        d[0] = yp;
	      }
	    }
	  }
	};

	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none(series, order);
	};

	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none(series, order);
	};

	var ascending = function(series) {
	  var sums = series.map(sum);
	  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};

	function sum(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}

	var descending$1 = function(series) {
	  return ascending(series).reverse();
	};

	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum),
	      order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];

	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }

	  return bottoms.reverse().concat(tops);
	};

	var reverse = function(series) {
	  return none$1(series).reverse();
	};

	exports.arc = arc;
	exports.area = area;
	exports.line = line;
	exports.pie = pie;
	exports.areaRadial = areaRadial;
	exports.radialArea = areaRadial;
	exports.lineRadial = lineRadial$1;
	exports.radialLine = lineRadial$1;
	exports.pointRadial = pointRadial;
	exports.linkHorizontal = linkHorizontal;
	exports.linkVertical = linkVertical;
	exports.linkRadial = linkRadial;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle;
	exports.symbolCross = cross;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetDiverging = diverging;
	exports.stackOffsetNone = none;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending;
	exports.stackOrderDescending = descending$1;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$1;
	exports.stackOrderReverse = reverse;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-voronoi/ v1.1.4 Copyright 2018 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function x(d) {
	  return d[0];
	}

	function y(d) {
	  return d[1];
	}

	function RedBlackTree() {
	  this._ = null; // root node
	}

	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}

	RedBlackTree.prototype = {
	  constructor: RedBlackTree,

	  insert: function(after, node) {
	    var parent, grandpa, uncle;

	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;

	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },

	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;

	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;

	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);

	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }

	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }

	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }

	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);

	    if (node) node.C = false;
	  }
	};

	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}

	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}

	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}

	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}

	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}

	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}

	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}

	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;

	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;

	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }

	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}

	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;

	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {
	      delete edges[i];
	    }
	  }
	}

	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}

	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}

	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}

	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}

	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}

	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;

	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;

	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }

	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]
	              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]
	              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }

	      if (nHalfedges) cover = false;
	    }
	  }

	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;

	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }

	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }

	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}

	var circlePool = [];

	var firstCircle;

	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}

	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;

	  if (!lArc || !rArc) return;

	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;

	  if (lSite === rSite) return;

	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;

	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2) return;

	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;

	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

	  arc.circle = circle;

	  var before = null,
	      node = circles._;

	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }

	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}

	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}

	var beachPool = [];

	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}

	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}

	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}

	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];

	  detachBeach(beach);

	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon
	      && Math.abs(y - lArc.circle.cy) < epsilon) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }

	  disappearing.unshift(lArc);
	  detachCircle(lArc);

	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon
	      && Math.abs(y - rArc.circle.cy) < epsilon) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }

	  disappearing.push(rArc);
	  detachCircle(rArc);

	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }

	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;

	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }

	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);

	  if (!lArc && !rArc) return;

	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }

	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }

	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);

	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;

	  if (!pby2) return rfocx;

	  var lArc = arc.P;
	  if (!lArc) return -Infinity;

	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;

	  if (!plby2) return lfocx;

	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;

	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

	  return (rfocx + lfocx) / 2;
	}

	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;

	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}

	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}

	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;

	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;

	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }

	  sortCellHalfedges();

	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }

	  this.edges = edges;
	  this.cells = cells;

	  beaches =
	  circles =
	  edges =
	  cells = null;
	}

	Diagram.prototype = {
	  constructor: Diagram,

	  polygons: function() {
	    var edges = this.edges;

	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },

	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;

	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;

	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });

	    return triangles;
	  },

	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },

	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);

	    that._found = i0;

	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};

	function voronoi() {
	  var x$$1 = x,
	      y$$1 = y,
	      extent = null;

	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }

	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };

	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };

	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };

	  voronoi.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$$1;
	  };

	  voronoi.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$$1;
	  };

	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };

	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };

	  return voronoi;
	}

	exports.voronoi = voronoi;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 172 */
61,
/* 173 */
61,
/* 174 */
61,
/* 175 */
61,
/* 176 */
61,
/* 177 */
61,
/* 178 */
61,
/* 179 */
61,
/* 180 */
61,
/* 181 */
61,
/* 182 */
61,
/* 183 */
61,
/* 184 */
61,
/* 185 */
61,
/* 186 */
61,
/* 187 */
61,
/* 188 */
61,
/* 189 */
61,
/* 190 */
61,
/* 191 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 192 */
/***/ function(module, exports) {

	module.exports = {"type":"FeatureCollection","__comment":"features[n].properties中，latitude和longitude通常表示这个省的中心点，用于展示label。如果有cp数组，则cp数组中的值代表真实中心经纬度值，latitude和longitude是经过微调位置的值。","features":[{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[104.3585193,37.4012316],[104.6895069,37.4119286],[104.6213973,37.249277],[104.8553882,37.2181937],[105.3216647,36.7807268],[105.2204822,36.6929544],[105.4459465,36.2545832],[105.318099,35.9332075],[105.4318388,35.7564224],[105.7255677,35.7100687],[105.8293856,35.4936478],[106.0604309,35.4638563],[105.9078821,35.4044026],[106.2106543,35.3951525],[106.3777759,35.2606646],[106.49658,35.4747859],[106.4292973,35.6994492],[106.7284522,35.6770474],[106.9134021,35.7888236],[106.8432255,35.8822029],[106.9447697,36.0769455],[106.8136666,36.2116401],[106.49658,36.268355],[106.4308476,36.5023201],[106.6490255,36.8341861],[106.5748182,36.9313378],[106.6440646,37.1816584],[107.2854724,37.0684612],[107.2819584,36.9149047],[107.886521,36.7553795],[108.0417054,36.5977406],[108.7036805,36.3589696],[108.6771188,36.0052445],[108.493099,35.8811952],[108.6172258,35.3928271],[108.4926339,35.2724985],[107.9640874,35.2232767],[107.741672,35.3183613],[107.6704619,35.2279792],[107.8303487,34.9767284],[107.710046,34.951407],[107.2108517,34.8917724],[106.9148491,35.0890471],[106.4912057,35.0301102],[106.5497034,34.8625752],[106.3177279,34.5833416],[106.6736235,34.3846715],[106.4243364,33.898758],[106.5594702,33.5986213],[106.4955465,33.5435859],[106.3926587,33.6188268],[105.9929415,33.6106361],[105.7179712,33.38866],[105.9127397,33.2336824],[105.8864881,32.9780132],[105.4985531,32.9073974],[105.3852267,32.8742211],[105.4372132,32.7464511],[105.2699882,32.641703],[104.5584038,32.688341],[104.2888595,32.847892],[104.4058549,33.0632793],[104.2805913,33.2720521],[104.3829106,33.3264932],[104.1746546,33.4901525],[104.1563094,33.6240203],[103.5227564,33.7141182],[103.5586198,33.8068773],[103.2719707,33.7651745],[103.1200936,34.1686124],[102.9305961,34.2955814],[102.5748039,34.1395185],[102.6176437,34.0835013],[102.171211,33.9417528],[102.481838,33.4650377],[101.8527808,33.1220871],[101.9232158,33.406385],[101.7953683,33.6050809],[101.7775399,33.5300467],[101.6133639,33.5118566],[101.4955933,33.7046355],[101.1602649,33.664147],[101.1294658,33.8506473],[100.9479781,33.9297639],[100.7917086,34.1548664],[100.8154798,34.2945995],[100.9352657,34.3863252],[101.7803821,34.0675074],[102.1622193,34.2941344],[102.150282,34.4950782],[101.7550607,34.7036702],[102.2671224,35.0558709],[102.3755913,35.2036913],[102.2654171,35.28056],[102.2892916,35.4069347],[102.5349614,35.5356349],[102.6874069,35.5146284],[102.700326,35.8394665],[102.9760197,35.8332911],[102.9332833,36.0860664],[103.0403569,36.2164977],[102.8185616,36.3260517],[102.6108224,36.6571943],[102.6747461,36.80163],[102.4601339,36.9556516],[102.5506193,37.1638301],[102.0326665,37.4789013],[101.9719983,37.7203852],[101.7854464,37.5205008],[101.0497807,37.9637296],[100.6357491,38.1054005],[100.5543071,38.2520841],[100.1407923,38.4858424],[100.1584656,38.2074356],[99.5571586,38.5153755],[99.0947579,38.9577774],[98.7819088,39.0676932],[98.6022299,38.9475972],[98.324314,39.0232515],[98.1028805,38.8146079],[97.3625639,39.1504272],[97.0264604,39.1962125],[96.9454834,38.3582274],[96.8450761,38.3564188],[96.0547884,38.678828],[95.3053251,39.1827766],[95.0571749,39.1474558],[94.6310511,39.2953795],[94.1169739,39.3219412],[92.9359607,39.1528559],[92.9479497,39.4524759],[92.7724048,39.8105419],[92.9415418,40.4725687],[93.2863269,40.4692614],[93.577472,40.5879621],[94.5809249,41.5852139],[95.0582601,41.7885607],[95.8639474,41.8550166],[96.0358232,41.9952923],[96.0909103,42.5869099],[96.3663399,42.7229226],[97.1906797,42.7870615],[97.8468754,41.6192687],[97.6476111,41.4555319],[97.708486,41.3494144],[98.3265361,40.8556719],[98.2458175,40.5245293],[98.6458448,40.56755],[99.1574414,40.8363191],[100.0111878,40.8962896],[100.2037858,40.6169526],[99.89936,40.2047814],[99.4308614,39.8788065],[100.1888514,39.69489],[100.543455,39.408861],[100.7895382,39.4078791],[100.8885502,39.1051586],[101.1799536,39.0206418],[101.3104366,38.7688484],[101.8310767,38.6898351],[102.0312195,38.8791776],[101.8552613,39.091206],[102.3931096,39.2371919],[102.9653744,39.1193696],[103.4637936,39.3571846],[104.0606047,39.427387],[104.2247807,39.0906892],[104.171554,38.9595086],[103.8734327,38.6426804],[103.471235,38.4358971],[103.5216712,38.1398428],[103.3880876,38.1019899],[103.3874675,37.9991021],[103.4381621,37.8423933],[104.3585193,37.4012316]]]},"properties":{"id":"62","name":"甘肃","latitude":38.7393,"longitude":100.735}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[101.7775399,33.5300467],[101.6436463,33.1277715],[101.4451571,33.2358528],[101.1641407,33.1280816],[101.1314295,32.9383515],[101.236591,32.8075068],[101.1708069,32.688341],[100.6747132,32.6830958],[100.5312077,32.4033971],[100.4984965,32.6690915],[100.3994328,32.7583884],[100.2231645,32.6368971],[100.1190365,32.6708743],[100.1366065,32.8475044],[99.8602409,33.0276484],[99.6985454,32.7446166],[99.2893714,32.8871402],[98.8520854,33.1748746],[98.6458448,33.6761618],[98.4579493,33.8401053],[98.034926,33.9597879],[97.7450729,33.8648583],[97.6389295,33.9995788],[97.3835446,33.8698709],[97.3905209,33.6113854],[97.7242989,33.4061266],[97.3609619,32.8970362],[97.4306735,32.7003299],[97.7157207,32.5441896],[97.630868,32.4440923],[97.3608586,32.5001871],[97.2548702,32.0757944],[96.7330416,31.9603492],[96.7373824,31.6797979],[96.2781857,31.9090604],[96.1826359,31.8711557],[96.2360177,31.5777369],[96.167288,31.5480488],[96.0942176,31.700546],[95.4970964,31.7416546],[95.3543144,31.9544064],[95.3821163,32.1700522],[95.0618258,32.2612094],[94.5822168,32.6721921],[94.1107727,32.4782246],[93.7341549,32.5724566],[93.5103959,32.5161034],[93.0059306,32.7346172],[92.221379,32.7449783],[92.1961092,32.86864],[91.9768461,32.8486154],[91.5426608,33.0803325],[91.3615865,33.3369577],[90.8040495,33.1405356],[90.3232003,33.2887178],[89.6367306,34.0933715],[89.845555,34.3699954],[89.7239087,34.7396369],[89.8252462,34.8460904],[89.7876774,34.9263956],[89.5626783,34.9564196],[89.4548295,35.212838],[89.4843368,35.34221],[89.7301099,35.4436508],[89.7887626,35.8268574],[89.4846468,35.8801875],[89.4351408,35.9878037],[89.6778133,36.0819581],[89.9720073,36.1049283],[90.0137618,36.2527746],[90.1656905,36.1292421],[90.6226652,36.1111295],[90.8750013,36.0036425],[91.1357605,36.1406367],[91.0067245,36.5034828],[90.6881393,36.6984838],[90.8077702,36.9105639],[91.2875859,37.0135033],[91.316318,37.1189749],[91.0737488,37.4879446],[90.4364751,37.7785729],[90.4392656,37.996079],[90.1509111,38.4327965],[90.6535161,38.6740738],[91.2944072,38.7451289],[92.9359607,39.1528559],[94.1169739,39.3219412],[94.6310511,39.2953795],[95.0571749,39.1474558],[95.3053251,39.1827766],[96.0547884,38.678828],[96.8450761,38.3564188],[96.9454834,38.3582274],[97.0264604,39.1962125],[97.3625639,39.1504272],[98.1028805,38.8146079],[98.324314,39.0232515],[98.6022299,38.9475972],[98.7819088,39.0676932],[99.0947579,38.9577774],[99.5571586,38.5153755],[100.1584656,38.2074356],[100.1407923,38.4858424],[100.5543071,38.2520841],[100.6357491,38.1054005],[101.0497807,37.9637296],[101.7854464,37.5205008],[101.9719983,37.7203852],[102.0326665,37.4789013],[102.5506193,37.1638301],[102.4601339,36.9556516],[102.6747461,36.80163],[102.6108224,36.6571943],[102.8185616,36.3260517],[103.0403569,36.2164977],[102.9332833,36.0860664],[102.9760197,35.8332911],[102.700326,35.8394665],[102.6874069,35.5146284],[102.5349614,35.5356349],[102.2892916,35.4069347],[102.2654171,35.28056],[102.3755913,35.2036913],[102.2671224,35.0558709],[101.7550607,34.7036702],[102.150282,34.4950782],[102.1622193,34.2941344],[101.7803821,34.0675074],[100.9352657,34.3863252],[100.8154798,34.2945995],[100.7917086,34.1548664],[100.9479781,33.9297639],[101.1294658,33.8506473],[101.1602649,33.664147],[101.4955933,33.7046355],[101.6133639,33.5118566],[101.7775399,33.5300467]]]},"properties":{"id":"63","name":"青海","latitude":35.2652,"longitude":96.2377}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[111.9965544,24.7356739],[111.9332508,24.6013669],[112.0473007,24.3814578],[111.869327,24.2318287],[111.9019348,24.0015844],[111.7754309,23.8324991],[111.6575053,23.8416975],[111.601178,23.6580136],[111.4710051,23.613236],[111.3512191,22.9082144],[111.0237972,22.6386702],[110.754563,22.5801724],[110.6822677,22.4835892],[110.7745618,22.2836531],[110.6423735,22.1834525],[110.3335551,22.1904546],[110.3773251,21.903392],[109.9672209,21.8667276],[109.9172498,21.687152],[109.7459424,21.6486789],[109.7480575,21.5749372],[109.7414657,21.4740258],[109.6496688,21.5204532],[109.5677189,21.7599958],[109.4926864,21.6985538],[109.5307723,21.4916446],[109.1386825,21.4015974],[109.0398055,21.4502628],[109.1357528,21.6029727],[108.9702255,21.60635],[108.8614201,21.7599958],[108.7515568,21.6501326],[108.5713811,21.8128116],[108.6355087,21.884182],[108.4487411,21.8657901],[108.5188094,21.5955264],[108.4200139,21.5568708],[108.3215438,21.7096622],[108.2110295,21.5006371],[108.2102971,21.6303165],[107.9912216,21.4856632],[107.7448234,21.6575422],[107.3335756,21.6125088],[106.9871436,21.8448176],[107.0093645,21.9274482],[106.6481979,21.9955061],[106.6629257,22.2232958],[106.5330282,22.4034445],[106.5687712,22.5745922],[106.6801856,22.5794498],[106.7466415,22.7443493],[106.6674732,22.86752],[106.4877942,22.9254235],[106.2340113,22.863851],[106.2023853,22.9469984],[105.9992452,22.9753688],[105.8538794,22.9046496],[105.56599,23.0540978],[105.5213254,23.1631478],[105.8480408,23.5193916],[105.9830196,23.4690329],[106.1281271,23.5406564],[106.1574276,23.9737308],[106.0211052,24.1109059],[105.8722254,24.0247096],[105.6184941,24.135323],[105.4471867,24.0376029],[105.2829073,24.0740606],[105.1129952,24.4098282],[104.7526555,24.4683259],[104.6670276,24.339755],[104.5018697,24.57819],[104.5398519,24.7417718],[104.7293494,24.6313909],[105.1887012,25.0087839],[106.0207434,24.641907],[106.1761862,24.7822344],[106.1557223,24.9603631],[106.995516,25.2553838],[106.974587,25.4404371],[107.2442347,25.5585953],[107.4988961,25.2141202],[107.6474142,25.3063885],[107.7760368,25.152987],[108.0677503,25.2131383],[108.2933696,25.5386999],[108.5984672,25.3113236],[108.5678748,25.415865],[108.6946371,25.6020035],[108.7741154,25.5219309],[109.0414376,25.5433507],[109.0266582,25.7197741],[108.8709054,25.7074751],[109.0853626,25.8054278],[109.3004399,25.7430543],[109.4567094,26.0388502],[109.6031604,26.0526737],[109.6765926,25.8890661],[109.772039,25.9081605],[109.9273267,26.1970834],[110.0620472,26.1499287],[110.0336251,26.0364989],[110.2469971,25.9782079],[110.5365402,26.2248595],[110.5541101,26.3412348],[110.8789482,26.2752182],[110.9472644,26.3898882],[111.251897,26.2797141],[111.1943295,25.9575115],[111.2785104,25.8610574],[111.4466138,25.9267123],[111.3158208,25.5031981],[110.9546025,25.0253462],[111.0306185,24.9180142],[111.2743763,25.1476643],[111.4269251,25.106194],[111.4281653,24.6810261],[111.5169454,24.6426564],[111.6671171,24.7796764],[111.9965544,24.7356739]]]},"properties":{"id":"45","name":"广西","latitude":23.7451,"longitude":108.756}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[109.2583753,28.5059089],[109.4183655,27.5595067],[108.7913237,27.0831276],[108.950177,27.0269036],[109.2305734,27.1519864],[109.4991875,27.0624828],[109.443842,26.900994],[109.519858,26.8583609],[109.294032,26.7273095],[109.4025525,26.5372952],[109.2965642,26.3125286],[109.3992969,26.2699472],[109.4567094,26.0388502],[109.3004399,25.7430543],[109.0853626,25.8054278],[108.8709054,25.7074751],[109.0266582,25.7197741],[109.0414376,25.5433507],[108.7741154,25.5219309],[108.6946371,25.6020035],[108.5678748,25.415865],[108.5984672,25.3113236],[108.2933696,25.5386999],[108.0677503,25.2131383],[107.7760368,25.152987],[107.6474142,25.3063885],[107.4988961,25.2141202],[107.2442347,25.5585953],[106.974587,25.4404371],[106.995516,25.2553838],[106.1557223,24.9603631],[106.1761862,24.7822344],[106.0207434,24.641907],[105.1887012,25.0087839],[104.7293494,24.6313909],[104.5398519,24.7417718],[104.7782353,25.26174],[104.5658452,25.3811901],[104.535046,25.5080557],[104.432675,25.5068155],[104.2995048,25.760831],[104.3670459,25.7504957],[104.5451746,26.2704123],[104.6755026,26.3792687],[104.4298845,26.71253],[104.1533639,26.6512418],[104.0204004,26.5141959],[103.7865646,26.5771119],[103.7782963,26.9558743],[103.596447,27.0760737],[103.9113115,27.3903698],[104.1743445,27.271514],[104.3444117,27.4411935],[104.5942155,27.3137853],[105.1973828,27.398638],[105.2969633,27.7217449],[105.4797945,27.7838858],[105.6311031,27.6822383],[106.3453748,27.8349421],[106.1993372,28.1242526],[105.8917591,28.1538891],[105.8660242,28.258353],[105.6504818,28.3400276],[105.6205612,28.482422],[105.683193,28.5834494],[105.8919141,28.6093135],[105.9844149,28.7535424],[106.3386569,28.4801224],[106.3824268,28.572494],[106.4887252,28.5409714],[106.46113,28.8193782],[106.6264946,28.6373996],[106.5576099,28.5339951],[106.693984,28.4827837],[106.8491683,28.7730244],[107.0307076,28.8876169],[107.2487822,28.8089912],[107.4368327,28.8772558],[107.4961056,29.2460963],[107.7834782,29.1373691],[107.8753589,28.984071],[108.2862382,29.077166],[108.3303182,28.6891536],[108.5824475,28.6010969],[108.5827576,28.3741599],[108.6813046,28.3377021],[108.6895211,28.4846699],[108.7837272,28.4260947],[108.7284851,28.2422299],[109.0949744,28.2052038],[109.2583753,28.5059089]]]},"properties":{"id":"52","name":"贵州","latitude":26.8033,"longitude":106.559}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[109.593962,31.737598],[109.7326099,31.561123],[110.1467448,31.3311112],[110.0662329,30.8284803],[109.8706893,30.88858],[109.3941809,30.5837408],[108.6699874,30.5738447],[108.3805994,30.3996951],[108.5320113,30.3154884],[108.5382125,29.885463],[108.4004432,29.8310735],[108.4468486,29.7357822],[108.61304,29.8580228],[108.6960323,29.6981617],[108.8720423,29.6389664],[108.9205664,29.3489841],[109.2065955,29.1042445],[109.2583753,28.5059089],[109.0949744,28.2052038],[108.7284851,28.2422299],[108.7837272,28.4260947],[108.6895211,28.4846699],[108.6813046,28.3377021],[108.5827576,28.3741599],[108.5824475,28.6010969],[108.3303182,28.6891536],[108.2862382,29.077166],[107.8753589,28.984071],[107.7834782,29.1373691],[107.4961056,29.2460963],[107.4368327,28.8772558],[107.2487822,28.8089912],[107.0307076,28.8876169],[106.8491683,28.7730244],[106.693984,28.4827837],[106.5576099,28.5339951],[106.6264946,28.6373996],[106.46113,28.8193782],[106.4887252,28.5409714],[106.3824268,28.572494],[106.2603154,28.8693234],[106.0084445,28.9733998],[105.7951241,28.9365286],[105.7080494,29.2909514],[105.5058395,29.2914682],[105.3148434,29.4695969],[105.2910722,29.5847836],[105.7099614,29.8675054],[105.7389002,30.0326374],[105.5572058,30.1475917],[105.7917135,30.4233629],[106.1247164,30.3423343],[106.2390247,30.2202487],[106.5385413,30.3411199],[106.7172901,30.0592766],[107.0329297,30.0578555],[107.4776054,30.6095015],[107.5075778,30.8219949],[107.7215182,30.889226],[107.8115385,30.7980171],[107.9295158,30.8726637],[108.0331271,31.2222289],[108.5161984,31.7082716],[108.2677897,31.9729066],[108.4192017,32.1000048],[108.3611691,32.1671842],[108.5183688,32.1975699],[109.3359933,31.7052485],[109.593962,31.737598]]]},"properties":{"id":"50","name":"重庆","latitude":30.0173,"longitude":107.73}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[117.3567957,40.2570263],[117.2390768,40.0926177],[116.7594161,40.0126226],[116.9287081,39.8013952],[116.8756364,39.6864668],[116.7934192,39.6023117],[116.6043868,39.6111742],[116.3866223,39.4421406],[116.2104057,39.5719001],[115.7559115,39.5089582],[115.4634229,39.6432136],[115.4507105,39.7794844],[115.5624349,39.807493],[115.4270944,39.962574],[115.9452023,40.2937165],[115.7281612,40.539593],[116.458866,40.7915673],[116.3558232,40.9015864],[116.6526526,41.03101],[117.0580026,40.6772073],[117.4859351,40.661937],[117.1841447,40.49727],[117.3567957,40.2570263]]]},"properties":{"id":"11","name":"北京","latitude":39.9488,"longitude":116.389}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[117.4348251,23.7507185],[117.5266608,23.7401069],[117.4315586,23.5826302],[117.3204827,23.5740159],[117.372732,23.7667504],[117.4348251,23.7507185]]],[[[118.1378687,24.5365258],[118.1538192,24.4370792],[118.0720321,24.4674747],[118.1378687,24.5365258]]],[[[119.7802841,25.6174177],[119.8745223,25.5567895],[119.7573348,25.404934],[119.6987411,25.6126163],[119.7802841,25.6174177]]],[[[120.4192001,27.2063663],[120.3118596,27.3176944],[120.2566024,27.2569034],[120.4217229,27.1531436],[120.243663,27.1327172],[120.2373967,26.9272322],[120.0251571,26.8601749],[120.1281844,26.7969425],[120.1206975,26.6460635],[119.835704,26.5313988],[120.0776473,26.7855899],[119.9251408,26.7921817],[119.8569442,26.6535098],[119.7983505,26.841376],[119.6961369,26.7081973],[119.606049,26.7969425],[119.5520939,26.7490909],[119.5998641,26.57038],[119.7849227,26.5778262],[119.7619735,26.4074568],[119.6536564,26.4980329],[119.57309,26.4378116],[119.6818954,26.3171247],[119.8257756,26.4269473],[119.9499618,26.3649356],[119.6735946,26.2805036],[119.4585067,25.9824893],[119.2158309,26.1000837],[119.2468368,25.9672305],[119.3466903,25.9403751],[119.5664169,26.0502383],[119.7024032,25.9850528],[119.579926,25.6799991],[119.4490666,25.6871605],[119.6460067,25.3925642],[119.5762639,25.462836],[119.4832463,25.3711612],[119.5048934,25.474921],[119.3562932,25.600043],[119.2778426,25.5704613],[119.1025497,25.4203148],[119.3442489,25.242377],[119.1017939,25.1966344],[119.1337997,25.1247419],[118.9836532,25.2830264],[118.8648381,25.2279727],[118.9631454,25.193671],[118.8576766,25.0980492],[118.9973251,24.9534366],[118.7160751,24.8435733],[118.6677352,24.9534366],[118.6379501,24.7721215],[118.7639266,24.7516951],[118.6540633,24.6934268],[118.6465764,24.5684268],[118.5539657,24.5180525],[118.4280705,24.6313337],[118.2190048,24.5414493],[118.1604924,24.6934268],[117.9748641,24.5527204],[118.0581161,24.5158552],[117.9961044,24.4469669],[117.7912704,24.4606387],[118.0474553,24.3990746],[118.1264755,24.2620303],[117.9678654,24.1598168],[117.9436141,24.2125919],[117.8936467,24.0280216],[117.7087508,24.0354678],[117.5916688,23.7370644],[117.5823674,23.889309],[117.4165959,23.9468448],[117.4634774,23.7882871],[117.2925725,23.7894962],[117.1746222,23.6163477],[117.0365052,23.7382671],[116.7677877,24.6668926],[116.5295594,24.6153712],[116.3721013,24.8413006],[115.8875314,24.916774],[115.8428313,25.1947415],[115.9787403,25.3508302],[116.1351648,25.8663284],[116.3232154,25.9551085],[116.398973,26.287543],[116.594465,26.3950817],[116.545269,26.8678694],[117.0401225,27.1095342],[117.1538107,27.2763974],[117.1122628,27.5676199],[117.284242,27.8570338],[117.5089311,27.9708253],[117.7455575,27.8132897],[117.8234339,27.9372615],[118.3677934,28.0997063],[118.3488798,28.2198024],[118.4464449,28.288687],[118.7352128,28.3259716],[118.7960877,28.2399303],[118.748132,27.9732024],[118.9190776,27.4768244],[119.2656197,27.4241145],[119.6158309,27.6655726],[119.7700851,27.3158782],[120.2489189,27.4101619],[120.4192001,27.2063663]]]]},"properties":{"id":"35","name":"福建","latitude":26.408,"longitude":118.178}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[119.6297836,31.1328804],[119.4431283,30.6392154],[119.3835454,30.6852591],[119.2415385,30.5508487],[119.392382,30.3684309],[118.8810954,30.3243509],[118.8939628,29.9825888],[118.7237407,29.7302011],[118.3732194,29.4528279],[118.1747303,29.4078694],[117.9859046,29.5720196],[117.5273796,29.6223524],[117.4063017,29.8311769],[117.2285348,29.8472741],[117.1923613,29.9264682],[117.0670976,29.840582],[117.0790865,29.7102023],[116.8883488,29.5605216],[116.7246896,29.5528476],[116.6749768,29.7080061],[116.8867985,29.9204221],[116.6504822,30.0506725],[116.4925074,29.8847137],[116.1472571,29.7887764],[116.0404936,30.2214373],[115.8767827,30.3897991],[115.9460291,30.445868],[115.7678487,30.688153],[116.0353776,31.0309486],[115.6687334,31.2172163],[115.5499809,31.1826964],[115.3740227,31.41754],[115.5315324,31.7363836],[115.901329,31.7944937],[115.8708916,32.5324332],[115.5647604,32.4024411],[115.1993046,32.5914735],[115.1847319,32.8590541],[114.9252128,32.958247],[114.8865589,33.0834073],[115.2857593,33.1482354],[115.3420866,33.5007462],[115.6347303,33.5918259],[115.5613497,33.8981379],[115.6536438,34.048413],[115.961377,34.0001472],[116.1820354,33.7183298],[116.6411805,33.953225],[116.5520903,34.286848],[116.4009884,34.2750141],[116.1567139,34.4473034],[116.1512879,34.5667276],[116.3772172,34.6395397],[116.9494821,34.3892966],[117.0339213,34.1555382],[117.1594434,34.0911752],[117.6238595,34.0082604],[117.7455575,33.8822733],[117.7269023,33.7279158],[118.1236739,33.7660013],[118.1128219,33.4794813],[117.931851,33.2351293],[118.2180351,33.179913],[118.2996839,32.7774053],[118.720175,32.7321367],[118.8573759,32.972303],[119.1565308,32.8182555],[119.1993706,32.5937214],[119.0805148,32.4460819],[118.8913273,32.5956851],[118.5518132,32.5744461],[118.6840532,32.3392408],[118.3519804,31.9466808],[118.6678785,31.654218],[118.8604765,31.6273721],[118.7510258,31.3579571],[118.8160865,31.2263372],[119.3489222,31.2858168],[119.3627714,31.1923599],[119.6297836,31.1328804]]]},"properties":{"id":"34","name":"安徽","latitude":31.9537,"longitude":117.253}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[110.3898218,21.0958926],[110.5263778,21.0820987],[110.5207626,20.9723575],[110.2666122,20.9726423],[110.3898218,21.0958926]]],[[[110.4791773,21.1846378],[110.616954,21.19892],[110.5651962,21.1126163],[110.4177352,21.1784529],[110.4791773,21.1846378]]],[[[111.9384872,21.652574],[111.9814559,21.6120466],[111.822439,21.5619978],[111.9384872,21.652574]]],[[[112.6237899,21.6332869],[112.5182398,21.6167667],[112.6453557,21.712836],[112.6237899,21.6332869]]],[[[112.8625594,21.7694359],[112.7996525,21.5790876],[112.7155868,21.6802432],[112.8625594,21.7694359]]],[[[113.3935653,22.0716007],[113.4057723,22.0070255],[113.3094182,22.0241153],[113.3935653,22.0716007]]],[[[113.4878036,22.8928083],[113.6027938,22.7626407],[113.4021102,22.88288],[113.4878036,22.8928083]]],[[[117.1225692,23.4655216],[117.1287813,23.3993692],[116.9429893,23.4300622],[117.1225692,23.4655216]]],[[[113.9275476,25.4481111],[114.0120903,25.4351144],[114.0260429,25.267657],[114.5693173,25.4068733],[114.7069316,25.2895678],[114.7307028,25.1294225],[114.4135128,24.9796901],[114.169135,24.6695798],[114.4248816,24.4995902],[115.4205831,24.7845598],[115.7057854,24.5457114],[115.7970459,24.564134],[115.758392,24.8291308],[115.8875314,24.916774],[116.3721013,24.8413006],[116.5295594,24.6153712],[116.7677877,24.6668926],[117.0365052,23.7382671],[117.1746222,23.6163477],[117.0842278,23.5506055],[117.068413,23.6512727],[116.9089462,23.6546085],[116.7732245,23.3494324],[116.5217391,23.4112003],[116.5879826,23.3161075],[116.7486348,23.3262883],[116.7839462,23.2123884],[116.646755,23.1629914],[116.6115101,23.2387296],[116.4946879,22.9393524],[116.2984871,22.9632467],[116.0956899,22.8259005],[116.0421049,22.9329183],[116.0761778,22.8678715],[115.8259561,22.7466435],[115.682465,22.8881697],[115.5329696,22.8620466],[115.5752189,22.668336],[115.2333909,22.7882085],[115.3171493,22.9045271],[115.0654755,22.7959848],[114.8802145,22.5591125],[114.7541453,22.5897141],[114.78476,22.8158633],[114.4995758,22.6531139],[114.5825301,22.6552595],[114.6176864,22.5141462],[114.5158162,22.4526428],[114.3955998,22.6135115],[113.9637964,22.5381127],[113.8903449,22.4527124],[113.7443954,22.7611758],[113.6535751,22.7587344],[113.6307072,23.0348982],[113.5327255,22.9957543],[113.7202255,23.1379255],[113.4942326,23.0628116],[113.4737248,22.918199],[113.3504338,22.8897159],[113.59917,22.5751798],[113.5876547,22.2378823],[113.4837455,22.1551422],[113.1652938,22.5755883],[113.4019705,22.1795741],[113.1574666,22.0246996],[113.0850529,22.207587],[112.9570812,21.8756535],[112.8260197,21.9661319],[112.5508732,21.7728539],[112.3565373,21.9797224],[112.4043075,21.8115095],[112.2448837,21.706529],[111.8903915,21.9251163],[112.0002548,21.7743188],[111.884288,21.6828474],[111.6955673,21.76142],[111.779633,21.6754418],[111.6304631,21.5298526],[110.790538,21.403754],[110.6364852,21.23017],[110.424327,21.1914737],[110.4195256,21.3774275],[110.3940536,21.162543],[110.2046005,21.0822208],[110.1567489,20.848863],[110.3689885,20.848863],[110.3969833,20.7184919],[110.3418075,20.8215193],[110.3007919,20.6570499],[110.5341903,20.4782576],[110.2802841,20.2529971],[109.9145614,20.2484805],[109.8628036,20.4063175],[109.9748641,20.354641],[110.0154729,20.4184024],[109.7458602,20.6297875],[109.6958928,21.1701114],[109.765717,21.3559431],[109.9240829,21.362779],[109.9444279,21.4931094],[109.802745,21.4733341],[109.7480575,21.5749372],[109.7459424,21.6486789],[109.9172498,21.687152],[109.9672209,21.8667276],[110.3773251,21.903392],[110.3335551,22.1904546],[110.6423735,22.1834525],[110.7745618,22.2836531],[110.6822677,22.4835892],[110.754563,22.5801724],[111.0237972,22.6386702],[111.3512191,22.9082144],[111.4710051,23.613236],[111.601178,23.6580136],[111.6575053,23.8416975],[111.7754309,23.8324991],[111.9019348,24.0015844],[111.869327,24.2318287],[112.0473007,24.3814578],[111.9332508,24.6013669],[111.9965544,24.7356739],[112.1447624,24.7935515],[112.1827446,25.1525736],[112.4583867,25.1642524],[112.6633354,25.1131444],[112.8078227,24.9428448],[112.9888969,24.9639287],[113.0147868,25.245617],[112.8891097,25.241457],[112.8523678,25.3276533],[113.2829358,25.51759],[113.5824524,25.325948],[113.9275476,25.4481111]]]]},"properties":{"id":"44","name":"广东","latitude":23.7924,"longitude":113.72}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[89.6778133,36.0819581],[89.4351408,35.9878037],[89.4846468,35.8801875],[89.7887626,35.8268574],[89.7301099,35.4436508],[89.4843368,35.34221],[89.4548295,35.212838],[89.5626783,34.9564196],[89.7876774,34.9263956],[89.8252462,34.8460904],[89.7239087,34.7396369],[89.845555,34.3699954],[89.6367306,34.0933715],[90.3232003,33.2887178],[90.8040495,33.1405356],[91.3615865,33.3369577],[91.5426608,33.0803325],[91.9768461,32.8486154],[92.1961092,32.86864],[92.221379,32.7449783],[93.0059306,32.7346172],[93.5103959,32.5161034],[93.7341549,32.5724566],[94.1107727,32.4782246],[94.5822168,32.6721921],[95.0618258,32.2612094],[95.3821163,32.1700522],[95.3543144,31.9544064],[95.4970964,31.7416546],[96.0942176,31.700546],[96.167288,31.5480488],[96.2360177,31.5777369],[96.1826359,31.8711557],[96.2781857,31.9090604],[96.7373824,31.6797979],[96.7330416,31.9603492],[97.2548702,32.0757944],[97.3608586,32.5001871],[97.630868,32.4440923],[97.7157207,32.5441896],[98.2057683,32.3556481],[98.4529883,31.9840945],[98.4256515,31.8134073],[98.8849516,31.3540813],[98.7678011,31.2303679],[98.6379383,31.3092779],[98.6037801,31.1697515],[98.9543014,30.7478651],[99.0563107,29.9153319],[98.9867542,29.6509036],[99.1088139,29.2237721],[98.9901648,29.2019905],[98.9456197,28.8420124],[98.8506901,28.8200758],[98.7850094,29.0002457],[98.66481,28.9741749],[98.5758232,28.3175483],[98.4099935,28.2506015],[98.2997677,28.354807],[98.1150023,28.1438884],[97.5462212,28.5384659],[97.3443604,28.2076086],[97.3690796,27.8779283],[97.2949219,27.9070584],[96.9818115,27.6713665],[95.6922913,28.1567681],[95.0592041,27.7759115],[94.2901611,27.5545469],[93.6694336,26.9661418],[93.0102539,26.9245188],[92.6696777,27.0224308],[92.1972656,26.8877799],[92.0050049,27.0933636],[92.1203613,27.2888075],[92.0214844,27.4644135],[91.6506958,27.4863446],[91.5628052,27.5764601],[91.6217249,27.950724],[91.2901689,28.0914131],[91.0925582,27.9716788],[90.4752316,28.0723445],[90.5877255,28.2332978],[90.2914702,28.261351],[90.2255907,28.3583989],[89.5614889,28.1346404],[88.9729554,27.5176594],[88.9970187,27.3308695],[88.8923308,27.3155431],[88.7410222,27.5457099],[88.81771,27.9947265],[88.6104875,28.1058308],[88.1157373,27.9472617],[88.1182178,27.8608845],[87.8258842,27.9065665],[87.6785288,27.813351],[87.3691163,27.8039371],[87.1557959,27.8257962],[86.661976,28.1068385],[86.5441537,28.093015],[86.4388371,27.9108556],[86.2030376,28.0025813],[86.1559603,28.1565254],[86.0687305,28.0767628],[86.1128622,27.9267978],[85.9802605,27.8851724],[85.6929395,28.3352225],[85.6118075,28.2511449],[85.2595809,28.2669321],[85.0818671,28.331702],[85.1680103,28.5831918],[85.0549423,28.6386923],[84.7991439,28.5466308],[84.4508448,28.7338803],[84.2252905,28.9141153],[84.099135,29.2470014],[83.5170516,29.1917077],[83.1620862,29.6251696],[82.8365764,29.6597928],[82.541814,29.9232392],[82.1445256,30.0694319],[82.0887667,30.3300878],[81.3875175,30.3739094],[81.2679026,30.072053],[81.0844536,30.0278758],[80.9760181,30.2552086],[80.1798393,30.5594795],[80.1692973,30.7852538],[79.8335039,30.9615221],[79.5778089,30.9383711],[79.4015922,31.0236372],[79.0633183,31.433638],[78.9761919,31.3200015],[78.7844723,31.2882722],[78.6995162,31.5100158],[78.8188888,31.6073742],[78.6708875,31.7705167],[78.7445781,31.9641999],[78.4579806,32.2296618],[78.3809827,32.5280415],[78.7132622,32.637518],[78.9112863,32.3547446],[79.0753073,32.3707901],[79.4999842,32.7468395],[79.3342062,32.9568267],[79.3786479,33.1642817],[78.973298,33.30957],[78.7813717,33.5527851],[78.7301087,34.0792646],[78.9761919,34.2171632],[78.9569395,34.3399609],[79.2044991,34.4394486],[79.7939722,34.4310253],[79.9562879,34.6847566],[79.8838375,34.9196001],[80.0469283,35.0177078],[80.2596285,35.5141633],[80.9788611,35.2934016],[81.0609233,35.3885637],[81.7114262,35.2456526],[82.0022095,35.3194465],[82.4281783,35.6897598],[82.7845907,35.6845405],[82.9358993,35.674076],[82.9717627,35.4904438],[83.09868,35.4127742],[84.1331905,35.3775308],[85.1497693,35.7498078],[85.3893413,35.7567067],[85.5618889,35.6574104],[85.9299284,35.7616934],[86.2123401,36.1159354],[87.3456043,36.3740592],[88.4592314,36.4488866],[89.6778133,36.0819581]]]},"properties":{"id":"54","name":"西藏","latitude":31.4515,"longitude":88.4137}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[96.3663399,42.7229226],[96.0909103,42.5869099],[96.0358232,41.9952923],[95.8639474,41.8550166],[95.0582601,41.7885607],[94.5809249,41.5852139],[93.577472,40.5879621],[93.2863269,40.4692614],[92.9415418,40.4725687],[92.7724048,39.8105419],[92.9479497,39.4524759],[92.9359607,39.1528559],[91.2944072,38.7451289],[90.6535161,38.6740738],[90.1509111,38.4327965],[90.4392656,37.996079],[90.4364751,37.7785729],[91.0737488,37.4879446],[91.316318,37.1189749],[91.2875859,37.0135033],[90.8077702,36.9105639],[90.6881393,36.6984838],[91.0067245,36.5034828],[91.1357605,36.1406367],[90.8750013,36.0036425],[90.6226652,36.1111295],[90.1656905,36.1292421],[90.0137618,36.2527746],[89.9720073,36.1049283],[89.6778133,36.0819581],[88.4592314,36.4488866],[87.3456043,36.3740592],[86.2123401,36.1159354],[85.9299284,35.7616934],[85.5618889,35.6574104],[85.3893413,35.7567067],[85.1497693,35.7498078],[84.1331905,35.3775308],[83.09868,35.4127742],[82.9717627,35.4904438],[82.9358993,35.674076],[82.7845907,35.6845405],[82.4281783,35.6897598],[82.0022095,35.3194465],[81.7114262,35.2456526],[81.0609233,35.3885637],[80.9788611,35.2934016],[80.2596285,35.5141633],[80.0469283,35.0177078],[79.8838375,34.9196001],[79.9562879,34.6847566],[79.7939722,34.4310253],[79.2044991,34.4394486],[78.9569395,34.3399609],[78.2731857,34.6588675],[78.0011609,35.2689078],[78.0556279,35.4528759],[77.4127731,35.4694123],[76.8964222,35.5896117],[76.5707573,35.7512556],[76.5371676,35.9025125],[76.1660275,35.8062393],[75.8943128,36.0973843],[76.0144088,36.2303995],[75.9765817,36.4626334],[75.7905465,36.6878393],[75.410518,36.7473188],[75.3512968,36.915784],[75.1001494,36.9941255],[74.8723597,36.9071024],[74.7925712,37.0151578],[74.542354,37.021669],[74.3825704,37.1265722],[74.7214645,37.2977762],[74.8923068,37.2311136],[75.1641248,37.4006381],[74.8918934,37.5992048],[74.9651705,37.7674633],[74.7907109,38.0814493],[74.8328789,38.4636482],[74.3342013,38.6669949],[74.1090988,38.6622924],[74.0288969,38.527236],[73.7973865,38.6028386],[73.6836984,38.8549421],[73.81599,38.9937709],[73.6022563,39.2357716],[73.632642,39.4483426],[73.8207443,39.4681863],[73.9267843,39.5928816],[73.823018,39.8056851],[74.0039889,40.0608117],[74.369858,40.1058218],[74.7057548,40.3312861],[74.8621277,40.3261701],[74.8323121,40.5081161],[75.1938904,40.4412536],[75.5876648,40.6119408],[75.6818193,40.291702],[76.2441622,40.4412019],[76.313512,40.3433267],[76.8609721,41.0132083],[78.0749549,41.0395116],[78.3598987,41.3775272],[78.6721277,41.5384476],[79.7475143,41.8797446],[79.842909,42.0018301],[80.1819064,42.0209763],[80.2684127,42.2379656],[80.1400485,42.622955],[80.227485,42.7909809],[80.5544934,42.898933],[80.3681482,43.02846],[80.7878642,43.1280405],[80.3451005,44.1030972],[80.3558492,44.6528828],[80.476152,44.7354101],[79.9917371,44.7936494],[79.8582052,44.9037202],[80.061707,45.0189586],[81.6652267,45.3479825],[81.9501189,45.1444807],[82.294594,45.2281965],[82.4758232,45.1156969],[82.5852222,45.1768301],[82.6157113,45.435419],[82.2971374,45.5545449],[83.0135165,47.1945881],[83.9053483,46.9739556],[84.663545,46.9838516],[84.7671045,46.8180736],[85.205114,47.0337194],[85.4986361,47.051832],[85.6596599,47.2065254],[85.5153793,47.9202803],[85.7186744,48.3588323],[86.5650826,48.5273233],[86.7445032,48.7035399],[86.7275017,48.9903441],[86.8873369,49.1068228],[87.4004322,49.071011],[87.8163241,49.1658373],[87.8725997,48.9680199],[87.7378793,48.8693696],[88.0638542,48.682611],[87.942828,48.5994894],[88.0166219,48.5398032],[88.5026905,48.3925512],[88.5807736,48.2119937],[89.0455514,47.992989],[89.5418002,48.0310228],[89.7512964,47.8243171],[90.0446119,47.8797659],[90.0828524,47.7561042],[90.3448003,47.6586425],[90.4687203,47.3089222],[90.9327747,46.8747885],[91.0474964,46.5664094],[90.8961878,46.3020328],[91.0024345,46.0218432],[90.7107727,45.7521955],[90.6511381,45.4931416],[90.8732434,45.1861836],[91.6629627,45.0595246],[93.525278,44.9512625],[93.927424,44.6729332],[94.1950045,44.6543297],[94.6982296,44.343496],[95.0368136,44.2549743],[95.3794283,44.287117],[95.3275452,44.006669],[95.5102731,43.9791255],[95.8549549,43.2845425],[96.2943079,42.933272],[96.3663399,42.7229226]]]},"properties":{"id":"65","name":"新疆","latitude":41.122,"longitude":85.4253}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[111.0105087,19.6837833],[110.6696883,19.3817406],[110.4314885,18.8214786],[110.4928492,18.7931176],[110.493663,18.876044],[110.5344344,18.7856306],[110.1032821,18.5393741],[110.0525822,18.3902042],[109.7461044,18.3959008],[109.5612085,18.1693383],[109.5612085,18.2587344],[109.1626083,18.2878279],[108.6949976,18.5048282],[108.6269637,19.2749698],[109.0158798,19.6012637],[109.3073837,19.711127],[109.273204,19.7936466],[109.1701766,19.7247989],[109.16684,19.8054874],[109.3037216,19.9216983],[109.4650171,19.8340518],[109.5270288,19.9513614],[109.7190048,20.0106469],[109.8354598,19.9308536],[109.9426376,19.9909122],[109.9900822,19.9059512],[110.156993,20.0673689],[110.3864852,20.0018985],[110.3829859,20.0810408],[110.5641382,19.9845238],[110.6779077,20.1635603],[110.7883407,20.0104027],[110.9345809,19.9950626],[111.0105087,19.6837833]]]},"properties":{"id":"46","name":"海南","latitude":19.1865,"longitude":109.825}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[107.6576461,37.8529353],[107.3172018,37.5901865],[107.2854724,37.0684612],[106.6440646,37.1816584],[106.5748182,36.9313378],[106.6490255,36.8341861],[106.4308476,36.5023201],[106.49658,36.268355],[106.8136666,36.2116401],[106.9447697,36.0769455],[106.8432255,35.8822029],[106.9134021,35.7888236],[106.7284522,35.6770474],[106.4292973,35.6994492],[106.49658,35.4747859],[106.3777759,35.2606646],[106.2106543,35.3951525],[105.9078821,35.4044026],[106.0604309,35.4638563],[105.8293856,35.4936478],[105.7255677,35.7100687],[105.4318388,35.7564224],[105.318099,35.9332075],[105.4459465,36.2545832],[105.2204822,36.6929544],[105.3216647,36.7807268],[104.8553882,37.2181937],[104.6213973,37.249277],[104.6895069,37.4119286],[104.3585193,37.4012316],[104.5223853,37.5299576],[104.9443234,37.5457189],[105.3544275,37.7526313],[105.7880961,37.8050571],[105.8966167,38.7361889],[106.3020699,39.2894884],[106.6140922,39.3583214],[106.7891203,39.3609569],[106.9778426,39.0356021],[106.4701217,38.2906863],[106.8291695,38.1503848],[107.1626376,38.1386026],[107.40469,37.9216649],[107.6576461,37.8529353]]]},"properties":{"id":"64","name":"宁夏","latitude":37.1762,"longitude":106.038}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[111.1100452,39.3851932],[111.2248702,39.3105466],[110.9950135,39.003847],[110.8994121,38.5454512],[110.5112187,38.2021905],[110.5150428,37.9549962],[110.7429358,37.7648786],[110.7887728,37.5614285],[110.3695736,36.8912369],[110.6198426,35.597259],[110.2596578,34.9447665],[110.2522681,34.6632592],[110.3360356,34.6158461],[110.4338074,34.2613974],[110.6182923,34.1624629],[110.5937976,33.8797411],[110.9682451,33.598828],[110.9746013,33.2664711],[110.7528577,33.09798],[110.5473922,33.2453354],[110.2344397,33.1563227],[109.5156722,33.2370672],[109.4531438,33.1481579],[109.7572596,33.0800742],[109.7395862,32.9300058],[110.0958435,32.8412515],[110.1682939,32.6223502],[109.579441,32.5412182],[109.4869918,32.3545887],[109.666309,32.0430057],[109.593962,31.737598],[109.3359933,31.7052485],[108.5183688,32.1975699],[108.2367322,32.2626564],[108.0030514,32.1498984],[107.6591964,32.3886177],[107.459622,32.4086423],[107.4483049,32.5222271],[107.20217,32.452774],[107.0699817,32.5229247],[107.0653308,32.7083139],[106.7125875,32.7378212],[106.2289478,32.5919644],[106.0565035,32.7135591],[106.1024956,32.8597517],[105.6332736,32.7074612],[105.4985531,32.9073974],[105.8864881,32.9780132],[105.9127397,33.2336824],[105.7179712,33.38866],[105.9929415,33.6106361],[106.3926587,33.6188268],[106.4955465,33.5435859],[106.5594702,33.5986213],[106.4243364,33.898758],[106.6736235,34.3846715],[106.3177279,34.5833416],[106.5497034,34.8625752],[106.4912057,35.0301102],[106.9148491,35.0890471],[107.2108517,34.8917724],[107.710046,34.951407],[107.8303487,34.9767284],[107.6704619,35.2279792],[107.741672,35.3183613],[107.9640874,35.2232767],[108.4926339,35.2724985],[108.6172258,35.3928271],[108.493099,35.8811952],[108.6771188,36.0052445],[108.7036805,36.3589696],[108.0417054,36.5977406],[107.886521,36.7553795],[107.2819584,36.9149047],[107.2854724,37.0684612],[107.3172018,37.5901865],[107.6576461,37.8529353],[107.9287407,37.7853425],[108.0387081,37.6325095],[108.7643486,37.6818863],[108.8363339,37.9883534],[108.9542595,37.9255407],[109.000975,37.9884826],[108.9863505,38.3352056],[109.5379965,38.785204],[109.6742672,39.0112108],[110.1768722,39.2851993],[110.1091761,39.4283947],[110.3381027,39.318143],[110.4941655,39.3743153],[110.6378776,39.2450984],[111.1205872,39.5807885],[111.1100452,39.3851932]]]},"properties":{"id":"61","name":"陕西","latitude":33.7713,"longitude":108.363}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[113.7210486,36.355869],[113.6099443,35.6460674],[113.4303687,35.4893845],[112.9027523,35.2405883],[112.6824557,35.3111783],[112.5259794,35.2202794],[112.0584628,35.2344905],[112.0381539,35.0457681],[111.8294328,35.0825618],[111.5576665,34.863402],[111.1386739,34.8192187],[110.5305457,34.5836775],[110.3360356,34.6158461],[110.2522681,34.6632592],[110.2596578,34.9447665],[110.6198426,35.597259],[110.3695736,36.8912369],[110.7887728,37.5614285],[110.7429358,37.7648786],[110.5150428,37.9549962],[110.5112187,38.2021905],[110.8994121,38.5454512],[110.9950135,39.003847],[111.2248702,39.3105466],[111.1100452,39.3851932],[111.3426925,39.4444144],[111.4899187,39.6521536],[111.7611682,39.5980484],[111.9214685,39.6888439],[112.3992172,40.2883422],[112.7013693,40.1747574],[113.086462,40.4044333],[113.518322,40.3437393],[114.0437679,40.4879941],[114.0269731,40.6351686],[114.1540971,40.742578],[114.2857687,40.3785692],[114.5106645,40.3249808],[114.0853675,40.1850152],[113.9359192,40.0157232],[114.382817,39.8610556],[114.402144,39.6584582],[114.5409469,39.5312308],[114.3939791,39.1693407],[114.2163155,39.0690368],[113.8533403,39.0722924],[113.7602194,38.9092016],[113.825125,38.810267],[113.5344967,38.5372863],[113.5394576,38.2521357],[113.7906568,38.1528653],[114.1004053,37.6981902],[113.7543282,37.1149442],[113.7760323,36.8906168],[113.4539331,36.736621],[113.5351168,36.4833806],[113.7210486,36.355869]]]},"properties":{"id":"14","name":"山西","latitude":37.7586,"longitude":112.389}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[115.3740227,31.41754],[115.5499809,31.1826964],[115.6687334,31.2172163],[116.0353776,31.0309486],[115.7678487,30.688153],[115.9460291,30.445868],[115.8767827,30.3897991],[116.0404936,30.2214373],[116.1472571,29.7887764],[115.8559054,29.7385985],[115.7051652,29.8608133],[115.4862122,29.8642756],[115.2720651,29.6146526],[115.08634,29.6570015],[115.1139352,29.5069073],[114.9727552,29.5599531],[114.8182426,29.3938651],[114.289386,29.3584409],[114.2465463,29.2489127],[113.9023812,29.0663398],[113.7112301,29.0729286],[113.5877234,29.2937936],[113.7293685,29.4370924],[113.6494251,29.6762768],[113.5361503,29.6857335],[113.5903072,29.8799594],[113.0488416,29.4542748],[112.9084884,29.6008033],[113.0129265,29.7729892],[112.2819117,29.5369313],[112.2176779,29.6691454],[111.7686097,29.9195952],[110.7418506,30.0961736],[110.4631596,30.0139822],[110.5911621,29.7713614],[110.3616671,29.6501026],[110.1039051,29.7854174],[109.7832011,29.7349295],[109.6908553,29.6049116],[109.4323182,29.5339082],[109.2065955,29.1042445],[108.9205664,29.3489841],[108.8720423,29.6389664],[108.6960323,29.6981617],[108.61304,29.8580228],[108.4468486,29.7357822],[108.4004432,29.8310735],[108.5382125,29.885463],[108.5320113,30.3154884],[108.3805994,30.3996951],[108.6699874,30.5738447],[109.3941809,30.5837408],[109.8706893,30.88858],[110.0662329,30.8284803],[110.1467448,31.3311112],[109.7326099,31.561123],[109.593962,31.737598],[109.666309,32.0430057],[109.4869918,32.3545887],[109.579441,32.5412182],[110.1682939,32.6223502],[110.0958435,32.8412515],[109.7395862,32.9300058],[109.7572596,33.0800742],[109.4531438,33.1481579],[109.5156722,33.2370672],[110.2344397,33.1563227],[110.5473922,33.2453354],[110.7528577,33.09798],[110.9746013,33.2664711],[111.5316215,32.6110847],[112.2857874,32.3506355],[113.0458444,32.4252304],[113.5276754,32.2966853],[113.7292135,32.4192618],[113.7943775,31.972519],[113.9719894,31.7465638],[114.1439685,31.8475396],[114.5556747,31.7376755],[114.5478715,31.5728793],[114.7665662,31.4904813],[114.9988518,31.4776138],[115.1285596,31.5945318],[115.2862244,31.3951383],[115.3740227,31.41754]]]},"properties":{"id":"42","name":"湖北","latitude":30.9857,"longitude":112.264}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[113.9023812,29.0663398],[113.9051717,28.9559848],[114.1427283,28.7885015],[114.0569454,28.5642775],[114.2268575,28.4089639],[113.9164889,28.021184],[113.7368099,27.981574],[113.5620919,27.5905643],[113.6001258,27.3682264],[113.8509632,27.3459022],[113.7540182,27.1418578],[113.8924077,26.9453323],[113.8647091,26.6558668],[114.0850574,26.5774995],[113.9253772,26.1703667],[114.213525,26.1697724],[114.0414425,26.0688484],[113.9071871,25.7497722],[113.982428,25.5816688],[113.9275476,25.4481111],[113.5824524,25.325948],[113.2829358,25.51759],[112.8523678,25.3276533],[112.8891097,25.241457],[113.0147868,25.245617],[112.9888969,24.9639287],[112.8078227,24.9428448],[112.6633354,25.1131444],[112.4583867,25.1642524],[112.1827446,25.1525736],[112.1447624,24.7935515],[111.9965544,24.7356739],[111.6671171,24.7796764],[111.5169454,24.6426564],[111.4281653,24.6810261],[111.4269251,25.106194],[111.2743763,25.1476643],[111.0306185,24.9180142],[110.9546025,25.0253462],[111.3158208,25.5031981],[111.4466138,25.9267123],[111.2785104,25.8610574],[111.1943295,25.9575115],[111.251897,26.2797141],[110.9472644,26.3898882],[110.8789482,26.2752182],[110.5541101,26.3412348],[110.5365402,26.2248595],[110.2469971,25.9782079],[110.0336251,26.0364989],[110.0620472,26.1499287],[109.9273267,26.1970834],[109.772039,25.9081605],[109.6765926,25.8890661],[109.6031604,26.0526737],[109.4567094,26.0388502],[109.3992969,26.2699472],[109.2965642,26.3125286],[109.4025525,26.5372952],[109.294032,26.7273095],[109.519858,26.8583609],[109.443842,26.900994],[109.4991875,27.0624828],[109.2305734,27.1519864],[108.950177,27.0269036],[108.7913237,27.0831276],[109.4183655,27.5595067],[109.2583753,28.5059089],[109.2065955,29.1042445],[109.4323182,29.5339082],[109.6908553,29.6049116],[109.7832011,29.7349295],[110.1039051,29.7854174],[110.3616671,29.6501026],[110.5911621,29.7713614],[110.4631596,30.0139822],[110.7418506,30.0961736],[111.7686097,29.9195952],[112.2176779,29.6691454],[112.2819117,29.5369313],[113.0129265,29.7729892],[112.9084884,29.6008033],[113.0488416,29.4542748],[113.5903072,29.8799594],[113.5361503,29.6857335],[113.6494251,29.6762768],[113.7293685,29.4370924],[113.5877234,29.2937936],[113.7112301,29.0729286],[113.9023812,29.0663398]]]},"properties":{"id":"43","name":"湖南","latitude":27.6667,"longitude":111.712}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[105.4985531,32.9073974],[105.6332736,32.7074612],[106.1024956,32.8597517],[106.0565035,32.7135591],[106.2289478,32.5919644],[106.7125875,32.7378212],[107.0653308,32.7083139],[107.0699817,32.5229247],[107.20217,32.452774],[107.4483049,32.5222271],[107.459622,32.4086423],[107.6591964,32.3886177],[108.0030514,32.1498984],[108.2367322,32.2626564],[108.5183688,32.1975699],[108.3611691,32.1671842],[108.4192017,32.1000048],[108.2677897,31.9729066],[108.5161984,31.7082716],[108.0331271,31.2222289],[107.9295158,30.8726637],[107.8115385,30.7980171],[107.7215182,30.889226],[107.5075778,30.8219949],[107.4776054,30.6095015],[107.0329297,30.0578555],[106.7172901,30.0592766],[106.5385413,30.3411199],[106.2390247,30.2202487],[106.1247164,30.3423343],[105.7917135,30.4233629],[105.5572058,30.1475917],[105.7389002,30.0326374],[105.7099614,29.8675054],[105.2910722,29.5847836],[105.3148434,29.4695969],[105.5058395,29.2914682],[105.7080494,29.2909514],[105.7951241,28.9365286],[106.0084445,28.9733998],[106.2603154,28.8693234],[106.3824268,28.572494],[106.3386569,28.4801224],[105.9844149,28.7535424],[105.8919141,28.6093135],[105.683193,28.5834494],[105.6205612,28.482422],[105.6504818,28.3400276],[105.8660242,28.258353],[105.8917591,28.1538891],[106.1993372,28.1242526],[106.3453748,27.8349421],[105.6311031,27.6822383],[105.4797945,27.7838858],[105.2969633,27.7217449],[105.2823906,28.000746],[105.0557377,28.0881308],[104.8974012,27.9011138],[104.4824911,27.8909852],[104.333818,28.046738],[104.4446123,28.0998872],[104.268499,28.3338006],[104.2500505,28.5307911],[104.4142265,28.6401126],[103.8510568,28.6681212],[103.7952462,28.5311787],[103.8803056,28.325739],[103.4590393,28.1347688],[103.5085454,27.8645269],[103.1207654,27.4122547],[102.9548324,27.4207814],[102.8894617,27.2914869],[102.9013473,26.9247393],[103.0578235,26.5362875],[103.0032532,26.4003527],[102.6678215,26.2258672],[102.5681376,26.3786486],[102.1125582,26.0844288],[101.8495252,26.0348453],[101.7637423,26.1763354],[101.5949154,26.2086848],[101.6436463,26.3494772],[101.4124459,26.5696705],[101.4805555,26.7871249],[101.4094487,26.729454],[101.1414547,27.0448612],[101.1728223,27.1910538],[101.0038404,27.1975133],[100.6609156,27.8750947],[100.2974752,27.7610707],[100.0588334,28.0661425],[100.143066,28.3415779],[99.7188542,28.8422708],[99.3931376,28.5427801],[99.3815105,28.1845332],[99.2747469,28.2773182],[99.1625574,28.4381611],[99.1088139,29.2237721],[98.9867542,29.6509036],[99.0563107,29.9153319],[98.9543014,30.7478651],[98.6037801,31.1697515],[98.6379383,31.3092779],[98.7678011,31.2303679],[98.8849516,31.3540813],[98.4256515,31.8134073],[98.4529883,31.9840945],[98.2057683,32.3556481],[97.7157207,32.5441896],[97.4306735,32.7003299],[97.3609619,32.8970362],[97.7242989,33.4061266],[97.3905209,33.6113854],[97.3835446,33.8698709],[97.6389295,33.9995788],[97.7450729,33.8648583],[98.034926,33.9597879],[98.4579493,33.8401053],[98.6458448,33.6761618],[98.8520854,33.1748746],[99.2893714,32.8871402],[99.6985454,32.7446166],[99.8602409,33.0276484],[100.1366065,32.8475044],[100.1190365,32.6708743],[100.2231645,32.6368971],[100.3994328,32.7583884],[100.4984965,32.6690915],[100.5312077,32.4033971],[100.6747132,32.6830958],[101.1708069,32.688341],[101.236591,32.8075068],[101.1314295,32.9383515],[101.1641407,33.1280816],[101.4451571,33.2358528],[101.6436463,33.1277715],[101.7775399,33.5300467],[101.7953683,33.6050809],[101.9232158,33.406385],[101.8527808,33.1220871],[102.481838,33.4650377],[102.171211,33.9417528],[102.6176437,34.0835013],[102.5748039,34.1395185],[102.9305961,34.2955814],[103.1200936,34.1686124],[103.2719707,33.7651745],[103.5586198,33.8068773],[103.5227564,33.7141182],[104.1563094,33.6240203],[104.1746546,33.4901525],[104.3829106,33.3264932],[104.2805913,33.2720521],[104.4058549,33.0632793],[104.2888595,32.847892],[104.5584038,32.688341],[105.2699882,32.641703],[105.4372132,32.7464511],[105.3852267,32.8742211],[105.4985531,32.9073974]]]},"properties":{"id":"51","name":"四川","latitude":30.5431,"longitude":102.384}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[105.2969633,27.7217449],[105.1973828,27.398638],[104.5942155,27.3137853],[104.3444117,27.4411935],[104.1743445,27.271514],[103.9113115,27.3903698],[103.596447,27.0760737],[103.7782963,26.9558743],[103.7865646,26.5771119],[104.0204004,26.5141959],[104.1533639,26.6512418],[104.4298845,26.71253],[104.6755026,26.3792687],[104.5451746,26.2704123],[104.3670459,25.7504957],[104.2995048,25.760831],[104.432675,25.5068155],[104.535046,25.5080557],[104.5658452,25.3811901],[104.7782353,25.26174],[104.5398519,24.7417718],[104.5018697,24.57819],[104.6670276,24.339755],[104.7526555,24.4683259],[105.1129952,24.4098282],[105.2829073,24.0740606],[105.4471867,24.0376029],[105.6184941,24.135323],[105.8722254,24.0247096],[106.0211052,24.1109059],[106.1574276,23.9737308],[106.1281271,23.5406564],[105.9830196,23.4690329],[105.8480408,23.5193916],[105.5213254,23.1631478],[105.3121554,23.36581],[104.8700635,23.1635485],[104.7282117,22.839098],[104.5535454,22.8360491],[104.3619113,22.6925355],[104.2132561,22.8250162],[104.0733163,22.7826673],[103.9595248,22.5071028],[103.646934,22.7990488],[103.5036353,22.5814135],[103.309642,22.7879383],[102.9890931,22.437598],[102.4427181,22.7651749],[102.218029,22.4106745],[101.8679212,22.3788419],[101.7131503,22.4915482],[101.5182268,22.2282051],[101.8038424,21.6259162],[101.7225037,21.3042304],[101.8214903,21.2210711],[101.7179045,21.1344734],[101.4951274,21.2428388],[101.2752959,21.1741092],[101.1188713,21.7598099],[100.5718246,21.455074],[100.3265166,21.5242687],[100.1871452,21.4278922],[100.0899935,21.5289196],[100.1463208,21.6492223],[99.9502605,21.7211559],[99.9424056,22.0455289],[99.1444698,22.1535326],[99.3577902,22.4954756],[99.3079741,22.7451761],[99.413394,22.9307462],[99.5380376,22.9264312],[99.4930791,23.0573793],[99.3140719,23.1264706],[99.2166101,23.0573793],[98.8590092,23.1793873],[98.8896017,23.4067894],[98.7808745,23.5328541],[98.8573556,23.6043485],[98.7778772,23.7692996],[98.6636723,23.7969465],[98.6632589,23.9695458],[98.8657272,24.1456849],[98.5852275,24.075715],[98.1815312,24.1186581],[97.6473448,23.8685244],[97.5164555,23.9428291],[97.7076583,24.1252986],[97.6398588,24.4392846],[97.5195561,24.4307838],[97.5360926,24.7450282],[97.7729773,24.8546856],[97.7036276,25.0739228],[97.8236202,25.2616116],[97.8889393,25.2056461],[98.1083574,25.3888907],[98.1400867,25.6114611],[98.3326331,25.5669677],[98.5094698,25.8380622],[98.6100322,25.8005968],[98.6924044,25.87899],[98.54554,26.1056428],[98.7055302,26.1749409],[98.6421749,26.2545226],[98.755553,26.6250426],[98.6792786,27.5773359],[98.4102511,27.6842545],[98.2947026,27.5366149],[98.1150023,28.1438884],[98.2997677,28.354807],[98.4099935,28.2506015],[98.5758232,28.3175483],[98.66481,28.9741749],[98.7850094,29.0002457],[98.8506901,28.8200758],[98.9456197,28.8420124],[98.9901648,29.2019905],[99.1088139,29.2237721],[99.1625574,28.4381611],[99.2747469,28.2773182],[99.3815105,28.1845332],[99.3931376,28.5427801],[99.7188542,28.8422708],[100.143066,28.3415779],[100.0588334,28.0661425],[100.2974752,27.7610707],[100.6609156,27.8750947],[101.0038404,27.1975133],[101.1728223,27.1910538],[101.1414547,27.0448612],[101.4094487,26.729454],[101.4805555,26.7871249],[101.4124459,26.5696705],[101.6436463,26.3494772],[101.5949154,26.2086848],[101.7637423,26.1763354],[101.8495252,26.0348453],[102.1125582,26.0844288],[102.5681376,26.3786486],[102.6678215,26.2258672],[103.0032532,26.4003527],[103.0578235,26.5362875],[102.9013473,26.9247393],[102.8894617,27.2914869],[102.9548324,27.4207814],[103.1207654,27.4122547],[103.5085454,27.8645269],[103.4590393,28.1347688],[103.8803056,28.325739],[103.7952462,28.5311787],[103.8510568,28.6681212],[104.4142265,28.6401126],[104.2500505,28.5307911],[104.268499,28.3338006],[104.4446123,28.0998872],[104.333818,28.046738],[104.4824911,27.8909852],[104.8974012,27.9011138],[105.0557377,28.0881308],[105.2823906,28.000746],[105.2969633,27.7217449]]]},"properties":{"id":"53","name":"云南","latitude":24.4603,"longitude":101.661}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[118.6487363,39.0446512],[118.5143084,38.919445],[118.4881932,39.0504922],[118.6487363,39.0446512]]],[[[116.8756364,39.6864668],[116.9287081,39.8013952],[116.7594161,40.0126226],[117.2390768,40.0926177],[117.1527771,39.6184089],[116.8756364,39.6864668]]],[[[119.2309965,41.2733983],[118.9647596,41.0747025],[118.8546888,40.8206094],[119.0615495,40.6513691],[119.190999,40.7004101],[119.2936284,40.5307047],[119.5636894,40.5400581],[119.6347445,40.2090705],[119.7425932,40.2051948],[119.8501896,39.9863142],[119.5355924,39.8908256],[119.3396102,39.7155622],[119.3050754,39.4329778],[118.9401962,39.1388614],[118.8589787,39.2075056],[118.3442696,39.0307086],[118.0095633,39.2185518],[117.8927836,39.5646138],[117.6188986,39.5889275],[117.5331157,39.7504164],[117.501283,39.9887222],[117.7655563,39.9640726],[117.7497433,40.0634722],[117.3567957,40.2570263],[117.1841447,40.49727],[117.4859351,40.661937],[117.0580026,40.6772073],[116.6526526,41.03101],[116.3558232,40.9015864],[116.458866,40.7915673],[115.7281612,40.539593],[115.9452023,40.2937165],[115.4270944,39.962574],[115.5624349,39.807493],[115.4507105,39.7794844],[115.4634229,39.6432136],[115.7559115,39.5089582],[116.2104057,39.5719001],[116.3866223,39.4421406],[116.6043868,39.6111742],[116.7934192,39.6023117],[116.8918112,39.1025231],[116.7121839,39.011831],[116.7108403,38.8205248],[117.2713229,38.5592488],[117.543549,38.621324],[117.837159,38.2709076],[117.4206161,37.8466824],[116.8024109,37.8403262],[116.4206771,37.4787979],[116.3500871,37.6209081],[116.2555709,37.3873306],[115.9750196,37.3217016],[115.7730164,36.9457038],[115.2757341,36.4742081],[115.4603223,36.1578708],[115.2959912,36.0868415],[115.1060804,36.1845617],[114.9189083,36.0612359],[113.989301,36.3590213],[113.7210486,36.355869],[113.5351168,36.4833806],[113.4539331,36.736621],[113.7760323,36.8906168],[113.7543282,37.1149442],[114.1004053,37.6981902],[113.7906568,38.1528653],[113.5394576,38.2521357],[113.5344967,38.5372863],[113.825125,38.810267],[113.7602194,38.9092016],[113.8533403,39.0722924],[114.2163155,39.0690368],[114.3939791,39.1693407],[114.5409469,39.5312308],[114.402144,39.6584582],[114.382817,39.8610556],[113.9359192,40.0157232],[114.0853675,40.1850152],[114.5106645,40.3249808],[114.2857687,40.3785692],[114.1540971,40.742578],[113.8227995,41.0941845],[113.9638245,41.153354],[113.9279611,41.4183507],[114.1970919,41.5935855],[114.255693,41.8600809],[114.596344,42.1412782],[114.8048584,42.1784077],[114.9203036,41.9368721],[114.8889877,41.6100445],[115.2258663,41.5858341],[115.3413115,41.6158581],[115.3397612,41.7208387],[115.8587993,41.9274669],[116.0378581,41.8006271],[116.3775273,42.0096842],[116.599736,41.9237204],[116.8581181,42.0195027],[116.8871086,42.3953712],[117.4123995,42.4580806],[117.529395,42.6202412],[117.5936288,42.5515891],[117.7874671,42.6096217],[118.0242485,42.382633],[117.9893152,42.2216092],[118.1339059,42.0219056],[118.2678512,42.0738663],[118.3221631,41.8635432],[118.1593824,41.7191334],[118.34981,41.3362369],[118.7971212,41.3803169],[119.2309965,41.2733983]]]]},"properties":{"id":"13","name":"河北","latitude":38.5205,"longitude":115.314}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[115.4603223,36.1578708],[115.3310795,35.773734],[115.4493152,35.9020983],[116.0772872,36.1031196],[116.0336723,35.9658153],[115.5042473,35.7228328],[115.3450322,35.4962574],[115.0683566,35.3801147],[114.8515739,35.1781632],[114.8342106,35.0161834],[115.1745,34.9441723],[115.2160478,34.8357293],[115.4292648,34.779712],[115.5417127,34.577528],[116.1512879,34.5667276],[116.1567139,34.4473034],[116.4009884,34.2750141],[116.5520903,34.286848],[116.6411805,33.953225],[116.1820354,33.7183298],[115.961377,34.0001472],[115.6536438,34.048413],[115.5613497,33.8981379],[115.6347303,33.5918259],[115.3420866,33.5007462],[115.2857593,33.1482354],[114.8865589,33.0834073],[114.9252128,32.958247],[115.1847319,32.8590541],[115.1993046,32.5914735],[115.5647604,32.4024411],[115.8708916,32.5324332],[115.901329,31.7944937],[115.5315324,31.7363836],[115.3740227,31.41754],[115.2862244,31.3951383],[115.1285596,31.5945318],[114.9988518,31.4776138],[114.7665662,31.4904813],[114.5478715,31.5728793],[114.5556747,31.7376755],[114.1439685,31.8475396],[113.9719894,31.7465638],[113.7943775,31.972519],[113.7292135,32.4192618],[113.5276754,32.2966853],[113.0458444,32.4252304],[112.2857874,32.3506355],[111.5316215,32.6110847],[110.9746013,33.2664711],[110.9682451,33.598828],[110.5937976,33.8797411],[110.6182923,34.1624629],[110.4338074,34.2613974],[110.3360356,34.6158461],[110.5305457,34.5836775],[111.1386739,34.8192187],[111.5576665,34.863402],[111.8294328,35.0825618],[112.0381539,35.0457681],[112.0584628,35.2344905],[112.5259794,35.2202794],[112.6824557,35.3111783],[112.9027523,35.2405883],[113.4303687,35.4893845],[113.6099443,35.6460674],[113.7210486,36.355869],[113.989301,36.3590213],[114.9189083,36.0612359],[115.1060804,36.1845617],[115.2959912,36.0868415],[115.4603223,36.1578708]]]},"properties":{"id":"41","name":"河南","latitude":33.9055,"longitude":113.484}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[121.3525497,39.4824079],[121.4336044,39.3858096],[121.2961532,39.3914249],[121.3525497,39.4824079]]],[[[125.7040897,40.8591946],[125.6826433,40.7688821],[125.0251123,40.5343745],[125.0263009,40.4573766],[124.8955079,40.4836282],[124.1181747,39.8331566],[123.7200627,39.8305525],[123.6309514,39.9039981],[123.5914006,39.7843285],[123.0091252,39.6804874],[122.2514755,39.3236758],[122.127452,39.1419945],[121.8269149,39.0362816],[121.8598739,38.9446475],[121.6357528,38.9953067],[121.7048446,38.8731143],[121.1530868,38.7276065],[121.1179305,38.9434268],[121.6740829,39.0880395],[121.5926213,39.1922061],[121.7797958,39.3714867],[121.5489201,39.3618839],[121.4360458,39.5086124],[121.2233993,39.5286319],[121.5473739,39.6731632],[121.457286,39.7484805],[121.5358993,39.8617618],[121.8737899,39.9914005],[122.3018498,40.5023461],[121.8510848,40.8322615],[121.8259383,40.9481876],[121.5750432,40.8414981],[121.1757919,40.9223087],[120.5456649,40.4024112],[120.4360458,40.1944848],[119.8501896,39.9863142],[119.7425932,40.2051948],[119.6347445,40.2090705],[119.5636894,40.5400581],[119.2936284,40.5307047],[119.190999,40.7004101],[119.0615495,40.6513691],[118.8546888,40.8206094],[118.9647596,41.0747025],[119.2309965,41.2733983],[119.3897465,41.4725593],[119.298641,41.7773469],[119.365872,42.1004796],[119.2452592,42.1919469],[119.5117029,42.3945185],[119.6294218,42.250548],[119.8214515,42.2086126],[120.1075839,41.7065244],[120.5091614,42.1486938],[120.9125993,42.2965659],[121.0342456,42.2601081],[121.3688505,42.4999901],[121.7236609,42.4576671],[122.0450367,42.7208552],[122.4255302,42.6749665],[122.3920439,42.8535603],[122.7279407,42.741009],[123.1312753,42.8263785],[123.2997921,43.0164961],[123.6119694,43.08135],[123.6962537,43.3534781],[123.7487053,43.4722822],[124.281851,43.2259923],[124.4804952,42.8512607],[124.8718409,43.1178336],[124.959174,42.6529524],[125.3323812,42.1646618],[125.4805376,42.1514326],[125.2954326,41.9572326],[125.3062846,41.6803761],[125.4495317,41.6799368],[125.7376795,41.2452347],[125.7664116,41.1394789],[125.576449,40.9126193],[125.7040897,40.8591946]]]]},"properties":{"id":"21","name":"辽宁","latitude":41.386,"longitude":123.07}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[119.2802841,35.0766055],[118.866781,35.0363113],[118.7594491,34.7486286],[118.4771924,34.6892008],[118.342782,34.4185713],[118.1654285,34.3992443],[118.1503907,34.547504],[117.9146945,34.6769534],[117.7900509,34.6511669],[117.7733077,34.5265492],[117.4690369,34.4753378],[117.3369519,34.5886126],[117.1818193,34.4501456],[116.827629,34.9583058],[116.4700281,34.8982578],[116.3772172,34.6395397],[116.1512879,34.5667276],[115.5417127,34.577528],[115.4292648,34.779712],[115.2160478,34.8357293],[115.1745,34.9441723],[114.8342106,35.0161834],[114.8515739,35.1781632],[115.0683566,35.3801147],[115.3450322,35.4962574],[115.5042473,35.7228328],[116.0336723,35.9658153],[116.0772872,36.1031196],[115.4493152,35.9020983],[115.3310795,35.773734],[115.4603223,36.1578708],[115.2757341,36.4742081],[115.7730164,36.9457038],[115.9750196,37.3217016],[116.2555709,37.3873306],[116.3500871,37.6209081],[116.4206771,37.4787979],[116.8024109,37.8403262],[117.4206161,37.8466824],[117.837159,38.2709076],[118.0848088,38.1387393],[118.9500368,38.0972619],[119.2556635,37.6718666],[119.0371277,37.7220888],[118.9724227,37.2806664],[119.28712,37.1372745],[119.7705998,37.1518415],[119.8973088,37.2494164],[119.8588973,37.3601749],[120.297618,37.5978865],[120.2199813,37.6862654],[120.7380477,37.8339704],[121.1379501,37.7011579],[121.1914982,37.5751814],[121.3745223,37.6105411],[121.5916447,37.4244652],[121.957286,37.4238142],[122.1218368,37.5627302],[122.1831975,37.4181583],[122.688243,37.4098168],[122.5708114,37.344794],[122.6289169,37.1928165],[122.4091903,37.006293],[122.5400497,37.0277367],[122.4363713,36.8706729],[122.1853133,36.849921],[122.2658798,36.8980167],[122.033051,36.8980167],[122.0396428,36.9846052],[121.9262801,36.9935977],[121.6374618,36.8313663],[121.634288,36.7465681],[121.4529729,36.8163923],[121.0324813,36.5895043],[120.7708439,36.6171736],[120.7422795,36.5558536],[120.8645939,36.5977237],[120.9499618,36.4591739],[120.8674423,36.3771833],[120.8320419,36.4552676],[120.6865341,36.3871524],[120.696788,36.1439883],[120.3535262,36.0408389],[120.2864689,36.2638207],[120.2845158,36.1759708],[120.1172795,36.2096622],[120.1001896,36.0960961],[120.2844344,35.9625919],[120.038829,35.8428409],[120.0029403,35.7277693],[119.9377548,35.7611352],[119.9045516,35.6245792],[119.6479598,35.5839298],[119.2802841,35.0766055]]]},"properties":{"id":"37","name":"山东","latitude":36.3271,"longitude":118.114}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[118.0095633,39.2185518],[117.7573348,39.1144473],[117.543549,38.621324],[117.2713229,38.5592488],[116.7108403,38.8205248],[116.7121839,39.011831],[116.8918112,39.1025231],[116.7934192,39.6023117],[116.8756364,39.6864668],[117.1527771,39.6184089],[117.2390768,40.0926177],[117.3567957,40.2570263],[117.7497433,40.0634722],[117.7655563,39.9640726],[117.501283,39.9887222],[117.5331157,39.7504164],[117.6188986,39.5889275],[117.8927836,39.5646138],[118.0095633,39.2185518]]]},"properties":{"id":"12","name":"天津","latitude":38.3708,"longitude":119.147,"cp":[117.347,39.3708]}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[118.1747303,29.4078694],[118.0007874,29.143932],[118.425516,28.6951997],[118.4464449,28.288687],[118.3488798,28.2198024],[118.3677934,28.0997063],[117.8234339,27.9372615],[117.7455575,27.8132897],[117.5089311,27.9708253],[117.284242,27.8570338],[117.1122628,27.5676199],[117.1538107,27.2763974],[117.0401225,27.1095342],[116.545269,26.8678694],[116.594465,26.3950817],[116.398973,26.287543],[116.3232154,25.9551085],[116.1351648,25.8663284],[115.9787403,25.3508302],[115.8428313,25.1947415],[115.8875314,24.916774],[115.758392,24.8291308],[115.7970459,24.564134],[115.7057854,24.5457114],[115.4205831,24.7845598],[114.4248816,24.4995902],[114.169135,24.6695798],[114.4135128,24.9796901],[114.7307028,25.1294225],[114.7069316,25.2895678],[114.5693173,25.4068733],[114.0260429,25.267657],[114.0120903,25.4351144],[113.9275476,25.4481111],[113.982428,25.5816688],[113.9071871,25.7497722],[114.0414425,26.0688484],[114.213525,26.1697724],[113.9253772,26.1703667],[114.0850574,26.5774995],[113.8647091,26.6558668],[113.8924077,26.9453323],[113.7540182,27.1418578],[113.8509632,27.3459022],[113.6001258,27.3682264],[113.5620919,27.5905643],[113.7368099,27.981574],[113.9164889,28.021184],[114.2268575,28.4089639],[114.0569454,28.5642775],[114.1427283,28.7885015],[113.9051717,28.9559848],[113.9023812,29.0663398],[114.2465463,29.2489127],[114.289386,29.3584409],[114.8182426,29.3938651],[114.9727552,29.5599531],[115.1139352,29.5069073],[115.08634,29.6570015],[115.2720651,29.6146526],[115.4862122,29.8642756],[115.7051652,29.8608133],[115.8559054,29.7385985],[116.1472571,29.7887764],[116.4925074,29.8847137],[116.6504822,30.0506725],[116.8867985,29.9204221],[116.6749768,29.7080061],[116.7246896,29.5528476],[116.8883488,29.5605216],[117.0790865,29.7102023],[117.0670976,29.840582],[117.1923613,29.9264682],[117.2285348,29.8472741],[117.4063017,29.8311769],[117.5273796,29.6223524],[117.9859046,29.5720196],[118.1747303,29.4078694]]]},"properties":{"id":"36","name":"江西","latitude":27.6397,"longitude":116.017}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[119.9013778,32.0824649],[119.7161564,32.2726505],[119.8328557,32.2521426],[119.9013778,32.0824649]]],[[[121.3409123,31.4909529],[121.1867945,31.4575117],[121.0629777,31.1536801],[120.865212,31.1357226],[120.9093437,31.011725],[120.692096,30.9765592],[120.7094593,30.8910863],[120.4909713,30.7637039],[120.446943,30.8896911],[120.1286162,30.9431762],[119.9319357,31.1500369],[119.6297836,31.1328804],[119.3627714,31.1923599],[119.3489222,31.2858168],[118.8160865,31.2263372],[118.7510258,31.3579571],[118.8604765,31.6273721],[118.6678785,31.654218],[118.3519804,31.9466808],[118.6840532,32.3392408],[118.5518132,32.5744461],[118.8913273,32.5956851],[119.0805148,32.4460819],[119.1993706,32.5937214],[119.1565308,32.8182555],[118.8573759,32.972303],[118.720175,32.7321367],[118.2996839,32.7774053],[118.2180351,33.179913],[117.931851,33.2351293],[118.1128219,33.4794813],[118.1236739,33.7660013],[117.7269023,33.7279158],[117.7455575,33.8822733],[117.6238595,34.0082604],[117.1594434,34.0911752],[117.0339213,34.1555382],[116.9494821,34.3892966],[116.3772172,34.6395397],[116.4700281,34.8982578],[116.827629,34.9583058],[117.1818193,34.4501456],[117.3369519,34.5886126],[117.4690369,34.4753378],[117.7733077,34.5265492],[117.7900509,34.6511669],[117.9146945,34.6769534],[118.1503907,34.547504],[118.1654285,34.3992443],[118.342782,34.4185713],[118.4771924,34.6892008],[118.7594491,34.7486286],[118.866781,35.0363113],[119.2802841,35.0766055],[119.1922307,34.7182071],[119.4422307,34.7460391],[119.6409611,34.5505232],[120.2570907,34.311835],[120.4837346,33.6499698],[120.8957626,33.0135766],[120.8638682,32.6710576],[121.3894089,32.3849476],[121.44337,32.1143253],[121.8219451,31.9524864],[121.914842,31.7064343],[121.2864184,31.8905892],[120.9778168,31.8143653],[120.8108016,32.0226098],[120.6343765,32.0770096],[120.1313583,31.9431827],[119.81837,32.3137068],[119.6923934,32.3197696],[119.6452743,32.1952172],[119.7885848,32.1986352],[120.0063955,31.950305],[120.7503539,31.9783363],[120.8247986,31.8287025],[120.748383,31.8022322],[121.1444023,31.6846583],[121.3409123,31.4909529]]]]},"properties":{"id":"32","name":"江苏","latitude":32.9844,"longitude":119.942}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[121.3409123,31.4909529],[121.725164,31.2815672],[121.9773829,30.9149234],[121.2747994,30.6912794],[120.9810189,30.832046],[120.9093437,31.011725],[120.865212,31.1357226],[121.0629777,31.1536801],[121.1867945,31.4575117],[121.3409123,31.4909529]]],[[[121.9128897,31.4563322],[121.3144637,31.655585],[121.1762876,31.7843229],[121.2640645,31.8410768],[121.8440754,31.607947],[121.9800857,31.5402958],[121.9128897,31.4563322]]]]},"properties":{"id":"31","name":"上海","latitude":31.0909,"longitude":121.409}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[121.2853524,28.1019456],[121.1515728,28.0412325],[121.1203719,28.1356876],[121.2305876,28.2197325],[121.2853524,28.1019456]]],[[[122.1735946,30.1022403],[122.3225204,30.0319278],[122.2936304,29.9337833],[122.0105087,30.0003116],[121.97462,30.1480167],[122.1735946,30.1022403]]],[[[122.2145288,30.2473005],[122.0735783,30.2914086],[122.2114364,30.3466251],[122.2145288,30.2473005]]],[[[120.9093437,31.011725],[120.9810189,30.832046],[121.2747994,30.6912794],[120.9777587,30.5433176],[120.8317913,30.3052504],[120.6981482,30.3939506],[120.4303154,30.3898401],[120.38472,30.2495882],[120.4504943,30.3688601],[120.6516706,30.3592705],[120.8928122,30.1697964],[121.1496967,30.3257533],[121.3773841,30.3250636],[121.6777559,30.000641],[122.1364146,29.884535],[121.7041122,29.5720076],[121.44337,29.5242374],[121.50893,29.3983495],[121.72462,29.5384789],[121.7783813,29.4694231],[121.7961204,29.6005912],[121.9663192,29.6024844],[121.9429631,29.1958682],[121.7853467,29.1680855],[121.7996525,29.3739688],[121.7456975,29.2016055],[121.5258895,29.2777774],[121.4017033,29.1065128],[121.6214299,29.1132673],[121.6897893,29.0170759],[121.684174,28.9146996],[121.4978133,28.9496524],[121.6699325,28.8253441],[121.4548446,28.6895206],[121.656342,28.3393008],[121.5855412,28.256822],[121.4730861,28.3306029],[121.3300887,28.1475284],[121.1840926,28.3821475],[120.9652278,27.9871449],[120.5889592,28.0266788],[120.8352971,27.9559594],[120.852272,27.8581919],[120.5965744,27.5702828],[120.6768498,27.494615],[120.6352645,27.3797061],[120.5459091,27.4032657],[120.5178329,27.2016055],[120.4192001,27.2063663],[120.2489189,27.4101619],[119.7700851,27.3158782],[119.6158309,27.6655726],[119.2656197,27.4241145],[118.9190776,27.4768244],[118.748132,27.9732024],[118.7960877,28.2399303],[118.7352128,28.3259716],[118.4464449,28.288687],[118.425516,28.6951997],[118.0007874,29.143932],[118.1747303,29.4078694],[118.3732194,29.4528279],[118.7237407,29.7302011],[118.8939628,29.9825888],[118.8810954,30.3243509],[119.392382,30.3684309],[119.2415385,30.5508487],[119.3835454,30.6852591],[119.4431283,30.6392154],[119.6297836,31.1328804],[119.9319357,31.1500369],[120.1286162,30.9431762],[120.446943,30.8896911],[120.4909713,30.7637039],[120.7094593,30.8910863],[120.692096,30.9765592],[120.9093437,31.011725]]]]},"properties":{"id":"33","name":"浙江","latitude":29.1084,"longitude":119.97}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[131.2528485,43.4691686],[131.1030359,42.910431],[130.4071611,42.7353771],[130.5307711,42.53048],[130.2430367,42.7433611],[130.239006,42.9022403],[129.934115,43.0084095],[129.7033281,42.4423717],[129.535173,42.3695596],[129.3401461,42.4454723],[129.2111617,42.2199564],[128.8831719,42.0304089],[128.0345927,41.9937428],[128.3030001,41.5834061],[128.1461105,41.3763386],[128.0014165,41.4708548],[127.6383379,41.4298754],[127.1046753,41.537414],[127.1797095,41.5851631],[126.9298023,41.8010414],[126.6178833,41.6659333],[126.5221269,41.3519473],[126.0153361,40.909132],[125.7040897,40.8591946],[125.576449,40.9126193],[125.7664116,41.1394789],[125.7376795,41.2452347],[125.4495317,41.6799368],[125.3062846,41.6803761],[125.2954326,41.9572326],[125.4805376,42.1514326],[125.3323812,42.1646618],[124.959174,42.6529524],[124.8718409,43.1178336],[124.4804952,42.8512607],[124.281851,43.2259923],[123.7487053,43.4722822],[123.6962537,43.3534781],[123.3781336,43.4531619],[123.5221558,43.6969713],[123.0988225,44.531494],[122.3766443,44.2199627],[122.2540678,44.2459301],[122.2818697,44.4286579],[122.0459668,44.6949466],[122.0107752,45.1183316],[122.2340174,45.2870552],[121.9343974,45.6899505],[121.6495052,45.7409551],[121.8147665,45.9137094],[121.7736837,46.0103443],[122.2398051,45.813483],[122.3985551,45.9491853],[122.708407,45.7149877],[122.7987374,46.0893318],[123.0689018,46.1086588],[123.161661,46.2200731],[123.9565996,46.2907665],[124.0219186,45.7626075],[124.3766773,45.4573807],[124.872461,45.4485957],[124.8978858,45.5272989],[125.1035063,45.3953173],[125.3748076,45.3984696],[125.6993356,45.5120027],[125.8407223,45.2348103],[126.1504708,45.1411726],[126.5593348,45.2467475],[126.9526958,45.1341963],[127.0766158,44.9340018],[126.9782756,44.8261014],[127.0449899,44.5982342],[127.3752023,44.6488254],[127.5592737,44.5737912],[127.4928178,44.4109071],[127.7443787,44.0856298],[128.0520602,44.1257824],[128.0429651,44.3407047],[128.3587081,44.5016767],[128.4459379,44.153946],[128.8828622,43.5561531],[129.2289392,43.6083979],[129.2492481,43.7861649],[129.7524215,43.8741698],[129.9129285,44.0216027],[130.1036145,43.8454377],[130.3341948,44.047751],[130.4140865,43.6691694],[130.8372132,43.4492345],[131.2528485,43.4691686]]]},"properties":{"id":"22","name":"吉林","latitude":43.2978,"longitude":126.466}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[121.4132748,53.3173348],[121.8001937,53.0235855],[121.173927,52.5949812],[121.8312513,52.269368],[122.0179065,52.2831139],[122.1736593,52.4796394],[122.7307312,52.2489041],[122.7144532,51.7016765],[123.0881254,51.3124755],[123.6624056,51.1996658],[123.8662692,51.3134315],[124.3507874,51.2786274],[124.8206295,51.3658572],[125.1275358,51.6157386],[125.4866354,51.507399],[126.0562647,50.9802735],[125.7540092,50.7543442],[125.8094064,50.562237],[125.2644267,50.1057274],[125.2195716,49.6681314],[125.1252104,49.6565817],[125.2673723,49.4384814],[125.2228789,49.2200451],[125.1581283,49.1511087],[124.8639344,49.1753966],[124.5380628,48.5716867],[124.4823556,48.1115856],[124.2340503,48.5308365],[123.2068262,47.813826],[122.5653667,47.5311559],[122.4052214,47.3316849],[123.1868274,46.7616422],[123.3799939,46.8980679],[123.4893929,46.8172977],[123.57068,46.8732891],[123.6087138,46.7746388],[123.3972539,46.5978279],[123.0039962,46.5859423],[122.9889067,46.4065734],[123.161661,46.2200731],[123.0689018,46.1086588],[122.7987374,46.0893318],[122.708407,45.7149877],[122.3985551,45.9491853],[122.2398051,45.813483],[121.7736837,46.0103443],[121.8147665,45.9137094],[121.6495052,45.7409551],[121.9343974,45.6899505],[122.2340174,45.2870552],[122.0107752,45.1183316],[122.0459668,44.6949466],[122.2818697,44.4286579],[122.2540678,44.2459301],[122.3766443,44.2199627],[123.0988225,44.531494],[123.5221558,43.6969713],[123.3781336,43.4531619],[123.6962537,43.3534781],[123.6119694,43.08135],[123.2997921,43.0164961],[123.1312753,42.8263785],[122.7279407,42.741009],[122.3920439,42.8535603],[122.4255302,42.6749665],[122.0450367,42.7208552],[121.7236609,42.4576671],[121.3688505,42.4999901],[121.0342456,42.2601081],[120.9125993,42.2965659],[120.5091614,42.1486938],[120.1075839,41.7065244],[119.8214515,42.2086126],[119.6294218,42.250548],[119.5117029,42.3945185],[119.2452592,42.1919469],[119.365872,42.1004796],[119.298641,41.7773469],[119.3897465,41.4725593],[119.2309965,41.2733983],[118.7971212,41.3803169],[118.34981,41.3362369],[118.1593824,41.7191334],[118.3221631,41.8635432],[118.2678512,42.0738663],[118.1339059,42.0219056],[117.9893152,42.2216092],[118.0242485,42.382633],[117.7874671,42.6096217],[117.5936288,42.5515891],[117.529395,42.6202412],[117.4123995,42.4580806],[116.8871086,42.3953712],[116.8581181,42.0195027],[116.599736,41.9237204],[116.3775273,42.0096842],[116.0378581,41.8006271],[115.8587993,41.9274669],[115.3397612,41.7208387],[115.3413115,41.6158581],[115.2258663,41.5858341],[114.8889877,41.6100445],[114.9203036,41.9368721],[114.8048584,42.1784077],[114.596344,42.1412782],[114.255693,41.8600809],[114.1970919,41.5935855],[113.9279611,41.4183507],[113.9638245,41.153354],[113.8227995,41.0941845],[114.1540971,40.742578],[114.0269731,40.6351686],[114.0437679,40.4879941],[113.518322,40.3437393],[113.086462,40.4044333],[112.7013693,40.1747574],[112.3992172,40.2883422],[111.9214685,39.6888439],[111.7611682,39.5980484],[111.4899187,39.6521536],[111.3426925,39.4444144],[111.1100452,39.3851932],[111.1205872,39.5807885],[110.6378776,39.2450984],[110.4941655,39.3743153],[110.3381027,39.318143],[110.1091761,39.4283947],[110.1768722,39.2851993],[109.6742672,39.0112108],[109.5379965,38.785204],[108.9863505,38.3352056],[109.000975,37.9884826],[108.9542595,37.9255407],[108.8363339,37.9883534],[108.7643486,37.6818863],[108.0387081,37.6325095],[107.9287407,37.7853425],[107.6576461,37.8529353],[107.40469,37.9216649],[107.1626376,38.1386026],[106.8291695,38.1503848],[106.4701217,38.2906863],[106.9778426,39.0356021],[106.7891203,39.3609569],[106.6140922,39.3583214],[106.3020699,39.2894884],[105.8966167,38.7361889],[105.7880961,37.8050571],[105.3544275,37.7526313],[104.9443234,37.5457189],[104.5223853,37.5299576],[104.3585193,37.4012316],[103.4381621,37.8423933],[103.3874675,37.9991021],[103.3880876,38.1019899],[103.5216712,38.1398428],[103.471235,38.4358971],[103.8734327,38.6426804],[104.171554,38.9595086],[104.2247807,39.0906892],[104.0606047,39.427387],[103.4637936,39.3571846],[102.9653744,39.1193696],[102.3931096,39.2371919],[101.8552613,39.091206],[102.0312195,38.8791776],[101.8310767,38.6898351],[101.3104366,38.7688484],[101.1799536,39.0206418],[100.8885502,39.1051586],[100.7895382,39.4078791],[100.543455,39.408861],[100.1888514,39.69489],[99.4308614,39.8788065],[99.89936,40.2047814],[100.2037858,40.6169526],[100.0111878,40.8962896],[99.1574414,40.8363191],[98.6458448,40.56755],[98.2458175,40.5245293],[98.3265361,40.8556719],[97.708486,41.3494144],[97.6476111,41.4555319],[97.8468754,41.6192687],[97.1906797,42.7870615],[99.4744755,42.5641989],[100.0169747,42.6765176],[101.6375993,42.5154422],[102.0341643,42.1846097],[103.0734807,42.0045173],[103.6914275,41.7592351],[104.5007837,41.8705978],[104.4979932,41.6657783],[105.0148092,41.5961443],[105.200896,41.7434738],[106.7678288,42.286619],[108.1773552,42.454309],[109.4851307,42.4492964],[110.4067282,42.768605],[110.9337244,43.2877723],[111.9333533,43.6966363],[111.8387854,43.938792],[111.3964352,44.3465966],[111.843333,45.0395259],[112.379631,45.0707384],[112.7484974,44.8652729],[113.6350582,44.7462621],[114.055291,44.9405655],[114.5337114,45.3854996],[115.63783,45.444359],[116.1698906,45.7090974],[116.2131954,45.908155],[116.5819593,46.2980124],[116.8045805,46.3829064],[117.3017078,46.3501435],[117.3937952,46.5713703],[117.8170252,46.5274712],[118.2382915,46.7153926],[118.7200708,46.6767386],[118.8162407,46.7581806],[119.6801156,46.5916275],[119.9041846,46.708933],[119.6999594,47.1595257],[119.0834595,47.6615622],[118.7674065,47.7561559],[118.4727991,47.9894492],[117.8151648,48.0048229],[117.3608256,47.6508652],[116.8532597,47.8721178],[116.2438912,47.8628936],[115.8527006,47.7055647],[115.5618657,47.9331994],[115.5145301,48.1221026],[115.8092924,48.2739538],[115.8004041,48.5303722],[116.6842778,49.8232649],[117.8737659,49.5132063],[118.6443649,49.9545747],[119.0916761,49.9865624],[119.3162102,50.0926541],[119.3529004,50.3455069],[119.1412338,50.3766161],[119.2935759,50.5992382],[119.4966643,50.7370592],[120.1082032,51.6651938],[120.6476018,51.9110186],[120.77917,52.1175951],[120.626156,52.3468059],[120.7239795,52.5421687],[120.4299406,52.6360906],[120.0564234,52.6005114],[120.0329623,52.7606566],[120.8742546,53.2801598],[121.4132748,53.3173348]]]},"properties":{"id":"15","name":"内蒙古","latitude":41.5938,"longitude":111.623}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[131.2528485,43.4691686],[130.8372132,43.4492345],[130.4140865,43.6691694],[130.3341948,44.047751],[130.1036145,43.8454377],[129.9129285,44.0216027],[129.7524215,43.8741698],[129.2492481,43.7861649],[129.2289392,43.6083979],[128.8828622,43.5561531],[128.4459379,44.153946],[128.3587081,44.5016767],[128.0429651,44.3407047],[128.0520602,44.1257824],[127.7443787,44.0856298],[127.4928178,44.4109071],[127.5592737,44.5737912],[127.3752023,44.6488254],[127.0449899,44.5982342],[126.9782756,44.8261014],[127.0766158,44.9340018],[126.9526958,45.1341963],[126.5593348,45.2467475],[126.1504708,45.1411726],[125.8407223,45.2348103],[125.6993356,45.5120027],[125.3748076,45.3984696],[125.1035063,45.3953173],[124.8978858,45.5272989],[124.872461,45.4485957],[124.3766773,45.4573807],[124.0219186,45.7626075],[123.9565996,46.2907665],[123.161661,46.2200731],[122.9889067,46.4065734],[123.0039962,46.5859423],[123.3972539,46.5978279],[123.6087138,46.7746388],[123.57068,46.8732891],[123.4893929,46.8172977],[123.3799939,46.8980679],[123.1868274,46.7616422],[122.4052214,47.3316849],[122.5653667,47.5311559],[123.2068262,47.813826],[124.2340503,48.5308365],[124.4823556,48.1115856],[124.5380628,48.5716867],[124.8639344,49.1753966],[125.1581283,49.1511087],[125.2228789,49.2200451],[125.2673723,49.4384814],[125.1252104,49.6565817],[125.2195716,49.6681314],[125.2644267,50.1057274],[125.8094064,50.562237],[125.7540092,50.7543442],[126.0562647,50.9802735],[125.4866354,51.507399],[125.1275358,51.6157386],[124.8206295,51.3658572],[124.3507874,51.2786274],[123.8662692,51.3134315],[123.6624056,51.1996658],[123.0881254,51.3124755],[122.7144532,51.7016765],[122.7307312,52.2489041],[122.1736593,52.4796394],[122.0179065,52.2831139],[121.8312513,52.269368],[121.173927,52.5949812],[121.8001937,53.0235855],[121.4132748,53.3173348],[122.3378345,53.4913097],[123.6142941,53.5633467],[124.7201697,53.1488242],[125.1274317,53.2065467],[125.621355,53.0621369],[125.6686906,52.8779621],[125.8373625,52.9067201],[126.0667025,52.7831876],[125.9731682,52.6315689],[126.4392896,52.2752857],[126.3167131,52.1997606],[126.5311703,52.1526576],[126.4460592,51.9825388],[126.9019487,51.400998],[126.8089828,51.2890669],[126.9811687,51.3088589],[126.931766,51.0637835],[127.2873515,50.7510119],[127.3306564,50.3281953],[127.5783932,50.2205533],[127.5081132,49.8223347],[127.8308842,49.5938732],[128.0924703,49.5415766],[128.6661821,49.6094795],[129.0878618,49.3520792],[129.5024101,49.4107836],[130.2493413,48.864512],[130.6743282,48.8708165],[130.5332516,48.6357921],[130.8221228,48.3337692],[130.6633728,48.116444],[130.9418055,47.717967],[132.5246546,47.7075284],[132.6746196,47.9506143],[133.0919585,48.1067805],[133.4637187,48.0895206],[133.721274,48.2447566],[134.3863497,48.3813374],[134.7008525,48.2615256],[134.5672172,48.0403763],[134.7725794,47.7107323],[134.4846383,47.430181],[134.1835714,47.3274999],[134.2272897,47.1177453],[133.8493282,46.4802906],[133.9024516,46.2589863],[133.6873743,46.1418358],[133.4251681,45.5804231],[133.1402242,45.435419],[133.1154196,45.123035],[132.9533623,45.0243847],[131.818031,45.3327896],[131.4195024,44.9589623],[130.9334339,44.8417085],[131.2644731,44.0542113],[131.1703186,43.7811014],[131.2528485,43.4691686]]]},"properties":{"id":"23","name":"黑龙江","latitude":46.8451,"longitude":127.97}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[119.6084091,23.5948754],[119.6684676,23.5488142],[119.5271102,23.5399844],[119.6084091,23.5948754]]],[[[118.4495899,24.5055278],[118.448785,24.4155134],[118.2839462,24.4012719],[118.2820744,24.4773624],[118.4495899,24.5055278]]],[[[121.6359969,25.2228051],[122.0053817,25.0018985],[121.8146265,24.8317325],[121.8818466,24.5978051],[121.6074325,24.0768497],[121.4000757,23.1454939],[120.8865666,22.3659529],[120.8403426,21.9046085],[120.7003687,21.9484317],[120.6212671,22.2950707],[120.2851669,22.5800642],[120.3336695,22.5259464],[120.166189,23.0317244],[120.0551864,23.0436872],[120.1645774,23.3617115],[120.143609,23.6380357],[121.031993,25.0292423],[121.4432072,25.13642],[121.4978133,25.278754],[121.6359969,25.2228051]]]]},"properties":{"id":"71","name":"台湾","latitude":23.5986,"longitude":121.0254}},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[114.6094,22.4121],[114.5215,22.1484],[113.8184,22.1924],[113.9063,22.4121],[114.1699,22.5439],[114.4336,22.5439],[114.4336,22.4121],[114.6094,22.4121]]]},"properties":{"name":"香港","latitude":21.4242,"longitude":115.9578,"cp":[114.2578,22.3242],"childNum":1},"id":"81"},{"type":"Feature","geometry":{"type":"Polygon","coordinates":[[[113.5986,22.1649],[113.5547,22.11],[113.5437,22.2034],[113.5986,22.1649]]]},"properties":{"name":"澳门","latitude":21.1484,"longitude":112.5547,"cp":[113.5547,22.1484],"childNum":1},"id":"82"},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[139.5813348,28.1496456],[139.1968133,27.6992389],[139.5813348,28.1496456]]],[[[138.6365105,26.7903886],[138.3288934,26.3112562],[138.6365105,26.7903886]]],[[[138.1750848,25.2924479],[138.1640984,24.8055529],[138.1750848,25.2924479]]],[[[138.1201531,23.2782692],[137.8894402,22.7291211],[138.1201531,23.2782692]]],[[[136.7358758,21.2770787],[136.373327,20.8741504],[136.7358758,21.2770787]]],[[[135.0439813,19.157417],[134.5056512,18.9710119],[135.0439813,19.157417]]],[[[132.7698113,20.3012181],[132.7313592,20.8141927],[132.7698113,20.3012181]]],[[[133.6542107,22.901631],[133.7833001,23.3964274],[133.6542107,22.901631]]],[[[133.5498406,24.8638888],[133.2724358,25.3821625],[133.5498406,24.8638888]]],[[[132.0117547,28.5363785],[140.2734734,28.5363785],[132.0117547,28.5363785]]],[[[140.2734734,28.5363785],[140.2734734,18.5321426],[140.2734734,28.5363785]]],[[[140.2734734,18.5321426],[132.0117547,18.5321426],[140.2734734,18.5321426]]],[[[132.0117547,18.5321426],[132.0117547,28.5363785],[132.0117547,18.5321426]]],[[[132.0117547,28.5363785],[135.8569336,28.5363785],[135.6097412,28.2318099],[135.2087402,28.2366494],[135.098877,28.1591896],[134.967041,28.0283491],[134.901123,28.1349719],[134.6539307,28.1834019],[134.4781494,28.1059035],[133.9837646,27.9895509],[133.9233398,27.8390761],[133.8189697,27.8293609],[133.7200928,27.7661906],[133.9013672,27.5618518],[133.8519287,27.4644135],[133.6871338,27.4107857],[133.5717773,27.4936541],[133.4783936,27.7029837],[133.5058594,27.9701465],[133.6047363,28.0283491],[133.1762695,28.0089517],[133.2037354,28.0816737],[133.0169678,28.1204387],[132.8356934,28.0865201],[132.3577881,28.0525908],[132.1710205,28.2318099],[132.0117547,28.2801959],[132.0117547,28.5363785]]],[[[133.3685662,27.2202959],[133.2641961,27.2383741],[133.1845452,27.1660365],[133.212011,27.0962201],[132.9400994,26.9564054],[132.9208733,26.8241378],[132.9318597,26.7020566],[132.9510857,26.5251143],[133.126867,26.4547559],[133.3932854,26.3660748],[133.4976556,26.4026015],[133.5058953,26.4886393],[133.6377313,26.4808213],[133.7091424,26.5824007],[133.8217522,26.6136316],[133.8876702,26.6656575],[133.9041497,26.8007744],[133.9755608,26.9926769],[134.132116,27.1091536],[134.0909173,27.2874227],[133.9975335,27.2951644],[133.9618279,27.3596491],[133.89591,27.3106456],[133.8382317,27.3080656],[133.6954095,27.3106456],[133.6075188,27.2461207],[133.5718133,27.2796802],[133.4729363,27.292584],[133.4070184,27.2770992],[133.3685662,27.2202959]]],[[[138.796463,28.5363785],[139.0972137,28.5363785],[139.0628815,28.4529961],[139.0635681,28.3007533],[139.0381622,28.22939],[138.9722443,28.2433035],[138.970871,28.3388345],[138.904953,28.4686913],[138.796463,28.5363785]]]]},"properties":{"id":"","name":"南海诸岛","latitude":23.3179,"longitude":136.1016,"cp":[135.3516,22.9179]}},{"type":"Feature","properties":{"name":"钓鱼岛","latitude":25.7432,"longitude":123.4709,"cp":[123.4709,25.7432]},"geometry":{"type":"Polygon","coordinates":[[[123.4499359,25.7541355],[123.4456444,25.7187246],[123.5060692,25.7318696],[123.5610008,25.7072795],[123.5865784,25.7556816],[123.5429764,25.7926271],[123.4499359,25.7541355]]]}},{"type":"Feature","properties":{"name":"赤尾屿","latitude":25.92234,"longitude":124.55777,"cp":[124.55777,25.92234]},"geometry":{"type":"Polygon","coordinates":[[[124.561615,25.9523338],[124.5199013,25.9217684],[124.540329,25.8987619],[124.5744896,25.9020047],[124.5928574,25.9253193],[124.561615,25.9523338]]]}}]}

/***/ },
/* 193 */
/***/ function(module, exports) {

	
	module.exports = parse

	/**
	 * expected argument lengths
	 * @type {Object}
	 */

	var length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}

	/**
	 * segment pattern
	 * @type {RegExp}
	 */

	var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig

	/**
	 * parse an svg path data string. Generates an Array
	 * of commands where each command is an Array of the
	 * form `[command, arg1, arg2, ...]`
	 *
	 * @param {String} path
	 * @return {Array}
	 */

	function parse(path) {
		var data = []
		path.replace(segment, function(_, command, args){
			var type = command.toLowerCase()
			args = parseValues(args)

			// overloaded moveTo
			if (type == 'm' && args.length > 2) {
				data.push([command].concat(args.splice(0, 2)))
				type = 'l'
				command = command == 'm' ? 'l' : 'L'
			}

			while (true) {
				if (args.length == length[type]) {
					args.unshift(command)
					return data.push(args)
				}
				if (args.length < length[type]) throw new Error('malformed path data')
				data.push([command].concat(args.splice(0, length[type])))
			}
		})
		return data
	}

	var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig

	function parseValues(args) {
		var numbers = args.match(number)
		return numbers ? numbers.map(Number) : []
	}


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(195);

	function emptyFunction() {}

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _f = __webpack_require__(51);

	var _f2 = _interopRequireDefault(_f);

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _f2Utils = __webpack_require__(197);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	// import { View, Theme, Client, Unit } from '@alife/aism';


	// const { bp } = Unit;

	var View = function View(props) {
	  var defaultStyle = {
	    display: 'flex',
	    flexDirection: 'column',
	    alignItems: 'stretch',
	    boxSizing: 'border-box',
	    borderWidth: 0,
	    borderStyle: 'solid',
	    margin: 0,
	    padding: 0,
	    position: 'relative',
	    zIndex: 0,
	    minHeight: 0,
	    minWidth: 0
	  };

	  var style = props.style,
	      extra = _objectWithoutProperties(props, ['style']);

	  var s = _extends({}, defaultStyle, style);

	  return _react2.default.createElement(
	    'div',
	    _extends({ style: s }, extra),
	    props.children
	  );
	};

	var Client = {
	  width: window.innerWidth,
	  height: window.innerHeight
	};

	var Theme = {
	  colors: {
	    GrayLightest: '#F7F9FB',
	    Font9: '#999',
	    Font3: '#333',
	    GrayLine: '#E5E7E9'
	  },
	  line: {
	    widthDefault: 0.5
	  }
	};
	var bp = 1;

	_f2.default.Global.pixelRatio = window.devicePixelRatio;

	var colorMap = ['#2196F3', '#26C6DA', '#9CCC65', '#F9A825', '#AB47BC', '#3067C1'];
	var areaColorMap = ['#D3EAFD', '#D4F4F8', '#EBF5E0', '#FEEED3', '#EEDAF2', '#D6E1F3'];
	var theme = {
	  colors: colorMap,
	  pixelRatio: window.devicePixelRatio,
	  guide: {
	    line: {
	      lineWidth: 1
	    }
	  }
	};

	_f2.default.Global.setTheme(theme);
	var uniqueId = 0;
	function generateUniqueId() {
	  return 'react-f2-' + uniqueId++;
	}

	var rootClassName = 'aism-widgets ';

	var events = ['MouseOver', 'Selection', 'Click'];

	var requestAnimationFrame = window && window.requestAnimationFrame || function () {};

	/*
	* g2Factory 函数
	*
	* 将非React版的图表类转化为React版
	*
	* convertData 控制是否转化数据
	* */
	function g2Factory(name, Chart) {
	  var _class, _temp;

	  var ChartProcess = Chart;
	  var AismChart = (_temp = _class = function (_React$Component) {
	    _inherits(AismChart, _React$Component);

	    function AismChart(props, context) {
	      _classCallCheck(this, AismChart);

	      var _this = _possibleConstructorReturn(this, (AismChart.__proto__ || Object.getPrototypeOf(AismChart)).call(this, props, context));

	      _this.hasSetColor = false;
	      _this.showTooltip = true;
	      _this.timeoutId = null;
	      _this.touchY = 0;

	      _this.onTouchStart = function (e) {
	        _this.inTouch = true;
	        _this.originCanvas = _this.canvas.toDataURL();
	        var tooltip = _this.config.tooltip;

	        if (e.touches) {
	          _this.touchY = e.touches[0].clientY;
	        } else {
	          _this.touchY = e.clientY;
	        }
	        _this.showTooltip = true;
	        if (!tooltip || tooltip && tooltip.show === false) {
	          return;
	        } else {
	          _this.timeoutId = setTimeout(function () {
	            if (_this.showTooltip === true) {
	              ChartProcess.chartTouchStart.call(_this, e, _this.chart, _this.config, _this.canvas, _this.resultData, _this.originData, _this, ChartProcess);
	            }
	          }, 150);
	        }
	      };

	      _this.onTouchMove = function (e) {
	        var touchMoveY = void 0;
	        if (e.touches) {
	          touchMoveY = e.touches[0].clientY;
	        } else {
	          touchMoveY = e.clientY;
	        }

	        if (Math.abs(touchMoveY - _this.touchY) > 20) {
	          _this.showTooltip = false;
	        }

	        ChartProcess.chartTouchMove && ChartProcess.chartTouchMove.call(_this, e, _this.chart, _this.config, _this.canvas, _this.resultData, _this.originData, _this, ChartProcess);
	      };

	      _this.onTouchEnd = function (e) {
	        _this.inTouch = false;
	        _this.showTooltip = false;
	        clearTimeout(_this.timeoutId);
	        ChartProcess.chartTouchEnd.call(_this, e, _this.chart, _this.config, _this.canvas, _this.resultData, _this.originData, _this, ChartProcess);
	      };

	      _this.addCanvasEvents = function () {
	        if ('ontouchstart' in document.documentElement) {
	          _this.canvas.addEventListener('touchstart', _this.onTouchStart);
	          _this.canvas.addEventListener('touchmove', _this.onTouchMove);
	          _this.canvas.addEventListener('touchend', _this.onTouchEnd);
	        } else {
	          var container = document.querySelector('#aismcontainer-' + _this.chartId);
	          _this.canvas.addEventListener('mousedown', _this.onTouchStart);
	          // this.canvas.addEventListener('mousemove', this.onTouchMove);
	          _this.canvas.addEventListener('mouseup', _this.onTouchEnd);
	          // this.canvas.addEventListener('mouseleave', this.onTouchEnd);
	        }
	      };

	      _this.renderLegend = function () {
	        var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'top';
	        var legendData = arguments[1];
	        var filterName = arguments[2];

	        _this.lastData = legendData;
	        if (dir === 'top') {
	          var newData = legendData;
	          var resultData = [];
	          if (newData.length < _this.originData.length) {
	            _this.originData.forEach(function (item, index) {
	              if (!newData[index] || item.name !== newData[index].name) {
	                newData.splice(index, 0, { color: '#E9EDF0', name: item.name, value: '--' });
	              } else {
	                resultData.push(item);
	              }
	            });
	          }

	          var legendContainer = document.querySelector('#aismlegend' + _this.chartId);
	          var lengendStr = '<div style="display: flex;WebkitUserSelect: none; flex-wrap: wrap; font-size: 12px; line-height: 1.2; box-sizing: border-box;-webkit-font-smoothing: antialiased; padding-left: 12px;">';

	          legendData.forEach(function (i) {
	            var color = i.color;
	            if (areaColorMap.indexOf(color) >= 0) {
	              color = colorMap[areaColorMap.indexOf(color)];
	            }
	            lengendStr += '<div style="margin-right: 30px; margin-bottom: 12px; white-space: nowrap" data-close=' + (filterName === i.name ? 'true' : 'false') + ' class="legend"><span style="display: inline-block; box-sizing: border-box;margin-right: 4px;text-align: center;width: 14px;height: 14px;border-radius: 100%;background-color: #fff;border: 1px solid ' + (filterName === i.name ? '#E9EDF0' : color) + '"><span style="display: inline-block; width: 10px;height: 10px; border-radius: 100%;background-color:' + (filterName === i.name ? '#E9EDF0' : filterName === i.name ? '#E9EDF0' : color) + '"></span></span><span class="name" style="color: ' + Theme.colors.Font9 + '; margin-right: 6px;">' + i.name + '</span><span class="value" style="color: ' + Theme.colors.Font3 + '">' + (i.value !== null ? i.value : '') + '</span></div>';
	          });
	          lengendStr += '</div>';
	          legendContainer.innerHTML = '';
	          legendContainer.insertAdjacentHTML('afterbegin', lengendStr);
	        } else if (dir === 'right') {
	          var _setInlineDomStyle;

	          //将图例放置到右边
	          var chartContainer = document.querySelector('#aismcontainer-' + _this.chartId);
	          (0, _f2Utils.setDomStyle)(chartContainer, {
	            flexDirection: 'row'
	          });
	          //调整图表的位置
	          var chart = _this.canvas;
	          (0, _f2Utils.setDomStyle)(chart, {
	            marginLeft: 20 * bp + 'px'
	          });
	          //图例容器
	          var _legendContainer = document.querySelector('#aismlegend' + _this.chartId);
	          (0, _f2Utils.setDomStyle)(_legendContainer, {
	            order: 1,
	            position: 'relative',
	            marginLeft: 10 * bp + 'px'
	          });
	          //构造图例字符串
	          var legendStr = '';
	          //获取图的颜色
	          var colors = _this.props.config.colors;
	          var legendFormatter = _this.config.legend.formatter || _this.defaultLegendFormatter;
	          legendData[0].data.forEach(function (d, i) {
	            legendStr += '<div ' + (0, _f2Utils.setInlineDomStyle)({
	              display: 'flex',
	              flexDirection: 'row',
	              alignItems: 'center'
	            }) + '>' + _this.getLegendCircle(colors[i]) + ' ' + legendFormatter(d) + '</div>';
	          });
	          _legendContainer.insertAdjacentHTML('afterbegin', '<div ' + (0, _f2Utils.setInlineDomStyle)((_setInlineDomStyle = {
	            height: '100%',
	            display: 'flex'
	          }, _defineProperty(_setInlineDomStyle, 'display', '-webkit-flex'), _defineProperty(_setInlineDomStyle, '-webkit-flex-direction', 'column'), _defineProperty(_setInlineDomStyle, 'flexDirection', 'column'), _defineProperty(_setInlineDomStyle, '-webkit-justify-content', 'space-around'), _defineProperty(_setInlineDomStyle, 'justifyContent', 'space-around'), _defineProperty(_setInlineDomStyle, 'padding', '15px 0 20px'), _defineProperty(_setInlineDomStyle, '-webkit-flex-grow', 1), _defineProperty(_setInlineDomStyle, 'flexGrow', 1), _setInlineDomStyle)) + '>' + legendStr + '</div>');
	        }

	        var legends = document.querySelector('#aismlegend' + _this.chartId).querySelectorAll('.legend');
	        if (!legends || legends.length <= 1) {
	          return;
	        }

	        var _loop = function _loop(i) {
	          var legendItem = legends[i];
	          var index = i;
	          legendItem.addEventListener('click', function (e) {
	            var name = e.currentTarget.querySelector('.name').innerHTML;
	            if (e.currentTarget.getAttribute('data-close') === 'true') {
	              _this.showAllData();
	            } else {
	              _this.filterData(name, index);
	            }
	          });
	        };

	        for (var i = 0; i < legends.length; i++) {
	          _loop(i);
	        }
	      };

	      _this.defaultLegendFormatter = function (d) {
	        return d[0] + ' ' + d[1] * 100 + ' %';
	      };

	      _this.getLegendCircle = function (color) {
	        var circle = '<span style="display: inline-block; width: 10px;height: 10px; border-radius: 100%;background-color:' + color + '"></span>';

	        return circle;
	      };

	      _this.showAllData = function () {
	        _this.chart && _this.chart.changeData(_this.resultData);
	        _this.renderLegend('top', _this.lastData);
	      };

	      _this.filterData = function (name, index) {
	        var data = _this.resultData;
	        var resultData1 = [];

	        data.forEach(function (item) {
	          if (item.type !== name) {
	            resultData1.push({
	              x: item.x,
	              y: -1,
	              type: item.type
	            });
	          } else {
	            resultData1.push(name);
	          }
	        });

	        var resultData = data.filter(function (item) {
	          return item.type !== name;
	        });

	        var colorMap = ['#2196F3', '#26C6DA', '#9CCC65', '#F9A825', '#AB47BC', '#3067C1'];
	        colorMap.splice(index, 1);
	        _f2.default.Global.colors = colorMap;
	        _this.chart && _this.chart.changeData(resultData);
	        // ChartProcess.filter.call(this);
	        _this.renderLegend('top', _this.lastData, name);
	      };

	      _this.clickLegend = function (i) {};

	      _this.clearLegend = function () {
	        var legendContainer = document.querySelector('#aismlegend' + _this.chartId);
	        var values = legendContainer.querySelectorAll('.value');
	        values.forEach(function (i) {
	          i.innerHTML = '';
	        });
	      };

	      _this.chart = null;
	      _this.chartDom = null;
	      _this.chartId = generateUniqueId();
	      return _this;
	    }

	    // componentWillMount () {}

	    _createClass(AismChart, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        if (this.props.customChart) {
	          ChartProcess = _extends({}, ChartProcess, this.props.customChart);
	        }

	        // 开始初始化图表
	        var props = ChartProcess.beforeInit ? ChartProcess.beforeInit.call(this, this.props) : this.props;
	        // 如果外部有传入颜色主题，则使用这个主题
	        if (props.config.colors) {
	          _f2.default.Global.colors = props.config.colors;
	        }
	        _f2.default.Global.pixelRatio = 2;

	        var width = props.width,
	            height = props.height,
	            chartData = props.data,
	            forceFit = props.forceFit,
	            config = props.config,
	            otherProps = _objectWithoutProperties(props, ['width', 'height', 'data', 'forceFit', 'config']);

	        var padding = config.padding,
	            legend = config.legend,
	            xAxis = config.xAxis,
	            yAxis = config.yAxis,
	            configWidth = config.width;

	        var initData = [];
	        chartData.forEach(function (item) {
	          var curObj = {
	            name: item.name,
	            data: []
	          };
	          item.data.forEach(function (dataItem) {
	            curObj.data.push(dataItem.concat([]));
	          });

	          initData.push(curObj);
	        });
	        var chart = new _f2.default.Chart(_extends({
	          id: this.chartId,
	          width: width || configWidth,
	          height: height,
	          padding: padding,
	          forceFit: width === undefined || forceFit
	        }, otherProps));

	        initData.forEach(function (i) {
	          i.data.forEach(function (dataItem) {
	            if (xAxis.labelFormatter) {
	              dataItem[0] = xAxis.labelFormatter(dataItem[0]);
	            } else {
	              dataItem[0] = '' + dataItem[0];
	            }
	            if (yAxis.labelFormatter) {
	              dataItem[1] = yAxis.labelFormatter(dataItem[1]);
	            }
	          });
	        });
	        //把数据处理为g2可以识别的格式
	        var data = (0, _f2Utils.dealData)(initData, config);
	        ChartProcess.init.call(this, chart, config, data, initData, this);
	        initData.forEach(function (i, index) {
	          i.color = colorMap[index];
	        });

	        this.initData = initData;
	        this.resultData = data;
	        this.originData = initData;
	        this.chart = chart;
	        this.config = config;
	        this.addCanvasEvents();

	        if (!legend || legend && legend.show !== false) {
	          if (!legend) {
	            this.renderLegend('top', initData);
	          } else {
	            this.renderLegend(legend.dir, initData);
	          }
	        }
	        ChartProcess.afterRender && ChartProcess.afterRender.call(this, this.canvas, this.chart, this.config, this.props, this);
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        var newData = nextProps.data,
	            newWidth = nextProps.width,
	            newHeight = nextProps.height,
	            newPadding = nextProps.padding,
	            newConfig = nextProps.config;
	        var _props = this.props,
	            oldData = _props.data,
	            oldWidth = _props.width,
	            oldHeight = _props.height,
	            oldPadding = _props.padding;


	        if (newPadding !== oldPadding) {
	          console.warn('padding 不支持修改');
	        }

	        if (newData !== oldData || newData.length !== oldData.length) {
	          var _newConfig$xAxis = newConfig.xAxis,
	              xAxis = _newConfig$xAxis === undefined ? {} : _newConfig$xAxis,
	              _newConfig$yAxis = newConfig.yAxis,
	              yAxis = _newConfig$yAxis === undefined ? {} : _newConfig$yAxis;

	          newData.forEach(function (i) {
	            i.data.forEach(function (dataItem) {
	              if (xAxis.labelFormatter) {
	                dataItem[0] = xAxis.labelFormatter(dataItem[0]);
	              } else {
	                dataItem[0] = '' + dataItem[0];
	              }
	              if (yAxis.labelFormatter) {
	                dataItem[1] = yAxis.labelFormatter(dataItem[1]);
	              }
	            });
	          });

	          var data = (0, _f2Utils.dealData)(newData, newConfig);

	          if (ChartProcess.changeData) {
	            ChartProcess.changeData.call(this, this.chart, newConfig, data);
	          } else {
	            this.chart && this.chart.changeData(data);
	          }

	          if (ChartProcess.afterChangeData) {
	            ChartProcess.afterChangeData.call(this, this.canvas, this.chart, this.config, this.props, this);
	          }
	        }

	        if (newWidth !== oldWidth || newHeight !== oldHeight) {
	          if (ChartProcess.changeSize) {
	            ChartProcess.changeSize.call(this, this.chart, newConfig, newWidth, newHeight);
	          } else {
	            this.chart && this.chart.changeSize(newWidth, newHeight);
	          }
	        }
	      }
	    }, {
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate() {
	        return false;
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        if (ChartProcess.destroy) {
	          ChartProcess.destroy.call(this, this.chart);
	        }

	        this.chart && this.chart.destroy && this.chart.destroy();
	        this.chart = null;
	        this.chartDom = null;
	        this.chartId = null;
	      }

	      //默认的图例Formatter


	      //构造图例的小圆点

	    }, {
	      key: 'render',
	      value: function render() {
	        var _this2 = this;

	        var _props2 = this.props,
	            _props2$style = _props2.style,
	            style = _props2$style === undefined ? {} : _props2$style,
	            width = _props2.width,
	            height = _props2.height;

	        var chartStyle = {
	          position: 'relative',
	          'WebkitUserSelect': 'none',
	          backgroundColor: style.backgroundColor || '#fff',
	          overflow: 'hidden'
	        };

	        return _react2.default.createElement(
	          View,
	          { id: 'aismcontainer-' + this.chartId, style: chartStyle },
	          _react2.default.createElement(View, { id: 'aismlegend' + this.chartId, style: { width: width } }),
	          _react2.default.createElement('canvas', { ref: function ref(dom) {
	              return _this2.canvas = dom;
	            }, id: this.chartId, className: rootClassName + name })
	        );
	      }
	    }]);

	    return AismChart;
	  }(_react2.default.Component), _class.propTypes = {
	    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    config: _propTypes2.default.object,
	    data: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.object), _propTypes2.default.object]).isRequired,
	    plotCfg: _propTypes2.default.object,
	    forceFit: _propTypes2.default.bool
	  }, _class.defaultProps = {
	    forceFit: false,
	    plotCfg: {},
	    config: {}
	  }, _class.displayName = 'AismWidgets' + name, _temp);

	  //暴露原版类

	  AismChart.displayName = 'AismChart';
	  AismChart.Chart = Chart;

	  return AismChart;
	}

	g2Factory.generateUniqueId = generateUniqueId;

	exports.default = g2Factory;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\f2Factory.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\f2Factory.js"); } } })();

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.dealData = dealData;
	exports.setDomStyle = setDomStyle;
	exports.setInlineDomStyle = setInlineDomStyle;
	exports.generateUniqueId = generateUniqueId;

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

	function dealData(originData, config) {
	  var newData = [];
	  originData.forEach(function (oneData) {
	    var dataName = oneData.name;


	    oneData.data.forEach(function (d, i) {
	      if (Array.isArray(d)) {
	        var _d = _toArray(d),
	            x = _d[0],
	            y = _d[1],
	            extra = _d.slice(2);

	        newData.push({
	          x: x,
	          y: y,
	          extra: extra,
	          type: "" + dataName
	        });
	      } else if (config.xAxis && config.xAxis.categories && config.xAxis.categories[i]) {
	        var _x = config.xAxis.categories[i];
	        var _y = isNaN(d) ? d[0] : d;
	        newData.push({
	          x: _x,
	          y: _y,
	          extra: [],
	          type: "" + dataName
	        });
	      } else {
	        var _x2 = d.x,
	            _y2 = d.y,
	            _extra = _objectWithoutProperties(d, ["x", "y"]);

	        newData.push({
	          x: _x2,
	          y: _y2,
	          extra: _extra,
	          type: "" + dataName
	        });
	      }
	    });
	  });

	  return newData;
	}

	function setDomStyle(elem, styleObj) {
	  for (var prop in styleObj) {
	    elem.style[prop] = styleObj[prop];
	  }
	}

	function setInlineDomStyle(styleObj) {
	  var result = "style='";
	  for (var prop in styleObj) {
	    if (styleObj.hasOwnProperty(prop)) {
	      result += prop.replace(/([A-Z])/g, '-$1').toLowerCase() + ": " + styleObj[prop] + "; ";
	    }
	  }
	  return result + "'";
	}

	var uniqueId = 0;
	function generateUniqueId() {
	  return "react-f2-" + uniqueId++;
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\f2Utils.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\f2Utils.js"); } } })();

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = setG2Theme;

	var _index = __webpack_require__(9);

	var widgetsTheme = {
	  // 线图只有一个数据时显示点
	  showSinglePoint: true,

	  snapArray: [0, 1, 2, 2.5, 4, 5, 10],
	  // 指定固定 tick 数的逼近值
	  snapCountArray: [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10],

	  // 宽度所占的分类的比例
	  // widthRatio: {
	  //   // 一般的柱状图占比 1/2
	  //   column(count, isDodge) {
	  //     console.log('widthRatio', count, isDodge);
	  //     if (isDodge) {
	  //       return Math.max(1 - count * 0.1, 0.5);
	  //     } else if (count > 10) {
	  //       return Math.min(count / 2 * 0.1, 0.8);
	  //     } else {
	  //       return Math.min(count * 0.1, 0.5);
	  //     }
	  //   },
	  //   // rose: 0.9999999, // 玫瑰图柱状占比 1
	  //   // multiplePie: 1 / 1.3 // 多层的饼图、环图
	  // },

	  // animate: false,
	  // colors: {
	  //   'default': COLORS
	  // },
	  shape: {
	    line: {
	      lineWidth: 2
	    },
	    area: {
	      fillOpacity: 0.1
	    },
	    interval: {
	      fillOpacity: 1
	    }
	  },
	  label: {
	    textStyle: {
	      fill: _index.color.widgetsLabelText
	    }
	  },
	  innerLabels: {
	    textStyle: {
	      fill: _index.color.widgetsLabelText
	    }
	  },
	  axis: {
	    bottom: {
	      label: {
	        offset: 18,
	        autoRotate: false,
	        textStyle: { fill: _index.color.widgetsAxisLabel // 底部标签文本的颜色
	        } },
	      line: {
	        stroke: _index.color.widgetsAxisLine
	      },
	      tickLine: null
	    },
	    left: {
	      label: {
	        offset: 8,
	        textStyle: { fill: _index.color.widgetsAxisLabel // 左部标签文本的颜色
	        } },
	      grid: {
	        // 让grid在轴线的下方
	        zIndex: -1,
	        lineStyle: {
	          stroke: _index.color.widgetsAxisGrid,
	          lineWidth: 1,
	          lineDash: null
	        },
	        zeroLineStyle: {
	          stroke: _index.color.widgetsAxisLine
	        }
	      }
	    },
	    right: {
	      label: {
	        offset: 8,
	        textStyle: { fill: _index.color.widgetsAxisLabel // 右部标签文本的颜色
	        } }
	    },
	    circle: {
	      label: {
	        offset: 8,
	        textStyle: { fill: _index.color.widgetsAxisLabel // 底部标签文本的颜色
	        } },
	      line: {
	        stroke: _index.color.widgetsAxisLine
	      },
	      tickLine: null,
	      grid: {
	        lineStyle: {
	          stroke: _index.color.widgetsAxisLine
	        }
	      }
	    },
	    radius: {
	      label: {
	        offset: 8,
	        textStyle: { fill: _index.color.widgetsAxisLabel // 底部标签文本的颜色
	        } },
	      line: {
	        stroke: _index.color.widgetsAxisLine
	      },
	      tickLine: null,
	      grid: {
	        lineStyle: {
	          stroke: _index.color.widgetsAxisLine
	        }
	      }
	    }
	  },
	  tooltip: {
	    offset: 8,
	    crossLine: {
	      stroke: _index.color.widgetsTooltipCrossLine
	      // lineWidth: 1,
	    },
	    'g2-tooltip': {
	      backgroundColor: _index.color.widgetsTooltipBackground,
	      boxShadow: _index.color.widgetsTooltipShadow,
	      padding: _index.size.s3,
	      borderRadius: _index.size.s1,
	      fontFamily: _index.fonts.fontFamilyBase,
	      fontSize: _index.fonts.fontSizeBaseCaption,
	      lineHeight: _index.fonts.fontSizeBaseCaption,
	      color: _index.color.widgetsTooltipText,
	      textAlign: 'left'
	    },
	    'g2-tooltip-title': {
	      marginBottom: 0,
	      color: _index.color.widgetsTooltipTitle
	    },
	    'g2-tooltip-list': {},
	    'g2-tooltip-list-item': {
	      marginBottom: 0,
	      marginTop: _index.size.s2,
	      listStyle: 'none'
	    },
	    'g2-tooltip-marker': {
	      width: '6px',
	      height: '6px',
	      border: 'none',
	      marginRight: _index.size.s1
	    }
	  },
	  tooltipMarker: {
	    symbol: function symbol(x, y, r, ctx, marker) {
	      ctx.fillStyle = _index.color.widgetsTooltipMarkerFill;
	      ctx.lineWidth = 2;
	      ctx.strokeStyle = marker.get('color');
	      ctx.beginPath();
	      ctx.arc(x, y, r, 0, Math.PI * 2, false);
	      ctx.fill();
	      ctx.stroke();
	    },
	    // 这里必须传数字，所以不能直接引用
	    radius: 4
	  },
	  tooltipCrosshairsRect: {
	    style: {
	      fill: _index.color.widgetsTooltipCrossReact,
	      opacity: _index.color.widgetsTooltipCrossReactOpacity
	    }
	  },
	  tooltipCrosshairsLine: {
	    style: {
	      stroke: _index.color.widgetsTooltipCrossLine,
	      lineWidth: 1
	    }
	  },
	  legend: {
	    top: {
	      textStyle: {
	        fill: _index.color.widgetsLegendText
	      },
	      unCheckColor: _index.color.widgetsLegendUncheck
	    },
	    right: {
	      textStyle: {
	        fill: _index.color.widgetsLegendText
	      },
	      unCheckColor: _index.color.widgetsLegendUncheck
	    },
	    bottom: {
	      textStyle: {
	        fill: _index.color.widgetsLegendText
	      },
	      unCheckColor: _index.color.widgetsLegendUncheck
	    },
	    left: {
	      textStyle: {
	        fill: _index.color.widgetsLegendText
	      },
	      unCheckColor: _index.color.widgetsLegendUncheck
	    },
	    html: {
	      // 注意！ 这个需要和 wmap 中的 G2Map.scss .aisc-widgets-map-legend 的样式一致
	      'g2-legend': {
	        overflow: 'auto',
	        fontFamily: _index.fonts.fontFamilyBase,
	        fontSize: _index.fonts.fontSizeBaseCaption,
	        lineHeight: _index.fonts.fontSizeBaseCaption,
	        color: _index.color.widgetsLegendText
	      },
	      'g2-legend-list': {},
	      'g2-legend-list-item': {
	        wordBreak: 'break-all',
	        marginTop: 0,
	        marginBottom: _index.size.s3,
	        marginRight: _index.size.s3
	      },
	      'g2-legend-marker': {
	        width: '6px',
	        height: '6px',
	        marginRight: _index.size.s1,
	        verticalAlign: '1px'
	      }
	    }
	  },
	  guide: {
	    line: {
	      lineStyle: {
	        stroke: _index.color.colorB16
	      },
	      text: {
	        autoRotate: false,
	        style: {
	          fill: _index.color.colorB16,
	          fontSize: _index.fonts.fontSizeBaseCaption,
	          fontFamily: _index.fonts.fontFamilyBase
	        }
	      }
	    },
	    region: {
	      style: {
	        fill: _index.color.colorB16, // 辅助框填充的颜色
	        fillOpacity: 0.1 // 辅助框的背景透明度
	        // 辅助框的图形样式属性
	      } }
	  }
	};

	// 设置全局G2主题
	function setG2Theme(G2) {
	  var theme = G2.Util.deepMix({}, G2.Global, widgetsTheme);

	  // 设置屏幕dpi缩放（如果有效的话）
	  if (window && window.devicePixelRatio) {
	    theme.pixelRatio = window.devicePixelRatio;
	  }

	  // 将主题设置为自定义的主题
	  G2.Global.setTheme(theme);
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\g2Theme.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\g2Theme.js"); } } })();

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = function (name, config, callback) {
	  if (nameMap[name]) {
	    // restart
	    nameMap[name].start();
	  } else {
	    // start
	    nameMap[name] = new Tween(config, callback);
	  }

	  return nameMap[name];
	};

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tween = function () {
	  function Tween(config, callback) {
	    _classCallCheck(this, Tween);

	    var maxFps = config.maxFps;

	    this.config = config;
	    this._callback = callback;
	    this.refresh = this.refresh.bind(this);
	    this.lastUpdate = null;
	    this.interval = 1000 / maxFps;

	    this.start();
	  }

	  _createClass(Tween, [{
	    key: "start",
	    value: function start() {
	      this._isPlay = true;
	      this._startTime = this.lastUpdate = Date.now();
	      this.refresh();
	    }
	  }, {
	    key: "stop",
	    value: function stop() {
	      this._isPlay = false;
	    }
	  }, {
	    key: "refresh",
	    value: function refresh() {
	      if (this._isPlay && this.config.autoUpdate) {
	        if (window.requestAnimationFrame) {
	          window.requestAnimationFrame(this.refresh);
	        } else {
	          setTimeout(this.refresh, 1000 / 60);
	        }

	        var now = Date.now();
	        if (this.config.maxFps < 60) {
	          var delta = now - this.lastUpdate;
	          if (delta > this.interval) {
	            // 这里不能简单then=now，否则还会出现上边简单做法的细微时间差问题。例如fps=10，每帧100ms，而现在每16ms（60fps）执行一次draw。16*7=112>100，需要7次才实际绘制一次。这个情况下，实际10帧需要112*10=1120ms>1000ms才绘制完成。
	            this.lastUpdate = now - delta % this.interval;

	            this.update(now);
	          }
	        } else {
	          this.update(now);
	        }
	      }
	    }
	  }, {
	    key: "update",
	    value: function update(time) {
	      var now = time || Date.now();

	      if (now < this._startTime) {
	        return true;
	      }

	      var elapsed = (now - this._startTime) / this.config.duration;
	      elapsed = elapsed > 1 ? 1 : elapsed;

	      this._callback(elapsed);

	      if (elapsed === 1) {
	        this.stop();
	      }
	    }
	  }]);

	  return Tween;
	}();

	var nameMap = {};

	module.exports = exports["default"];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\common\\tween.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\common\\tween.js"); } } })();

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GFLine = exports.Wfunnel = exports.Wrectangle = exports.Wradar = exports.Wnightingale = exports.Wsankey = exports.Wcustom = exports.Wmap = exports.Wscatter = exports.Wpie = exports.Wlinebar = exports.Wbar = exports.Wminiline = exports.Wline = exports.PathUtil = exports.MatrixUtil = exports.DomUtil = exports.Util = exports.DataSet = exports.G2 = exports.WG2Funnel = exports.WG2Rectangle = exports.WG2Radar = exports.WG2Nightingale = exports.WG2Sankey = exports.WG2Custom = exports.WG2Map = exports.WG2Scatter = exports.WG2Pie = exports.WG2LineBar = exports.WG2Bar = exports.WG2MiniLine = exports.WG2Line = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // 引入依赖库


	// 引入组件


	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _dataSet = __webpack_require__(31);

	var DataSet = _interopRequireWildcard(_dataSet);

	var _g2Connect = __webpack_require__(86);

	var _g2Connect2 = _interopRequireDefault(_g2Connect);

	var _common = __webpack_require__(8);

	var common = _interopRequireWildcard(_common);

	var _g2Factory = __webpack_require__(66);

	var _g2Factory2 = _interopRequireDefault(_g2Factory);

	var _platform = __webpack_require__(37);

	var _G2Line = __webpack_require__(212);

	var _G2Line2 = _interopRequireDefault(_G2Line);

	var _G2MiniLine = __webpack_require__(220);

	var _G2MiniLine2 = _interopRequireDefault(_G2MiniLine);

	var _G2Bar = __webpack_require__(204);

	var _G2Bar2 = _interopRequireDefault(_G2Bar);

	var _G2LineBar = __webpack_require__(214);

	var _G2LineBar2 = _interopRequireDefault(_G2LineBar);

	var _G2Pie = __webpack_require__(224);

	var _G2Pie2 = _interopRequireDefault(_G2Pie);

	var _G2Scatter = __webpack_require__(230);

	var _G2Scatter2 = _interopRequireDefault(_G2Scatter);

	var _index = __webpack_require__(216);

	var _index2 = _interopRequireDefault(_index);

	var _G2Custom = __webpack_require__(209);

	var _G2Custom2 = _interopRequireDefault(_G2Custom);

	var _G2Sankey = __webpack_require__(229);

	var _G2Sankey2 = _interopRequireDefault(_G2Sankey);

	var _G2Base = __webpack_require__(221);

	var _G2Base2 = _interopRequireDefault(_G2Base);

	var _G2Radar = __webpack_require__(227);

	var _G2Radar2 = _interopRequireDefault(_G2Radar);

	var _G2Rectangle = __webpack_require__(228);

	var _G2Rectangle2 = _interopRequireDefault(_G2Rectangle);

	var _G2Funnel = __webpack_require__(210);

	var _G2Funnel2 = _interopRequireDefault(_G2Funnel);

	var _F2Line = __webpack_require__(213);

	var _F2Line2 = _interopRequireDefault(_F2Line);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 暴露所有基础图表
	var WG2Line = exports.WG2Line = (0, _g2Factory2.default)('G2Line', _G2Line2.default);
	var WG2MiniLine = exports.WG2MiniLine = (0, _g2Factory2.default)('G2MiniLine', _G2MiniLine2.default);
	var WG2Bar = exports.WG2Bar = (0, _g2Factory2.default)('G2Bar', _G2Bar2.default);
	var WG2LineBar = exports.WG2LineBar = (0, _g2Factory2.default)('G2LineBar', _G2LineBar2.default, false);
	var WG2Pie = exports.WG2Pie = (0, _g2Factory2.default)('G2Pie', _G2Pie2.default);
	var WG2Scatter = exports.WG2Scatter = (0, _g2Factory2.default)('G2Scatter', _G2Scatter2.default);
	var WG2Map = exports.WG2Map = _index2.default;
	var WG2Custom = exports.WG2Custom = (0, _g2Factory2.default)('G2Custom', _G2Custom2.default);
	var WG2Sankey = exports.WG2Sankey = (0, _g2Factory2.default)('G2Sankey', _G2Sankey2.default, false);
	var WG2Nightingale = exports.WG2Nightingale = (0, _g2Factory2.default)('G2Nightingale', _G2Base2.default);
	var WG2Radar = exports.WG2Radar = (0, _g2Factory2.default)('G2Radar', _G2Radar2.default);
	var WG2Rectangle = exports.WG2Rectangle = (0, _g2Factory2.default)('G2Rectangle', _G2Rectangle2.default, false);
	var WG2Funnel = exports.WG2Funnel = (0, _g2Factory2.default)('G2Funnel', _G2Funnel2.default);

	// 暴露基础图表库
	exports.G2 = _g2.default;
	exports.DataSet = DataSet;

	// 暴露工具类

	var Util = exports.Util = _extends({}, _g2.default.Util, {
	  Connect: _g2Connect2.default, // 图表联动组件
	  propertyMap: common.propertyMap,
	  propertyAssign: common.propertyAssign,
	  getParentSize: common.getParentSize,
	  getStatusColor: common.getStatusColor,
	  isInvalidNumber: common.isInvalidNumber,
	  numberDecimal: common.numberDecimal,
	  beautifyNumber: common.beautifyNumber,
	  getRawData: common.getRawData,
	  filterKey: common.filterKey
	});
	var DomUtil = exports.DomUtil = _g2.default.DomUtil;
	var MatrixUtil = exports.MatrixUtil = _g2.default.MatrixUtil;
	var PathUtil = exports.PathUtil = _g2.default.PathUtil;

	// 暴露图表组件
	var Wline = exports.Wline = WG2Line;
	var Wminiline = exports.Wminiline = WG2MiniLine;
	var Wbar = exports.Wbar = WG2Bar;
	var Wlinebar = exports.Wlinebar = WG2LineBar;
	var Wpie = exports.Wpie = WG2Pie;
	var Wscatter = exports.Wscatter = WG2Scatter;
	var Wmap = exports.Wmap = WG2Map;
	var Wcustom = exports.Wcustom = WG2Custom;
	var Wsankey = exports.Wsankey = WG2Sankey;
	var Wnightingale = exports.Wnightingale = WG2Nightingale;
	var Wradar = exports.Wradar = WG2Radar;
	var Wrectangle = exports.Wrectangle = WG2Rectangle;
	var Wfunnel = exports.Wfunnel = WG2Funnel;

	var GFLine = exports.GFLine = (0, _platform.autoSelect)(Wline, _F2Line2.default);

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\g2Charts.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\g2Charts.js"); } } })();

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.track = exports.COLORS = exports.Wcount = exports.Wperline = exports.Wplaceholder = exports.Wshoot = exports.Wminicontainer = exports.Wcircle = exports.Wicon = exports.Wcontainer = exports.Wnumber = undefined;

	var _g2Charts = __webpack_require__(200);

	Object.keys(_g2Charts).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _g2Charts[key];
	    }
	  });
	});

	var _index = __webpack_require__(9);

	__webpack_require__(61);

	var _index2 = __webpack_require__(222);

	var _index3 = _interopRequireDefault(_index2);

	var _index4 = __webpack_require__(205);

	var _index5 = _interopRequireDefault(_index4);

	var _index6 = __webpack_require__(211);

	var _index7 = _interopRequireDefault(_index6);

	var _index8 = __webpack_require__(67);

	var _index9 = _interopRequireDefault(_index8);

	var _index10 = __webpack_require__(219);

	var _index11 = _interopRequireDefault(_index10);

	var _index12 = __webpack_require__(231);

	var _index13 = _interopRequireDefault(_index12);

	var _index14 = __webpack_require__(225);

	var _index15 = _interopRequireDefault(_index14);

	var _index16 = __webpack_require__(223);

	var _index17 = _interopRequireDefault(_index16);

	var _index18 = __webpack_require__(207);

	var _index19 = _interopRequireDefault(_index18);

	var _track2 = __webpack_require__(203);

	var _track3 = _interopRequireDefault(_track2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Wnumber = _index3.default;

	// 业务组件，没有依赖其它图表库

	exports.Wcontainer = _index5.default;
	exports.Wicon = _index7.default;
	exports.Wcircle = _index9.default;
	exports.Wminicontainer = _index11.default;
	exports.Wshoot = _index13.default;
	exports.Wplaceholder = _index15.default;
	exports.Wperline = _index17.default;
	exports.Wcount = _index19.default;

	// 暴露颜色值

	var COLORS = exports.COLORS = _index.color;

	// 暴露所有图表组件、底层依赖的G2、工具类


	// 打点控制
	exports.track = _track3.default;
	// import * as highchartsMap from './highchartsMap';
	//
	// export const WG2Line = g2Map.WG2Line;
	// export const WG2Bar = g2Map.WG2Bar;
	// export const WG2Pie = g2Map.WG2Pie;
	// export const WG2Map = g2Map.WG2Map;
	// export const WG2Custom = g2Map.WG2Custom;
	//
	// export const WHighLine = highchartsMap.WHighLine;
	// export const WHighBar = highchartsMap.WHighBar;
	// export const WHighPie = highchartsMap.WHighPie;
	// export const WHighLineBar = highchartsMap.WHighLineBar;
	//
	// //根据设置的library名字暴露默认的图表组件
	// const chartLibraryName = 'G2';
	// const chartMap = {
	//   // Highcharts: {
	//   //   line: highchartsMap.WHighLine,
	//   //   bar: highchartsMap.WHighBar,
	//   //   pie: highchartsMap.WHighPie,
	//   //   linebar: highchartsMap.WHighLineBar,
	//   //   map: g2Map.WG2Map,
	//   //   custom: g2Map.WG2Custom
	//   // },
	//   G2: {
	//     line: g2Map.WG2Line,
	//     bar: g2Map.WG2Bar,
	//     pie: g2Map.WG2Pie,
	//     linebar: highchartsMap.WHighLineBar,
	//     map: g2Map.WG2Map,
	//     custom: g2Map.WG2Custom
	//   }
	// };
	// export const Wline = chartMap[chartLibraryName].line;
	// export const Wbar = chartMap[chartLibraryName].bar;
	// export const Wpie = chartMap[chartLibraryName].pie;
	// export const Wlinebar = chartMap[chartLibraryName].linebar;
	// export const Wmap = chartMap[chartLibraryName].map;
	// export const Wcustom = chartMap[chartLibraryName].custom;

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\index.jsx"); } } })();

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fonts = exports.color = exports.size = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _color = __webpack_require__(235);

	var _color2 = _interopRequireDefault(_color);

	var _font = __webpack_require__(236);

	var _font2 = _interopRequireDefault(_font);

	var _size = __webpack_require__(237);

	var _size2 = _interopRequireDefault(_size);

	var _normal = __webpack_require__(234);

	var _normal2 = _interopRequireDefault(_normal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var prefix = 'widgets-';

	_extends(_color2.default, _normal2.default, {
	  // [`${prefix}tooltip-background`]: 'rgba(255, 255, 255, 0.9)',
	  // [`${prefix}tooltip-shadow`]: '0 1px 5px 0 rgba(0, 0, 0, 0.2)',
	  // [`${prefix}tooltip-cross-line`]: '#dddddd',
	  // [`${prefix}tooltip-cross-react`]: '#CCD6EC',
	  // [`${prefix}tooltip-cross-react-opacity`]: 0.3,

	  // 分类色阶
	  category_12: [_normal2.default.widgetsColorCategory1, _normal2.default.widgetsColorCategory2, _normal2.default.widgetsColorCategory3, _normal2.default.widgetsColorCategory4, _normal2.default.widgetsColorCategory5, _normal2.default.widgetsColorCategory6, _normal2.default.widgetsColorCategory7, _normal2.default.widgetsColorCategory8, _normal2.default.widgetsColorCategory9, _normal2.default.widgetsColorCategory10, _normal2.default.widgetsColorCategory11, _normal2.default.widgetsColorCategory12],
	  // 连续色阶，比较接近的颜色会错开
	  linear_10: [_normal2.default.widgetsColorLinear1, _normal2.default.widgetsColorLinear5, _normal2.default.widgetsColorLinear9, _normal2.default.widgetsColorLinear3, _normal2.default.widgetsColorLinear7, _normal2.default.widgetsColorLinear10, _normal2.default.widgetsColorLinear2, _normal2.default.widgetsColorLinear4, _normal2.default.widgetsColorLinear6, _normal2.default.widgetsColorLinear8],
	  // 顺序色阶，连续相似的颜色排列
	  order_10: [_normal2.default.widgetsColorLinear1, _normal2.default.widgetsColorLinear2, _normal2.default.widgetsColorLinear3, _normal2.default.widgetsColorLinear4, _normal2.default.widgetsColorLinear5, _normal2.default.widgetsColorLinear6, _normal2.default.widgetsColorLinear7, _normal2.default.widgetsColorLinear8, _normal2.default.widgetsColorLinear9, _normal2.default.widgetsColorLinear10]
	});

	_font2.default.fontFamilyNumber = _normal2.default.fontFamilyNumber;

	exports.size = _size2.default;
	exports.color = _color2.default;
	exports.fonts = _font2.default;

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\theme\\normal.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\theme\\normal.js"); } } })();

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = track;

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _log = __webpack_require__(15);

	var _platform = __webpack_require__(37);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * 打点控制函数
	 *
	 * @param {bool} enable 是否开启打点
	 * */
	var trackable = true;
	function track(enable) {
	  _g2.default.track(enable);
	  trackable = enable;
	}

	// 打点逻辑，使用黄金令箭
	var logUrl = '//gm.mmstat.com/aisc-widgets.use.init';
	setTimeout(function () {
	  if (trackable && ("production") === 'production') {
	    var logMap = (0, _log.getLog)();

	    var chartInit = Object.keys(logMap).map(function (name) {
	      var chartLog = logMap[name];

	      return name + ':' + chartLog.init;
	    }).join(',');

	    var image = new Image();
	    // 统计 版本、主题、当前域名、图表初始化次数
	    image.src = logUrl + '?version=' + ("2.1.24") + '&theme=' + ("index") + '&t=' + Date.now() + '&host=' + (location && location.host) + '&fullurl=' + document.URL + '&chartinit=' + chartInit + '&uamobile=' + _platform.isMobile;
	  }
	}, 3000);
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\track.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\track.js"); } } })();

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _g2Brush = __webpack_require__(52);

	var _g2Brush2 = _interopRequireDefault(_g2Brush);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectXAxis = __webpack_require__(29);

	var _rectXAxis2 = _interopRequireDefault(_rectXAxis);

	var _rectYAxis = __webpack_require__(30);

	var _rectYAxis2 = _interopRequireDefault(_rectYAxis);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	var _ResetButton = __webpack_require__(63);

	var _ResetButton2 = _interopRequireDefault(_ResetButton);

	__webpack_require__(173);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var defaultConfig = {
	  colors: _index.color.category_12,
	  padding: [40, 5, 32, 44],
	  xAxis: {
	    type: 'cat',
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    categories: null,
	    autoRotate: false
	  },
	  yAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    max: null,
	    min: null
	  },
	  legend: {
	    align: 'left',
	    nameFormatter: null //可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    titleFormatter: null,
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  column: true,
	  dodgeStack: false,
	  stack: false,
	  stackReverse: true,
	  marginRatio: 0,
	  grid: false,
	  zoom: false,
	  facet: false,
	  size: null,
	  // labels: false,
	  polar: false
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);

	    // TODO 处理padding
	    return _extends({}, props, {
	      padding: props.padding || config.padding || (newConfig.legend ? defaultConfig.padding : [16, 5, 32, 44]),
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = userConfig;

	    // 设置数据度量
	    var defs = {
	      x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	        type: 'cat'
	      }, config.xAxis),
	      y: (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	        type: 'linear',
	        tickCount: 5
	      }, config.yAxis),
	      type: {
	        type: 'cat',
	        sync: true
	      },
	      facet: {
	        sync: true
	      }
	    };

	    chart.source(data, defs);

	    // 设置单个Y轴
	    if (!config.facet) {
	      _rectYAxis2.default.call(this, chart, config);
	    }

	    // 设置X轴
	    _rectXAxis2.default.call(this, chart, config);

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config);

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    // if (config.polar) {
	    // chart.coord('theta', {
	    //   inner: 0.6
	    // });
	    //
	    // chart.point().position('name*0').color('name').shape('circle');
	    // chart.interval().position('name*value').color('name').shape('line').size(8); // 线状柱状图
	    // chart.point().position('name*value').color('name').shape('circle');

	    // 横向柱状图
	    if (!config.column) {
	      chart.coord().transpose();
	    }

	    if (config.facet) {
	      var facetConfig = _typeof(config.facet) === 'object' ? config.facet : {
	        type: 'mirror',
	        transpose: false,
	        padding: [20, 0, 20, 0]
	      };
	      var self = this;
	      chart.facet(facetConfig.type, {
	        fields: ['facet'],
	        transpose: facetConfig.transpose,
	        padding: facetConfig.padding,
	        rowTitle: {
	          offsetX: 15,
	          style: {
	            fontSize: 12,
	            textAlign: 'center',
	            rotate: 90,
	            fill: _index.color.widgetsAxisLabel
	          }
	        },
	        eachView: function eachView(view, facet) {
	          var yAxisCustomConfig = null;

	          // 为 labelFormatter 的第二个参数添加分面信息
	          if (config.yAxis && config.yAxis.visible !== false) {
	            var _ref = config.yAxis || {},
	                labelFormatter = _ref.labelFormatter;

	            if (labelFormatter) {
	              yAxisCustomConfig = {
	                label: {
	                  formatter: function formatter() {
	                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                      args[_key] = arguments[_key];
	                    }

	                    args[1] = _extends({
	                      facet: facet.colValue || facet.rowValue
	                    }, args[1]);
	                    return labelFormatter.apply(undefined, args);
	                  }
	                }
	              };
	            }
	          }

	          _rectYAxis2.default.call(self, view, config, 'y', yAxisCustomConfig);

	          drawBar(view, config, config.colors, 'type*facet');
	        }
	      });
	    } else {
	      drawBar(chart, config, config.colors);
	    }

	    // if (config.stack) {
	    //   chart.interval().position('x*y').color('type', config.colors).adjust([{
	    //     type: 'stack',
	    //     reverseOrder: !config.stackReverse, // 层叠顺序倒序
	    //   }]);
	    // } else {
	    //   chart.interval().position('x*y').color('type', config.colors).adjust([{
	    //     type: 'dodge',
	    //     marginRatio: 0, // 数值范围为 0 至 1，用于调整分组中各个柱子的间距
	    //   }]);
	    // }

	    chart.render();

	    // 拖拽缩放
	    if (config.zoom) {
	      var button = this.resetButton = new _ResetButton2.default(chart);

	      this.brush = new _g2Brush2.default({
	        canvas: chart.get('canvas'),
	        chart: chart,
	        type: 'X',
	        onBrushstart: function onBrushstart() {
	          chart.hideTooltip();
	        },
	        onBrushmove: function onBrushmove() {
	          chart.hideTooltip();
	          button.show();
	        }
	      });
	    }
	  },
	  destroy: function destroy() {
	    // 销毁时需要额外销毁缩放重置按钮
	    if (this.brush) {
	      this.brush.destroy();
	    }
	    if (this.resetButton) {
	      this.resetButton.destroy();
	    }
	  }
	};


	function drawBar(chart, config, colors) {
	  var field = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'type';
	  var stack = config.stack,
	      stackReverse = config.stackReverse,
	      marginRatio = config.marginRatio,
	      dodgeStack = config.dodgeStack,
	      size = config.size;

	  var geom = null;
	  if (dodgeStack) {
	    geom = chart.interval().position(['x', 'y']).color(field, colors).adjust([{
	      type: 'dodge',
	      marginRatio: marginRatio || 0, // 数值范围为 0 至 1，用于调整分组中各个柱子的间距
	      dodgeBy: 'dodge'
	    }, {
	      type: 'stack',
	      reverseOrder: !stackReverse // 层叠顺序倒序
	    }]);
	  } else if (stack) {
	    // 堆叠
	    geom = chart.interval().position(['x', 'y']).color(field, colors).adjust([{
	      type: 'stack',
	      reverseOrder: !stackReverse // 层叠顺序倒序
	    }]);
	  } else {
	    // 分组
	    geom = chart.interval().position(['x', 'y']).color(field, colors).adjust([{
	      type: 'dodge',
	      marginRatio: marginRatio || 0 // 数值范围为 0 至 1，用于调整分组中各个柱子的间距
	    }]);
	  }

	  // TODO 暂时没有更好的方案
	  if (size) {
	    var _geom;

	    var sizeConfig = size || 20;
	    if (Array.isArray(size)) {
	      sizeConfig = ['y', size];
	    } else if (_g2.default.Util.isFunction(size)) {
	      sizeConfig = ['x*y*type*facet', size];
	    } else if ((typeof size === 'undefined' ? 'undefined' : _typeof(size)) === 'object') {
	      // TODO
	    } else {
	      sizeConfig = [size];
	    }
	    (_geom = geom).size.apply(_geom, _toConsumableArray(sizeConfig));
	  }
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wbar\\G2Bar.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wbar\\G2Bar.js"); } } })();

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _index = __webpack_require__(83);

	var _index2 = _interopRequireDefault(_index);

	var _divider = __webpack_require__(206);

	var _divider2 = _interopRequireDefault(_divider);

	var _wcircle = __webpack_require__(67);

	var _wcircle2 = _interopRequireDefault(_wcircle);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	var _platform = __webpack_require__(37);

	__webpack_require__(175);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Row = _index2.default.Row,
	    Col = _index2.default.Col;

	var prefix = 'aisc-wcontainer';

	var Wcontainer = (_temp = _class = function (_React$Component) {
	  _inherits(Wcontainer, _React$Component);

	  function Wcontainer(props) {
	    _classCallCheck(this, Wcontainer);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wcontainer.__proto__ || Object.getPrototypeOf(Wcontainer)).call(this, props));

	    (0, _log2.default)('Wcontainer', 'init');
	    return _this;
	  }

	  _createClass(Wcontainer, [{
	    key: 'renderTitle',
	    value: function renderTitle(title, titleBorder, operation) {
	      var hideTitleBorder = titleBorder ? '' : prefix + '-hide-title-border';
	      return _react2.default.createElement(
	        'div',
	        { className: prefix + '-title ' + hideTitleBorder },
	        title,
	        operation ? _react2.default.createElement(
	          'div',
	          { className: prefix + '-operation' },
	          operation
	        ) : null
	      );
	    }
	  }, {
	    key: 'renderMainNormal',
	    value: function renderMainNormal() {
	      var _props = this.props,
	          propsChildren = _props.children,
	          title = _props.title,
	          fullContent = _props.fullContent;


	      var oneChild = _react2.default.Children.count(propsChildren) === 1;
	      if (oneChild && propsChildren && propsChildren.type && propsChildren.type.isG2Chart || fullContent) {
	        return _react2.default.createElement(
	          'div',
	          { className: prefix + '-main ' + prefix + '-main-one-chart ' + (title ? '' : 'no-title') },
	          propsChildren
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: prefix + '-main ' + (title ? '' : 'no-title') },
	        _react2.default.createElement(
	          Row,
	          { align: 'center' },
	          _react2.default.Children.map(propsChildren, function (child, i) {
	            if (!child) {
	              return child;
	            }
	            if (oneChild) {
	              return _react2.default.createElement(
	                Col,
	                { span: '24', key: i },
	                child
	              );
	            }
	            if (child.type.displayName === 'Wicon' || child.type.displayName === 'Wcircle') {
	              return _react2.default.createElement(
	                Col,
	                { fixedSpan: '2', key: i },
	                child
	              );
	            }
	            if (child.type.displayName === 'AiscWidgetsG2MiniLine') {
	              return _react2.default.createElement(
	                Col,
	                { fixedSpan: '4', key: i },
	                child
	              );
	            }
	            if (child.type.displayName === 'Divider') {
	              return _react2.default.createElement(
	                Col,
	                { fixedSpan: '1', key: i },
	                child
	              );
	            }
	            return _react2.default.createElement(
	              Col,
	              { key: i },
	              child
	            );
	          })
	        )
	      );
	    }
	  }, {
	    key: 'renderMainCross',
	    value: function renderMainCross() {
	      var maxColPerRow = 0;
	      var currentColPerRow = 0;
	      // 计算栅格的ColSpan
	      _react2.default.Children.forEach(this.props.children, function (child) {
	        if (child.type.displayName !== 'Divider') {
	          currentColPerRow += 1;
	        } else if (child.type && child.type !== 'combiner') {
	          if (currentColPerRow > maxColPerRow) {
	            maxColPerRow = currentColPerRow;
	          }
	          currentColPerRow = 0;
	        }
	      });
	      var ColPerRow = ~~(24 / maxColPerRow);
	      return _react2.default.createElement(
	        'div',
	        { className: prefix + '-main ' + prefix + '-cross' },
	        _react2.default.createElement(
	          'div',
	          { className: prefix + '-multi-row-container' },
	          chunks(this.props.children, ColPerRow)
	        )
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames,
	          _this2 = this;

	      var _props2 = this.props,
	          height = _props2.height,
	          arrange = _props2.arrange,
	          title = _props2.title,
	          titleBorder = _props2.titleBorder,
	          operation = _props2.operation,
	          className = _props2.className,
	          style = _props2.style,
	          otherProps = _objectWithoutProperties(_props2, ['height', 'arrange', 'title', 'titleBorder', 'operation', 'className', 'style']);

	      var mainClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, '' + prefix, true), _defineProperty(_classNames, prefix + '-mobile', (0, _platform.isMobileWithProps)(otherProps)), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement(
	        'div',
	        _extends({
	          className: mainClasses,
	          style: _extends({
	            minHeight: height,
	            height: height
	          }, style)
	        }, otherProps, {
	          ref: function ref(o) {
	            _this2.container = o;
	          }
	        }),
	        title && this.renderTitle(title, titleBorder, operation),
	        arrange === 'normal' && this.renderMainNormal(),
	        arrange === 'cross' && this.renderMainCross()
	      );
	    }
	  }]);

	  return Wcontainer;
	}(_react2.default.Component), _class.displayName = 'Wcontainer', _class.defaultProps = {
	  arrange: 'normal',
	  height: '100%',
	  operation: '',
	  titleBorder: true
	}, _temp);
	Wcontainer.displayName = 'Wcontainer';
	exports.default = Wcontainer;


	Wcontainer.propTypes = {
	  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
	  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
	};

	function chunks(arr, maxSpan) {
	  var rs = [];
	  var oneRow = [];
	  _react2.default.Children.forEach(arr, function (child, i) {
	    if (child.type && child.type.displayName === 'Divider') {
	      rs.push(_react2.default.createElement(
	        Row,
	        { type: 'across', align: 'center', key: i },
	        oneRow
	      ));
	      oneRow = [];
	    } else if (child.type === 'combiner' && oneRow.length) {
	      var lastChild = oneRow[oneRow.length - 1].props.children;
	      var lastSpan = oneRow[oneRow.length - 1].props.span;
	      oneRow[oneRow.length - 1] = _react2.default.createElement(
	        Col,
	        { span: lastSpan + maxSpan, key: i },
	        lastChild
	      );
	    } else if (i === arr.length - 1) {
	      oneRow.push(_react2.default.createElement(
	        Col,
	        { span: maxSpan, key: i },
	        child
	      ));
	      rs.push(_react2.default.createElement(
	        Row,
	        { type: 'across', align: 'center', key: i },
	        oneRow
	      ));
	    } else {
	      oneRow.push(_react2.default.createElement(
	        Col,
	        { span: maxSpan, key: i },
	        child
	      ));
	    }
	  });
	  return rs;
	}

	Wcontainer.divider = _divider2.default;
	Wcontainer.combiner = 'combiner';
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcontainer\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcontainer\\index.jsx"); } } })();

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wcontainer';

	var Divider = (_temp = _class = function (_React$Component) {
	  _inherits(Divider, _React$Component);

	  function Divider(props) {
	    _classCallCheck(this, Divider);

	    return _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).call(this, props));
	  }

	  _createClass(Divider, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', { className: prefix + '-divider' });
	    }
	  }]);

	  return Divider;
	}(_react2.default.Component), _class.displayName = 'Divider', _temp);
	Divider.displayName = 'Divider';
	exports.default = Divider;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcontainer\\views\\divider.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcontainer\\views\\divider.jsx"); } } })();

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _CountUp = __webpack_require__(208);

	var _CountUp2 = _interopRequireDefault(_CountUp);

	var _common = __webpack_require__(8);

	__webpack_require__(176);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wcount';

	var checkKey = ['start', 'decimals', 'duration', 'useEasing', 'useGrouping', 'separator', 'decimal', 'placeholder'];
	// 检查 a, b 两个对象中某些key是否有变化
	function configChange(a, b) {
	  return checkKey.some(function (key) {
	    return a[key] !== b[key];
	  });
	}

	/**
	 * 数字切片函数
	 *
	 * @param {number} start 起始值
	 * @param {number} end 结束值
	 * @param {number} clipNum 切片数
	 * @param {number} slipScale 幅度数组
	 *
	 * @return {array} 切片后的数值数组
	 * */
	function clipValue(start, end, clipNum, slipScale) {
	  var result = [];
	  var delta = end - start;
	  var step = delta / clipNum;

	  // 循环次数为 clipNum - 1， 最后一次直接添加end，防止计算精度误差
	  for (var i = 1; i < clipNum; i++) {
	    if (slipScale[i]) {
	      // 自定义切片
	      result.push(start + slipScale[i] * delta);
	    } else {
	      // 平均切片
	      result.push(start + step * i);
	    }
	  }

	  result.push(end);

	  return result;
	}

	var Wcount = (_temp = _class = function (_React$Component) {
	  _inherits(Wcount, _React$Component);

	  function Wcount(props) {
	    _classCallCheck(this, Wcount);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wcount.__proto__ || Object.getPrototypeOf(Wcount)).call(this, props));

	    _this.dom = null;
	    _this.countUp = null;
	    _this.clipTimer = null;
	    (0, _log2.default)('Wcount', 'init');
	    return _this;
	  }

	  _createClass(Wcount, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (!this.dom) {
	        return;
	      }

	      this.createCountUp(this.props);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var newEnd = nextProps.end,
	          newOptions = _objectWithoutProperties(nextProps, ['end']);

	      var _props = this.props,
	          oldEnd = _props.end,
	          oldOptions = _objectWithoutProperties(_props, ['end']);

	      // 大部分配置项如果改变了，直接生成新的实例


	      if (configChange(newOptions, oldOptions)) {
	        this.createCountUp(nextProps);
	      } else if (newEnd !== oldEnd && this.countUp) {
	        // 如果只有 end 改变了，更新数据
	        this.clipNumber(newOptions, newEnd);
	      }
	    }
	  }, {
	    key: 'clipNumber',
	    value: function clipNumber(props, newEnd) {
	      var _this2 = this;

	      var clipNum = props.clipNum,
	          clipPeriod = props.clipPeriod,
	          slipScale = props.slipScale;

	      // 清空定时器

	      clearInterval(this.clipTimer);

	      if (clipNum > 1) {
	        // 切片
	        // 生成切片列表，每个周期更新一次
	        var clipArray = clipValue(this.countUp.endVal, newEnd, clipNum, slipScale);
	        var loopIndex = 0;
	        // 定时更新
	        this.clipTimer = setInterval(function () {
	          _this2.countUp && _this2.countUp.update(clipArray[loopIndex]);

	          loopIndex += 1;
	          // 已更新完切片列表，清空定时器
	          if (loopIndex >= clipArray.length) {
	            clearInterval(_this2.clipTimer);
	          }
	        }, clipPeriod * 1000);
	      } else {
	        // 直接更新
	        this.countUp.update(newEnd);
	      }
	    }
	  }, {
	    key: 'createCountUp',
	    value: function createCountUp(props) {
	      var start = props.start,
	          end = props.end,
	          decimals = props.decimals,
	          duration = props.duration,
	          options = _objectWithoutProperties(props, ['start', 'end', 'decimals', 'duration']);

	      var countUp = new _CountUp2.default(this.dom, start, end, decimals, duration, options);
	      if (!countUp.error) {
	        countUp.start();
	      } else {
	        console.error(countUp.error);
	      }

	      this.countUp = countUp;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames,
	          _this3 = this;

	      var _props2 = this.props,
	          className = _props2.className,
	          otherProps = _objectWithoutProperties(_props2, ['className']);

	      var mainClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, prefix, true), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement('span', _extends({ ref: function ref(s) {
	          return _this3.dom = s;
	        }, className: mainClasses }, (0, _common.filterKey)(otherProps, checkKey.concat(['end', 'clipNum', 'clipPeriod', 'slipScale']))));
	    }
	  }]);

	  return Wcount;
	}(_react2.default.Component), _class.displayName = 'Wcount', _class.defaultProps = {
	  // 切片配置
	  clipNum: 1,
	  clipPeriod: 5,
	  slipScale: [],
	  // countUp 配置
	  // 常用
	  start: 0,
	  end: 0,
	  decimals: 0,
	  duration: 1.5,
	  // 额外配置
	  useEasing: true, // toggle easing
	  useGrouping: true, // 1,000,000 vs 1000000
	  separator: ',', // character to use as a separator
	  decimal: '.', // character to use as a decimal
	  placeholder: "-" // 非数据时的替换
	}, _temp);
	Wcount.displayName = 'Wcount';
	exports.default = Wcount;


	Wcount.propTypes = {
	  clipNum: _propTypes2.default.number,
	  clipPeriod: _propTypes2.default.number,
	  slipScale: _propTypes2.default.arrayOf(_propTypes2.default.number),
	  start: _propTypes2.default.number,
	  end: _propTypes2.default.number,
	  decimals: _propTypes2.default.number,
	  duration: _propTypes2.default.number,
	  useEasing: _propTypes2.default.bool,
	  useGrouping: _propTypes2.default.bool,
	  separator: _propTypes2.default.string,
	  decimal: _propTypes2.default.string,
	  placeholder: _propTypes2.default.string
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcount\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcount\\index.jsx"); } } })();

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (target, startVal, endVal, decimals, duration, options) {

	  // make sure requestAnimationFrame and cancelAnimationFrame are defined
	  // polyfill for browsers without native support
	  // by Opera engineer Erik Möller
	  var lastTime = 0;
	  var vendors = ['webkit', 'moz', 'ms', 'o'];
	  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	  }
	  if (!window.requestAnimationFrame) {
	    window.requestAnimationFrame = function (callback, element) {
	      var currTime = new Date().getTime();
	      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	      var id = window.setTimeout(function () {
	        callback(currTime + timeToCall);
	      }, timeToCall);
	      lastTime = currTime + timeToCall;
	      return id;
	    };
	  }
	  if (!window.cancelAnimationFrame) {
	    window.cancelAnimationFrame = function (id) {
	      clearTimeout(id);
	    };
	  }

	  // default options
	  this.options = {
	    useEasing: true, // toggle easing
	    useGrouping: true, // 1,000,000 vs 1000000
	    separator: ',', // character to use as a separator
	    decimal: '.', // character to use as a decimal
	    placeholder: "-" //非数据时的替换
	  };
	  // extend default options with passed options object
	  for (var key in options) {
	    if (options.hasOwnProperty(key)) {
	      this.options[key] = options[key];
	    }
	  }
	  if (this.options.separator === '') this.options.useGrouping = false;
	  if (!this.options.prefix) this.options.prefix = '';
	  if (!this.options.suffix) this.options.suffix = '';

	  this.d = typeof target === 'string' ? document.getElementById(target.replace('#', '')) : target;
	  this.startVal = Number(startVal);
	  if (isNaN(startVal)) this.startVal = Number(startVal.match(/[\d]+/g).join('')); // strip non-numerical characters
	  this.endVal = Number(endVal);
	  if (isNaN(endVal)) this.endVal = Number(endVal.match(/[\d]+/g).join('')); // strip non-numerical characters
	  this.countDown = this.startVal > this.endVal;
	  this.frameVal = this.startVal;
	  this.decimals = Math.max(0, decimals || 0);
	  this.dec = Math.pow(10, this.decimals);
	  this.duration = Number(duration) * 1000 || 2000;
	  var self = this;

	  this.version = function () {
	    return '1.5.3';
	  };

	  // Print value to target
	  this.printValue = function (value) {
	    var result = !isNaN(value) ? self.formatNumber(value) : self.options.placeholder;
	    if (self.d.tagName === 'INPUT') {
	      this.d.value = result;
	    } else if (self.d.tagName === 'text') {
	      this.d.textContent = result;
	    } else {
	      var html = '';
	      for (var i = 0; i < result.length; i++) {
	        var s = result.charAt(i);
	        if (s === self.options.separator) {
	          html += '<span class="count-up-separator">' + s + '</span>';
	        } else if (s === self.options.decimal) {
	          html += '<span class="count-up-decimal">' + s + '</span>';
	        } else {
	          html += '<span class="count-up-num-' + s + '">' + s + '</span>';
	        }
	      }
	      this.d.innerHTML = html;
	    }
	  };

	  // Robert Penner's easeOutExpo
	  this.easeOutExpo = function (t, b, c, d) {
	    return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
	  };
	  this.count = function (timestamp) {

	    if (!self.startTime) self.startTime = timestamp;

	    self.timestamp = timestamp;

	    var progress = timestamp - self.startTime;
	    self.remaining = self.duration - progress;

	    // to ease or not to ease
	    if (self.options.useEasing) {
	      if (self.countDown) {
	        self.frameVal = self.startVal - self.easeOutExpo(progress, 0, self.startVal - self.endVal, self.duration);
	      } else {
	        self.frameVal = self.easeOutExpo(progress, self.startVal, self.endVal - self.startVal, self.duration);
	      }
	    } else {
	      if (self.countDown) {
	        self.frameVal = self.startVal - (self.startVal - self.endVal) * (progress / self.duration);
	      } else {
	        self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);
	      }
	    }

	    // don't go past endVal since progress can exceed duration in the last frame
	    if (self.countDown) {
	      self.frameVal = self.frameVal < self.endVal ? self.endVal : self.frameVal;
	    } else {
	      self.frameVal = self.frameVal > self.endVal ? self.endVal : self.frameVal;
	    }

	    // decimal
	    self.frameVal = Math.round(self.frameVal * self.dec) / self.dec;

	    // format and print value
	    self.printValue(self.frameVal);

	    // whether to continue
	    if (progress < self.duration) {
	      self.rAF = requestAnimationFrame(self.count);
	    } else {
	      if (self.callback) self.callback();
	    }
	  };
	  // start your animation
	  this.start = function (callback) {
	    self.callback = callback;
	    // make sure values are valid
	    if (!isNaN(self.endVal) && !isNaN(self.startVal) && self.startVal !== self.endVal) {
	      self.rAF = requestAnimationFrame(self.count);
	    } else {
	      console.log('countUp error: startVal or endVal is not a number');
	      self.printValue(endVal);
	    }
	    return false;
	  };
	  // toggles pause/resume animation
	  this.pauseResume = function () {
	    if (!self.paused) {
	      self.paused = true;
	      cancelAnimationFrame(self.rAF);
	    } else {
	      self.paused = false;
	      delete self.startTime;
	      self.duration = self.remaining;
	      self.startVal = self.frameVal;
	      requestAnimationFrame(self.count);
	    }
	  };
	  // reset to startVal so animation can be run again
	  this.reset = function () {
	    self.paused = false;
	    delete self.startTime;
	    self.startVal = startVal;
	    cancelAnimationFrame(self.rAF);
	    self.printValue(self.startVal);
	  };
	  // pass a new endVal and start animation
	  this.update = function (newEndVal) {
	    cancelAnimationFrame(self.rAF);
	    self.paused = false;
	    delete self.startTime;
	    self.startVal = self.frameVal;
	    self.endVal = Number(newEndVal);
	    self.countDown = self.startVal > self.endVal;
	    if (!isNaN(self.startVal) && !isNaN(self.endVal)) {
	      self.rAF = requestAnimationFrame(self.count);
	    } else {
	      self.printValue(self.endVal);
	    }
	  };
	  this.formatNumber = function (num) {
	    var neg = num < 0,
	        x,
	        x1,
	        x2,
	        x3,
	        i,
	        len;
	    var numStr = Math.abs(num).toFixed(self.decimals) + '';
	    x = numStr.split('.');
	    x1 = x[0];
	    x2 = x.length > 1 ? self.options.decimal + x[1] : '';
	    if (self.options.useGrouping) {
	      x3 = '';
	      for (i = 0, len = x1.length; i < len; ++i) {
	        if (i !== 0 && i % 3 === 0) {
	          x3 = self.options.separator + x3;
	        }
	        x3 = x1[len - i - 1] + x3;
	      }
	      x1 = x3;
	    }
	    return (neg ? '-' : '') + self.options.prefix + x1 + x2 + self.options.suffix;
	  };

	  // format startVal on initialization
	  self.printValue(self.startVal);
	};

	;

	// Example:
	// var numAnim = new countUp("SomeElementYouWantToAnimate", 0, 99.99, 2, 2.5);
	// numAnim.start();
	// numAnim.update(135);
	// with optional callback:
	// numAnim.start(someMethodToCallOnComplete);
	/*

	 countUp.js
	 by @inorganik

	 */

	// target = id of html element or var of previously selected html element where counting occurs
	// startVal = the value you want to begin at
	// endVal = the value you want to arrive at
	// decimals = number of decimal places, default 0
	// duration = duration of animation in seconds, default 2
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcount\\lib\\CountUp.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcount\\lib\\CountUp.js"); } } })();

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  init: function init() {}
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wcustom\\G2Custom.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wcustom\\G2Custom.js"); } } })();

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	__webpack_require__(177);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  colors: _index.color.order_10,
	  padding: [40, 0, 0, 0],
	  legend: {
	    align: 'left',
	    nameFormatter: null //可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  // 主方向，从上到下(vertical)、从左到右(horizontal)
	  direction: 'vertical',
	  // 排列位置 start,center,end
	  align: 'center',
	  // 尖顶漏斗图
	  pyramid: false
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);

	    // TODO 处理padding
	    return _extends({}, props, {
	      padding: props.padding || config.padding || (newConfig.legend ? defaultConfig.padding : [16, 5, 32, 44]),
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = userConfig;

	    // 设置数据度量
	    var defs = {
	      type: {
	        type: 'cat'
	      }
	    };

	    chart.source(data, defs);

	    // 漏斗图目前看没有轴
	    chart.axis(false);

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config, null, true);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config, {
	      showTitle: false,
	      crosshairs: null
	    });

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    // 根据传入的 direction 和 align 设置坐标系，并绘制图形
	    var drawType = config.direction + '-' + config.align;
	    var geom = null;

	    switch (drawType) {
	      case 'vertical-left':
	        chart.coord('rect').transpose().scale(1, -1);
	        geom = chart.interval();
	        break;
	      case 'vertical-center':
	        chart.coord('rect').transpose().scale(1, -1);
	        geom = chart.intervalSymmetric();
	        break;
	      case 'vertical-right':
	        chart.coord('rect').transpose().scale(-1, -1);
	        geom = chart.interval();
	        break;
	      case 'horizontal-top':
	        chart.coord('rect').reflect('y');
	        geom = chart.interval();
	        break;
	      case 'horizontal-center':
	        geom = chart.intervalSymmetric();
	        break;
	      case 'horizontal-bottom':
	      // 和 default 时相同
	      default:
	        geom = chart.interval();
	    }

	    var funnelShape = config.align === 'center' && config.pyramid ? 'pyramid' : 'funnel';

	    geom.position('x*y').shape(funnelShape).color('x', config.colors);

	    chart.render();
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wfunnel\\G2Funnel.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wfunnel\\G2Funnel.js"); } } })();

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _common = __webpack_require__(8);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	__webpack_require__(178);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wicon';

	var Wicon = (_temp = _class = function (_React$Component) {
	  _inherits(Wicon, _React$Component);

	  function Wicon(props) {
	    _classCallCheck(this, Wicon);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wicon.__proto__ || Object.getPrototypeOf(Wicon)).call(this, props));

	    (0, _log2.default)('Wicon', 'init');
	    return _this;
	  }

	  _createClass(Wicon, [{
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props = this.props,
	          type = _props.type,
	          size = _props.size,
	          className = _props.className,
	          status = _props.status,
	          reverse = _props.reverse,
	          other = _objectWithoutProperties(_props, ['type', 'size', 'className', 'status', 'reverse']);

	      var classes = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, prefix + '-' + type, !!type), _defineProperty(_classNames, '' + prefix, true), _defineProperty(_classNames, prefix + '-' + size, !!size), _defineProperty(_classNames, prefix + '-' + (0, _common.getStatusColorName)(status), !!status), _defineProperty(_classNames, prefix + '-reverse', !!reverse), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement('i', _extends({ className: classes }, other));
	    }
	  }]);

	  return Wicon;
	}(_react2.default.Component), _class.displayName = 'Wicon', _class.defaultProps = {
	  size: 'big',
	  type: 'monitor',
	  status: 'none'
	}, _temp);
	Wicon.displayName = 'Wicon';
	exports.default = Wicon;


	Wicon.propTypes = {
	  type: _propTypes2.default.string
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wicon\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wicon\\index.jsx"); } } })();

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _g2Brush = __webpack_require__(52);

	var _g2Brush2 = _interopRequireDefault(_g2Brush);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectXAxis = __webpack_require__(29);

	var _rectXAxis2 = _interopRequireDefault(_rectXAxis);

	var _rectYAxis = __webpack_require__(30);

	var _rectYAxis2 = _interopRequireDefault(_rectYAxis);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	var _ResetButton = __webpack_require__(63);

	var _ResetButton2 = _interopRequireDefault(_ResetButton);

	__webpack_require__(179);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  colors: _index.color.category_12,
	  padding: [40, 5, 32, 44],
	  xAxis: {
	    type: 'time', // 默认为线性
	    mask: 'YYYY-MM-DD HH:mm:ss', // 上述type为time时，此字段生效
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    categories: null,
	    autoRotate: false,
	    max: null,
	    min: null
	  },
	  yAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    max: null,
	    min: null
	  },
	  legend: {
	    align: 'left',
	    nameFormatter: null //可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    titleFormatter: null,
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  area: false,
	  stack: false, // 仅Area有效
	  spline: false,
	  grid: false,
	  symbol: false,
	  zoom: false
	  // TODO
	  // labels: false,
	  // mini: false,
	  // dataConfig: {
	  //   nameKey: 'name',
	  //   valueKey: 'value',
	  //   // valueKey: ['value1', 'value2'],
	  //   typeKey: 'type'
	  // }
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);

	    // TODO 处理padding
	    var defaultPaddingTop = defaultConfig.padding[0];
	    var defaultPaddingRight = defaultConfig.padding[1];
	    var defaultPaddingBottom = defaultConfig.padding[2];
	    var defaultPaddingLeft = defaultConfig.padding[3];
	    if (defaultPaddingRight !== 'auto' && Array.isArray(newConfig.yAxis)) {
	      defaultPaddingRight = 44;
	    }
	    if (defaultPaddingTop !== 'auto' && !newConfig.legend) {
	      defaultPaddingTop = 16;
	    }
	    return _extends({}, props, {
	      padding: props.padding || config.padding || [defaultPaddingTop, defaultPaddingRight, defaultPaddingBottom, defaultPaddingLeft],
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var _this = this;

	    var config = userConfig;

	    if (config.xAxis && config.xAxis.type === 'datetime') {
	      config.xAxis.type = 'time';
	    }

	    var defs = {
	      x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	        type: 'time',
	        // 折线图X轴的范围默认覆盖全部区域，保证没有空余
	        range: [0, 1]
	      }, config.xAxis),
	      type: {
	        type: 'cat'
	      }
	    };

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (axis, yIndex) {
	        defs['y' + yIndex] = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	          type: 'linear',
	          tickCount: 5
	        }, axis);
	      });
	    } else {
	      defs.y = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	        type: 'linear',
	        tickCount: 5
	      }, config.yAxis);
	    }

	    chart.source(data, defs);

	    // 设置X轴
	    _rectXAxis2.default.call(this, chart, config);

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (axis, yIndex) {
	        var yAxisConfig = {
	          line: {
	            stroke: (0, _common.getDataIndexColor)(config.colors, _this.rawData, yIndex) || _index.color.widgetsAxisLine
	          }
	        };
	        if (yIndex !== 0) {
	          yAxisConfig.grid = null;
	        }

	        _rectYAxis2.default.call(_this, chart, _extends({}, config, { yAxis: axis }), 'y' + yIndex, yAxisConfig);
	      });
	    } else {
	      // 设置单个Y轴
	      _rectYAxis2.default.call(this, chart, config);
	    }

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config);

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    // 区域、堆叠、平滑曲线
	    var lineShape = config.spline ? 'smooth' : 'line';
	    var areaShape = config.spline ? 'smooth' : 'area';

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (asix, yIndex) {
	        drawLine(chart, config, lineShape, areaShape, 'y' + yIndex);
	      });
	    } else {
	      drawLine(chart, config, lineShape, areaShape);
	    }

	    chart.render();

	    // 拖拽缩放
	    if (config.zoom) {
	      var button = this.resetButton = new _ResetButton2.default(chart);

	      this.brush = new _g2Brush2.default({
	        canvas: chart.get('canvas'),
	        chart: chart,
	        type: 'X',
	        onBrushstart: function onBrushstart() {
	          chart.hideTooltip();
	        },
	        onBrushmove: function onBrushmove() {
	          chart.hideTooltip();
	          button.show();
	        }
	      });
	    }
	  },
	  destroy: function destroy() {
	    // 销毁时需要额外销毁缩放重置按钮
	    if (this.brush) {
	      this.brush.destroy();
	    }
	    if (this.resetButton) {
	      this.resetButton.destroy();
	    }
	  }
	};


	function drawLine(chart, config, lineShape, areaShape) {
	  var yAxisKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'y';

	  var geomStyle = config.geomStyle || {};
	  if (config.area && config.stack) {
	    chart.areaStack().position(['x', yAxisKey]).color('type', config.colors).shape(areaShape).active(false);
	    chart.lineStack().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).style('x*y*type*extra', _extends({
	      lineJoin: 'round'
	    }, geomStyle));
	  } else if (config.area && !config.stack) {
	    chart.area().position(['x', yAxisKey]).color('type', config.colors).shape(areaShape).active(false);
	    chart.line().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).style('x*y*type*extra', _extends({
	      lineJoin: 'round'
	    }, geomStyle));
	  } else {
	    chart.line().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).style('x*y*type*extra', _extends({
	      lineJoin: 'round'
	    }, geomStyle));
	  }
	  // 曲线默认点
	  if (config.symbol && config.area && config.stack) {
	    chart.point().adjust('stack').position(['x', yAxisKey]).color('type', config.colors).shape('circle').size(3).active(false);
	  } else if (config.symbol) {
	    chart.point().position(['x', yAxisKey]).color('type', config.colors).shape('circle').size(3).active(false);
	  }
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wline\\G2Line.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wline\\G2Line.js"); } } })();

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _f = __webpack_require__(51);

	var _f2 = _interopRequireDefault(_f);

	var _f2Factory = __webpack_require__(196);

	var _f2Factory2 = _interopRequireDefault(_f2Factory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var View = function View(props) {
	  var defaultStyle = {
	    display: 'flex',
	    flexDirection: 'column',
	    alignItems: 'stretch',
	    boxSizing: 'border-box',
	    borderWidth: 0,
	    borderStyle: 'solid',
	    margin: 0,
	    padding: 0,
	    position: 'relative',
	    zIndex: 0,
	    minHeight: 0,
	    minWidth: 0
	  };

	  var style = props.style,
	      extra = _objectWithoutProperties(props, ['style']);

	  var s = _extends({}, defaultStyle, style);

	  return _react2.default.createElement(
	    'div',
	    _extends({ style: s }, extra),
	    props.children
	  );
	};

	var Client = {
	  width: window.innerWidth,
	  height: window.innerHeight
	};

	var Theme = {
	  colors: {
	    GrayLightest: '#F7F9FB',
	    Font9: '#999',
	    Font3: '#333',
	    GrayLine: '#E5E7E9'
	  },
	  line: {
	    widthDefault: 0.5
	  }
	};

	var areaColorMap = ['#D3EAFD', '#D4F4F8', '#EBF5E0', '#FEEED3', '#EEDAF2', '#D6E1F3'];
	var guideColorMap = ['#EF5350', '#F9A825'];
	var colorMap = ['#2196F3', '#26C6DA', '#9CCC65', '#F9A825', '#AB47BC', '#3067C1'];

	var uniqueId = 0;
	function generateUniqueId() {
	  return 'react-line-' + uniqueId++;
	}

	var defaultConfig = {
	  width: Client.width,
	  height: 160,
	  padding: [10, 10, 20, 10],
	  colors: colorMap,
	  xAxis: {
	    // type: 'timeCat',
	    // mask: 'YYYY-MM-DD HH:mm:ss'
	  },
	  yAxis: {
	    min: 0
	  },
	  tooltip: true,
	  legend: true
	};

	var id = void 0;

	var getPoint = function getPoint(canvas, clientX, clientY) {
	  var bbox = canvas.getBoundingClientRect();
	  return {
	    x: clientX - bbox.left,
	    y: clientY - bbox.top
	  };
	};

	var setDomStyle = function setDomStyle(elem, styleObj) {
	  for (var prop in styleObj) {
	    elem.style[prop] = styleObj[prop];
	  }
	};

	var renderTopContent = function renderTopContent(x, dataArr, canvas, config) {
	  id = generateUniqueId();
	  var topContentStr = '<div style="display: flex; flex-wrap: wrap; WebkitUserSelect: none;flex-direction: column; width: ' + Client.width + 'px; padding: 8px 12px; font-size: 12px; line-height: 1.2 ">';

	  // if (dataArr.length >= 2) {
	  topContentStr += '<div style="color: #000">' + x + '</div>';
	  // }
	  topContentStr += '<div style="display: flex; flex-direction: row;flex-wrap: wrap;">';

	  dataArr.forEach(function (i) {
	    var color = i.color;
	    if (areaColorMap.indexOf(color) >= 0) {
	      color = colorMap[areaColorMap.indexOf(color)];
	    }
	    topContentStr += '<div style="margin-right: 30px; margin-top: 12px; white-space: nowrap"><span style="display: inline-block; box-sizing: border-box;margin-right: 4px;text-align: center;width: 14px;height: 14px;border-radius: 100%;background-color: #fff;border: 1px solid ' + color + '"><span style="display: inline-block; width: 10px;height: 10px; border-radius: 100%;background-color:' + color + '"></span></span><span class="name" style="color: ' + Theme.colors.Font9 + '; margin-right: 6px;">' + i.name + '</span><span class="value" style="color: ' + Theme.colors.Font3 + '">' + (i.value !== null ? i.value : '') + '</span></div>';
	  });
	  topContentStr += '</div></div>';

	  var topContentDiv = document.createElement('div');
	  topContentDiv.id = id;
	  setDomStyle(topContentDiv, {
	    backgroundColor: Theme.colors.GrayLightest,
	    position: 'absolute',
	    top: -100,
	    left: 0,
	    borderStyle: 'solid',
	    borderColor: Theme.colors.GrayLine,
	    borderWidth: Theme.line.widthDefault + 'px 0 ' + Theme.line.widthDefault + 'px',
	    padding: 8,
	    boxSizing: 'border-box',
	    width: Client.width + 'px',
	    overflow: 'hidden'
	  });
	  topContentDiv.innerHTML = topContentStr;
	  document.body.appendChild(topContentDiv);
	  setDomStyle(topContentDiv, {
	    top: canvas.getClientRects()[0].top + window.scrollY - topContentDiv.getClientRects()[0].height + config.padding[0] + 'px'
	  });
	};

	var line = {
	  beforeInit: function beforeInit(props) {
	    var newProps = _extends({}, props);
	    var newConfig = _extends({}, defaultConfig, newProps.config);
	    newProps.config = newConfig;
	    return newProps;
	  },
	  init: function init(chart, userConfig, data, rawData) {
	    var defs = {
	      x: {
	        type: userConfig.xAxis.type || 'cat',
	        tickCount: 5,
	        range: [0, 1]
	      },
	      y: {
	        tickCount: 4,
	        min: 0
	      }
	    };
	    // 配置刻度文字大小，供PC端显示用(移动端可以使用默认值20px)
	    if (userConfig.xAxis.show === false) {
	      chart.axis('x', false);
	    } else {
	      chart.axis('x', {
	        // 设置坐标轴线的样式，如果值为 null，则不显示坐标轴线，图形属性
	        line: {
	          lineWidth: 1,
	          stroke: '#d8d8d8'
	        },
	        // 坐标轴文本距离轴线的距离
	        labelOffset: 5,
	        // 坐标点对应的线，null 不显示，图形属性
	        tickLine: null,
	        // 第一个点左对齐，最后一个点右对齐，其余居中，只有一个点时左对齐
	        label: function label(text, index, total) {
	          var cfg = {
	            fill: '#979797',
	            offset: 6,
	            fontSize: 10
	          };
	          if (index === 0) {
	            cfg.textAlign = 'left';
	          }
	          if (index > 0 && index === total - 1) {
	            cfg.textAlign = 'right';
	          }
	          cfg.text = text; // cfg.text 支持文本格式化处理
	          return cfg;
	        },
	        grid: null
	      });
	    }

	    if (userConfig.yAxis.show === false) {
	      chart.axis('y', false);
	    } else {
	      chart.axis('y', {
	        custom: true,
	        label: {
	          fontSize: 10
	        },
	        labelOffset: -1
	      });
	    }

	    // 确保当 y 轴数值都为 undefined 或 null 的时候 max 不小于 min
	    if (data.every(function (item) {
	      return item.y == null;
	    })) {
	      defs.y.max = 1;
	    }

	    chart.source(data, defs);

	    if (userConfig.type === 'area') {
	      chart.area().position('x*y').color('type', function (value) {
	        var index = void 0;
	        rawData.forEach(function (i, j) {
	          if (i.name == value) {
	            index = j;
	          }
	        });
	        return areaColorMap[index];
	      }).style({
	        opacity: 1
	      });
	    }

	    chart.line().position('x*y').color('type').style({
	      lineWidth: 1.5
	    });

	    if (userConfig.guides) {
	      userConfig.guides.forEach(function (guide, index) {
	        if (Array.isArray(guide.value)) {
	          guide.value.forEach(function (item) {
	            chart.guide().line([item, 0], [item, 30], {
	              lineWidth: 1.5, // 辅助线宽度
	              stroke: guide.color || guideColorMap[index] // 辅助线颜色设置
	            });
	          });
	        } else {
	          chart.guide().line([guide.value, 0], [guide.value, 30], {
	            lineWidth: 1.5, // 辅助线宽度
	            stroke: guide.color || guideColorMap[index] // 辅助线颜色设置
	          });
	        }
	      });
	    }

	    chart.render();
	  },

	  //画点
	  renderPoint: function renderPoint(config, data, resultArr, canvas, elem) {
	    var parentContainer = document.querySelector('#aismcontainer-' + elem.chartId);
	    var parentCanvas = parentContainer.querySelector('canvas');

	    //画点
	    if (parentContainer.querySelector('.tipPoint')) {
	      var tipPoints = parentContainer.querySelectorAll('.tipPoint');
	      var tipLine1 = parentContainer.querySelector('.tipLine');
	      for (var i = 0; i < tipPoints.length; i++) {
	        parentContainer.removeChild(tipPoints[i]);
	      }
	      if (tipLine1) {
	        parentContainer.removeChild(tipLine1);
	      }
	    }

	    if (config.tooltip !== false) {
	      renderTopContent(data[0]._origin.x, resultArr, canvas, config);
	    }

	    var legendContainer = document.querySelector('#aismlegend' + elem.chartId);
	    var legendHeight = legendContainer.children.length ? legendContainer.getClientRects()[0].height : 0;
	    var tipLineX = data[0].x;
	    var tipLineY = data[0].y;
	    //y轴方面的tip
	    var tipLine = document.createElement('div');
	    tipLine.className = 'tipLine';
	    tipLine.style.borderColor = '#ccc';
	    tipLine.style.width = 0;
	    tipLine.style.borderWidth = '0 1px 0 0 ';
	    tipLine.style.borderStyle = 'dashed';
	    tipLine.style.position = 'absolute';
	    tipLine.style.left = tipLineX - 0.5 + 'px';
	    tipLine.style.top = 16 + config.padding[0] + 'px';
	    tipLine.style.height = parentContainer.querySelector('canvas').getClientRects()[0].height - config.padding[0] - config.padding[2] + 'px';
	    //x轴方向的tipline
	    var xTipLine = document.createElement('div');
	    xTipLine.className = 'tipLine';
	    xTipLine.style.borderColor = '#ccc';
	    xTipLine.style.borderWidth = '1px 0 0';
	    xTipLine.style.borderStyle = 'dashed';
	    xTipLine.style.position = 'absolute';
	    xTipLine.style.left = config.padding[3] + 'px';
	    xTipLine.style.top = legendHeight + tipLineY + 'px';
	    xTipLine.style.height = 0;
	    xTipLine.style.width = parentCanvas.getClientRects()[0].width - config.padding[1] - config.padding[3] + 'px';

	    parentContainer.appendChild(tipLine);
	    parentContainer.appendChild(xTipLine);
	    var dataArr = [];

	    data.forEach(function (dataItem) {
	      var color = dataItem.color;
	      if (areaColorMap.indexOf(color) >= 0) {
	        color = colorMap[areaColorMap.indexOf(color)];
	      }
	      dataArr.push({ x: dataItem.x, y: dataItem.y });
	      var tipPoint = document.createElement('div');
	      tipPoint.style.width = '6px';
	      tipPoint.style.height = '6px';
	      tipPoint.style.position = 'absolute';
	      tipPoint.style.top = dataItem.y + legendHeight - 3 + 'px';
	      tipPoint.style.left = dataItem.x - 3 + 'px';
	      tipPoint.style.backgroundColor = color;
	      tipPoint.style.borderRadius = '100%';
	      tipPoint['z-index'] = 1000;
	      tipPoint.className = 'tipPoint';
	      parentContainer.appendChild(tipPoint);
	    });
	    var tipLinePoint = document.createElement('div');
	    tipLinePoint.style.width = '6px';
	    tipLinePoint.style.height = '6px';
	    tipLinePoint.style.position = 'absolute';
	    tipLinePoint.style.top = legendHeight + parentCanvas.getClientRects()[0].height - config.padding[2] - 3 + 'px';
	    tipLinePoint.style.left = tipLineX - 3 + 'px';
	    tipLinePoint.style.backgroundColor = '#999';
	    tipLinePoint.style.borderRadius = '100%';
	    tipLinePoint['z-index'] = 1000;
	    tipLinePoint.className = 'tipLine';
	    parentContainer.appendChild(tipLinePoint);
	  },

	  //清除参考线和点
	  clearToolTip: function clearToolTip(elem) {
	    var parentContainer = document.querySelector('#aismcontainer-' + elem.chartId);
	    //如果有辅助线，则清除
	    if (parentContainer.querySelector('.tipLine')) {
	      var tipLine = parentContainer.querySelectorAll('.tipLine');
	      for (var j = 0; j < tipLine.length; j++) {
	        if (tipLine[j]) parentContainer.removeChild(tipLine[j]);
	      }
	    }
	    if (document.querySelector('#' + id)) {
	      document.body.removeChild(document.querySelector('#' + id));
	    }
	  },
	  chartTouchStart: function chartTouchStart(e, chart, config, canvas, resultData, originData, elem, self) {
	    var point = e.clientX ? getPoint(canvas, e.clientX, e.clientY) : getPoint(canvas, e.touches[0].clientX, e.touches[0].clientY);
	    self.inMove = true;
	    self.storePoint = point;
	    // 根据画布坐标获取对应数据集
	    var data = chart.getSnapRecords(point);
	    var resultArr = [];
	    data.forEach(function (i) {
	      resultArr.push({
	        color: i.color,
	        name: i._origin.type,
	        value: i._origin.y
	      });
	    });
	    self.renderPoint(config, data, resultArr, canvas, elem);

	    //点击的事件回调
	    if (config.onPressDown) {
	      config.onPressDown(dataArr, config);
	    }
	    if (!config.legend || config.legend && config.legend.show !== false) {
	      elem.renderLegend('top', resultArr);
	    }
	  },
	  chartTouchEnd: function chartTouchEnd(e, chart, config, canvas, resultData, originData, elem, self) {
	    self.inMove = false;
	    self.clearToolTip(elem);
	  },

	  //touchmove时候的事件处理
	  chartTouchMove: function chartTouchMove(e, chart, config, canvas, resultData, originData, elem, self) {
	    if (self.inMove) {
	      var point = e.clientX ? getPoint(canvas, e.clientX, e.clientY) : getPoint(canvas, e.touches[0].clientX, e.touches[0].clientY);

	      var storePoint = self.storePoint;
	      // 根据画布坐标获取对应数据集

	      var data = chart.getSnapRecords(point);
	      var resultArr = [];
	      data.forEach(function (i) {
	        resultArr.push({
	          color: i.color,
	          name: i._origin.type,
	          value: i._origin.y
	        });
	      });
	      if (storePoint && storePoint.x === point.x) {
	        return;
	      } else {
	        self.clearToolTip(elem);
	        self.renderPoint(config, data, resultArr, canvas, elem);
	      }
	    }
	  },
	  afterRender: function afterRender(canvas, chart, config, props, elem) {
	    var parentContainer = document.querySelector('#aismcontainer-' + elem.chartId);
	    var point = getPoint(canvas, 375, 0);
	    var data = chart.getSnapRecords(point);
	    var dataArr = [];
	    var legendContainer = document.querySelector('#aismlegend' + elem.chartId);
	    if (config.showPointFirst !== false) {
	      data.forEach(function (dataItem) {
	        var color = dataItem.color;
	        if (areaColorMap.indexOf(color) >= 0) {
	          color = colorMap[areaColorMap.indexOf(color)];
	        }
	        dataArr.push({ x: dataItem.x, y: dataItem.y });
	        var tipPoint = document.createElement('div');
	        tipPoint.style.width = '6px';
	        tipPoint.style.height = '6px';
	        tipPoint.style.position = 'absolute';
	        tipPoint.style.left = dataItem.x - 3 + 'px';
	        tipPoint.style.backgroundColor = color;
	        tipPoint.style.borderRadius = '100%';
	        tipPoint['z-index'] = 1000;
	        tipPoint.className = 'tipPoint';
	        setTimeout(function () {
	          var legendHeight = legendContainer.children.length ? legendContainer.getClientRects()[0].height : 0;

	          tipPoint.style.top = dataItem.y + legendHeight - 3 + 'px';

	          parentContainer.appendChild(tipPoint);
	        }, 50);
	      });
	    }
	    var resultArr = [];
	    data.forEach(function (i) {
	      resultArr.push({
	        color: i.color,
	        name: i._origin.type,
	        value: i._origin.y
	      });
	    });

	    if (!config.legend || config.legend && config.legend.show !== false) {
	      elem.renderLegend('top', resultArr);
	    }
	  },
	  afterChangeData: function afterChangeData(canvas, chart, config, props, elem) {
	    var parentContainer = document.querySelector('#aismcontainer-' + elem.chartId);
	    if (parentContainer.querySelector('.tipPoint')) {
	      var tipPoints = parentContainer.querySelectorAll('.tipPoint');
	      // }
	      for (var j = 0; j < tipPoints.length; j++) {
	        if (tipPoints[j]) parentContainer.removeChild(tipPoints[j]);
	      }
	    }
	  }
	};

	exports.default = (0, _f2Factory2.default)('F2Line', line);
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wline\\mobile\\F2Line.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wline\\mobile\\F2Line.js"); } } })();

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _dataAdapter = __webpack_require__(65);

	var _dataAdapter2 = _interopRequireDefault(_dataAdapter);

	var _guide = __webpack_require__(20);

	var _rectXAxis = __webpack_require__(29);

	var _rectXAxis2 = _interopRequireDefault(_rectXAxis);

	var _rectYAxis = __webpack_require__(30);

	var _rectYAxis2 = _interopRequireDefault(_rectYAxis);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	__webpack_require__(180);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  lineColors: _index.color.category_12.slice(1),
	  barColors: _index.color.linear_10,
	  padding: [40, 45, 32, 44],
	  xAxis: {
	    type: 'timeCat', // 默认为线性
	    mask: 'YYYY-MM-DD HH:mm:ss', // 上述type为time时，此字段生效
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    categories: null,
	    autoRotate: false,
	    max: null,
	    min: null
	  },
	  yAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    max: null,
	    min: null
	  },
	  legend: {
	    align: 'left',
	    nameFormatter: null //可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    titleFormatter: null,
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  area: false,
	  stack: false, // 仅Area有效
	  stackReverse: true,
	  spline: false,
	  grid: false,
	  symbol: false
	  // TODO
	  // zoom: false,
	  // labels: false,
	  // mini: false,
	  // dataConfig: {
	  //   nameKey: 'name',
	  //   valueKey: 'value',
	  //   // valueKey: ['value1', 'value2'],
	  //   typeKey: 'type'
	  // }
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);
	    // TODO 处理padding
	    return _extends({}, props, {
	      padding: props.padding || config.padding || (newConfig.legend ? defaultConfig.padding : [16, 45, 32, 44]),
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var _this = this;

	    var config = userConfig;

	    var rawLineData = [];
	    var rawBarData = [];
	    data.forEach(function (d) {
	      if (d.type === 'line') {
	        rawLineData.push(d);
	      } else if (d.type === 'bar') {
	        rawBarData.push(d);
	      }
	    });

	    var lineData = (0, _dataAdapter2.default)(rawLineData, config);
	    var barData = (0, _dataAdapter2.default)(rawBarData, config);

	    var defs = {
	      x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	        type: 'cat'
	        // fix 更新数据时x轴无法清除数据
	        // sync: true,
	      }, config.xAxis),
	      type: {
	        type: 'cat'
	      }
	    };

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (axis, yIndex) {
	        defs['y' + yIndex] = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	          type: 'linear',
	          tickCount: 5
	        }, axis);
	      });
	    } else {
	      defs.y = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	        type: 'linear',
	        tickCount: 5,
	        // 单轴时，必须同步度量，否则会两个度量叠加在一起
	        sync: true
	      }, config.yAxis);
	    }

	    chart.scale(defs);

	    // 设置X轴
	    _rectXAxis2.default.call(this, chart, config);

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (axis, yIndex) {
	        var axisColor = (0, _common.getDataIndexColor)(config.lineColors, rawLineData, yIndex) || (0, _common.getDataIndexColor)(config.barColors, rawBarData, yIndex) || _index.color.widgetsAxisLine;
	        var yAxisConfig = {
	          line: {
	            stroke: axisColor
	          }
	        };
	        if (yIndex !== 0) {
	          yAxisConfig.grid = null;
	          // 因为是多个view组成的图表，所以这里需要移动位置
	          yAxisConfig.position = 'right';
	        }

	        _rectYAxis2.default.call(_this, chart, _extends({}, config, { yAxis: axis }), 'y' + yIndex, yAxisConfig);
	      });
	    } else {
	      // 设置单个Y轴
	      _rectYAxis2.default.call(this, chart, config);
	    }

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config, {
	      'g2-legend': _extends({
	        display: 'inline-block',
	        position: 'relative',
	        textAlign: 'left',
	        top: _index.size.s3
	      }, config.legend.align === 'right' ? { marginLeft: _index.size.s3 } : { marginRight: _index.size.s3 })
	    });

	    // hackLegendPosition.call(this, config);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config);

	    // 正式开始绘图，创建两个不同的view
	    var barView = chart.view();
	    barView.source(barData);
	    this.barView = barView;

	    var lineView = chart.view();
	    lineView.source(lineData);
	    this.lineView = lineView;

	    var lineShape = config.spline ? 'smooth' : 'line';
	    var areaShape = config.spline ? 'smooth' : 'area';

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (asix, yIndex) {
	        if ((0, _common.getDataIndexColor)(config.barColors, rawBarData, yIndex)) {
	          drawBar(barView, config, 'y' + yIndex);
	        }
	        if ((0, _common.getDataIndexColor)(config.lineColors, rawLineData, yIndex)) {
	          drawLine(lineView, config, lineShape, areaShape, 'y' + yIndex);
	        }
	      });
	    } else {
	      drawBar(barView, config);
	      drawLine(lineView, config, lineShape, areaShape);
	    }

	    // 绘制辅助线，辅助背景区域
	    viewGuide(config, lineView, rawLineData, barView, rawBarData);

	    chart.render();
	  },
	  changeData: function changeData(chart, userConfig, data) {
	    var rawLineData = [];
	    var rawBarData = [];
	    data.forEach(function (d) {
	      if (d.type === 'line') {
	        rawLineData.push(d);
	      } else if (d.type === 'bar') {
	        rawBarData.push(d);
	      }
	    });

	    var lineData = (0, _dataAdapter2.default)(rawLineData, userConfig);
	    var barData = (0, _dataAdapter2.default)(rawBarData, userConfig);

	    this.barView && this.barView.source(barData);
	    this.lineView && this.lineView.source(lineData);
	    chart.render();

	    // hackLegendPosition.call(this, userConfig);
	  },
	  afterRender: function afterRender(chart, config) {
	    if (config.legend) {
	      // hack 图例的位置
	      var dom = this.chartDom && this.chartDom.querySelector('.g2-legend');
	      if (dom && dom.parentNode) {
	        dom.parentNode.style.textAlign = config.legend.align === 'right' ? 'right' : 'left';
	      }
	    }
	  }
	};


	function drawBar(chart, config) {
	  var yAxisKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'y';

	  if (config.stack) {
	    chart.interval().position(['x', yAxisKey]).color('type', config.barColors).adjust([{
	      type: 'stack',
	      reverseOrder: !config.stackReverse // 层叠顺序倒序
	    }]);
	  } else {
	    chart.interval().position(['x', yAxisKey]).color('type', config.barColors).adjust([{
	      type: 'dodge',
	      marginRatio: 0 // 数值范围为 0 至 1，用于调整分组中各个柱子的间距
	    }]);
	  }
	}

	function drawLine(chart, config, lineShape, areaShape) {
	  var yAxisKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'y';

	  if (config.area && config.stack) {
	    chart.areaStack().position(['x', yAxisKey]).color('type', config.lineColors).shape(areaShape).active(false);
	    chart.lineStack().position(['x', yAxisKey]).color('type', config.lineColors).shape(lineShape).style({
	      lineJoin: 'round'
	    });
	  } else if (config.area && !config.stack) {
	    chart.area().position(['x', yAxisKey]).color('type', config.lineColors).shape(areaShape).active(false);
	    chart.line().position(['x', yAxisKey]).color('type', config.lineColors).shape(lineShape).style({
	      lineJoin: 'round'
	    });
	  } else {
	    chart.line().position(['x', yAxisKey]).color('type', config.lineColors).shape(lineShape).style({
	      lineJoin: 'round'
	    });
	  }
	  // 曲线默认点
	  if (config.symbol && config.area && config.stack) {
	    chart.point().adjust('stack').position(['x', yAxisKey]).color('type', config.lineColors).shape('circle').size(3).active(false);
	  } else if (config.symbol) {
	    chart.point().position(['x', yAxisKey]).color('type', config.lineColors).shape('circle').size(3).active(false);
	  }
	}

	// function hackLegendPosition(config) {
	//   if (config.legend) {
	//     // hack 图例的位置，仅在初始化时处理一遍
	//     setTimeout(() => {
	//       const dom = this.chartDom && this.chartDom.querySelector('.g2-legend');
	//       if (dom && dom.parentNode) {
	//         dom.parentNode.style.textAlign = config.legend.align === 'right' ? 'right' : 'left';
	//       }
	//     }, 50);
	//   }
	// }

	function viewGuide(config, lineView, rawLineData, barView, rawBarData) {
	  var guide = config.guide;
	  if (!guide) {
	    return;
	  }

	  if (guide.line) {
	    if (Array.isArray(guide.line)) {
	      guide.line.forEach(function (line) {
	        (0, _guide.drawGuideLine)(getGuideView(config, line, lineView, rawLineData, barView, rawBarData), line);
	      });
	    } else {
	      (0, _guide.drawGuideLine)(getGuideView(config, guide.line, lineView, rawLineData, barView, rawBarData), guide.line);
	    }
	  }

	  if (guide.area) {
	    if (Array.isArray(guide.area)) {
	      guide.area.forEach(function (area) {
	        (0, _guide.drawGuideArea)(getGuideView(config, area, lineView, rawLineData, barView, rawBarData), area);
	      });
	    } else {
	      (0, _guide.drawGuideArea)(getGuideView(config, guide.area, lineView, rawLineData, barView, rawBarData), guide.area);
	    }
	  }
	}

	function getGuideView(config, guide, lineView, rawLineData, barView, rawBarData) {
	  var target = guide.target,
	      axis = guide.axis,
	      value = guide.value;

	  // 如果用户指定了绘制目标，直接使用

	  if (target === 'line') {
	    return lineView;
	  } else if (target === 'bar') {
	    return barView;
	  }

	  if (axis && (value || value === 0) && /y\d/.test(axis)) {
	    var yIndex = Number(axis.replace(/^y/, ''));
	    if ((0, _common.getDataIndexColor)(config.barColors, rawBarData, yIndex)) {
	      return barView;
	    }
	  }

	  return lineView;
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wlinebar\\G2LineBar.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wlinebar\\G2LineBar.js"); } } })();

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.convertPointPosition = convertPointPosition;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _g = __webpack_require__(17);

	var _g2 = _interopRequireDefault(_g);

	var _dataSet = __webpack_require__(31);

	var _d3Geo = __webpack_require__(59);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _chinaGeo = __webpack_require__(192);

	var _chinaGeo2 = _interopRequireDefault(_chinaGeo);

	var _index = __webpack_require__(9);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	var _chinaGeoInfo = __webpack_require__(217);

	__webpack_require__(181);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var defaultConfig = {
	  padding: [20, 20, 20, 20],
	  background: {
	    fill: _index.color.widgetsMapAreaBg,
	    stroke: _index.color.widgetsMapAreaBorder
	  },
	  areaColors: _index.color.order_10,
	  pointColors: _index.color.category_12,
	  type: 'china',
	  showSouthChinaSea: true,
	  projection: function projection() {
	    return (0, _d3Geo.geoConicEqualArea)().center([0, 36.4]).parallels([25, 47]).scale(1000).rotate([-105, 0]).translate([0, 0]);
	  },

	  legend: {
	    nameFormatter: null // 可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  labels: false
	};

	// const chinaProjection = () => geoConicEqualArea().center([0, 36.4]).parallels([25, 47]).scale(1000).rotate([-105, 0]).translate([0, 0]);

	// 这几个地点太小，需要特殊处理边框颜色
	var minArea = ['钓鱼岛', '赤尾屿', '香港', '澳门'];
	// 这几个地点需要特殊处理标签的文字大小
	var minLabel = ['钓鱼岛', '赤尾屿'];

	// 特殊处理一些地区的label
	var fixLngLatMap = {
	  '甘肃': [104.4948862, 35.0248462],
	  '河北': [115.5193875, 38.3062153],
	  '天津': [118.2141694, 38.8206246],
	  '澳门': [113.2573035, 21.7906005],
	  '香港': [114.9040905, 21.9265955],
	  '陕西': [108.5133047, 33.8799429],
	  '上海': [122.2818331, 31.0480268]
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config,
	        geoData = props.geoData;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);
	    if (geoData) {
	      this.geoData = geoData;
	    }
	    this.config = newConfig;

	    return _extends({}, props, {
	      padding: props.padding || newConfig.padding,
	      config: newConfig
	    });
	  },
	  init: function init(chart, config) {
	    var _this = this;

	    // 同步度量
	    chart.scale({
	      longitude: {
	        sync: true
	      },
	      latitude: {
	        sync: true
	      },
	      x: {
	        nice: false,
	        sync: true
	      },
	      y: {
	        nice: false,
	        sync: true
	      }
	    });

	    // 设置了 geo.projection 变换后，几何体的坐标系和图表的坐标系（从左下角到右上角）上下相反，所以设置镜像使地图的坐标正确。
	    chart.coord().reflect();

	    chart.axis(false);

	    mapTooltip.call(this, chart, config);

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config, {
	      autoCollapse: false,
	      position: 'left',
	      // 使用container控制图例添加的位置，方便调整样式
	      container: '#' + this.chartId + '-legend',
	      'g2-legend': {}
	    });

	    var ds = this.ds = new _dataSet.DataSet();

	    drawMapBackground.call(this, chart, ds, config);

	    var customPointLayer = [];
	    _react2.default.Children.forEach(this.props.children, function (child) {
	      if (!child) {
	        return;
	      }
	      var data = child.props.data;

	      if (config.dataType !== 'g2') {
	        data = convertMapData(data);
	      }
	      var layerConfig = _extends({}, config, child.props);
	      if (child.type.displayName === 'WidgetsMapArea') {
	        drawMapArea.call(_this, chart, ds, layerConfig, data);
	      }
	      if (child.type.displayName === 'WidgetsMapPoint') {
	        drawMapPoint.call(_this, chart, ds, layerConfig, data);
	      }
	      if (child.type.displayName === 'WidgetsMapCustom') {
	        customPointLayer.push(child.props);
	      }
	    });
	    this.setState({
	      customPointLayer: customPointLayer
	    });

	    if (config.labels) {
	      drawMapLabel.call(this, chart, config);
	    }

	    chart.render();
	  },
	  changeSize: function changeSize(chart, config, chartWidth, chartHeight) {
	    var chartRatio = chartWidth / chartHeight;
	    var ratio = this.bgMapRatio || chartRatio;

	    var width = chartWidth;
	    var height = chartHeight;
	    if (chartRatio > ratio) {
	      width = chartHeight * ratio;
	    } else if (chartRatio < ratio) {
	      height = chartWidth / ratio;
	    }
	    chart.changeSize(width, height);
	  },
	  changeData: function changeData(chart, newConfig, viewName, newData) {
	    var config = (0, _merge2.default)({}, defaultConfig, newConfig);
	    var ds = this.ds;
	    var data = newData;
	    if (config.dataType !== 'g2') {
	      data = convertMapData(newData);
	    }
	    if (viewName === 'WidgetsMapArea') {
	      drawMapArea.call(this, chart, ds, config, data);
	    }
	    if (viewName === 'WidgetsMapPoint') {
	      drawMapPoint.call(this, chart, ds, config, data);
	    }
	  }
	};

	// 绘制地图背景

	function drawMapBackground(chart, ds, config) {
	  var geoData = null;
	  if (this.geoData) {
	    // 如果用户有传geoData，优先使用
	    geoData = this.geoData;
	  } else if (config.type === 'china') {
	    // 自带中国地图数据
	    geoData = _chinaGeo2.default;
	  } else {
	    console.warn('map: no geo data, can\'t draw the map!');
	  }

	  var bgMapDataView = ds.createView('bgMap').source(geoData, {
	    type: 'GeoJSON'
	  }).transform({
	    type: 'geo.projection',
	    // 因为G2的投影函数不支持设置投影参数，这里使用自定义的投影函数设置参数
	    projection: config.projection,
	    as: ['x', 'y', 'cX', 'cY']
	  });

	  if (config.type === 'china') {
	    // 过滤掉南海诸岛
	    bgMapDataView.transform({
	      type: 'filter',
	      callback: function callback(row) {
	        return row.properties.name !== '南海诸岛';
	      }
	    });
	  }

	  // start: 按照投影后尺寸比例调整图表的真实比例
	  var longitudeRange = bgMapDataView.range('x');
	  var latitudeRange = bgMapDataView.range('y');
	  var ratio = this.bgMapRatio = (longitudeRange[1] - longitudeRange[0]) / (latitudeRange[1] - latitudeRange[0]);
	  var _chart$_attrs = chart._attrs,
	      chartWidth = _chart$_attrs.width,
	      chartHeight = _chart$_attrs.height;

	  var chartRatio = chartWidth / chartHeight;

	  var width = chartWidth;
	  var height = chartHeight;
	  if (chartRatio > ratio) {
	    width = chartHeight * ratio;
	  } else if (chartRatio < ratio) {
	    height = chartWidth / ratio;
	  }
	  if (width !== chartWidth || height !== chartHeight) {
	    chart.changeSize(width, height);
	  }
	  // end: 按照投影后尺寸比例调整图表的真实比例

	  var _ref = config.background || {},
	      bgFill = _ref.fill,
	      bgStroke = _ref.stroke,
	      otherBgStyle = _objectWithoutProperties(_ref, ['fill', 'stroke']);

	  var bgMapView = chart.view();
	  bgMapView.source(bgMapDataView);
	  bgMapView.tooltip(false);
	  bgMapView.polygon().position('x*y').style('name', _extends({
	    fill: bgFill || _index.color.widgetsMapAreaBg,
	    stroke: function stroke(name) {
	      // 对一些尺寸非常小的形状特殊处理，以显示出来。
	      if (minArea.indexOf(name) > -1) {
	        return bgFill || _index.color.widgetsMapAreaBg;
	      }
	      return bgStroke || _index.color.widgetsMapAreaBorder;
	    },
	    lineWidth: 1
	  }, otherBgStyle));

	  this.bgMapDataView = bgMapDataView;
	  this.bgMapView = bgMapView;
	}

	// 绘制分级统计地图
	function drawMapArea(chart, ds, config, data) {
	  var areaMapDataView = this.areaMapDataView;
	  if (areaMapDataView) {
	    areaMapDataView.origin !== data && areaMapDataView.source(data);
	  } else {
	    areaMapDataView = this.areaMapDataView = ds.createView().source(data).transform({
	      type: 'map',
	      callback: function callback(obj) {
	        var name = obj.name,
	            type = obj.type,
	            others = _objectWithoutProperties(obj, ['name', 'type']);

	        var newName = name;
	        // 将省份全称转化为简称，原名先存在别的名字
	        if (_chinaGeoInfo.provinceName[name]) {
	          newName = _chinaGeoInfo.provinceName[obj.name];
	        }
	        obj.type = String(obj.type);
	        return _extends({
	          name: newName,
	          type: String(type)
	        }, others);
	      }
	    }).transform({
	      geoDataView: this.bgMapDataView,
	      field: 'name',
	      type: 'geo.region',
	      as: ['x', 'y']
	    });

	    var areaMapView = chart.view();
	    areaMapView.source(areaMapDataView);
	    var areaGeom = areaMapView.polygon().position('x*y')
	    // 如果用连续型颜色，需要对数组倒序，否则颜色对应的数值会从小开始
	    .color('type', config.areaColors.join('-'))
	    // .opacity('value')
	    .tooltip('name*value', function (name, value) {
	      return {
	        name: name,
	        value: value
	      };
	    });

	    if (config.geomStyle) {
	      areaGeom.style('name*value', config.geomStyle);
	    }

	    this.areaMapView = areaMapView;
	  }
	}

	// 绘制散点图
	function drawMapPoint(chart, ds, config, data) {
	  var _this2 = this;

	  var pointMapDataView = this.pointMapDataView;
	  if (pointMapDataView) {
	    pointMapDataView.origin !== data && pointMapDataView.source(data);
	  } else {
	    var _pointMapView$point$p;

	    pointMapDataView = this.pointMapDataView = ds.createView().source(data).transform({
	      type: 'map',
	      callback: function callback(point) {
	        var newPoint = _extends({}, point);
	        newPoint.type = String(newPoint.type);
	        return convertPointPosition.call(_this2, newPoint, config.projection);
	      }
	    });

	    var pointMapView = chart.view();
	    pointMapView.source(pointMapDataView);
	    var sizeConfig = config.size || 4;
	    if (Array.isArray(sizeConfig)) {
	      sizeConfig = ['value', sizeConfig];
	    } else if (_g2.default.Util.isFunction(sizeConfig)) {
	      sizeConfig = ['name*value', sizeConfig];
	    } else {
	      sizeConfig = [sizeConfig];
	    }
	    var pointGeom = (_pointMapView$point$p = pointMapView.point().position('x*y').shape('circle').color('type', config.pointColors)).size.apply(_pointMapView$point$p, _toConsumableArray(sizeConfig))
	    // .opacity('value')
	    .tooltip('name*value', function (name, value) {
	      return {
	        name: name,
	        value: value
	      };
	    }).active(false);

	    if (config.geomStyle) {
	      pointGeom.style('name*value', config.geomStyle);
	    }

	    if (config.labels) {
	      var _ref2 = _typeof(config.labels) === 'object' ? config.labels : {},
	          _ref2$offset = _ref2.offset,
	          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
	          _ref2$textStyle = _ref2.textStyle,
	          textStyle = _ref2$textStyle === undefined ? {} : _ref2$textStyle,
	          formatter = _ref2.formatter;

	      pointGeom.label('name', {
	        offset: '' + (offset - Number(_index.size.s3.replace('px', ''))),
	        textStyle: _extends({
	          fill: _index.color.widgetsMapLabel,
	          // 需要去掉 px 的字符串
	          fontSize: _index.size.s3.replace('px', ''),
	          textBaseline: 'middle'
	        }, textStyle),
	        formatter: formatter || null
	      });
	    }

	    this.pointMapView = pointMapView;
	  }
	}

	// 绘制背景地图标签
	function drawMapLabel(chart, config) {
	  var _this3 = this;

	  var labelConfig = config.labels;

	  // 将背景数据集中的中心点坐标(cX, cY)映射为新数据中的x, y。保证scale可以同步这个view的度量。
	  var labelData = this.bgMapDataView.rows.map(function (row) {
	    var label = {
	      name: row.name,
	      x: row.cX,
	      y: row.cY
	    };

	    // fix 某些地区label位置不好，需要重新定位
	    var fixLngLat = fixLngLatMap[row.name];
	    if (fixLngLat) {
	      var position = _this3.bgMapDataView.geoProjectPosition(fixLngLat, config.projection);
	      label.x = position[0];
	      label.y = position[1];
	    }

	    return label;
	  });

	  var _ref3 = (typeof labelConfig === 'undefined' ? 'undefined' : _typeof(labelConfig)) === 'object' ? labelConfig : {},
	      _ref3$offset = _ref3.offset,
	      offset = _ref3$offset === undefined ? 0 : _ref3$offset,
	      _ref3$textStyle = _ref3.textStyle,
	      _textStyle = _ref3$textStyle === undefined ? {} : _ref3$textStyle;

	  var labelMapView = chart.view();
	  labelMapView.source(labelData);
	  labelMapView.point().position('x*y').size(0).label('name', {
	    offset: offset,
	    textStyle: function textStyle(name) {
	      var fontSize = _index.size.s3;
	      // 对一些尺寸非常小的形状特殊处理，以显示出来。
	      if (minLabel.indexOf(name) > -1) {
	        fontSize = _index.size.s2;
	      }

	      return _extends({
	        fill: _index.color.widgetsMapLabel,
	        // 需要去掉 px 的字符串
	        fontSize: fontSize.replace('px', ''),
	        textBaseline: 'middle'
	      }, _textStyle);
	    },
	    formatter: labelConfig.formatter || null
	  }).tooltip(false).active(false);

	  this.labelMapView = labelMapView;
	}

	// 转换地图数据结构，因为和默认结构不同，需要特殊处理。
	function convertMapData(data) {
	  if (!Array.isArray(data)) {
	    return [];
	  }
	  var result = [];
	  data.forEach(function (item) {
	    var _item$name = item.name,
	        name = _item$name === undefined ? '' : _item$name,
	        itemData = item.data;

	    if (!Array.isArray(itemData)) {
	      return;
	    }
	    itemData.forEach(function (d) {
	      result.push(_extends({}, d, {
	        type: d.type || name
	      }));
	    });
	  });

	  return result;
	}

	// 计算数据的坐标点
	function convertPointPosition(point, projection) {
	  if (point.x && point.y) {
	    return point;
	  }
	  if (!this.bgMapDataView) {
	    return point;
	  }
	  if (point.lng && point.lat) {
	    return getProjectionPosition(point, this.bgMapDataView, projection, Number(point.lng), Number(point.lat));
	  }
	  if (point.name) {
	    var name = point.name;
	    if (!/^\w/.test(name)) {
	      if (name === '\u963F\u62C9' || name === '\u5F20\u5BB6') {
	        // 阿拉、张家 两个开头的需要截取三个字符
	        name = name.slice(0, 3);
	      } else if (!/\u7701$/.test(name) && !/\u81ea\u6cbb\u533a$/.test(name)) {
	        // 以"省" / "自治区"结尾的不截断
	        name = name.slice(0, 2);
	      }
	    }
	    var position = _chinaGeoInfo.positionMap[name];
	    if (position) {
	      return getProjectionPosition(point, this.bgMapDataView, projection, position.lng, position.lat);
	    }
	  }
	  if (!point.x || !point.y) {
	    console.warn('无法定位地点：', point);
	  }
	  return point;
	}

	function getProjectionPosition(point, view, projection, lng, lat) {
	  var projectedCoord = view.geoProjectPosition([lng, lat], projection);
	  point.x = projectedCoord[0];
	  point.y = projectedCoord[1];
	  return point;
	}

	// 地图的tooltip逻辑
	function mapTooltip(chart, config) {
	  // tooltip
	  if (config.tooltip !== false) {
	    var _ref4 = config.tooltip || {},
	        nameFormatter = _ref4.nameFormatter,
	        valueFormatter = _ref4.valueFormatter,
	        customConfig = _ref4.customConfig;

	    var tooltipCfg = {
	      showTitle: false,
	      crosshairs: null,
	      itemTpl: '<li data-index={index}>' + '<span style="background-color:{color};" class="g2-tooltip-marker"></span>' + '<span class="g2-tooltip-item-name">{name}</span>:<span class="g2-tooltip-item-value">{value}</span></li>'
	    };

	    if (customConfig) {
	      (0, _merge2.default)(tooltipCfg, customConfig);
	    }

	    chart.tooltip(tooltipCfg);

	    if (nameFormatter || valueFormatter) {
	      chart.on('tooltip:change', function (ev) {
	        ev.items.forEach(function (item, index) {
	          var raw = item.point._origin || {};

	          if (valueFormatter) {
	            item.value = valueFormatter(item.value, raw, index, ev.items);
	          }
	          if (nameFormatter) {
	            item.name = nameFormatter(item.name, raw, index, ev.items);
	          }
	        });
	      });
	    }
	  } else {
	    chart.tooltip(false);
	  }
	}

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wmap\\G2Map.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wmap\\G2Map.js"); } } })();

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _g2Factory = __webpack_require__(66);

	var _g2Factory2 = _interopRequireDefault(_g2Factory);

	var _G2Map = __webpack_require__(215);

	var _G2Map2 = _interopRequireDefault(_G2Map);

	var _southChinaSea = __webpack_require__(218);

	var _southChinaSea2 = _interopRequireDefault(_southChinaSea);

	var _index = __webpack_require__(9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MapBase = (0, _g2Factory2.default)('G2Map', _G2Map2.default, false);
	var rootClassName = 'aisc-widgets ';
	var southChinaSea = (0, _southChinaSea2.default)({
	  className: 'aisc-widgets-map-south-china-sea',
	  fontColor: _index.color.widgetsMapAreaBg,
	  landColor: _index.color.widgetsMapAreaBg,
	  lineColor: _index.color.widgetsMapAreaBg,
	  boxColor: _index.color.widgetsMapAreaBg,
	  islandColor: _index.color.widgetsMapAreaBg
	});

	var Map = function (_MapBase) {
	  _inherits(Map, _MapBase);

	  function Map(props, context) {
	    _classCallCheck(this, Map);

	    var _this = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, props, context));

	    _this.state = {
	      customPointLayer: []
	    };
	    return _this;
	  }

	  // componentDidMount() {
	  //   super.componentDidMount();
	  //
	  //   setTimeout(() => {
	  //     this.convertChildren();
	  //   }, 0);
	  // }

	  _createClass(Map, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.children !== this.props.children) {
	        this.convertChildren(nextProps.children, nextProps.config);
	      }

	      _get(Map.prototype.__proto__ || Object.getPrototypeOf(Map.prototype), "componentWillReceiveProps", this).call(this, nextProps);
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      var newLayer = nextState.customPointLayer;
	      var oldLayer = this.state.customPointLayer;


	      return _get(Map.prototype.__proto__ || Object.getPrototypeOf(Map.prototype), "shouldComponentUpdate", this).call(this, nextProps, nextState) || newLayer !== oldLayer;
	    }
	  }, {
	    key: "convertChildren",
	    value: function convertChildren() {
	      var _this2 = this;

	      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;
	      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.config;

	      var customPointLayer = [];
	      _react2.default.Children.forEach(children, function (child) {
	        if (!child) {
	          return;
	        }
	        if (child.type.displayName === 'WidgetsMapCustom') {
	          customPointLayer.push(child.props);
	          return;
	        }

	        var _child$props = child.props,
	            data = _child$props.data,
	            propsConfig = _objectWithoutProperties(_child$props, ["data"]);

	        var layerConfig = _extends({}, config, propsConfig);

	        _this2.chartProcess.changeData.call(_this2, _this2.chart, layerConfig, child.type.displayName, data);
	      });
	      this.setState({
	        customPointLayer: customPointLayer
	      });
	    }
	  }, {
	    key: "renderCustomPointLayer",
	    value: function renderCustomPointLayer(layer, layerIndex) {
	      var _this3 = this;

	      var data = layer.data,
	          render = layer.render,
	          otherProps = _objectWithoutProperties(layer, ["data", "render"]);

	      var width = this.chart.get('width');
	      var height = this.chart.get('height');

	      var _size = _slicedToArray(this._size, 2),
	          cW = _size[0],
	          cH = _size[1];

	      var layerStyle = {
	        left: (cW - width) / 2,
	        top: (cH - height) / 2,
	        width: width,
	        height: height
	      };

	      return _react2.default.createElement(
	        "div",
	        { key: layerIndex, className: "aisc-widgets-map-custom-container", style: layerStyle },
	        Array.isArray(data) && data.map(function (d, i) {
	          var point = _G2Map.convertPointPosition.call(_this3, d, _this3.config.projection);
	          point = _this3.bgMapView.getXY(point);
	          if (!point) {
	            return null;
	          }

	          var pointStyle = {
	            left: point.x,
	            top: point.y
	          };
	          return _react2.default.createElement(
	            "div",
	            { key: i, className: "aisc-widgets-map-custom-point", style: pointStyle },
	            render && render(d, i, otherProps)
	          );
	        })
	      );
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this4 = this;

	      var _props = this.props,
	          _props$className = _props.className,
	          className = _props$className === undefined ? '' : _props$className,
	          style = _props.style,
	          children = _props.children,
	          data = _props.data,
	          width = _props.width,
	          height = _props.height,
	          padding = _props.padding,
	          config = _props.config,
	          otherProps = _objectWithoutProperties(_props, ["className", "style", "children", "data", "width", "height", "padding", "config"]);

	      var customPointLayer = this.state.customPointLayer;

	      return _react2.default.createElement(
	        "div",
	        _extends({ ref: function ref(dom) {
	            return _this4.chartDom = dom;
	          }, id: this.chartId, className: rootClassName + 'G2Map ' + className, style: style }, otherProps),
	        config.showSouthChinaSea === undefined || config.showSouthChinaSea ? southChinaSea : null,
	        customPointLayer.length > 0 && customPointLayer.map(function (layer, i) {
	          return _this4.renderCustomPointLayer(layer, i);
	        }),
	        _react2.default.createElement("div", { className: "aisc-widgets-map-legend", id: this.chartId + '-legend' })
	      );
	    }
	  }]);

	  return Map;
	}(MapBase);

	// 地图不需要校验data


	delete Map.propTypes.data;

	/**
	 * @return {null}
	 */
	Map.Area = function WidgetsMapArea() {
	  return null;
	};
	Map.Area.displayName = 'WidgetsMapArea';

	/**
	 * @return {null}
	 */
	Map.Point = function WidgetsMapPoint() {
	  return null;
	};
	Map.Point.displayName = 'WidgetsMapPoint';

	/**
	 * @return {null}
	 */
	Map.Custom = function WidgetsMapCustom() {
	  return null;
	};
	Map.Custom.displayName = 'WidgetsMapCustom';

	exports.default = Map;
	module.exports = exports["default"];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wmap\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wmap\\index.jsx"); } } })();

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var provinceName = exports.provinceName = {
	  // 直辖市
	  "北京市": "北京",
	  "天津市": "天津",
	  "上海市": "上海",
	  "重庆市": "重庆",
	  // 自治区
	  "内蒙古自治区": "内蒙古",
	  "广西壮族自治区": "广西",
	  "西藏自治区": "西藏",
	  "宁夏回族自治区": "宁夏",
	  "新疆维吾尔自治区": "新疆",
	  // 特别行政区
	  "香港特別行政區": "香港",
	  "澳门特别行政区": "澳门",

	  "江西省": "江西",
	  "河南省": "河南",
	  "四川省": "四川",
	  "贵州省": "贵州",
	  "辽宁省": "辽宁",
	  "山东省": "山东",
	  "山西省": "山西",
	  "浙江省": "浙江",
	  "海南省": "海南",
	  "陕西省": "陕西",
	  "福建省": "福建",
	  "青海省": "青海",
	  "湖北省": "湖北",
	  "甘肃省": "甘肃",
	  "安徽省": "安徽",
	  "台湾省": "台湾",
	  "云南省": "云南",
	  "黑龙江省": "黑龙江",
	  "广东省": "广东",
	  "湖南省": "湖南",
	  "河北省": "河北",
	  "吉林省": "吉林",
	  "江苏省": "江苏"
	};

	var positionMap = exports.positionMap = {
	  "云南省": { "lat": 25.04581, "lng": 102.71 },
	  "内蒙古自治区": { "lat": 40.8175, "lng": 111.76562 },
	  "吉林省": { "lat": 43.89654, "lng": 125.32599 },
	  "四川省": { "lat": 30.65165, "lng": 104.07593 },
	  "宁夏回族自治区": { "lat": 38.47132, "lng": 106.25875 },
	  "安徽省": { "lat": 31.86118, "lng": 117.28492 },
	  "山东省": { "lat": 36.66853, "lng": 117.02036 },
	  "山西省": { "lat": 37.87353, "lng": 112.5624 },
	  "广东省": { "lat": 23.13219, "lng": 113.26653 },
	  "广西壮族自治区": { "lat": 22.81548, "lng": 108.32755 },
	  "新疆维吾尔自治区": { "lat": 43.79303, "lng": 87.6277 },
	  "江苏省": { "lat": 32.06171, "lng": 118.76323 },
	  "江西省": { "lat": 28.6757, "lng": 115.90923 },
	  "河北省": { "lat": 38.03706, "lng": 114.46866 },
	  "河南省": { "lat": 34.76552, "lng": 113.7536 },
	  "浙江省": { "lat": 30.26745, "lng": 120.15279 },
	  "海南省": { "lat": 20.01738, "lng": 110.34923 },
	  "湖北省": { "lat": 30.5465, "lng": 114.34186 },
	  "湖南省": { "lat": 28.11244, "lng": 112.98381 },
	  "甘肃省": { "lat": 36.05942, "lng": 103.82631 },
	  "福建省": { "lat": 26.10078, "lng": 119.29514 },
	  "贵州省": { "lat": 26.59819, "lng": 106.70741 },
	  "辽宁省": { "lat": 41.83544, "lng": 123.4291 },
	  "陕西省": { "lat": 34.26547, "lng": 108.95424 },
	  "青海省": { "lat": 36.6209, "lng": 101.7802 },
	  "黑龙江省": { "lat": 45.74237, "lng": 126.66166 },
	  "西藏自治区": { "lat": 31.64946, "lng": 86.51326 },
	  "台湾省": { "lat": 23.74205, "lng": 120.9814 },
	  "重庆": {
	    "lng": 107.7539,
	    "lat": 30.1904,
	    "fullName": "重庆市",
	    "province": "重庆"
	  },
	  "北京": {
	    "lng": 116.4551,
	    "lat": 40.2539,
	    "fullName": "北京市",
	    "province": "北京"
	  },
	  "天津": {
	    "lng": 117.4219,
	    "lat": 39.4189,
	    "fullName": "天津市",
	    "province": "天津"
	  },
	  "上海": {
	    "lng": 121.4648,
	    "lat": 31.2891,
	    "fullName": "上海市",
	    "province": "上海"
	  },
	  "香港": {
	    "lng": 114.2578,
	    "lat": 22.3242,
	    "fullName": "香港",
	    "province": "香港"
	  },
	  "澳门": {
	    "lng": 113.5547,
	    "lat": 22.1484,
	    "fullName": "澳门",
	    "province": "澳门"
	  },
	  "巴音": {
	    "lng": 88.1653,
	    "lat": 39.6002,
	    "fullName": "巴音郭楞蒙古自治州",
	    "province": "新疆"
	  },
	  "和田": {
	    "lng": 81.167,
	    "lat": 36.9855,
	    "fullName": "和田地区",
	    "province": "新疆"
	  },
	  "哈密": {
	    "lng": 93.7793,
	    "lat": 42.9236,
	    "fullName": "哈密地区",
	    "province": "新疆"
	  },
	  "阿克": {
	    "lng": 82.9797,
	    "lat": 41.0229,
	    "fullName": "阿克苏地区",
	    "province": "新疆"
	  },
	  "阿勒": {
	    "lng": 88.2971,
	    "lat": 47.0929,
	    "fullName": "阿勒泰地区",
	    "province": "新疆"
	  },
	  "喀什": {
	    "lng": 77.168,
	    "lat": 37.8534,
	    "fullName": "喀什地区",
	    "province": "新疆"
	  },
	  "塔城": {
	    "lng": 86.6272,
	    "lat": 45.8514,
	    "fullName": "塔城地区",
	    "province": "新疆"
	  },
	  "昌吉": {
	    "lng": 89.6814,
	    "lat": 44.4507,
	    "fullName": "昌吉回族自治州",
	    "province": "新疆"
	  },
	  "克孜": {
	    "lng": 74.6301,
	    "lat": 39.5233,
	    "fullName": "克孜勒苏柯尔克孜自治州",
	    "province": "新疆"
	  },
	  "吐鲁": {
	    "lng": 89.6375,
	    "lat": 42.4127,
	    "fullName": "吐鲁番地区",
	    "province": "新疆"
	  },
	  "伊犁": {
	    "lng": 82.5513,
	    "lat": 43.5498,
	    "fullName": "伊犁哈萨克自治州",
	    "province": "新疆"
	  },
	  "博尔": {
	    "lng": 81.8481,
	    "lat": 44.6979,
	    "fullName": "博尔塔拉蒙古自治州",
	    "province": "新疆"
	  },
	  "乌鲁": {
	    "lng": 87.9236,
	    "lat": 43.5883,
	    "fullName": "乌鲁木齐市",
	    "province": "新疆"
	  },
	  "克拉": {
	    "lng": 85.2869,
	    "lat": 45.5054,
	    "fullName": "克拉玛依市",
	    "province": "新疆"
	  },
	  "阿拉尔": {
	    "lng": 81.2769,
	    "lat": 40.6549,
	    "fullName": "阿拉尔市",
	    "province": "新疆"
	  },
	  "图木": {
	    "lng": 79.1345,
	    "lat": 39.8749,
	    "fullName": "图木舒克市",
	    "province": "新疆"
	  },
	  "五家": {
	    "lng": 87.5391,
	    "lat": 44.3024,
	    "fullName": "五家渠市",
	    "province": "新疆"
	  },
	  "石河": {
	    "lng": 86.0229,
	    "lat": 44.2914,
	    "fullName": "石河子市",
	    "province": "新疆"
	  },
	  "那曲": {
	    "lng": 88.1982,
	    "lat": 33.3215,
	    "fullName": "那曲地区",
	    "province": "西藏"
	  },
	  "阿里": {
	    "lng": 82.3645,
	    "lat": 32.7667,
	    "fullName": "阿里地区",
	    "province": "西藏"
	  },
	  "日喀": {
	    "lng": 86.2427,
	    "lat": 29.5093,
	    "fullName": "日喀则地区",
	    "province": "西藏"
	  },
	  "林芝": {
	    "lng": 95.4602,
	    "lat": 29.1138,
	    "fullName": "林芝地区",
	    "province": "西藏"
	  },
	  "昌都": {
	    "lng": 97.0203,
	    "lat": 30.7068,
	    "fullName": "昌都地区",
	    "province": "西藏"
	  },
	  "山南": {
	    "lng": 92.2083,
	    "lat": 28.3392,
	    "fullName": "山南地区",
	    "province": "西藏"
	  },
	  "拉萨": {
	    "lng": 91.1865,
	    "lat": 30.1465,
	    "fullName": "拉萨市",
	    "province": "西藏"
	  },
	  "呼伦": {
	    "lng": 120.8057,
	    "lat": 50.2185,
	    "fullName": "呼伦贝尔市",
	    "province": "内蒙古"
	  },
	  "阿拉善": {
	    "lng": 102.019,
	    "lat": 40.1001,
	    "fullName": "阿拉善盟",
	    "province": "内蒙古"
	  },
	  "锡林": {
	    "lng": 115.6421,
	    "lat": 44.176,
	    "fullName": "锡林郭勒盟",
	    "province": "内蒙古"
	  },
	  "鄂尔": {
	    "lng": 108.9734,
	    "lat": 39.2487,
	    "fullName": "鄂尔多斯市",
	    "province": "内蒙古"
	  },
	  "赤峰": {
	    "lng": 118.6743,
	    "lat": 43.2642,
	    "fullName": "赤峰市",
	    "province": "内蒙古"
	  },
	  "巴彦": {
	    "lng": 107.5562,
	    "lat": 41.3196,
	    "fullName": "巴彦淖尔市",
	    "province": "内蒙古"
	  },
	  "通辽": {
	    "lng": 121.4758,
	    "lat": 43.9673,
	    "fullName": "通辽市",
	    "province": "内蒙古"
	  },
	  "乌兰": {
	    "lng": 112.5769,
	    "lat": 41.77,
	    "fullName": "乌兰察布市",
	    "province": "内蒙古"
	  },
	  "兴安": {
	    "lng": 121.3879,
	    "lat": 46.1426,
	    "fullName": "兴安盟",
	    "province": "内蒙古"
	  },
	  "包头": {
	    "lng": 110.3467,
	    "lat": 41.4899,
	    "fullName": "包头市",
	    "province": "内蒙古"
	  },
	  "呼和": {
	    "lng": 111.4124,
	    "lat": 40.4901,
	    "fullName": "呼和浩特市",
	    "province": "内蒙古"
	  },
	  "乌海": {
	    "lng": 106.886,
	    "lat": 39.4739,
	    "fullName": "乌海市",
	    "province": "内蒙古"
	  },
	  "海西": {
	    "lng": 94.9768,
	    "lat": 37.1118,
	    "fullName": "海西蒙古族藏族自治州",
	    "province": "青海"
	  },
	  "玉树": {
	    "lng": 93.5925,
	    "lat": 33.9368,
	    "fullName": "玉树藏族自治州",
	    "province": "青海"
	  },
	  "果洛": {
	    "lng": 99.3823,
	    "lat": 34.0466,
	    "fullName": "果洛藏族自治州",
	    "province": "青海"
	  },
	  "海南": {
	    "lng": 100.3711,
	    "lat": 35.9418,
	    "fullName": "海南藏族自治州",
	    "province": "青海"
	  },
	  "海北": {
	    "lng": 100.3711,
	    "lat": 37.9138,
	    "fullName": "海北藏族自治州",
	    "province": "青海"
	  },
	  "黄南": {
	    "lng": 101.5686,
	    "lat": 35.1178,
	    "fullName": "黄南藏族自治州",
	    "province": "青海"
	  },
	  "海东": {
	    "lng": 102.3706,
	    "lat": 36.2988,
	    "fullName": "海东地区",
	    "province": "青海"
	  },
	  "西宁": {
	    "lng": 101.4038,
	    "lat": 36.8207,
	    "fullName": "西宁市",
	    "province": "青海"
	  },
	  "甘孜": {
	    "lng": 99.9207,
	    "lat": 31.0803,
	    "fullName": "甘孜藏族自治州",
	    "province": "四川"
	  },
	  "阿坝": {
	    "lng": 102.4805,
	    "lat": 32.4536,
	    "fullName": "阿坝藏族羌族自治州",
	    "province": "四川"
	  },
	  "凉山": {
	    "lng": 101.9641,
	    "lat": 27.6746,
	    "fullName": "凉山彝族自治州",
	    "province": "四川"
	  },
	  "绵阳": {
	    "lng": 104.7327,
	    "lat": 31.8713,
	    "fullName": "绵阳市",
	    "province": "四川"
	  },
	  "达州": {
	    "lng": 107.6111,
	    "lat": 31.333,
	    "fullName": "达州市",
	    "province": "四川"
	  },
	  "广元": {
	    "lng": 105.6885,
	    "lat": 32.2284,
	    "fullName": "广元市",
	    "province": "四川"
	  },
	  "雅安": {
	    "lng": 102.6672,
	    "lat": 29.8938,
	    "fullName": "雅安市",
	    "province": "四川"
	  },
	  "宜宾": {
	    "lng": 104.6558,
	    "lat": 28.548,
	    "fullName": "宜宾市",
	    "province": "四川"
	  },
	  "乐山": {
	    "lng": 103.5791,
	    "lat": 29.1742,
	    "fullName": "乐山市",
	    "province": "四川"
	  },
	  "南充": {
	    "lng": 106.2048,
	    "lat": 31.1517,
	    "fullName": "南充市",
	    "province": "四川"
	  },
	  "巴中": {
	    "lng": 107.0618,
	    "lat": 31.9977,
	    "fullName": "巴中市",
	    "province": "四川"
	  },
	  "泸州": {
	    "lng": 105.4578,
	    "lat": 28.493,
	    "fullName": "泸州市",
	    "province": "四川"
	  },
	  "成都": {
	    "lng": 103.9526,
	    "lat": 30.7617,
	    "fullName": "成都市",
	    "province": "四川"
	  },
	  "资阳": {
	    "lng": 104.9744,
	    "lat": 30.1575,
	    "fullName": "资阳市",
	    "province": "四川"
	  },
	  "攀枝": {
	    "lng": 101.6895,
	    "lat": 26.7133,
	    "fullName": "攀枝花市",
	    "province": "四川"
	  },
	  "眉山": {
	    "lng": 103.8098,
	    "lat": 30.0146,
	    "fullName": "眉山市",
	    "province": "四川"
	  },
	  "广安": {
	    "lng": 106.6333,
	    "lat": 30.4376,
	    "fullName": "广安市",
	    "province": "四川"
	  },
	  "德阳": {
	    "lng": 104.48,
	    "lat": 31.1133,
	    "fullName": "德阳市",
	    "province": "四川"
	  },
	  "内江": {
	    "lng": 104.8535,
	    "lat": 29.6136,
	    "fullName": "内江市",
	    "province": "四川"
	  },
	  "遂宁": {
	    "lng": 105.5347,
	    "lat": 30.6683,
	    "fullName": "遂宁市",
	    "province": "四川"
	  },
	  "自贡": {
	    "lng": 104.6667,
	    "lat": 29.2786,
	    "fullName": "自贡市",
	    "province": "四川"
	  },
	  "黑河": {
	    "lng": 127.1448,
	    "lat": 49.2957,
	    "fullName": "黑河市",
	    "province": "黑龙江"
	  },
	  "大兴": {
	    "lng": 124.1016,
	    "lat": 52.2345,
	    "fullName": "大兴安岭地区",
	    "province": "黑龙江"
	  },
	  "哈尔": {
	    "lng": 127.9688,
	    "lat": 45.368,
	    "fullName": "哈尔滨市",
	    "province": "黑龙江"
	  },
	  "齐齐": {
	    "lng": 124.541,
	    "lat": 47.5818,
	    "fullName": "齐齐哈尔市",
	    "province": "黑龙江"
	  },
	  "牡丹": {
	    "lng": 129.7815,
	    "lat": 44.7089,
	    "fullName": "牡丹江市",
	    "province": "黑龙江"
	  },
	  "绥化": {
	    "lng": 126.7163,
	    "lat": 46.8018,
	    "fullName": "绥化市",
	    "province": "黑龙江"
	  },
	  "伊春": {
	    "lng": 129.1992,
	    "lat": 47.9608,
	    "fullName": "伊春市",
	    "province": "黑龙江"
	  },
	  "佳木": {
	    "lng": 133.0005,
	    "lat": 47.5763,
	    "fullName": "佳木斯市",
	    "province": "黑龙江"
	  },
	  "鸡西": {
	    "lng": 132.7917,
	    "lat": 45.7361,
	    "fullName": "鸡西市",
	    "province": "黑龙江"
	  },
	  "双鸭": {
	    "lng": 133.5938,
	    "lat": 46.7523,
	    "fullName": "双鸭山市",
	    "province": "黑龙江"
	  },
	  "大庆": {
	    "lng": 124.7717,
	    "lat": 46.4282,
	    "fullName": "大庆市",
	    "province": "黑龙江"
	  },
	  "鹤岗": {
	    "lng": 130.4407,
	    "lat": 47.7081,
	    "fullName": "鹤岗市",
	    "province": "黑龙江"
	  },
	  "七台": {
	    "lng": 131.2756,
	    "lat": 45.9558,
	    "fullName": "七台河市",
	    "province": "黑龙江"
	  },
	  "酒泉": {
	    "lng": 96.2622,
	    "lat": 40.4517,
	    "fullName": "酒泉市",
	    "province": "甘肃"
	  },
	  "张掖": {
	    "lng": 99.7998,
	    "lat": 38.7433,
	    "fullName": "张掖市",
	    "province": "甘肃"
	  },
	  "甘南": {
	    "lng": 102.9199,
	    "lat": 34.6893,
	    "fullName": "甘南藏族自治州",
	    "province": "甘肃"
	  },
	  "武威": {
	    "lng": 103.0188,
	    "lat": 38.1061,
	    "fullName": "武威市",
	    "province": "甘肃"
	  },
	  "陇南": {
	    "lng": 105.304,
	    "lat": 33.5632,
	    "fullName": "陇南市",
	    "province": "甘肃"
	  },
	  "庆阳": {
	    "lng": 107.5342,
	    "lat": 36.2,
	    "fullName": "庆阳市",
	    "province": "甘肃"
	  },
	  "白银": {
	    "lng": 104.8645,
	    "lat": 36.5076,
	    "fullName": "白银市",
	    "province": "甘肃"
	  },
	  "定西": {
	    "lng": 104.5569,
	    "lat": 35.0848,
	    "fullName": "定西市",
	    "province": "甘肃"
	  },
	  "天水": {
	    "lng": 105.6445,
	    "lat": 34.6289,
	    "fullName": "天水市",
	    "province": "甘肃"
	  },
	  "兰州": {
	    "lng": 103.5901,
	    "lat": 36.3043,
	    "fullName": "兰州市",
	    "province": "甘肃"
	  },
	  "平凉": {
	    "lng": 107.0728,
	    "lat": 35.321,
	    "fullName": "平凉市",
	    "province": "甘肃"
	  },
	  "临夏": {
	    "lng": 103.2715,
	    "lat": 35.5737,
	    "fullName": "临夏回族自治州",
	    "province": "甘肃"
	  },
	  "金昌": {
	    "lng": 102.074,
	    "lat": 38.5126,
	    "fullName": "金昌市",
	    "province": "甘肃"
	  },
	  "嘉峪": {
	    "lng": 98.1738,
	    "lat": 39.8035,
	    "fullName": "嘉峪关市",
	    "province": "甘肃"
	  },
	  "普洱": {
	    "lng": 100.7446,
	    "lat": 23.4229,
	    "fullName": "普洱市",
	    "province": "云南"
	  },
	  "红河": {
	    "lng": 103.0408,
	    "lat": 23.6041,
	    "fullName": "红河哈尼族彝族自治州",
	    "province": "云南"
	  },
	  "文山": {
	    "lng": 104.8865,
	    "lat": 23.5712,
	    "fullName": "文山壮族苗族自治州",
	    "province": "云南"
	  },
	  "曲靖": {
	    "lng": 103.9417,
	    "lat": 25.7025,
	    "fullName": "曲靖市",
	    "province": "云南"
	  },
	  "楚雄": {
	    "lng": 101.6016,
	    "lat": 25.3619,
	    "fullName": "楚雄彝族自治州",
	    "province": "云南"
	  },
	  "大理": {
	    "lng": 99.9536,
	    "lat": 25.6805,
	    "fullName": "大理白族自治州",
	    "province": "云南"
	  },
	  "临沧": {
	    "lng": 99.613,
	    "lat": 24.0546,
	    "fullName": "临沧市",
	    "province": "云南"
	  },
	  "迪庆": {
	    "lng": 99.4592,
	    "lat": 27.9327,
	    "fullName": "迪庆藏族自治州",
	    "province": "云南"
	  },
	  "昭通": {
	    "lng": 104.0955,
	    "lat": 27.6031,
	    "fullName": "昭通市",
	    "province": "云南"
	  },
	  "昆明": {
	    "lng": 102.9199,
	    "lat": 25.4663,
	    "fullName": "昆明市",
	    "province": "云南"
	  },
	  "丽江": {
	    "lng": 100.448,
	    "lat": 26.955,
	    "fullName": "丽江市",
	    "province": "云南"
	  },
	  "西双": {
	    "lng": 100.8984,
	    "lat": 21.8628,
	    "fullName": "西双版纳傣族自治州",
	    "province": "云南"
	  },
	  "保山": {
	    "lng": 99.0637,
	    "lat": 24.9884,
	    "fullName": "保山市",
	    "province": "云南"
	  },
	  "玉溪": {
	    "lng": 101.9312,
	    "lat": 23.8898,
	    "fullName": "玉溪市",
	    "province": "云南"
	  },
	  "怒江": {
	    "lng": 99.1516,
	    "lat": 26.5594,
	    "fullName": "怒江傈僳族自治州",
	    "province": "云南"
	  },
	  "德宏": {
	    "lng": 98.1299,
	    "lat": 24.5874,
	    "fullName": "德宏傣族景颇族自治州",
	    "province": "云南"
	  },
	  "百色": {
	    "lng": 106.6003,
	    "lat": 23.9227,
	    "fullName": "百色市",
	    "province": "广西"
	  },
	  "河池": {
	    "lng": 107.8638,
	    "lat": 24.5819,
	    "fullName": "河池市",
	    "province": "广西"
	  },
	  "桂林": {
	    "lng": 110.5554,
	    "lat": 25.318,
	    "fullName": "桂林市",
	    "province": "广西"
	  },
	  "南宁": {
	    "lng": 108.479,
	    "lat": 23.1152,
	    "fullName": "南宁市",
	    "province": "广西"
	  },
	  "柳州": {
	    "lng": 109.3799,
	    "lat": 24.9774,
	    "fullName": "柳州市",
	    "province": "广西"
	  },
	  "崇左": {
	    "lng": 107.3364,
	    "lat": 22.4725,
	    "fullName": "崇左市",
	    "province": "广西"
	  },
	  "来宾": {
	    "lng": 109.7095,
	    "lat": 23.8403,
	    "fullName": "来宾市",
	    "province": "广西"
	  },
	  "玉林": {
	    "lng": 110.2148,
	    "lat": 22.3792,
	    "fullName": "玉林市",
	    "province": "广西"
	  },
	  "梧州": {
	    "lng": 110.9949,
	    "lat": 23.5052,
	    "fullName": "梧州市",
	    "province": "广西"
	  },
	  "贺州": {
	    "lng": 111.3135,
	    "lat": 24.4006,
	    "fullName": "贺州市",
	    "province": "广西"
	  },
	  "钦州": {
	    "lng": 109.0283,
	    "lat": 22.0935,
	    "fullName": "钦州市",
	    "province": "广西"
	  },
	  "贵港": {
	    "lng": 109.9402,
	    "lat": 23.3459,
	    "fullName": "贵港市",
	    "province": "广西"
	  },
	  "防城": {
	    "lng": 108.0505,
	    "lat": 21.9287,
	    "fullName": "防城港市",
	    "province": "广西"
	  },
	  "北海": {
	    "lng": 109.314,
	    "lat": 21.6211,
	    "fullName": "北海市",
	    "province": "广西"
	  },
	  "怀化": {
	    "lng": 109.9512,
	    "lat": 27.4438,
	    "fullName": "怀化市",
	    "province": "湖南"
	  },
	  "永州": {
	    "lng": 111.709,
	    "lat": 25.752,
	    "fullName": "永州市",
	    "province": "湖南"
	  },
	  "邵阳": {
	    "lng": 110.9619,
	    "lat": 26.8121,
	    "fullName": "邵阳市",
	    "province": "湖南"
	  },
	  "郴州": {
	    "lng": 113.2361,
	    "lat": 25.8673,
	    "fullName": "郴州市",
	    "province": "湖南"
	  },
	  "常德": {
	    "lng": 111.4014,
	    "lat": 29.2676,
	    "fullName": "常德市",
	    "province": "湖南"
	  },
	  "湘西": {
	    "lng": 109.7864,
	    "lat": 28.6743,
	    "fullName": "湘西土家族苗族自治州"
	  },
	  "衡阳": {
	    "lng": 112.4121,
	    "lat": 26.7902,
	    "fullName": "衡阳市",
	    "province": "湖南"
	  },
	  "岳阳": {
	    "lng": 113.2361,
	    "lat": 29.1357,
	    "fullName": "岳阳市",
	    "province": "湖南"
	  },
	  "益阳": {
	    "lng": 111.731,
	    "lat": 28.3832,
	    "fullName": "益阳市",
	    "province": "湖南"
	  },
	  "长沙": {
	    "lng": 113.0823,
	    "lat": 28.2568,
	    "fullName": "长沙市",
	    "province": "湖南"
	  },
	  "株洲": {
	    "lng": 113.5327,
	    "lat": 27.0319,
	    "fullName": "株洲市",
	    "province": "湖南"
	  },
	  "张家界": {
	    "lng": 110.5115,
	    "lat": 29.328,
	    "fullName": "张家界市",
	    "province": "湖南"
	  },
	  "娄底": {
	    "lng": 111.6431,
	    "lat": 27.7185,
	    "fullName": "娄底市",
	    "province": "湖南"
	  },
	  "湘潭": {
	    "lng": 112.5439,
	    "lat": 27.7075,
	    "fullName": "湘潭市",
	    "province": "湖南"
	  },
	  "榆林": {
	    "lng": 109.8743,
	    "lat": 38.205,
	    "fullName": "榆林市",
	    "province": "陕西"
	  },
	  "延安": {
	    "lng": 109.1052,
	    "lat": 36.4252,
	    "fullName": "延安市",
	    "province": "陕西"
	  },
	  "汉中": {
	    "lng": 106.886,
	    "lat": 33.0139,
	    "fullName": "汉中市",
	    "province": "陕西"
	  },
	  "安康": {
	    "lng": 109.1162,
	    "lat": 32.7722,
	    "fullName": "安康市",
	    "province": "陕西"
	  },
	  "商洛": {
	    "lng": 109.8083,
	    "lat": 33.761,
	    "fullName": "商洛市",
	    "province": "陕西"
	  },
	  "宝鸡": {
	    "lng": 107.1826,
	    "lat": 34.3433,
	    "fullName": "宝鸡市",
	    "province": "陕西"
	  },
	  "渭南": {
	    "lng": 109.7864,
	    "lat": 35.0299,
	    "fullName": "渭南市",
	    "province": "陕西"
	  },
	  "咸阳": {
	    "lng": 108.4131,
	    "lat": 34.8706,
	    "fullName": "咸阳市",
	    "province": "陕西"
	  },
	  "西安": {
	    "lng": 109.1162,
	    "lat": 34.2004,
	    "fullName": "西安市",
	    "province": "陕西"
	  },
	  "铜川": {
	    "lng": 109.0393,
	    "lat": 35.1947,
	    "fullName": "铜川市",
	    "province": "陕西"
	  },
	  "清远": {
	    "lng": 112.9175,
	    "lat": 24.3292,
	    "fullName": "清远市",
	    "province": "广东"
	  },
	  "韶关": {
	    "lng": 113.7964,
	    "lat": 24.7028,
	    "fullName": "韶关市",
	    "province": "广东"
	  },
	  "湛江": {
	    "lng": 110.3577,
	    "lat": 20.9894,
	    "fullName": "湛江市",
	    "province": "广东"
	  },
	  "梅州": {
	    "lng": 116.1255,
	    "lat": 24.1534,
	    "fullName": "梅州市",
	    "province": "广东"
	  },
	  "河源": {
	    "lng": 114.917,
	    "lat": 23.9722,
	    "fullName": "河源市",
	    "province": "广东"
	  },
	  "肇庆": {
	    "lng": 112.1265,
	    "lat": 23.5822,
	    "fullName": "肇庆市",
	    "province": "广东"
	  },
	  "惠州": {
	    "lng": 114.6204,
	    "lat": 23.1647,
	    "fullName": "惠州市",
	    "province": "广东"
	  },
	  "茂名": {
	    "lng": 111.0059,
	    "lat": 22.0221,
	    "fullName": "茂名市",
	    "province": "广东"
	  },
	  "江门": {
	    "lng": 112.6318,
	    "lat": 22.1484,
	    "fullName": "江门市",
	    "province": "广东"
	  },
	  "阳江": {
	    "lng": 111.8298,
	    "lat": 22.0715,
	    "fullName": "阳江市",
	    "province": "广东"
	  },
	  "云浮": {
	    "lng": 111.7859,
	    "lat": 22.8516,
	    "fullName": "云浮市",
	    "province": "广东"
	  },
	  "广州": {
	    "lng": 113.5107,
	    "lat": 23.2196,
	    "fullName": "广州市",
	    "province": "广东"
	  },
	  "汕尾": {
	    "lng": 115.5762,
	    "lat": 23.0438,
	    "fullName": "汕尾市",
	    "province": "广东"
	  },
	  "揭阳": {
	    "lng": 116.1255,
	    "lat": 23.313,
	    "fullName": "揭阳市",
	    "province": "广东"
	  },
	  "珠海": {
	    "lng": 113.7305,
	    "lat": 22.1155,
	    "fullName": "珠海市",
	    "province": "广东"
	  },
	  "佛山": {
	    "lng": 112.8955,
	    "lat": 23.1097,
	    "fullName": "佛山市",
	    "province": "广东"
	  },
	  "潮州": {
	    "lng": 116.7847,
	    "lat": 23.8293,
	    "fullName": "潮州市",
	    "province": "广东"
	  },
	  "汕头": {
	    "lng": 117.1692,
	    "lat": 23.3405,
	    "fullName": "汕头市",
	    "province": "广东"
	  },
	  "深圳": {
	    "lng": 114.5435,
	    "lat": 22.5439,
	    "fullName": "深圳市",
	    "province": "广东"
	  },
	  "东莞": {
	    "lng": 113.8953,
	    "lat": 22.901,
	    "fullName": "东莞市",
	    "province": "广东"
	  },
	  "中山": {
	    "lng": 113.4229,
	    "lat": 22.478,
	    "fullName": "中山市",
	    "province": "广东"
	  },
	  "延边": {
	    "lng": 129.397,
	    "lat": 43.2587,
	    "fullName": "延边朝鲜族自治州",
	    "province": "吉林"
	  },
	  "吉林": {
	    "lng": 126.8372,
	    "lat": 43.6047,
	    "fullName": "吉林市",
	    "province": "吉林"
	  },
	  "白城": {
	    "lng": 123.0029,
	    "lat": 45.2637,
	    "fullName": "白城市",
	    "province": "吉林"
	  },
	  "松原": {
	    "lng": 124.0906,
	    "lat": 44.7198,
	    "fullName": "松原市",
	    "province": "吉林"
	  },
	  "长春": {
	    "lng": 125.8154,
	    "lat": 44.2584,
	    "fullName": "长春市",
	    "province": "吉林"
	  },
	  "白山": {
	    "lng": 127.2217,
	    "lat": 42.0941,
	    "fullName": "白山市",
	    "province": "吉林"
	  },
	  "通化": {
	    "lng": 125.9583,
	    "lat": 41.8579,
	    "fullName": "通化市",
	    "province": "吉林"
	  },
	  "四平": {
	    "lng": 124.541,
	    "lat": 43.4894,
	    "fullName": "四平市",
	    "province": "吉林"
	  },
	  "辽源": {
	    "lng": 125.343,
	    "lat": 42.7643,
	    "fullName": "辽源市",
	    "province": "吉林"
	  },
	  "承德": {
	    "lng": 117.5757,
	    "lat": 41.4075,
	    "fullName": "承德市",
	    "province": "河北"
	  },
	  "张家口": {
	    "lng": 115.1477,
	    "lat": 40.8527,
	    "fullName": "张家口市",
	    "province": "河北"
	  },
	  "保定": {
	    "lng": 115.0488,
	    "lat": 39.0948,
	    "fullName": "保定市",
	    "province": "河北"
	  },
	  "唐山": {
	    "lng": 118.4766,
	    "lat": 39.6826,
	    "fullName": "唐山市",
	    "province": "河北"
	  },
	  "沧州": {
	    "lng": 116.8286,
	    "lat": 38.2104,
	    "fullName": "沧州市",
	    "province": "河北"
	  },
	  "石家": {
	    "lng": 114.4995,
	    "lat": 38.1006,
	    "fullName": "石家庄市",
	    "province": "河北"
	  },
	  "邢台": {
	    "lng": 114.8071,
	    "lat": 37.2821,
	    "fullName": "邢台市",
	    "province": "河北"
	  },
	  "邯郸": {
	    "lng": 114.4775,
	    "lat": 36.535,
	    "fullName": "邯郸市",
	    "province": "河北"
	  },
	  "秦皇": {
	    "lng": 119.2126,
	    "lat": 40.0232,
	    "fullName": "秦皇岛市",
	    "province": "河北"
	  },
	  "衡水": {
	    "lng": 115.8838,
	    "lat": 37.7161,
	    "fullName": "衡水市",
	    "province": "河北"
	  },
	  "廊坊": {
	    "lng": 116.521,
	    "lat": 39.0509,
	    "fullName": "廊坊市",
	    "province": "河北"
	  },
	  "恩施": {
	    "lng": 109.5007,
	    "lat": 30.2563,
	    "fullName": "恩施土家族苗族自治州",
	    "province": "湖北"
	  },
	  "十堰": {
	    "lng": 110.5115,
	    "lat": 32.3877,
	    "fullName": "十堰市",
	    "province": "湖北"
	  },
	  "宜昌": {
	    "lng": 111.1707,
	    "lat": 30.7617,
	    "fullName": "宜昌市",
	    "province": "湖北"
	  },
	  "襄樊": {
	    "lng": 111.9397,
	    "lat": 31.9263,
	    "fullName": "襄樊市",
	    "province": "湖北"
	  },
	  "黄冈": {
	    "lng": 115.2686,
	    "lat": 30.6628,
	    "fullName": "黄冈市",
	    "province": "湖北"
	  },
	  "荆州": {
	    "lng": 113.291,
	    "lat": 30.0092,
	    "fullName": "荆州市",
	    "province": "湖北"
	  },
	  "荆门": {
	    "lng": 112.6758,
	    "lat": 30.9979,
	    "fullName": "荆门市",
	    "province": "湖北"
	  },
	  "咸宁": {
	    "lng": 114.2578,
	    "lat": 29.6631,
	    "fullName": "咸宁市",
	    "province": "湖北"
	  },
	  "随州": {
	    "lng": 113.4338,
	    "lat": 31.8768,
	    "fullName": "随州市",
	    "province": "湖北"
	  },
	  "孝感": {
	    "lng": 113.9502,
	    "lat": 31.1188,
	    "fullName": "孝感市",
	    "province": "湖北"
	  },
	  "武汉": {
	    "lng": 114.3896,
	    "lat": 30.6628,
	    "fullName": "武汉市",
	    "province": "湖北"
	  },
	  "黄石": {
	    "lng": 115.0159,
	    "lat": 29.9213,
	    "fullName": "黄石市",
	    "province": "湖北"
	  },
	  "神农": {
	    "lng": 110.4565,
	    "lat": 31.5802,
	    "fullName": "神农架林区",
	    "province": "湖北"
	  },
	  "天门": {
	    "lng": 113.0273,
	    "lat": 30.6409,
	    "fullName": "天门市",
	    "province": "湖北"
	  },
	  "仙桃": {
	    "lng": 113.3789,
	    "lat": 30.3003,
	    "fullName": "仙桃市",
	    "province": "湖北"
	  },
	  "潜江": {
	    "lng": 112.7637,
	    "lat": 30.3607,
	    "fullName": "潜江市",
	    "province": "湖北"
	  },
	  "鄂州": {
	    "lng": 114.7302,
	    "lat": 30.4102,
	    "fullName": "鄂州市",
	    "province": "湖北"
	  },
	  "遵义": {
	    "lng": 106.908,
	    "lat": 28.1744,
	    "fullName": "遵义市",
	    "province": "贵州"
	  },
	  "黔东": {
	    "lng": 108.4241,
	    "lat": 26.4166,
	    "fullName": "黔东南苗族侗族自治州",
	    "province": "贵州"
	  },
	  "毕节": {
	    "lng": 105.1611,
	    "lat": 27.0648,
	    "fullName": "毕节地区",
	    "province": "贵州"
	  },
	  "黔南": {
	    "lng": 107.2485,
	    "lat": 25.8398,
	    "fullName": "黔南布依族苗族自治州",
	    "province": "贵州"
	  },
	  "铜仁": {
	    "lng": 108.6218,
	    "lat": 28.0096,
	    "fullName": "铜仁地区",
	    "province": "贵州"
	  },
	  "黔西": {
	    "lng": 105.5347,
	    "lat": 25.3949,
	    "fullName": "黔西南布依族苗族自治州",
	    "province": "贵州"
	  },
	  "六盘": {
	    "lng": 104.7546,
	    "lat": 26.0925,
	    "fullName": "六盘水市",
	    "province": "贵州"
	  },
	  "安顺": {
	    "lng": 105.9082,
	    "lat": 25.9882,
	    "fullName": "安顺市",
	    "province": "贵州"
	  },
	  "贵阳": {
	    "lng": 106.6992,
	    "lat": 26.7682,
	    "fullName": "贵阳市",
	    "province": "贵州"
	  },
	  "烟台": {
	    "lng": 120.7397,
	    "lat": 37.5128,
	    "fullName": "烟台市",
	    "province": "山东"
	  },
	  "临沂": {
	    "lng": 118.3118,
	    "lat": 35.2936,
	    "fullName": "临沂市",
	    "province": "山东"
	  },
	  "潍坊": {
	    "lng": 119.0918,
	    "lat": 36.524,
	    "fullName": "潍坊市",
	    "province": "山东"
	  },
	  "青岛": {
	    "lng": 120.4651,
	    "lat": 36.3373,
	    "fullName": "青岛市",
	    "province": "山东"
	  },
	  "菏泽": {
	    "lng": 115.6201,
	    "lat": 35.2057,
	    "fullName": "菏泽市",
	    "province": "山东"
	  },
	  "济宁": {
	    "lng": 116.8286,
	    "lat": 35.3375,
	    "fullName": "济宁市",
	    "province": "山东"
	  },
	  "德州": {
	    "lng": 116.6858,
	    "lat": 37.2107,
	    "fullName": "德州市",
	    "province": "山东"
	  },
	  "滨州": {
	    "lng": 117.8174,
	    "lat": 37.4963,
	    "fullName": "滨州市",
	    "province": "山东"
	  },
	  "聊城": {
	    "lng": 115.9167,
	    "lat": 36.4032,
	    "fullName": "聊城市",
	    "province": "山东"
	  },
	  "东营": {
	    "lng": 118.7073,
	    "lat": 37.5513,
	    "fullName": "东营市",
	    "province": "山东"
	  },
	  "济南": {
	    "lng": 117.1582,
	    "lat": 36.8701,
	    "fullName": "济南市",
	    "province": "山东"
	  },
	  "泰安": {
	    "lng": 117.0264,
	    "lat": 36.0516,
	    "fullName": "泰安市",
	    "province": "山东"
	  },
	  "威海": {
	    "lng": 121.9482,
	    "lat": 37.1393,
	    "fullName": "威海市",
	    "province": "山东"
	  },
	  "日照": {
	    "lng": 119.2786,
	    "lat": 35.5023,
	    "fullName": "日照市",
	    "province": "山东"
	  },
	  "淄博": {
	    "lng": 118.0371,
	    "lat": 36.6064,
	    "fullName": "淄博市",
	    "province": "山东"
	  },
	  "枣庄": {
	    "lng": 117.323,
	    "lat": 34.8926,
	    "fullName": "枣庄市",
	    "province": "山东"
	  },
	  "莱芜": {
	    "lng": 117.6526,
	    "lat": 36.2714,
	    "fullName": "莱芜市",
	    "province": "山东"
	  },
	  "赣州": {
	    "lng": 115.2795,
	    "lat": 25.8124,
	    "fullName": "赣州市",
	    "province": "江西"
	  },
	  "吉安": {
	    "lng": 114.884,
	    "lat": 26.9659,
	    "fullName": "吉安市",
	    "province": "江西"
	  },
	  "上饶": {
	    "lng": 117.8613,
	    "lat": 28.7292,
	    "fullName": "上饶市",
	    "province": "江西"
	  },
	  "九江": {
	    "lng": 115.4224,
	    "lat": 29.3774,
	    "fullName": "九江市",
	    "province": "江西"
	  },
	  "抚州": {
	    "lng": 116.4441,
	    "lat": 27.4933,
	    "fullName": "抚州市",
	    "province": "江西"
	  },
	  "宜春": {
	    "lng": 115.0159,
	    "lat": 28.3228,
	    "fullName": "宜春市",
	    "province": "江西"
	  },
	  "南昌": {
	    "lng": 116.0046,
	    "lat": 28.6633,
	    "fullName": "南昌市",
	    "province": "江西"
	  },
	  "景德": {
	    "lng": 117.334,
	    "lat": 29.3225,
	    "fullName": "景德镇市",
	    "province": "江西"
	  },
	  "萍乡": {
	    "lng": 113.9282,
	    "lat": 27.4823,
	    "fullName": "萍乡市",
	    "province": "江西"
	  },
	  "鹰潭": {
	    "lng": 117.0813,
	    "lat": 28.2349,
	    "fullName": "鹰潭市",
	    "province": "江西"
	  },
	  "新余": {
	    "lng": 114.95,
	    "lat": 27.8174,
	    "fullName": "新余市",
	    "province": "江西"
	  },
	  "南阳": {
	    "lng": 112.4011,
	    "lat": 33.0359,
	    "fullName": "南阳市",
	    "province": "河南"
	  },
	  "信阳": {
	    "lng": 114.8291,
	    "lat": 32.0197,
	    "fullName": "信阳市",
	    "province": "河南"
	  },
	  "洛阳": {
	    "lng": 112.0605,
	    "lat": 34.3158,
	    "fullName": "洛阳市",
	    "province": "河南"
	  },
	  "驻马": {
	    "lng": 114.1589,
	    "lat": 32.9041,
	    "fullName": "驻马店市",
	    "province": "河南"
	  },
	  "周口": {
	    "lng": 114.873,
	    "lat": 33.6951,
	    "fullName": "周口市",
	    "province": "河南"
	  },
	  "商丘": {
	    "lng": 115.741,
	    "lat": 34.2828,
	    "fullName": "商丘市",
	    "province": "河南"
	  },
	  "三门": {
	    "lng": 110.8301,
	    "lat": 34.3158,
	    "fullName": "三门峡市",
	    "province": "河南"
	  },
	  "新乡": {
	    "lng": 114.2029,
	    "lat": 35.3595,
	    "fullName": "新乡市",
	    "province": "河南"
	  },
	  "平顶": {
	    "lng": 112.9724,
	    "lat": 33.739,
	    "fullName": "平顶山市",
	    "province": "河南"
	  },
	  "郑州": {
	    "lng": 113.4668,
	    "lat": 34.6234,
	    "fullName": "郑州市",
	    "province": "河南"
	  },
	  "安阳": {
	    "lng": 114.5325,
	    "lat": 36.0022,
	    "fullName": "安阳市",
	    "province": "河南"
	  },
	  "开封": {
	    "lng": 114.5764,
	    "lat": 34.6124,
	    "fullName": "开封市",
	    "province": "河南"
	  },
	  "焦作": {
	    "lng": 112.8406,
	    "lat": 35.1508,
	    "fullName": "焦作市",
	    "province": "河南"
	  },
	  "济源": {
	    "lng": 112.3571,
	    "lat": 35.0849,
	    "fullName": "济源市",
	    "province": "河南"
	  },
	  "许昌": {
	    "lng": 113.6975,
	    "lat": 34.0466,
	    "fullName": "许昌市",
	    "province": "河南"
	  },
	  "濮阳": {
	    "lng": 115.1917,
	    "lat": 35.799,
	    "fullName": "濮阳市",
	    "province": "河南"
	  },
	  "漯河": {
	    "lng": 113.8733,
	    "lat": 33.6951,
	    "fullName": "漯河市",
	    "province": "河南"
	  },
	  "鹤壁": {
	    "lng": 114.3787,
	    "lat": 35.744,
	    "fullName": "鹤壁市",
	    "province": "河南"
	  },
	  "大连": {
	    "lng": 122.2229,
	    "lat": 39.4409,
	    "fullName": "大连市",
	    "province": "辽宁"
	  },
	  "朝阳": {
	    "lng": 120.0696,
	    "lat": 41.4899,
	    "fullName": "朝阳市",
	    "province": "辽宁"
	  },
	  "丹东": {
	    "lng": 124.541,
	    "lat": 40.4242,
	    "fullName": "丹东市",
	    "province": "辽宁"
	  },
	  "铁岭": {
	    "lng": 124.2773,
	    "lat": 42.7423,
	    "fullName": "铁岭市",
	    "province": "辽宁"
	  },
	  "沈阳": {
	    "lng": 123.1238,
	    "lat": 42.1216,
	    "fullName": "沈阳市",
	    "province": "辽宁"
	  },
	  "抚顺": {
	    "lng": 124.585,
	    "lat": 41.8579,
	    "fullName": "抚顺市",
	    "province": "辽宁"
	  },
	  "葫芦": {
	    "lng": 120.1575,
	    "lat": 40.578,
	    "fullName": "葫芦岛市",
	    "province": "辽宁"
	  },
	  "阜新": {
	    "lng": 122.0032,
	    "lat": 42.2699,
	    "fullName": "阜新市",
	    "province": "辽宁"
	  },
	  "锦州": {
	    "lng": 121.6626,
	    "lat": 41.4294,
	    "fullName": "锦州市",
	    "province": "辽宁"
	  },
	  "鞍山": {
	    "lng": 123.0798,
	    "lat": 40.6055,
	    "fullName": "鞍山市",
	    "province": "辽宁"
	  },
	  "本溪": {
	    "lng": 124.1455,
	    "lat": 41.1987,
	    "fullName": "本溪市",
	    "province": "辽宁"
	  },
	  "营口": {
	    "lng": 122.4316,
	    "lat": 40.4297,
	    "fullName": "营口市",
	    "province": "辽宁"
	  },
	  "辽阳": {
	    "lng": 123.4094,
	    "lat": 41.1383,
	    "fullName": "辽阳市",
	    "province": "辽宁"
	  },
	  "盘锦": {
	    "lng": 121.9482,
	    "lat": 41.0449,
	    "fullName": "盘锦市",
	    "province": "辽宁"
	  },
	  "忻州": {
	    "lng": 112.4561,
	    "lat": 38.8971,
	    "fullName": "忻州市",
	    "province": "山西"
	  },
	  "吕梁": {
	    "lng": 111.3574,
	    "lat": 37.7325,
	    "fullName": "吕梁市",
	    "province": "山西"
	  },
	  "临汾": {
	    "lng": 111.4783,
	    "lat": 36.1615,
	    "fullName": "临汾市",
	    "province": "山西"
	  },
	  "晋中": {
	    "lng": 112.7747,
	    "lat": 37.37,
	    "fullName": "晋中市",
	    "province": "山西"
	  },
	  "运城": {
	    "lng": 111.1487,
	    "lat": 35.2002,
	    "fullName": "运城市",
	    "province": "山西"
	  },
	  "大同": {
	    "lng": 113.7854,
	    "lat": 39.8035,
	    "fullName": "大同市",
	    "province": "山西"
	  },
	  "长治": {
	    "lng": 112.8625,
	    "lat": 36.4746,
	    "fullName": "长治市",
	    "province": "山西"
	  },
	  "朔州": {
	    "lng": 113.0713,
	    "lat": 39.6991,
	    "fullName": "朔州市",
	    "province": "山西"
	  },
	  "晋城": {
	    "lng": 112.7856,
	    "lat": 35.6342,
	    "fullName": "晋城市",
	    "province": "山西"
	  },
	  "太原": {
	    "lng": 112.3352,
	    "lat": 37.9413,
	    "fullName": "太原市",
	    "province": "山西"
	  },
	  "阳泉": {
	    "lng": 113.4778,
	    "lat": 38.0951,
	    "fullName": "阳泉市",
	    "province": "山西"
	  },
	  "六安": {
	    "lng": 116.3123,
	    "lat": 31.8329,
	    "fullName": "六安市",
	    "province": "安徽"
	  },
	  "安庆": {
	    "lng": 116.7517,
	    "lat": 30.5255,
	    "fullName": "安庆市",
	    "province": "安徽"
	  },
	  "滁州": {
	    "lng": 118.1909,
	    "lat": 32.536,
	    "fullName": "滁州市",
	    "province": "安徽"
	  },
	  "宣城": {
	    "lng": 118.8062,
	    "lat": 30.6244,
	    "fullName": "宣城市",
	    "province": "安徽"
	  },
	  "阜阳": {
	    "lng": 115.7629,
	    "lat": 32.9919,
	    "fullName": "阜阳市",
	    "province": "安徽"
	  },
	  "宿州": {
	    "lng": 117.5208,
	    "lat": 33.6841,
	    "fullName": "宿州市",
	    "province": "安徽"
	  },
	  "黄山": {
	    "lng": 118.0481,
	    "lat": 29.9542,
	    "fullName": "黄山市",
	    "province": "安徽"
	  },
	  "巢湖": {
	    "lng": 117.7734,
	    "lat": 31.4978,
	    "fullName": "巢湖市",
	    "province": "安徽"
	  },
	  "亳州": {
	    "lng": 116.1914,
	    "lat": 33.4698,
	    "fullName": "亳州市",
	    "province": "安徽"
	  },
	  "池州": {
	    "lng": 117.3889,
	    "lat": 30.2014,
	    "fullName": "池州市",
	    "province": "安徽"
	  },
	  "合肥": {
	    "lng": 117.29,
	    "lat": 32.0581,
	    "fullName": "合肥市",
	    "province": "安徽"
	  },
	  "蚌埠": {
	    "lng": 117.4109,
	    "lat": 33.1073,
	    "fullName": "蚌埠市",
	    "province": "安徽"
	  },
	  "芜湖": {
	    "lng": 118.3557,
	    "lat": 31.0858,
	    "fullName": "芜湖市",
	    "province": "安徽"
	  },
	  "淮北": {
	    "lng": 116.6968,
	    "lat": 33.6896,
	    "fullName": "淮北市",
	    "province": "安徽"
	  },
	  "淮南": {
	    "lng": 116.7847,
	    "lat": 32.7722,
	    "fullName": "淮南市",
	    "province": "安徽"
	  },
	  "马鞍": {
	    "lng": 118.6304,
	    "lat": 31.5363,
	    "fullName": "马鞍山市",
	    "province": "安徽"
	  },
	  "铜陵": {
	    "lng": 117.9382,
	    "lat": 30.9375,
	    "fullName": "铜陵市",
	    "province": "安徽"
	  },
	  "南平": {
	    "lng": 118.136,
	    "lat": 27.2845,
	    "fullName": "南平市",
	    "province": "福建"
	  },
	  "三明": {
	    "lng": 117.5317,
	    "lat": 26.3013,
	    "fullName": "三明市",
	    "province": "福建"
	  },
	  "龙岩": {
	    "lng": 116.8066,
	    "lat": 25.2026,
	    "fullName": "龙岩市",
	    "province": "福建"
	  },
	  "宁德": {
	    "lng": 119.6521,
	    "lat": 26.9824,
	    "fullName": "宁德市",
	    "province": "福建"
	  },
	  "福州": {
	    "lng": 119.4543,
	    "lat": 25.9222,
	    "fullName": "福州市",
	    "province": "福建"
	  },
	  "漳州": {
	    "lng": 117.5757,
	    "lat": 24.3732,
	    "fullName": "漳州市",
	    "province": "福建"
	  },
	  "泉州": {
	    "lng": 118.3228,
	    "lat": 25.1147,
	    "fullName": "泉州市",
	    "province": "福建"
	  },
	  "莆田": {
	    "lng": 119.0918,
	    "lat": 25.3455,
	    "fullName": "莆田市",
	    "province": "福建"
	  },
	  "厦门": {
	    "lng": 118.1689,
	    "lat": 24.6478,
	    "fullName": "厦门市",
	    "province": "福建"
	  },
	  "丽水": {
	    "lng": 119.5642,
	    "lat": 28.1854,
	    "fullName": "丽水市",
	    "province": "浙江"
	  },
	  "杭州": {
	    "lng": 119.5313,
	    "lat": 29.8773,
	    "fullName": "杭州市",
	    "province": "浙江"
	  },
	  "温州": {
	    "lng": 120.498,
	    "lat": 27.8119,
	    "fullName": "温州市",
	    "province": "浙江"
	  },
	  "宁波": {
	    "lng": 121.5967,
	    "lat": 29.6466,
	    "fullName": "宁波市",
	    "province": "浙江"
	  },
	  "舟山": {
	    "lng": 122.2559,
	    "lat": 30.2234,
	    "fullName": "舟山市",
	    "province": "浙江"
	  },
	  "台州": {
	    "lng": 121.1353,
	    "lat": 28.6688,
	    "fullName": "台州市",
	    "province": "浙江"
	  },
	  "金华": {
	    "lng": 120.0037,
	    "lat": 29.1028,
	    "fullName": "金华市",
	    "province": "浙江"
	  },
	  "衢州": {
	    "lng": 118.6853,
	    "lat": 28.8666,
	    "fullName": "衢州市",
	    "province": "浙江"
	  },
	  "绍兴": {
	    "lng": 120.564,
	    "lat": 29.7565,
	    "fullName": "绍兴市",
	    "province": "浙江"
	  },
	  "嘉兴": {
	    "lng": 120.9155,
	    "lat": 30.6354,
	    "fullName": "嘉兴市",
	    "province": "浙江"
	  },
	  "湖州": {
	    "lng": 119.8608,
	    "lat": 30.7782,
	    "fullName": "湖州市",
	    "province": "浙江"
	  },
	  "盐城": {
	    "lng": 120.2234,
	    "lat": 33.5577,
	    "fullName": "盐城市",
	    "province": "江苏"
	  },
	  "徐州": {
	    "lng": 117.5208,
	    "lat": 34.3268,
	    "fullName": "徐州市",
	    "province": "江苏"
	  },
	  "南通": {
	    "lng": 121.1023,
	    "lat": 32.1625,
	    "fullName": "南通市",
	    "province": "江苏"
	  },
	  "淮安": {
	    "lng": 118.927,
	    "lat": 33.4039,
	    "fullName": "淮安市",
	    "province": "江苏"
	  },
	  "苏州": {
	    "lng": 120.6519,
	    "lat": 31.3989,
	    "fullName": "苏州市",
	    "province": "江苏"
	  },
	  "宿迁": {
	    "lng": 118.5535,
	    "lat": 33.7775,
	    "fullName": "宿迁市",
	    "province": "江苏"
	  },
	  "连云": {
	    "lng": 119.1248,
	    "lat": 34.552,
	    "fullName": "连云港市",
	    "province": "江苏"
	  },
	  "扬州": {
	    "lng": 119.4653,
	    "lat": 32.8162,
	    "fullName": "扬州市",
	    "province": "江苏"
	  },
	  "南京": {
	    "lng": 118.8062,
	    "lat": 31.9208,
	    "fullName": "南京市",
	    "province": "江苏"
	  },
	  "泰州": {
	    "lng": 120.0586,
	    "lat": 32.5525,
	    "fullName": "泰州市",
	    "province": "江苏"
	  },
	  "无锡": {
	    "lng": 120.3442,
	    "lat": 31.5527,
	    "fullName": "无锡市",
	    "province": "江苏"
	  },
	  "常州": {
	    "lng": 119.4543,
	    "lat": 31.5582,
	    "fullName": "常州市",
	    "province": "江苏"
	  },
	  "镇江": {
	    "lng": 119.4763,
	    "lat": 31.9702,
	    "fullName": "镇江市",
	    "province": "江苏"
	  },
	  "吴忠": {
	    "lng": 106.853,
	    "lat": 37.3755,
	    "fullName": "吴忠市",
	    "province": "宁夏"
	  },
	  "中卫": {
	    "lng": 105.4028,
	    "lat": 36.9525,
	    "fullName": "中卫市",
	    "province": "宁夏"
	  },
	  "固原": {
	    "lng": 106.1389,
	    "lat": 35.9363,
	    "fullName": "固原市",
	    "province": "宁夏"
	  },
	  "银川": {
	    "lng": 106.3586,
	    "lat": 38.1775,
	    "fullName": "银川市",
	    "province": "宁夏"
	  },
	  "石嘴": {
	    "lng": 106.4795,
	    "lat": 39.0015,
	    "fullName": "石嘴山市",
	    "province": "宁夏"
	  },
	  "儋州": {
	    "lng": 109.3291,
	    "lat": 19.5653,
	    "fullName": "儋州市",
	    "province": "海南"
	  },
	  "文昌": {
	    "lng": 110.8905,
	    "lat": 19.7823,
	    "fullName": "文昌市",
	    "province": "海南"
	  },
	  "乐东": {
	    "lng": 109.0283,
	    "lat": 18.6301,
	    "fullName": "乐东黎族自治县",
	    "province": "海南"
	  },
	  "三亚": {
	    "lng": 109.3716,
	    "lat": 18.3698,
	    "fullName": "三亚市",
	    "province": "海南"
	  },
	  "琼中": {
	    "lng": 109.8413,
	    "lat": 19.0736,
	    "fullName": "琼中黎族苗族自治县",
	    "province": "海南"
	  },
	  "东方": {
	    "lng": 108.8498,
	    "lat": 19.0414,
	    "fullName": "东方市",
	    "province": "海南"
	  },
	  "海口": {
	    "lng": 110.3893,
	    "lat": 19.8516,
	    "fullName": "海口市",
	    "province": "海南"
	  },
	  "万宁": {
	    "lng": 110.3137,
	    "lat": 18.8388,
	    "fullName": "万宁市",
	    "province": "海南"
	  },
	  "澄迈": {
	    "lng": 109.9937,
	    "lat": 19.7314,
	    "fullName": "澄迈县",
	    "province": "海南"
	  },
	  "白沙": {
	    "lng": 109.3703,
	    "lat": 19.211,
	    "fullName": "白沙黎族自治县",
	    "province": "海南"
	  },
	  "琼海": {
	    "lng": 110.4208,
	    "lat": 19.224,
	    "fullName": "琼海市",
	    "province": "海南"
	  },
	  "昌江": {
	    "lng": 109.0407,
	    "lat": 19.2137,
	    "fullName": "昌江黎族自治县",
	    "province": "海南"
	  },
	  "临高": {
	    "lng": 109.6957,
	    "lat": 19.8063,
	    "fullName": "临高县",
	    "province": "海南"
	  },
	  "陵水": {
	    "lng": 109.9924,
	    "lat": 18.5415,
	    "fullName": "陵水黎族自治县",
	    "province": "海南"
	  },
	  "屯昌": {
	    "lng": 110.0377,
	    "lat": 19.362,
	    "fullName": "屯昌县",
	    "province": "海南"
	  },
	  "定安": {
	    "lng": 110.3384,
	    "lat": 19.4698,
	    "fullName": "定安县",
	    "province": "海南"
	  },
	  "保亭": {
	    "lng": 109.6284,
	    "lat": 18.6108,
	    "fullName": "保亭黎族苗族自治县",
	    "province": "海南"
	  },
	  "五指": {
	    "lng": 109.5282,
	    "lat": 18.8299,
	    "fullName": "五指山市",
	    "province": "海南"
	  }
	};

	// 外国坐标，先注释
	// const worldCountriesMap = {
	//   "Moscow": {
	//     "lat": "55.7494733",
	//     "lng": "37.3523218",
	//     "fullName": "莫斯科"
	//   },
	//   "Petersburg": {
	//     "lat": "59.9171483",
	//     "lng": "30.0448871",
	//     "fullName": "圣彼得堡"
	//   },
	//   "Vladivostok": {
	//     "lat": "43.1736206",
	//     "lng": "131.895754",
	//     "fullName": "符拉迪沃斯托克(海参崴)"
	//   },
	//   "Yekaterinburg": {
	//     "lat": "56.8138126",
	//     "lng": "60.5148523",
	//     "fullName": "叶卡捷琳堡"
	//   },
	//   "Novgorod": {
	//     "lat": "56.2926609",
	//     "lng": "43.786664",
	//     "fullName": "下诺夫哥罗德"
	//   },
	//   "Novosibirsk": {
	//     "lat": "54.969655",
	//     "lng": "82.6692313",
	//     "fullName": "新西伯利亚"
	//   },
	//   "Rostov": {
	//     "lat": "57.1968001",
	//     "lng": "39.3805101",
	//     "fullName": "罗斯托夫"
	//   },
	//   "Uhde": {
	//     "lat": "51.8298243",
	//     "lng": "107.4760822",
	//     "fullName": "乌兰乌德"
	//   },
	//   "Irkutsk": {
	//     "lat": "52.2983044",
	//     "lng": "104.1270763",
	//     "fullName": "伊尔库茨克"
	//   },
	//   "Murmansk": {
	//     "lat": "68.9673991",
	//     "lng": "32.9457132",
	//     "fullName": "摩尔曼斯克"
	//   },
	//   "Sochi": {
	//     "lat": "43.6017001",
	//     "lng": "39.6550893",
	//     "fullName": "索契"
	//   },
	//   "Volgograd": {
	//     "lat": "48.6700797",
	//     "lng": "44.22653",
	//     "fullName": "伏尔加格勒"
	//   },
	//   "Kazan": {
	//     "lat": "55.7954219",
	//     "lng": "48.9332217",
	//     "fullName": "喀山"
	//   },
	//   "RostovOnDon": {
	//     "lat": "47.2609231",
	//     "lng": "39.4879174",
	//     "fullName": "顿河畔罗斯托夫"
	//   },
	//   "Samara": {
	//     "lat": "53.2605796",
	//     "lng": "49.9179024",
	//     "fullName": "萨马拉"
	//   },
	//   "Omsk": {
	//     "lat": "54.985554",
	//     "lng": "73.0759653",
	//     "fullName": "鄂木斯克"
	//   },
	//   "Chelyabinsk": {
	//     "lat": "55.1519087",
	//     "lng": "61.1283971",
	//     "fullName": "车里雅宾斯克"
	//   },
	//   "Khabarovsk": {
	//     "lat": "48.4647596",
	//     "lng": "134.9733447",
	//     "fullName": "伯力"
	//   },
	//   "Pyatigorsk": {
	//     "lat": "44.0433504",
	//     "lng": "42.9705613",
	//     "fullName": "皮亚季戈尔斯克"
	//   },
	//   "Ufa": {
	//     "lat": "54.8086988",
	//     "lng": "55.8807921",
	//     "fullName": "乌法"
	//   },
	//   "Perm": {
	//     "lat": "58.0201783",
	//     "lng": "55.9541039",
	//     "fullName": "彼尔姆"
	//   },
	//   "Krasnoyarsk": {
	//     "lat": "56.0266501",
	//     "lng": "92.7256527",
	//     "fullName": "克拉斯诺亚尔斯克"
	//   },
	//   "Voronezh": {
	//     "lat": "51.6753557",
	//     "lng": "38.9559888",
	//     "fullName": "沃罗涅日"
	//   },
	//   "Saratov": {
	//     "lat": "51.5341886",
	//     "lng": "45.8700586",
	//     "fullName": "萨拉托夫"
	//   },
	//   "Krasnodar": {
	//     "lat": "45.0535266",
	//     "lng": "38.9460163",
	//     "fullName": "克拉斯诺达尔"
	//   },
	//   "Tolyatti": {
	//     "lat": "53.5218291",
	//     "lng": "49.2950109",
	//     "fullName": "陶里亚蒂"
	//   },
	//   "Izevsk": {
	//     "lat": "56.8637312",
	//     "lng": "53.0880195",
	//     "fullName": "伊热夫斯克"
	//   },
	//   "Ulyanovsk": {
	//     "lat": "54.3110964",
	//     "lng": "48.326138",
	//     "fullName": "乌里扬诺夫斯克"
	//   },
	//   "Barnaul": {
	//     "lat": "53.3332194",
	//     "lng": "83.5971963",
	//     "fullName": "巴尔瑙尔"
	//   },
	//   "Yaroslavl": {
	//     "lat": "57.6523811",
	//     "lng": "39.7244361",
	//     "fullName": "雅罗斯拉夫尔"
	//   },
	//
	//   "Brasilia": {
	//     "lat": "-15.7217175",
	//     "lng": "-48.0783217",
	//     "fullName": "巴西利亚"
	//   },
	//   "Paulo": {
	//     "lat": "-23.6821604",
	//     "lng": "-46.8754884",
	//     "fullName": "圣保罗"
	//   },
	//   "Iguazul": {
	//     "lat": "-25.46543",
	//     "lng": "-54.5972328",
	//     "fullName": "伊瓜苏市"
	//   },
	//   "Janeiro": {
	//     "lat": "-22.9109878",
	//     "lng": "-43.7285235",
	//     "fullName": "里约热内卢"
	//   },
	//   "Horizonte": {
	//     "lat": "-19.9178164",
	//     "lng": "-44.100397",
	//     "fullName": "贝洛奥里藏特"
	//   },
	//   "Manaus": {
	//     "lat": "-2.573136",
	//     "lng": "-60.5418579",
	//     "fullName": "玛瑙斯市"
	//   },
	//   "Salvador": {
	//     "lat": "-12.8808976",
	//     "lng": "-38.557671",
	//     "fullName": "萨尔瓦多"
	//   },
	//   "Recife": {
	//     "lat": "-8.0464433",
	//     "lng": "-35.0025286",
	//     "fullName": "累西腓"
	//   },
	//   "Alegre": {
	//     "lat": "-30.1007488",
	//     "lng": "-51.2990333",
	//     "fullName": "阿雷格里港"
	//   },
	//   "Goiania": {
	//     "lat": "-16.6427714",
	//     "lng": "-49.4025521",
	//     "fullName": "戈亚尼亚"
	//   },
	//   "Curitiba": {
	//     "lat": "-25.4950853",
	//     "lng": "-49.4274875",
	//     "fullName": "库里蒂巴"
	//   },
	//
	//   "Istanbul": {
	//     "lat": "41.0049823",
	//     "lng": "28.7319977",
	//     "fullName": "伊斯坦布尔"
	//   },
	//   "Ankara": {
	//     "lat": "39.9032923",
	//     "lng": "32.6226813",
	//     "fullName": "安卡拉"
	//   },
	//   "Izmir": {
	//     "lat": "38.4175917",
	//     "lng": "26.9396782",
	//     "fullName": "伊兹密尔"
	//   },
	//   "Bursa": {
	//     "lat": "40.2215936",
	//     "lng": "28.8922061",
	//     "fullName": "布尔萨"
	//   },
	//   "Adana": {
	//     "lat": "36.9973327",
	//     "lng": "35.1479832",
	//     "fullName": "阿达纳"
	//   },
	//   "Gaziantep": {
	//     "lat": "37.0587663",
	//     "lng": "37.3451175",
	//     "fullName": "加济安泰普"
	//   },
	//   "Konya": {
	//     "lat": "37.8784235",
	//     "lng": "32.3663988",
	//     "fullName": "科尼亚"
	//   },
	//   "Antalya": {
	//     "lat": "36.897917",
	//     "lng": "30.6480652",
	//     "fullName": "安塔利亚"
	//   },
	//   "Kayserispor": {
	//     "lat": "38.7233801",
	//     "lng": "35.4001473",
	//     "fullName": "开塞利"
	//   },
	//   "Samsun": {
	//     "lat": "41.291388",
	//     "lng": "36.2436588",
	//     "fullName": "萨姆松"
	//   },
	//
	//   "Madrid": {
	//     "lat": "40.4378698",
	//     "lng": "-3.81962",
	//     "fullName": "马德里"
	//   },
	//   "Barcelona": {
	//     "lat": "41.3947688",
	//     "lng": "2.0787281",
	//     "fullName": "巴塞罗那"
	//   },
	//   "Valencia": {
	//     "lat": "39.468913",
	//     "lng": "-0.4364238",
	//     "fullName": "巴伦西亚"
	//   },
	//   "Sevilla": {
	//     "lat": "37.3753501",
	//     "lng": "-6.0250981",
	//     "fullName": "塞维利亚"
	//   },
	//   "Cordoba": {
	//     "lat": "37.8915808",
	//     "lng": "-4.8195047",
	//     "fullName": "科尔多瓦"
	//   },
	//
	//   "NewYork": {
	//     "lat": "40.7029741",
	//     "lng": "-74.2598629",
	//     "fullName": "纽约"
	//   },
	//   "LosAngeles": {
	//     "lat": "34.0201812",
	//     "lng": "-118.6919177",
	//     "fullName": "洛杉矶"
	//   },
	//   "Chicago": {
	//     "lat": "41.8336478",
	//     "lng": "-87.8722387",
	//     "fullName": "芝加哥"
	//   },
	//   "Houston": {
	//     "lat": "29.8168824",
	//     "lng": "-95.6814784",
	//     "fullName": "休斯敦"
	//   },
	//   "Philadelphia": {
	//     "lat": "40.0046684",
	//     "lng": "-75.2581164",
	//     "fullName": "费城"
	//   },
	//   "Phoenix": {
	//     "lat": "33.6050991",
	//     "lng": "-112.4052364",
	//     "fullName": "菲尼克斯(凤凰城)"
	//   },
	//   "SanDiego": {
	//     "lat": "32.8242404",
	//     "lng": "-117.375349",
	//     "fullName": "圣地亚哥"
	//   },
	//   "Dallas": {
	//     "lat": "32.8205865",
	//     "lng": "-96.8714239",
	//     "fullName": "达拉斯"
	//   },
	//   "SanAntonio": {
	//     "lat": "29.481137",
	//     "lng": "-98.7945916",
	//     "fullName": "圣安东尼奥"
	//   },
	//   "Detroit": {
	//     "lat": "42.3526257",
	//     "lng": "-83.2392882",
	//     "fullName": "底特律"
	//   },
	//   "Indianapolis": {
	//     "lat": "39.7797003",
	//     "lng": "-86.2728335",
	//     "fullName": "印第安纳波利斯"
	//   },
	//   "SanFrancisco": {
	//     "lat": "37.7576793",
	//     "lng": "-122.5076399",
	//     "fullName": "旧金山"
	//   },
	//   "Columbus": {
	//     "lat": "39.9828671",
	//     "lng": "-83.1309125",
	//     "fullName": "哥伦布"
	//   },
	//   "Austin": {
	//     "lat": "30.3076863",
	//     "lng": "-97.8934859",
	//     "fullName": "奥斯汀"
	//   },
	//   "Baltimore": {
	//     "lat": "39.2846854",
	//     "lng": "-76.6905258",
	//     "fullName": "巴尔的摩"
	//   },
	//   "Milwaukee": {
	//     "lat": "43.057806",
	//     "lng": "-88.1075131",
	//     "fullName": "密尔沃基"
	//   },
	//   "Boston": {
	//     "lat": "42.3133521",
	//     "lng": "-71.1271968",
	//     "fullName": "波士顿"
	//   },
	//   "Washington": {
	//     "lat": "38.8993278",
	//     "lng": "-77.0846063",
	//     "fullName": "华盛顿"
	//   },
	//   "Seattle": {
	//     "lat": "47.6147628",
	//     "lng": "-122.4759883",
	//     "fullName": "西雅图"
	//   },
	//   "Atlanta": {
	//     "lat": "33.7676338",
	//     "lng": "-84.5606881",
	//     "fullName": "亚特兰大"
	//   },
	//   "SanJose": {
	//     "lat": "37.296933",
	//     "lng": "-121.9574947",
	//     "fullName": "圣荷西"
	//   },
	//   "Jacksonville": {
	//     "lat": "30.3446913",
	//     "lng": "-82.0006437",
	//     "fullName": "杰克逊维尔"
	//   },
	//   "Memphis": {
	//     "lat": "35.1288636",
	//     "lng": "-90.2509716",
	//     "fullName": "孟菲斯"
	//   },
	//   "Charlotte": {
	//     "lat": "35.2030728",
	//     "lng": "-80.97961",
	//     "fullName": "夏洛特"
	//   },
	//   "FortWorth": {
	//     "lat": "32.800501",
	//     "lng": "-97.5695047",
	//     "fullName": "沃思堡"
	//   },
	//
	//
	//   "BD": {
	//     "lat": "24",
	//     "lng": "90",
	//     "fullName": "BANGLADESH"
	//   },
	//   "BE": {
	//     "lat": "50.8333",
	//     "lng": "4",
	//     "fullName": "BELGIUM"
	//   },
	//   "BF": {
	//     "lat": "13",
	//     "lng": "-2",
	//     "fullName": "BURKINA FASO"
	//   },
	//   "BG": {
	//     "lat": "43",
	//     "lng": "25",
	//     "fullName": "BULGARIA"
	//   },
	//   "BA": {
	//     "lat": "44",
	//     "lng": "18",
	//     "fullName": "BOSNIA AND HERZEGOVINA"
	//   },
	//   "BB": {
	//     "lat": "13.1667",
	//     "lng": "-59.5333",
	//     "fullName": "BARBADOS"
	//   },
	//   "WF": {
	//     "lat": "-13.3",
	//     "lng": "-176.2",
	//     "fullName": "WALLIS AND FUTUNA"
	//   },
	//   "BM": {
	//     "lat": "32.3333",
	//     "lng": "-64.75",
	//     "fullName": "BERMUDA"
	//   },
	//   "BN": {
	//     "lat": "4.5",
	//     "lng": "114.6667",
	//     "fullName": "BRUNEI DARUSSALAM"
	//   },
	//   "BO": {
	//     "lat": "-17",
	//     "lng": "-65",
	//     "fullName": "BOLIVIA, PLURINATIONAL STATE OF"
	//   },
	//   "BH": {
	//     "lat": "26",
	//     "lng": "50.55",
	//     "fullName": "BAHRAIN"
	//   },
	//   "BI": {
	//     "lat": "-3.5",
	//     "lng": "30",
	//     "fullName": "BURUNDI"
	//   },
	//   "BJ": {
	//     "lat": "9.5",
	//     "lng": "2.25",
	//     "fullName": "BENIN"
	//   },
	//   "BT": {
	//     "lat": "27.5",
	//     "lng": "90.5",
	//     "fullName": "BHUTAN"
	//   },
	//   "JM": {
	//     "lat": "18.25",
	//     "lng": "-77.5",
	//     "fullName": "JAMAICA"
	//   },
	//   "BV": {
	//     "lat": "-54.4333",
	//     "lng": "3.4",
	//     "fullName": "BOUVET ISLAND"
	//   },
	//   "BW": {
	//     "lat": "-22",
	//     "lng": "24",
	//     "fullName": "BOTSWANA"
	//   },
	//   "WS": {
	//     "lat": "-13.5833",
	//     "lng": "-172.3333",
	//     "fullName": "SAMOA"
	//   },
	//   "BR": {
	//     "lat": "-10",
	//     "lng": "-55",
	//     "fullName": "BRAZIL"
	//   },
	//   "BS": {
	//     "lat": "24.25",
	//     "lng": "-76",
	//     "fullName": "BAHAMAS"
	//   },
	//   "JE": {
	//     "lat": "49.21",
	//     "lng": "-2.13",
	//     "fullName": "JERSEY"
	//   },
	//   "BY": {
	//     "lat": "53",
	//     "lng": "28",
	//     "fullName": "BELARUS"
	//   },
	//   "BZ": {
	//     "lat": "17.25",
	//     "lng": "-88.75",
	//     "fullName": "BELIZE"
	//   },
	//   "RU": {
	//     "lat": "60",
	//     "lng": "100",
	//     "fullName": "RUSSIAN FEDERATION"
	//   },
	//   "RW": {
	//     "lat": "-2",
	//     "lng": "30",
	//     "fullName": "RWANDA"
	//   },
	//   "RS": {
	//     "lat": "44",
	//     "lng": "21",
	//     "fullName": "SERBIA"
	//   },
	//   "TL": {
	//     "lat": "-8.55",
	//     "lng": "125.5167",
	//     "fullName": "TIMOR-LESTE"
	//   },
	//   "RE": {
	//     "lat": "-21.1",
	//     "lng": "55.6",
	//     "fullName": "RÉUNION"
	//   },
	//   "TM": {
	//     "lat": "40",
	//     "lng": "60",
	//     "fullName": "TURKMENISTAN"
	//   },
	//   "TJ": {
	//     "lat": "39",
	//     "lng": "71",
	//     "fullName": "TAJIKISTAN"
	//   },
	//   "RO": {
	//     "lat": "46",
	//     "lng": "25",
	//     "fullName": "ROMANIA"
	//   },
	//   "TK": {
	//     "lat": "-9",
	//     "lng": "-172",
	//     "fullName": "TOKELAU"
	//   },
	//   "GW": {
	//     "lat": "12",
	//     "lng": "-15",
	//     "fullName": "GUINEA-BISSAU"
	//   },
	//   "GU": {
	//     "lat": "13.4667",
	//     "lng": "144.7833",
	//     "fullName": "GUAM"
	//   },
	//   "GT": {
	//     "lat": "15.5",
	//     "lng": "-90.25",
	//     "fullName": "GUATEMALA"
	//   },
	//   "GS": {
	//     "lat": "-54.5",
	//     "lng": "-37",
	//     "fullName": "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS"
	//   },
	//   "GR": {
	//     "lat": "39",
	//     "lng": "22",
	//     "fullName": "GREECE"
	//   },
	//   "GQ": {
	//     "lat": "2",
	//     "lng": "10",
	//     "fullName": "EQUATORIAL GUINEA"
	//   },
	//   "GP": {
	//     "lat": "16.25",
	//     "lng": "-61.5833",
	//     "fullName": "GUADELOUPE"
	//   },
	//   "JP": {
	//     "lat": "36",
	//     "lng": "138",
	//     "fullName": "JAPAN"
	//   },
	//   "GY": {
	//     "lat": "5",
	//     "lng": "-59",
	//     "fullName": "GUYANA"
	//   },
	//   "GG": {
	//     "lat": "49.5",
	//     "lng": "-2.56",
	//     "fullName": "GUERNSEY"
	//   },
	//   "GF": {
	//     "lat": "4",
	//     "lng": "-53",
	//     "fullName": "FRENCH GUIANA"
	//   },
	//   "GE": {
	//     "lat": "42",
	//     "lng": "43.5",
	//     "fullName": "GEORGIA"
	//   },
	//   "GD": {
	//     "lat": "12.1167",
	//     "lng": "-61.6667",
	//     "fullName": "GRENADA"
	//   },
	//   "GB": {
	//     "lat": "54",
	//     "lng": "-2",
	//     "fullName": "UNITED KINGDOM"
	//   },
	//   "GA": {
	//     "lat": "-1",
	//     "lng": "11.75",
	//     "fullName": "GABON"
	//   },
	//   "GN": {
	//     "lat": "11",
	//     "lng": "-10",
	//     "fullName": "GUINEA"
	//   },
	//   "GM": {
	//     "lat": "13.4667",
	//     "lng": "-16.5667",
	//     "fullName": "GAMBIA"
	//   },
	//   "GL": {
	//     "lat": "72",
	//     "lng": "-40",
	//     "fullName": "GREENLAND"
	//   },
	//   "GI": {
	//     "lat": "36.1833",
	//     "lng": "-5.3667",
	//     "fullName": "GIBRALTAR"
	//   },
	//   "GH": {
	//     "lat": "8",
	//     "lng": "-2",
	//     "fullName": "GHANA"
	//   },
	//   "OM": {
	//     "lat": "21",
	//     "lng": "57",
	//     "fullName": "OMAN"
	//   },
	//   "TN": {
	//     "lat": "34",
	//     "lng": "9",
	//     "fullName": "TUNISIA"
	//   },
	//   "JO": {
	//     "lat": "31",
	//     "lng": "36",
	//     "fullName": "JORDAN"
	//   },
	//   "HR": {
	//     "lat": "45.1667",
	//     "lng": "15.5",
	//     "fullName": "CROATIA"
	//   },
	//   "HT": {
	//     "lat": "19",
	//     "lng": "-72.4167",
	//     "fullName": "HAITI"
	//   },
	//   "HU": {
	//     "lat": "47",
	//     "lng": "20",
	//     "fullName": "HUNGARY"
	//   },
	//   "HK": {
	//     "lat": "22.25",
	//     "lng": "114.1667",
	//     "fullName": "HONG KONG"
	//   },
	//   "HN": {
	//     "lat": "15",
	//     "lng": "-86.5",
	//     "fullName": "HONDURAS"
	//   },
	//   "HM": {
	//     "lat": "-53.1",
	//     "lng": "72.5167",
	//     "fullName": "HEARD ISLAND AND MCDONALD ISLANDS"
	//   },
	//   "VE": {
	//     "lat": "8",
	//     "lng": "-66",
	//     "fullName": "VENEZUELA, BOLIVARIAN REPUBLIC OF"
	//   },
	//   "PR": {
	//     "lat": "18.25",
	//     "lng": "-66.5",
	//     "fullName": "PUERTO RICO"
	//   },
	//   "PS": {
	//     "lat": "32",
	//     "lng": "35.25",
	//     "fullName": "PALESTINIAN TERRITORY, OCCUPIED"
	//   },
	//   "PW": {
	//     "lat": "7.5",
	//     "lng": "134.5",
	//     "fullName": "PALAU"
	//   },
	//   "PT": {
	//     "lat": "39.5",
	//     "lng": "-8",
	//     "fullName": "PORTUGAL"
	//   },
	//   "KN": {
	//     "lat": "17.3333",
	//     "lng": "-62.75",
	//     "fullName": "SAINT KITTS AND NEVIS"
	//   },
	//   "PY": {
	//     "lat": "-23",
	//     "lng": "-58",
	//     "fullName": "PARAGUAY"
	//   },
	//   "IQ": {
	//     "lat": "33",
	//     "lng": "44",
	//     "fullName": "IRAQ"
	//   },
	//   "PA": {
	//     "lat": "9",
	//     "lng": "-80",
	//     "fullName": "PANAMA"
	//   },
	//   "PF": {
	//     "lat": "-15",
	//     "lng": "-140",
	//     "fullName": "FRENCH POLYNESIA"
	//   },
	//   "PG": {
	//     "lat": "-6",
	//     "lng": "147",
	//     "fullName": "PAPUA NEW GUINEA"
	//   },
	//   "PE": {
	//     "lat": "-10",
	//     "lng": "-76",
	//     "fullName": "PERU"
	//   },
	//   "PK": {
	//     "lat": "30",
	//     "lng": "70",
	//     "fullName": "PAKISTAN"
	//   },
	//   "PH": {
	//     "lat": "13",
	//     "lng": "122",
	//     "fullName": "PHILIPPINES"
	//   },
	//   "PN": {
	//     "lat": "-24.7",
	//     "lng": "-127.4",
	//     "fullName": "PITCAIRN"
	//   },
	//   "PL": {
	//     "lat": "52",
	//     "lng": "20",
	//     "fullName": "POLAND"
	//   },
	//   "PM": {
	//     "lat": "46.8333",
	//     "lng": "-56.3333",
	//     "fullName": "SAINT PIERRE AND MIQUElng"
	//   },
	//   "ZM": {
	//     "lat": "-15",
	//     "lng": "30",
	//     "fullName": "ZAMBIA"
	//   },
	//   "EH": {
	//     "lat": "24.5",
	//     "lng": "-13",
	//     "fullName": "WESTERN SAHARA"
	//   },
	//   "EE": {
	//     "lat": "59",
	//     "lng": "26",
	//     "fullName": "ESTONIA"
	//   },
	//   "EG": {
	//     "lat": "27",
	//     "lng": "30",
	//     "fullName": "EGYPT"
	//   },
	//   "ZA": {
	//     "lat": "-29",
	//     "lng": "24",
	//     "fullName": "SOUTH AFRICA"
	//   },
	//   "EC": {
	//     "lat": "-2",
	//     "lng": "-77.5",
	//     "fullName": "ECUADOR"
	//   },
	//   "IT": {
	//     "lat": "42.8333",
	//     "lng": "12.8333",
	//     "fullName": "ITALY"
	//   },
	//   "VN": {
	//     "lat": "16",
	//     "lng": "106",
	//     "fullName": "VIET NAM"
	//   },
	//   "SB": {
	//     "lat": "-8",
	//     "lng": "159",
	//     "fullName": "SOLOMON ISLANDS"
	//   },
	//   "ET": {
	//     "lat": "8",
	//     "lng": "38",
	//     "fullName": "ETHIOPIA"
	//   },
	//   "SO": {
	//     "lat": "10",
	//     "lng": "49",
	//     "fullName": "SOMALIA"
	//   },
	//   "ZW": {
	//     "lat": "-20",
	//     "lng": "30",
	//     "fullName": "ZIMBABWE"
	//   },
	//   "SA": {
	//     "lat": "25",
	//     "lng": "45",
	//     "fullName": "SAUDI ARABIA"
	//   },
	//   "ES": {
	//     "lat": "40",
	//     "lng": "-4",
	//     "fullName": "SPAIN"
	//   },
	//   "ER": {
	//     "lat": "15",
	//     "lng": "39",
	//     "fullName": "ERITREA"
	//   },
	//   "ME": {
	//     "lat": "42",
	//     "lng": "19",
	//     "fullName": "MONTENEGRO"
	//   },
	//   "MD": {
	//     "lat": "47",
	//     "lng": "29",
	//     "fullName": "MOLDOVA, REPUBLIC OF"
	//   },
	//   "MG": {
	//     "lat": "-20",
	//     "lng": "47",
	//     "fullName": "MADAGASCAR"
	//   },
	//   "MA": {
	//     "lat": "32",
	//     "lng": "-5",
	//     "fullName": "MOROCCO"
	//   },
	//   "MC": {
	//     "lat": "43.7333",
	//     "lng": "7.4",
	//     "fullName": "MONACO"
	//   },
	//   "UZ": {
	//     "lat": "41",
	//     "lng": "64",
	//     "fullName": "UZBEKISTAN"
	//   },
	//   "MM": {
	//     "lat": "22",
	//     "lng": "98",
	//     "fullName": "MYANMAR"
	//   },
	//   "ML": {
	//     "lat": "17",
	//     "lng": "-4",
	//     "fullName": "MALI"
	//   },
	//   "MO": {
	//     "lat": "22.1667",
	//     "lng": "113.55",
	//     "fullName": "MACAO"
	//   },
	//   "MN": {
	//     "lat": "46",
	//     "lng": "105",
	//     "fullName": "MONGOLIA"
	//   },
	//   "MH": {
	//     "lat": "9",
	//     "lng": "168",
	//     "fullName": "MARSHALL ISLANDS"
	//   },
	//   "MK": {
	//     "lat": "41.8333",
	//     "lng": "22",
	//     "fullName": "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF"
	//   },
	//   "MU": {
	//     "lat": "-20.2833",
	//     "lng": "57.55",
	//     "fullName": "MAURITIUS"
	//   },
	//   "MT": {
	//     "lat": "35.8333",
	//     "lng": "14.5833",
	//     "fullName": "MALTA"
	//   },
	//   "MW": {
	//     "lat": "-13.5",
	//     "lng": "34",
	//     "fullName": "MALAWI"
	//   },
	//   "MV": {
	//     "lat": "3.25",
	//     "lng": "73",
	//     "fullName": "MALDIVES"
	//   },
	//   "MQ": {
	//     "lat": "14.6667",
	//     "lng": "-61",
	//     "fullName": "MARTINIQUE"
	//   },
	//   "MP": {
	//     "lat": "15.2",
	//     "lng": "145.75",
	//     "fullName": "NORTHERN MARIANA ISLANDS"
	//   },
	//   "MS": {
	//     "lat": "16.75",
	//     "lng": "-62.2",
	//     "fullName": "MONTSERRAT"
	//   },
	//   "MR": {
	//     "lat": "20",
	//     "lng": "-12",
	//     "fullName": "MAURITANIA"
	//   },
	//   "IM": {
	//     "lat": "54.23",
	//     "lng": "-4.55",
	//     "fullName": "ISLE OF MAN"
	//   },
	//   "UG": {
	//     "lat": "1",
	//     "lng": "32",
	//     "fullName": "UGANDA"
	//   },
	//   "MY": {
	//     "lat": "2.5",
	//     "lng": "112.5",
	//     "fullName": "MALAYSIA"
	//   },
	//   "MX": {
	//     "lat": "23",
	//     "lng": "-102",
	//     "fullName": "MEXICO"
	//   },
	//   "IL": {
	//     "lat": "31.5",
	//     "lng": "34.75",
	//     "fullName": "ISRAEL"
	//   },
	//   "FR": {
	//     "lat": "46",
	//     "lng": "2",
	//     "fullName": "FRANCE"
	//   },
	//   "AW": {
	//     "lat": "12.5",
	//     "lng": "-69.9667",
	//     "fullName": "ARUBA"
	//   },
	//   "SH": {
	//     "lat": "-15.9333",
	//     "lng": "-5.7",
	//     "fullName": "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA"
	//   },
	//   "SJ": {
	//     "lat": "78",
	//     "lng": "20",
	//     "fullName": "SVALBARD AND JAN MAYEN"
	//   },
	//   "FI": {
	//     "lat": "64",
	//     "lng": "26",
	//     "fullName": "FINLAND"
	//   },
	//   "FJ": {
	//     "lat": "-18",
	//     "lng": "175",
	//     "fullName": "FIJI"
	//   },
	//   "FK": {
	//     "lat": "-51.75",
	//     "lng": "-59",
	//     "fullName": "FALKLAND ISLANDS (MALVINAS)"
	//   },
	//   "FM": {
	//     "lat": "6.9167",
	//     "lng": "158.25",
	//     "fullName": "MICRONESIA, FEDERATED STATES OF"
	//   },
	//   "FO": {
	//     "lat": "62",
	//     "lng": "-7",
	//     "fullName": "FAROE ISLANDS"
	//   },
	//   "NI": {
	//     "lat": "13",
	//     "lng": "-85",
	//     "fullName": "NICARAGUA"
	//   },
	//   "NL": {
	//     "lat": "52.5",
	//     "lng": "5.75",
	//     "fullName": "NETHERLANDS"
	//   },
	//   "NO": {
	//     "lat": "62",
	//     "lng": "10",
	//     "fullName": "NORWAY"
	//   },
	//   "NA": {
	//     "lat": "-22",
	//     "lng": "17",
	//     "fullName": "NAMIBIA"
	//   },
	//   "VU": {
	//     "lat": "-16",
	//     "lng": "167",
	//     "fullName": "VANUATU"
	//   },
	//   "NC": {
	//     "lat": "-21.5",
	//     "lng": "165.5",
	//     "fullName": "NEW CALEDONIA"
	//   },
	//   "NE": {
	//     "lat": "16",
	//     "lng": "8",
	//     "fullName": "NIGER"
	//   },
	//   "NF": {
	//     "lat": "-29.0333",
	//     "lng": "167.95",
	//     "fullName": "NORFOLK ISLAND"
	//   },
	//   "NG": {
	//     "lat": "10",
	//     "lng": "8",
	//     "fullName": "NIGERIA"
	//   },
	//   "NZ": {
	//     "lat": "-41",
	//     "lng": "174",
	//     "fullName": "NEW ZEALAND"
	//   },
	//   "NP": {
	//     "lat": "28",
	//     "lng": "84",
	//     "fullName": "NEPAL"
	//   },
	//   "NR": {
	//     "lat": "-0.5333",
	//     "lng": "166.9167",
	//     "fullName": "NAURU"
	//   },
	//   "NU": {
	//     "lat": "-19.0333",
	//     "lng": "-169.8667",
	//     "fullName": "NIUE"
	//   },
	//   "CK": {
	//     "lat": "-21.2333",
	//     "lng": "-159.7667",
	//     "fullName": "COOK ISLANDS"
	//   },
	//   "CI": {
	//     "lat": "8",
	//     "lng": "-5",
	//     "fullName": "CÔTE D'IVOIRE"
	//   },
	//   "CH": {
	//     "lat": "47",
	//     "lng": "8",
	//     "fullName": "SWITZERLAND"
	//   },
	//   "CO": {
	//     "lat": "4",
	//     "lng": "-72",
	//     "fullName": "COLOMBIA"
	//   },
	//   "CN": {
	//     "lat": "35",
	//     "lng": "105",
	//     "fullName": "CHINA"
	//   },
	//   "CM": {
	//     "lat": "6",
	//     "lng": "12",
	//     "fullName": "CAMEROON"
	//   },
	//   "CL": {
	//     "lat": "-30",
	//     "lng": "-71",
	//     "fullName": "CHILE"
	//   },
	//   "CC": {
	//     "lat": "-12.5",
	//     "lng": "96.8333",
	//     "fullName": "COCOS (KEELING) ISLANDS"
	//   },
	//   "CA": {
	//     "lat": "60",
	//     "lng": "-95",
	//     "fullName": "CANADA"
	//   },
	//   "CG": {
	//     "lat": "-1",
	//     "lng": "15",
	//     "fullName": "CONGO"
	//   },
	//   "CF": {
	//     "lat": "7",
	//     "lng": "21",
	//     "fullName": "CENTRAL AFRICAN REPUBLIC"
	//   },
	//   "CD": {
	//     "lat": "0",
	//     "lng": "25",
	//     "fullName": "CONGO, THE DEMOCRATIC REPUBLIC OF THE"
	//   },
	//   "CZ": {
	//     "lat": "49.75",
	//     "lng": "15.5",
	//     "fullName": "CZECH REPUBLIC"
	//   },
	//   "CY": {
	//     "lat": "35",
	//     "lng": "33",
	//     "fullName": "CYPRUS"
	//   },
	//   "CX": {
	//     "lat": "-10.5",
	//     "lng": "105.6667",
	//     "fullName": "CHRISTMAS ISLAND"
	//   },
	//   "CR": {
	//     "lat": "10",
	//     "lng": "-84",
	//     "fullName": "COSTA RICA"
	//   },
	//   "CV": {
	//     "lat": "16",
	//     "lng": "-24",
	//     "fullName": "CAPE VERDE"
	//   },
	//   "CU": {
	//     "lat": "21.5",
	//     "lng": "-80",
	//     "fullName": "CUBA"
	//   },
	//   "SZ": {
	//     "lat": "-26.5",
	//     "lng": "31.5",
	//     "fullName": "SWAZILAND"
	//   },
	//   "SY": {
	//     "lat": "35",
	//     "lng": "38",
	//     "fullName": "SYRIAN ARAB REPUBLIC"
	//   },
	//   "KG": {
	//     "lat": "41",
	//     "lng": "75",
	//     "fullName": "KYRGYZSTAN"
	//   },
	//   "KE": {
	//     "lat": "1",
	//     "lng": "38",
	//     "fullName": "KENYA"
	//   },
	//   "SR": {
	//     "lat": "4",
	//     "lng": "-56",
	//     "fullName": "SURINAME"
	//   },
	//   "KI": {
	//     "lat": "1.4167",
	//     "lng": "173",
	//     "fullName": "KIRIBATI"
	//   },
	//   "KH": {
	//     "lat": "13",
	//     "lng": "105",
	//     "fullName": "CAMBODIA"
	//   },
	//   "SV": {
	//     "lat": "13.8333",
	//     "lng": "-88.9167",
	//     "fullName": "EL SALVADOR"
	//   },
	//   "KM": {
	//     "lat": "-12.1667",
	//     "lng": "44.25",
	//     "fullName": "COMOROS"
	//   },
	//   "ST": {
	//     "lat": "1",
	//     "lng": "7",
	//     "fullName": "SAO TOME AND PRINCIPE"
	//   },
	//   "SK": {
	//     "lat": "48.6667",
	//     "lng": "19.5",
	//     "fullName": "SLOVAKIA"
	//   },
	//   "KR": {
	//     "lat": "37",
	//     "lng": "127.5",
	//     "fullName": "KOREA, REPUBLIC OF"
	//   },
	//   "SI": {
	//     "lat": "46",
	//     "lng": "15",
	//     "fullName": "SLOVENIA"
	//   },
	//   "KP": {
	//     "lat": "40",
	//     "lng": "127",
	//     "fullName": "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF"
	//   },
	//   "KW": {
	//     "lat": "29.3375",
	//     "lng": "47.6581",
	//     "fullName": "KUWAIT"
	//   },
	//   "SN": {
	//     "lat": "14",
	//     "lng": "-14",
	//     "fullName": "SENEGAL"
	//   },
	//   "SM": {
	//     "lat": "43.7667",
	//     "lng": "12.4167",
	//     "fullName": "SAN MARINO"
	//   },
	//   "SL": {
	//     "lat": "8.5",
	//     "lng": "-11.5",
	//     "fullName": "SIERRA LEONE"
	//   },
	//   "SC": {
	//     "lat": "-4.5833",
	//     "lng": "55.6667",
	//     "fullName": "SEYCHELLES"
	//   },
	//   "KZ": {
	//     "lat": "48",
	//     "lng": "68",
	//     "fullName": "KAZAKHSTAN"
	//   },
	//   "KY": {
	//     "lat": "19.5",
	//     "lng": "-80.5",
	//     "fullName": "CAYMAN ISLANDS"
	//   },
	//   "SG": {
	//     "lat": "1.3667",
	//     "lng": "103.8",
	//     "fullName": "SINGAPORE"
	//   },
	//   "SE": {
	//     "lat": "62",
	//     "lng": "15",
	//     "fullName": "SWEDEN"
	//   },
	//   "SD": {
	//     "lat": "15",
	//     "lng": "30",
	//     "fullName": "SUDAN"
	//   },
	//   "DO": {
	//     "lat": "19",
	//     "lng": "-70.6667",
	//     "fullName": "DOMINICAN REPUBLIC"
	//   },
	//   "DM": {
	//     "lat": "15.4167",
	//     "lng": "-61.3333",
	//     "fullName": "DOMINICA"
	//   },
	//   "DJ": {
	//     "lat": "11.5",
	//     "lng": "43",
	//     "fullName": "DJIBOUTI"
	//   },
	//   "DK": {
	//     "lat": "56",
	//     "lng": "10",
	//     "fullName": "DENMARK"
	//   },
	//   "VG": {
	//     "lat": "18.5",
	//     "lng": "-64.5",
	//     "fullName": "VIRGIN ISLANDS, BRITISH"
	//   },
	//   "DE": {
	//     "lat": "51",
	//     "lng": "9",
	//     "fullName": "GERMANY"
	//   },
	//   "YE": {
	//     "lat": "15",
	//     "lng": "48",
	//     "fullName": "YEMEN"
	//   },
	//   "DZ": {
	//     "lat": "28",
	//     "lng": "3",
	//     "fullName": "ALGERIA"
	//   },
	//   "US": {
	//     "lat": "38",
	//     "lng": "-97",
	//     "fullName": "UNITED STATES"
	//   },
	//   "US1": {
	//     "lat": "45",
	//     "lng": "-108",
	//     "fullName": "UNITED STATES 1"
	//   },
	//   "US2": {
	//     "lat": "36",
	//     "lng": "-102",
	//     "fullName": "UNITED STATES 2"
	//   },
	//   "UY": {
	//     "lat": "-33",
	//     "lng": "-56",
	//     "fullName": "URUGUAY"
	//   },
	//   "YT": {
	//     "lat": "-12.8333",
	//     "lng": "45.1667",
	//     "fullName": "MAYOTTE"
	//   },
	//   "UM": {
	//     "lat": "19.2833",
	//     "lng": "166.6",
	//     "fullName": "UNITED STATES MINOR OUTLYING ISLANDS"
	//   },
	//   "LB": {
	//     "lat": "33.8333",
	//     "lng": "35.8333",
	//     "fullName": "LEBANON"
	//   },
	//   "LC": {
	//     "lat": "13.8833",
	//     "lng": "-61.1333",
	//     "fullName": "SAINT LUCIA"
	//   },
	//   "LA": {
	//     "lat": "18",
	//     "lng": "105",
	//     "fullName": "LAO PEOPLE'S DEMOCRATIC REPUBLIC"
	//   },
	//   "TV": {
	//     "lat": "-8",
	//     "lng": "178",
	//     "fullName": "TUVALU"
	//   },
	//   "TT": {
	//     "lat": "11",
	//     "lng": "-61",
	//     "fullName": "TRINIDAD AND TOBAGO"
	//   },
	//   "TR": {
	//     "lat": "39",
	//     "lng": "35",
	//     "fullName": "TURKEY"
	//   },
	//   "LK": {
	//     "lat": "7",
	//     "lng": "81",
	//     "fullName": "SRI LANKA"
	//   },
	//   "LI": {
	//     "lat": "47.1667",
	//     "lng": "9.5333",
	//     "fullName": "LIECHTENSTEIN"
	//   },
	//   "LV": {
	//     "lat": "57",
	//     "lng": "25",
	//     "fullName": "LATVIA"
	//   },
	//   "TO": {
	//     "lat": "-20",
	//     "lng": "-175",
	//     "fullName": "TONGA"
	//   },
	//   "LT": {
	//     "lat": "56",
	//     "lng": "24",
	//     "fullName": "LITHUANIA"
	//   },
	//   "LU": {
	//     "lat": "49.75",
	//     "lng": "6.1667",
	//     "fullName": "LUXEMBOURG"
	//   },
	//   "LR": {
	//     "lat": "6.5",
	//     "lng": "-9.5",
	//     "fullName": "LIBERIA"
	//   },
	//   "LS": {
	//     "lat": "-29.5",
	//     "lng": "28.5",
	//     "fullName": "LESOTHO"
	//   },
	//   "TH": {
	//     "lat": "15",
	//     "lng": "100",
	//     "fullName": "THAILAND"
	//   },
	//   "TF": {
	//     "lat": "-43",
	//     "lng": "67",
	//     "fullName": "FRENCH SOUTHERN TERRITORIES"
	//   },
	//   "TG": {
	//     "lat": "8",
	//     "lng": "1.1667",
	//     "fullName": "TOGO"
	//   },
	//   "TD": {
	//     "lat": "15",
	//     "lng": "19",
	//     "fullName": "CHAD"
	//   },
	//   "TC": {
	//     "lat": "21.75",
	//     "lng": "-71.5833",
	//     "fullName": "TURKS AND CAICOS ISLANDS"
	//   },
	//   "LY": {
	//     "lat": "25",
	//     "lng": "17",
	//     "fullName": "LIBYA"
	//   },
	//   "VA": {
	//     "lat": "41.9",
	//     "lng": "12.45",
	//     "fullName": "HOLY SEE (VATICAN CITY STATE)"
	//   },
	//   "VC": {
	//     "lat": "13.25",
	//     "lng": "-61.2",
	//     "fullName": "SAINT VINCENT AND THE GRENADINES"
	//   },
	//   "AE": {
	//     "lat": "24",
	//     "lng": "54",
	//     "fullName": "UNITED ARAB EMIRATES"
	//   },
	//   "AD": {
	//     "lat": "42.5",
	//     "lng": "1.6",
	//     "fullName": "ANDORRA"
	//   },
	//   "AG": {
	//     "lat": "17.05",
	//     "lng": "-61.8",
	//     "fullName": "ANTIGUA AND BARBUDA"
	//   },
	//   "AF": {
	//     "lat": "33",
	//     "lng": "65",
	//     "fullName": "AFGHANISTAN"
	//   },
	//   "AI": {
	//     "lat": "18.25",
	//     "lng": "-63.1667",
	//     "fullName": "ANGUILLA"
	//   },
	//   "VI": {
	//     "lat": "18.3333",
	//     "lng": "-64.8333",
	//     "fullName": "VIRGIN ISLANDS, U.S."
	//   },
	//   "IS": {
	//     "lat": "65",
	//     "lng": "-18",
	//     "fullName": "ICELAND"
	//   },
	//   "IR": {
	//     "lat": "32",
	//     "lng": "53",
	//     "fullName": "IRAN, ISLAMIC REPUBLIC OF"
	//   },
	//   "AM": {
	//     "lat": "40",
	//     "lng": "45",
	//     "fullName": "ARMENIA"
	//   },
	//   "AL": {
	//     "lat": "41",
	//     "lng": "20",
	//     "fullName": "ALBANIA"
	//   },
	//   "AO": {
	//     "lat": "-12.5",
	//     "lng": "18.5",
	//     "fullName": "ANGOLA"
	//   },
	//   "AN": {
	//     "lat": "12.25",
	//     "lng": "-68.75",
	//     "fullName": "Netherlands Antilles"
	//   },
	//   "AQ": {
	//     "lat": "-90",
	//     "lng": "0",
	//     "fullName": "ANTARCTICA"
	//   },
	//   "AS": {
	//     "lat": "-14.3333",
	//     "lng": "-170",
	//     "fullName": "AMERICAN SAMOA"
	//   },
	//   "AR": {
	//     "lat": "-34",
	//     "lng": "-64",
	//     "fullName": "ARGENTINA"
	//   },
	//   "AU": {
	//     "lat": "-27",
	//     "lng": "133",
	//     "fullName": "AUSTRALIA"
	//   },
	//   "AT": {
	//     "lat": "47.3333",
	//     "lng": "13.3333",
	//     "fullName": "AUSTRIA"
	//   },
	//   "IO": {
	//     "lat": "-6",
	//     "lng": "71.5",
	//     "fullName": "BRITISH INDIAN OCEAN TERRITORY"
	//   },
	//   "IN": {
	//     "lat": "20",
	//     "lng": "77",
	//     "fullName": "INDIA"
	//   },
	//   "TZ": {
	//     "lat": "-6",
	//     "lng": "35",
	//     "fullName": "TANZANIA, UNITED REPUBLIC OF"
	//   },
	//   "AZ": {
	//     "lat": "40.5",
	//     "lng": "47.5",
	//     "fullName": "AZERBAIJAN"
	//   },
	//   "IE": {
	//     "lat": "53",
	//     "lng": "-8",
	//     "fullName": "IRELAND"
	//   },
	//   "ID": {
	//     "lat": "-5",
	//     "lng": "120",
	//     "fullName": "INDONESIA"
	//   },
	//   "UA": {
	//     "lat": "49",
	//     "lng": "32",
	//     "fullName": "UKRAINE"
	//   },
	//   "QA": {
	//     "lat": "25.5",
	//     "lng": "51.25",
	//     "fullName": "QATAR"
	//   },
	//   "MZ": {
	//     "lat": "-18.25",
	//     "lng": "35",
	//     "fullName": "MOZAMBIQUE"
	//   },
	// }

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wmap\\mapData\\chinaGeoInfo.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wmap\\mapData\\chinaGeoInfo.js"); } } })();

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (config) {
	  return _react2.default.createElement(
	    'svg',
	    { version: '1.1', baseProfile: 'full', width: '64', height: '88', className: config.className, xmlns: 'http://www.w3.org/2000/svg' },
	    _react2.default.createElement(
	      'g',
	      { className: 'south-china-sea-group' },
	      _react2.default.createElement(
	        'text',
	        { className: 'south-china-sea-name', fill: config.fontColor, x: '30', y: '85', fontSize: '8' },
	        '\u5357\u6D77\u8BF8\u5C9B'
	      ),
	      _react2.default.createElement('path', { className: 'south-china-sea-land', fill: config.landColor, d: 'M55.9,0.8c0,0.6,0,0.4-0.2,1.1C55.4,3.1,56,2.8,56.5,4c0.4,0.8,0.2,0.4,0.9,0.8c0.7,0.4,0.9,0.5,0.9,1.2c0,0.6,0.2,0.8,0.6,0.7s0-1.1,0.2-1.9c0.2-0.9,0.6-1.2,1.1-2.2c0.2-0.5,0.3-1.4,0.4-1.7' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-land', fill: config.landColor, d: 'M10.9,10.6c0.3,0,0.6,0,0.6,0c0.4,0,0.7-0.1,1.2-0.2c0.6-0.2,1.6-0.2,2-0.2s0.7,0.1,0.3,0.5c-0.4,0.4,0.4,0.4,1,0.3c0.6-0.1,0.6-0.3,0.5-0.5c-0.1-0.3-0.2-0.5,0-0.7s0.3-0.3,0.5,0.4c0.2,0.6,0.8,0.4,1.1,0.6c0.3,0.2-0.4,0.5-0.7,1s-0.2,1.5,0.1,2.5c0.3,0.9,0.9,1.5,1.6,1.5s1.1-0.5,1.2-1s-0.3-1.2-0.5-1.2c-0.2-0.1-0.8-0.1-0.9-0.4c-0.1-0.3,0.2-0.7,0.6-0.7c0.4,0.1,0.4,0.4,0.8,0.4c0.4,0.1,0.2,0,0.3-0.4c0.1-0.6,0.8-1.1,1.2-1.2c2.6-0.7,2.6-0.7,2.6-0.7c0.9-0.3,1.6-1,2.2-0.9s0.9,0,1.4-0.1s1-1,1.3-1.4c0.4-0.4,0.7-0.4,1.1,0.1s0.8,0.2,1.2-0.1c0.4-0.3,0.2-1.3,0-1.8s0.1-0.8,0.5-1s0.4,0.3,1,0.7c0.5,0.4,0.5,0.8,0.1,1.2s-0.1,0.5,0.2,0.5c0.3,0,1.2,0.1,1.5-0.3c0.3-0.4-0.1-0.9-0.4-1.2s0.7-0.7,1.1-0.8s0.7-0.2,0.7,0.1S36.4,6,36.7,6s2.3-0.4,2.9-0.6c0.5-0.2,2.3-0.8,3-1.1s1-1.5,1.3-2.2c0.3-0.6,0.5-0.6,1-0.6c0.2,0,0.4-0.1,0.5-0.2C45.5,1.2,8.2,1.1,2,1C1.8,1,1.4,1,1.2,1C0.5,1,1.4,3.4,1.4,3.4l0,0c0,0-0.1-0.2,1.8,1.4c0.4,0.4,3.3-0.7,3.1,0.4c-0.8,4,0.8,4,1.4,4.4c0.4,0.3,1.2-0.1,1.6,0.1C9.9,10.1,10.4,10.4,10.9,10.6C10.6,10.5,10.8,10.6,10.9,10.6z M13.2,21.8c0,0-0.6-2.5,0.1-3s1.1-0.4,1.3-0.9c0.2-0.4,0.1-0.9,0.9-1.2c0.9-0.4,1.2-0.4,1.8-0.2c0.7,0.2,0.8,0.3,1.3,0s1.4-0.5,1.9-0.6S21.6,16,22,17c0.4,0.9,0.3,1.2-0.4,1.7c-0.7,0.4-1.2,0.9-1.2,1.7c0,0.9-0.4,1.4-0.8,1.3c-0.4-0.1-1.4,0.7-2.2,1.4c-0.7,0.6-1.2,0.4-2.1,0.1c-0.9-0.2-1.5-0.5-1.7-0.7C13.6,22.3,13.2,21.8,13.2,21.8' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-line', stroke: config.lineColor, fill: 'none', d: 'M1.1,3.2l0.2,0.1l0.6,0.4L1.7,4l1.1,0.6l1-0.2l1.5,0.2l1,0.6l-0.5,1L5.7,7.3v1.2l1.2,0.6l0.8,0.5L9.1,10l0.8-0.2l0.9,0.7 M14.8,31L14.8,31l1,0.9l1,1.3l0.6,1.2l1.3,4 M11.1,62.2L11.1,62.2l-0.7,2.3l0.2,3.5l0.3,2.3 M24.2,79.4L24.2,79.4l3-0.4l2.7-0.7l3.1-1.4 M41,66.6L41,66.6l5.5-6.2 M54.2,50L54.2,50l1.3-3.1l0.7-4.9 M60.5,12.5L60.5,12.5l2.8-5.2 M55,24.4L55,24.4l2.5-6.9 M55.2,35.7L55.2,35.7l-0.8-6.9 M19.7,44.8L19.7,44.8l-0.2,1.9l-0.2,1.6l-0.4,1.6l-0.8,2.5' }),
	      _react2.default.createElement('rect', { className: 'south-china-sea-box', stroke: config.boxColor, fill: 'none', x: '0.8', y: '0.8', width: '62.5', height: '87.3' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M16.9,63.3c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S16.9,63.6,16.9,63.3L16.9,63.3z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M41,58.5c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S41,58.9,41,58.5L41,58.5z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M35.2,62.5c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C34.9,63.2,35.2,62.8,35.2,62.5L35.2,62.5z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M34,51.9c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C33.7,52.6,34,52.3,34,51.9L34,51.9z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M46.9,46.9c0-0.4-0.3-0.7-0.7-0.7s-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S46.9,47.3,46.9,46.9L46.9,46.9z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M32.4,59.7c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S32.4,60.1,32.4,59.7L32.4,59.7z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M30.6,70c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C30.2,70.7,30.6,70.4,30.6,70L30.6,70z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M44.8,10.9c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C44.4,11.6,44.8,11.3,44.8,10.9L44.8,10.9z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M49.1,31.7c-0.3,0.3-0.3,0.7,0,1s0.7,0.3,1,0s0.3-0.7,0-1C49.8,31.4,49.4,31.4,49.1,31.7L49.1,31.7z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M25.1,25.8c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C24.7,26.6,25.1,26.2,25.1,25.8L25.1,25.8z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M29,29.8c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S29,30.2,29,29.8L29,29.8z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M24.1,31.2c0-0.4-0.3-0.7-0.7-0.7s-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S24.1,31.6,24.1,31.2L24.1,31.2z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M38.2,29c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C37.9,29.7,38.2,29.4,38.2,29L38.2,29z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M34,31.8c0,0.4,0.3,0.7,0.7,0.7s0.7-0.3,0.7-0.7s-0.3-0.7-0.7-0.7S34,31.4,34,31.8L34,31.8z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M51.7,49.1c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C51.4,49.8,51.7,49.5,51.7,49.1L51.7,49.1z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M37,47.1c0-0.4-0.3-0.7-0.7-0.7s-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7S37,47.5,37,47.1L37,47.1z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M38.2,53.1c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C37.9,53.8,38.2,53.5,38.2,53.1L38.2,53.1z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M25.1,62.9c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C24.7,63.6,25.1,63.2,25.1,62.9L25.1,62.9z' }),
	      _react2.default.createElement('path', { className: 'south-china-sea-island', fill: config.islandColor, d: 'M28,75.4c0-0.4-0.3-0.7-0.7-0.7c-0.4,0-0.7,0.3-0.7,0.7s0.3,0.7,0.7,0.7C27.7,76.1,28,75.8,28,75.4L28,75.4z' })
	    )
	  );
	};

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wmap\\mapData\\southChinaSea.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wmap\\mapData\\southChinaSea.jsx"); } } })();

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _common = __webpack_require__(8);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	var _platform = __webpack_require__(37);

	__webpack_require__(182);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wminicontainer';

	var Wminicontainer = (_temp = _class = function (_React$Component) {
	  _inherits(Wminicontainer, _React$Component);

	  function Wminicontainer(props) {
	    _classCallCheck(this, Wminicontainer);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wminicontainer.__proto__ || Object.getPrototypeOf(Wminicontainer)).call(this, props));

	    (0, _log2.default)('Wminicontainer', 'init');
	    return _this;
	  }

	  _createClass(Wminicontainer, [{
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props = this.props,
	          _props$height = _props.height,
	          height = _props$height === undefined ? 80 : _props$height,
	          className = _props.className,
	          status = _props.status,
	          style = _props.style,
	          otherProps = _objectWithoutProperties(_props, ['height', 'className', 'status', 'style']);

	      var mainClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, '' + prefix, true), _defineProperty(_classNames, prefix + '-mobile', (0, _platform.isMobileWithProps)(otherProps)), _defineProperty(_classNames, prefix + '-' + (0, _common.getStatusColorName)(status), !!status), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement(
	        'div',
	        _extends({ className: mainClasses, style: _extends({
	            minHeight: height,
	            height: height
	          }, style)
	        }, otherProps),
	        this.props.children
	      );
	    }
	  }]);

	  return Wminicontainer;
	}(_react2.default.Component), _class.displayName = 'Wminicontainer', _class.defaultProps = {
	  status: ''
	}, _temp);
	Wminicontainer.displayName = 'Wminicontainer';
	exports.default = Wminicontainer;


	Wminicontainer.propTypes = {
	  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wminicontainer\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wminicontainer\\index.jsx"); } } })();

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  colors: _index.color.category_12,
	  padding: [0, 0, 0, 0],
	  xAxis: {
	    type: 'time', // 默认为线性
	    mask: 'YYYY-MM-DD HH:mm:ss', // 上述type为time时，此字段生效
	    categories: null,
	    max: null,
	    min: null
	  },
	  yAxis: {
	    max: null,
	    min: null
	  },
	  tooltip: false,
	  area: false,
	  spline: false,
	  symbol: false
	  // dataConfig: {
	  //   nameKey: 'name',
	  //   valueKey: 'value',
	  //   // valueKey: ['value1', 'value2'],
	  //   typeKey: 'type'
	  // }
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);

	    // TODO 处理padding
	    return _extends({}, props, {
	      padding: props.padding || config.padding || defaultConfig.padding,
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = userConfig;

	    if (config.xAxis && config.xAxis.type === 'datetime') {
	      config.xAxis.type = 'time';
	    }

	    var defs = {
	      x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	        type: 'time',
	        // 折线图X轴的范围默认覆盖全部区域，保证没有空余
	        range: [0, 1]
	      }, config.xAxis),
	      type: {
	        type: 'cat'
	      }
	    };

	    if (Array.isArray(config.yAxis)) {
	      config.yAxis.forEach(function (axis, yIndex) {
	        defs['y' + yIndex] = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	          type: 'linear',
	          tickCount: 5
	        }, axis);
	      });
	    } else {
	      defs.y = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	        type: 'linear',
	        tickCount: 5
	      }, config.yAxis);
	    }

	    chart.source(data, defs);

	    chart.axis(false);

	    chart.legend(false);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config);

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    // 区域、堆叠、平滑曲线
	    var lineShape = config.spline ? 'smooth' : 'line';
	    var areaShape = config.spline ? 'smooth' : 'area';

	    drawLine(chart, config, lineShape, areaShape);

	    chart.render();
	  }
	};


	function drawLine(chart, config, lineShape, areaShape) {
	  var yAxisKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'y';

	  if (config.area && config.stack) {
	    chart.areaStack().position(['x', yAxisKey]).color('type', config.colors).shape(areaShape).active(false);
	    chart.lineStack().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).active(false).style({
	      lineJoin: 'round'
	    });
	  } else if (config.area && !config.stack) {
	    chart.area().position(['x', yAxisKey]).color('type', config.colors).shape(areaShape).active(false);
	    chart.line().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).active(false).style({
	      lineJoin: 'round'
	    });
	  } else {
	    chart.line().position(['x', yAxisKey]).color('type', config.colors).shape(lineShape).active(false).style({
	      lineJoin: 'round'
	    });
	  }
	  // 曲线默认点
	  if (config.symbol && config.area && config.stack) {
	    chart.point().adjust('stack').position(['x', yAxisKey]).color('type', config.colors).shape('circle').size(3).active(false);
	  } else if (config.symbol) {
	    chart.point().position(['x', yAxisKey]).color('type', config.colors).shape('circle').size(3).active(false);
	  }
	}
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wminiline\\G2MiniLine.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wminiline\\G2MiniLine.js"); } } })();

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 引入所需要的库和样式

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	__webpack_require__(183);

	var _common = __webpack_require__(8);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 建议将默认配置放在外层，方便后续维护
	var defaultConfig = {
	  padding: [20, 20, 40, 20],
	  colors: _index.color.category_12,
	  label: {
	    key: 'x'
	  },
	  legend: {
	    nameFormatter: null,
	    offsetX: 0,
	    offsetY: 0
	  },
	  tooltip: {
	    nameFormatter: null,
	    valueFormatter: null
	  }
	};

	// 对外暴露一个对象，除了init方法必选外，其余均为可选项，按组件需要选择性使用。
	// 方法运行时的this指向图表实例，所以可以在this上挂载需要保留的数据。
	exports.default = {
	  // 初始化前对props的预处理函数
	  beforeInit: function beforeInit(props) {
	    var config = props.config;
	    // TODO 处理padding

	    return _extends({}, props, {
	      padding: props.padding || config.padding || defaultConfig.padding
	    });
	  },

	  // 图表绘制主函数，必选
	  init: function init(chart, userConfig, data) {
	    var _this = this;

	    var config = (0, _merge2.default)({}, defaultConfig, userConfig);
	    chart.source(data);
	    chart.coord('polar');

	    // 设置图例
	    if (config.legend) {
	      chart.legend({
	        useHtml: true,
	        title: null,
	        offsetX: config.legend.offsetX || 0,
	        offsetY: config.legend.offsetY || 0,
	        position: 'bottom',
	        // 这个属性文档里没有，设置为false可以让图例不居中，再手动设置定位样式
	        // autoPosition: false,
	        onHover: _common.noop,
	        itemTpl: function itemTpl(value, itemColor, checked, index) {
	          var item = _this.rawData && _this.rawData[index] || {};
	          var result = config.legend.nameFormatter ? config.legend.nameFormatter(value, _extends({}, item, {
	            itemColor: itemColor,
	            checked: checked
	          }), index) : value;
	          return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + result + '</span></li>';
	        }
	        // 'g2-legend': Object.assign({
	        //   top: size.s3,
	        // }, config.legend.align === 'right' ? { right: 0 } : { left: 0 }),
	      });
	    } else {
	      chart.legend(false);
	    }

	    // tooltip
	    if (config.tooltip) {
	      var tooltipCfg = {
	        showTitle: false
	        // crosshairs: {},
	      };
	      chart.tooltip(tooltipCfg);
	      if (config.tooltip.nameFormatter || config.tooltip.valueFormatter) {
	        chart.on('tooltip:change', function (ev) {
	          ev.items.forEach(function (item, index) {
	            var raw = _this.rawData && _this.rawData[index] || {};

	            if (config.tooltip.valueFormatter) {
	              item.value = config.tooltip.valueFormatter(item.value, raw, index, ev.items);
	            }
	            if (config.tooltip.nameFormatter) {
	              item.name = config.tooltip.nameFormatter(item.name, raw, index, ev.items);
	            }
	          });
	        });
	      }
	    } else {
	      chart.tooltip(false);
	    }

	    if (config.axis) {
	      chart.axis('x', {
	        grid: {
	          align: 'center',
	          hideFirstLine: false,
	          hideLastLine: false
	        },
	        label: {
	          offset: 10,
	          autoRotate: true,
	          textStyle: {
	            textAlign: 'center'
	          }
	        }
	      });

	      chart.axis('y', {
	        tickLine: null,
	        label: null,
	        line: null
	      });
	    } else {
	      chart.axis(false);
	    }

	    var geom = chart.interval().position('x*y').color('x', config.colors).style({
	      lineWidth: 1,
	      stroke: _index.color.widgetsColorWhite
	    });

	    if (config.label) {
	      geom.label(config.label.key, {
	        offset: -15
	      });
	    }

	    chart.render();
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wnightingale\\G2-base.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wnightingale\\G2-base.js"); } } })();

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _arrow = __webpack_require__(64);

	var _arrow2 = _interopRequireDefault(_arrow);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	__webpack_require__(184);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wnumber';

	function getTrendIcon(trend) {
	  if (trend === 'raise') {
	    return _react2.default.createElement(_arrow2.default, { type: 'up' });
	  } else if (trend === 'drop') {
	    return _react2.default.createElement(_arrow2.default, { type: 'down' });
	  }
	}

	var Wnumber = (_temp = _class = function (_React$Component) {
	  _inherits(Wnumber, _React$Component);

	  function Wnumber(props) {
	    _classCallCheck(this, Wnumber);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wnumber.__proto__ || Object.getPrototypeOf(Wnumber)).call(this, props));

	    (0, _log2.default)('Wnumber', 'init');
	    return _this;
	  }

	  _createClass(Wnumber, [{
	    key: 'renderBottom',
	    value: function renderBottom() {
	      var bottomTitle = this.props.bottomTitle;
	      if (!!bottomTitle) {
	        return _react2.default.createElement(
	          'div',
	          { className: prefix + '-bottomTitle' },
	          bottomTitle
	        );
	      }
	    }
	  }, {
	    key: 'renderMain',
	    value: function renderMain() {
	      var _props = this.props,
	          status = _props.status,
	          unit = _props.unit,
	          numberTrend = _props.numberTrend,
	          rightRatioTrend = _props.rightRatioTrend,
	          rightTitle = _props.rightTitle,
	          rightRatio = _props.rightRatio;

	      var numberTrendIcon = getTrendIcon(numberTrend);
	      var numberClasses = prefix + '-number';

	      var rightRatioTrendIcon = getTrendIcon(rightRatioTrend);
	      var rightRatioTrendClasses = prefix + '-rightRatio ' + rightRatioTrend;

	      return _react2.default.createElement(
	        'div',
	        { className: prefix + '-main ' + numberTrend + ' ' + status },
	        numberTrend && _react2.default.createElement(
	          'span',
	          { className: prefix + '-leftIcon' },
	          numberTrendIcon
	        ),
	        _react2.default.createElement(
	          'span',
	          { className: numberClasses },
	          this.props.children
	        ),
	        unit && _react2.default.createElement(
	          'span',
	          { className: prefix + '-unit' },
	          unit
	        ),
	        rightTitle && _react2.default.createElement(
	          'span',
	          { className: prefix + '-rightTitle' },
	          rightTitle
	        ),
	        rightRatio && _react2.default.createElement(
	          'span',
	          { className: rightRatioTrendClasses },
	          rightRatioTrend && _react2.default.createElement(
	            'span',
	            { className: prefix + '-rightRatioIcon' },
	            rightRatioTrendIcon
	          ),
	          rightRatio
	        ),
	        this.props.trend && _react2.default.createElement(
	          'span',
	          { className: prefix + '-trend' },
	          this.props.trend()
	        )
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props2 = this.props,
	          className = _props2.className,
	          style = _props2.style,
	          otherProps = _objectWithoutProperties(_props2, ['className', 'style']);

	      var mainClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, '' + prefix, true), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement(
	        'div',
	        _extends({ className: mainClasses, style: style }, otherProps),
	        this.renderMain(),
	        this.renderBottom()
	      );
	    }
	  }]);

	  return Wnumber;
	}(_react2.default.Component), _class.displayName = 'Wnumber', _class.defaultProps = {
	  numberTrend: '',
	  rightRatioTrend: '',
	  status: ''
	}, _temp);
	Wnumber.displayName = 'Wnumber';
	exports.default = Wnumber;


	Wnumber.propTypes = {
	  bottomTitle: _propTypes2.default.node,
	  unit: _propTypes2.default.node,
	  trend: _propTypes2.default.func
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wnumber\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wnumber\\index.jsx"); } } })();

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	__webpack_require__(185);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wperline';

	var Wperline = (_temp = _class = function (_React$Component) {
	  _inherits(Wperline, _React$Component);

	  function Wperline(props) {
	    _classCallCheck(this, Wperline);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wperline.__proto__ || Object.getPrototypeOf(Wperline)).call(this, props));

	    (0, _log2.default)('Wperline', 'init');
	    return _this;
	  }

	  _createClass(Wperline, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          style = _props.style,
	          percent = _props.percent,
	          status = _props.status,
	          others = _objectWithoutProperties(_props, ['className', 'style', 'percent', 'status']);

	      var barStyle = { width: percent + '%' };
	      var textStyle = {};

	      if (percent < 15) {
	        textStyle.marginRight = 0;
	        textStyle.marginLeft = '100%';
	        textStyle.paddingLeft = 7;
	      }

	      var cls = (0, _classnames2.default)(prefix, prefix + '-status-' + status, className);

	      return _react2.default.createElement(
	        'div',
	        _extends({ className: cls, style: style }, others),
	        _react2.default.createElement(
	          'div',
	          { className: prefix + '-num', style: barStyle },
	          _react2.default.createElement(
	            'span',
	            { style: textStyle },
	            percent,
	            '%'
	          )
	        )
	      );
	    }
	  }]);

	  return Wperline;
	}(_react2.default.Component), _class.displayName = 'Wperline', _class.defaultProps = {
	  percent: 0,
	  status: ''
	}, _temp);
	Wperline.displayName = 'Wperline';
	exports.default = Wperline;


	Wperline.propTypes = {
	  percent: _propTypes2.default.number,
	  status: _propTypes2.default.string
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wperline\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wperline\\index.jsx"); } } })();

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	__webpack_require__(186);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  colors: _index.color.category_12,
	  padding: [20, 20, 20, 20],
	  legend: {
	    // position: 'right',
	    nameFormatter: null, // 可以强制覆盖，手动设置label
	    valueFormatter: null
	  },
	  tooltip: {
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  autoSort: true,
	  cycle: false,
	  innerRadius: 0.8, // 内环半径大小，仅cycle为true时可用
	  outerRadius: 0.8 // 饼图半径大小，初始化时可用
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var element = this.chartDom;
	    var padding = props.padding || config.padding || defaultConfig.padding;
	    var outerRadius = Math.max(Math.min(config.outerRadius || defaultConfig.outerRadius, 1), 0.01);

	    var boxHeight = element.offsetHeight - padding[0] - padding[2];
	    var boxWidth = element.offsetWidth - padding[1] - padding[3];
	    // 饼本体大小，向下取整
	    var diameter = Math.floor(boxHeight < boxWidth ? boxHeight * outerRadius : boxWidth * outerRadius);

	    element.style.paddingTop = padding[0] + 'px';
	    element.style.paddingRight = padding[1] + 'px';
	    element.style.paddingBottom = padding[2] + 'px';
	    element.style.paddingLeft = padding[3] + 'px';

	    this.childrenDom = element.querySelector('.aisc-widgets-children');
	    if (this.childrenDom) {
	      this.childrenDom.style.width = diameter + 'px';
	      this.childrenDom.style.height = boxHeight + 'px';
	    }

	    // TODO 处理padding
	    return _extends({}, props, {
	      width: diameter,
	      height: diameter,
	      // forceFit: true,
	      padding: 0
	    });
	  },
	  changeSize: function changeSize(chart, config, w, h) {
	    var padding = config.padding || defaultConfig.padding;
	    var outerRadius = Math.max(Math.min(config.outerRadius || defaultConfig.outerRadius, 1), 0.01);

	    var boxHeight = h - padding[0] - padding[2];
	    var boxWidth = w - padding[1] - padding[3];
	    // 饼本体大小，向下取整
	    var diameter = Math.floor(boxHeight < boxWidth ? boxHeight * outerRadius : boxWidth * outerRadius);

	    if (this.childrenDom) {
	      this.childrenDom.style.width = diameter + 'px';
	      this.childrenDom.style.height = boxHeight + 'px';
	    }

	    chart.changeSize(diameter, diameter);
	  },
	  changeData: function changeData(chart, config, data) {
	    // 更新数据总和值，保证百分比的正常
	    var totalData = 0;
	    data.forEach(function (d) {
	      totalData += d.y;
	    });
	    this.totalData = totalData;

	    // 不要忘记排序的状态
	    if (config.autoSort) {
	      data.sort(function (a, b) {
	        return b.y - a.y;
	      });
	    }
	    // 更新挂载的转换数据
	    this.data = data;

	    chart.changeData(data);
	  },
	  init: function init(chart, userConfig, data) {
	    var _this = this;

	    var config = (0, _merge2.default)({}, defaultConfig, userConfig);

	    var defs = {
	      type: {
	        type: 'cat'
	      }
	    };

	    if (config.autoSort) {
	      data.sort(function (a, b) {
	        return b.y - a.y;
	      });
	    }
	    // 挂载转换后的数据
	    this.data = data;

	    chart.source(data, defs);

	    // 重要：绘制饼图时，必须声明 theta 坐标系
	    var thetaConfig = {
	      radius: 1 // 设置饼图的为100% 大小，具体大小改变在 beforeInit 中diameter的值，目前为0.8
	    };
	    if (config.cycle) {
	      thetaConfig.innerRadius = Math.max(Math.min(config.innerRadius, 1), 0);
	    }
	    chart.coord('theta', thetaConfig);

	    // 计算得总数据
	    var totalData = 0;
	    data.forEach(function (d) {
	      totalData += d.y;
	    });
	    this.totalData = totalData;

	    // 设置图例
	    _rectLegend2.default.call(this, chart, config, {
	      autoCollapse: false,
	      position: 'right',
	      itemTpl: function itemTpl(value, itemColor, checked, index) {
	        var _ref = config.legend || {},
	            nameFormatter = _ref.nameFormatter,
	            valueFormatter = _ref.valueFormatter,
	            _ref$showData = _ref.showData,
	            showData = _ref$showData === undefined ? true : _ref$showData;

	        var item = _this.data && _this.data[index] || {};
	        var raw = _this.rawData && _this.rawData[0] || {};
	        var percent = (0, _common.numberDecimal)(item.y / _this.totalData, 4);

	        var result = nameFormatter ? nameFormatter(value, _extends({}, raw, {
	          percent: percent,
	          itemColor: itemColor,
	          checked: checked
	        }), index) : value;

	        if (showData) {
	          var number = valueFormatter ? valueFormatter(item.y, _extends({}, raw, {
	            percent: percent,
	            itemColor: itemColor,
	            checked: checked
	          }), index) : item.y;
	          return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + result + '</span>' + ('<span class="g2-legend-value">' + number + '</span></li>');
	        }

	        return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + result + '</span></li>';
	      },
	      'g2-legend': {
	        position: 'static',
	        marginLeft: _index.size.s5 // inline flex items 不能使用百分比的margin/padding，先改为固定大小
	      }
	    }, true);

	    // tooltip
	    if (config.tooltip) {
	      var tooltipCfg = {
	        showTitle: false
	        // crosshairs: {},
	      };
	      chart.tooltip(tooltipCfg);
	      if (config.tooltip.nameFormatter || config.tooltip.valueFormatter) {
	        chart.on('tooltip:change', function (ev) {
	          var raw = _this.rawData && _this.rawData[0] || {};

	          ev.items.forEach(function (item, index) {
	            var percent = (0, _common.numberDecimal)(item.value / _this.totalData, 4);

	            if (config.tooltip.valueFormatter) {
	              item.value = config.tooltip.valueFormatter(item.value, _extends({}, raw, {
	                percent: percent
	              }), index, ev.items);
	            }
	            if (config.tooltip.nameFormatter) {
	              item.name = config.tooltip.nameFormatter(item.name, _extends({}, raw, {
	                percent: percent
	              }), index, ev.items);
	            }
	          });
	        });
	      }
	    } else {
	      chart.tooltip(false);
	    }

	    // 下面这一句注释我还没看懂。
	    // position若直接使用value导致图例点击某项隐藏，余下展示不为值和不为1
	    chart.intervalStack().position('y').color('x', config.colors).select(false);

	    chart.render();
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wpie\\G2Pie.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wpie\\G2Pie.js"); } } })();

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	var _locale = __webpack_require__(226);

	var _locale2 = _interopRequireDefault(_locale);

	__webpack_require__(187);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wplaceholder';

	// 默认显示的图标
	var svgWidth = 36,
	    svgHeight = 32,
	    itemHeight1 = 20,
	    itemHeight2 = 26,
	    itemHeight3 = 32;
	var svg = _react2.default.createElement(
	  'svg',
	  { width: svgWidth, height: svgHeight, className: 'placeholder-box' },
	  _react2.default.createElement('rect', { className: 'placeholder-item item-1', width: '8', height: itemHeight1, x: '0', y: svgHeight - itemHeight1 }),
	  _react2.default.createElement('rect', { className: 'placeholder-item item-2', width: '8', height: itemHeight3, x: '14', y: svgHeight - itemHeight3 }),
	  _react2.default.createElement('rect', { className: 'placeholder-item item-3', width: '8', height: itemHeight2, x: '28', y: svgHeight - itemHeight2 })
	);

	// 异常状态显示的图标
	var errorSvg = _react2.default.createElement(
	  'svg',
	  { width: '43px', height: '36px', viewBox: '0 0 43 36' },
	  _react2.default.createElement('rect', { className: 'placeholder-item', x: '0', y: '12', width: '8', height: '20' }),
	  _react2.default.createElement('path', { className: 'placeholder-item', d: 'M21,16.0139985 C19.1238002,18.3325877 18,21.285055 18,24.5 C18,27.27522 18.8374075,29.8548529 20.2733236,32 L13,32 L13,0 L21,0 L21,16.0139985 Z' }),
	  _react2.default.createElement('path', { className: 'placeholder-item', d: 'M34,11.2310283 C33.1898394,11.0793314 32.3541841,11 31.5,11 C29.5412332,11 27.6799005,11.4171646 26,12.1674956 L26,5 L34,5 L34,11.2310283 Z' }),
	  _react2.default.createElement('path', { className: 'placeholder-item', d: 'M31.5,36 C25.1487254,36 20,30.8512746 20,24.5 C20,18.1487254 25.1487254,13 31.5,13 C37.8512746,13 43,18.1487254 43,24.5 C43,30.8512746 37.8512746,36 31.5,36 Z M31.5,34 C36.7467051,34 41,29.7467051 41,24.5 C41,19.2532949 36.7467051,15 31.5,15 C26.2532949,15 22,19.2532949 22,24.5 C22,29.7467051 26.2532949,34 31.5,34 Z', 'fill-rule': 'nonzero' }),
	  _react2.default.createElement('rect', { className: 'placeholder-item', x: '30', y: '17', width: '3', height: '9' }),
	  _react2.default.createElement('rect', { className: 'placeholder-item', x: '30', y: '28', width: '3', height: '3' })
	);

	// 获取显示文案
	function getLocaleText() {
	  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var loading = arguments[1];
	  var error = arguments[2];

	  // 优先取error状态
	  if (error) {
	    return locale.error;
	  }
	  // 其次取loading状态
	  if (loading) {
	    return locale.loading;
	  }
	}

	var Wplaceholder = (_temp = _class = function (_React$Component) {
	  _inherits(Wplaceholder, _React$Component);

	  function Wplaceholder(props) {
	    _classCallCheck(this, Wplaceholder);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wplaceholder.__proto__ || Object.getPrototypeOf(Wplaceholder)).call(this, props));

	    (0, _log2.default)('Wplaceholder', 'init');
	    return _this;
	  }

	  _createClass(Wplaceholder, [{
	    key: 'renderText',
	    value: function renderText(loading, error) {
	      var _props = this.props,
	          locale = _props.locale,
	          language = _props.language,
	          children = _props.children;
	      // text 优先判断传入的locale，其次判断传入的language，最后取中文locale

	      var text = getLocaleText(locale || _locale2.default[language] || _locale2.default['zh-cn'], loading, error) || '';
	      if (children) {
	        // 优先渲染children
	        return _react2.default.createElement(
	          'div',
	          { className: prefix + '-children-text' },
	          children
	        );
	      } else if (text) {
	        return _react2.default.createElement(
	          'div',
	          { className: prefix + '-children-text' },
	          text
	        );
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props2 = this.props,
	          className = _props2.className,
	          _props2$height = _props2.height,
	          height = _props2$height === undefined ? '100%' : _props2$height,
	          style = _props2.style,
	          loading = _props2.loading,
	          error = _props2.error,
	          otherProps = _objectWithoutProperties(_props2, ['className', 'height', 'style', 'loading', 'error']);

	      var mainClasses = (0, _classnames2.default)(prefix, (_classNames = {}, _defineProperty(_classNames, prefix + '-loading', !error && !!loading), _defineProperty(_classNames, prefix + '-error', !!error), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement(
	        'div',
	        _extends({ className: mainClasses,
	          style: _extends({
	            height: height
	          }, style)
	        }, otherProps),
	        _react2.default.createElement(
	          'div',
	          { className: prefix + '-children' },
	          error ? errorSvg : svg,
	          this.renderText(loading, error)
	        )
	      );
	    }
	  }]);

	  return Wplaceholder;
	}(_react2.default.Component), _class.displayName = 'Wplaceholder', _temp);
	Wplaceholder.displayName = 'Wplaceholder';
	exports.default = Wplaceholder;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wplaceholder\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wplaceholder\\index.jsx"); } } })();

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Created by Maplor on 2018/3/22.
	 */

	exports.default = {
	  'zh-cn': {
	    loading: '加载中...',
	    error: '数据异常',
	    empty: '无数据'
	  },
	  'en-us': {
	    loading: 'Loading...',
	    error: 'Error',
	    empty: 'No data'
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wplaceholder\\locale.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wplaceholder\\locale.js"); } } })();

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 引入所需要的库和样式

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	__webpack_require__(188);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 建议将默认配置放在外层，方便后续维护
	var defaultConfig = {
	  padding: [20, 20, 40, 20],
	  colors: _index.color.category_12,
	  xAxis: {
	    labelFormatter: null // 可以强制覆盖，手动设置label
	  },
	  yAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    max: 100,
	    min: 0
	  },
	  radius: 0.8,
	  area: false,
	  symbol: false,
	  // stack: false,
	  legend: {
	    nameFormatter: null,
	    offsetX: 0,
	    offsetY: 0
	  },
	  tooltip: {
	    titleFormatter: null,
	    nameFormatter: null,
	    valueFormatter: null
	  }
	};

	// 对外暴露一个对象，除了init方法必选外，其余均为可选项，按组件需要选择性使用。
	// 方法运行时的this指向图表实例，所以可以在this上挂载需要保留的数据。
	exports.default = {
	  // 初始化前对props的预处理函数
	  beforeInit: function beforeInit(props) {
	    var config = props.config;
	    // TODO 处理padding

	    return _extends({}, props, {
	      padding: props.padding || config.padding || defaultConfig.padding
	    });
	  },

	  // 图表绘制主函数，必选
	  init: function init(chart, userConfig, data) {
	    var _this = this;

	    var config = (0, _merge2.default)({}, defaultConfig, userConfig);

	    var defs = {
	      type: {
	        type: 'cat'
	      }
	    };

	    defs.y = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	      type: 'linear',
	      tickCount: 5
	    }, config.yAxis);

	    chart.source(data, defs);

	    chart.coord('polar', {
	      radius: config.radius
	    });

	    chart.axis('x', {
	      label: {
	        formatter: config.xAxis.labelFormatter
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        lineStyle: {
	          lineDash: null
	        }
	        //hideFirstLine: false
	      }
	    });
	    chart.axis('y', {
	      label: {
	        offset: 8,
	        textStyle: {
	          fill: _index.color.widgetsAxisLabel,
	          textAlign: 'right' // 文本右对齐
	        },
	        htmlTemplate: function htmlTemplate(text, item, index) {
	          if (config.yAxis.labelFormatter) {
	            return config.yAxis.labelFormatter(text, item, index);
	          }
	          return text;
	        }
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        type: 'polygon',
	        lineStyle: {
	          lineDash: null
	        }
	      }
	    });

	    // 设置图例
	    if (config.legend) {
	      chart.legend({
	        useHtml: true,
	        title: null,
	        offsetX: config.legend.offsetX || 0,
	        offsetY: config.legend.offsetY || 0,
	        position: 'bottom',
	        // 这个属性文档里没有，设置为false可以让图例不居中，再手动设置定位样式
	        // autoPosition: false,
	        onHover: _common.noop,
	        itemTpl: function itemTpl(value, itemColor, checked, index) {
	          var item = _this.rawData && _this.rawData[index] || {};
	          var result = config.legend.nameFormatter ? config.legend.nameFormatter(value, _extends({}, item, {
	            itemColor: itemColor,
	            checked: checked
	          }), index) : value;
	          return '' + ('<li class="g2-legend-list-item item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="g2-legend-marker" style="background-color:{color};"></i>' + '<span class="g2-legend-text">') + result + '</span></li>';
	        }
	        // 'g2-legend': Object.assign({
	        //   top: size.s3,
	        // }, config.legend.align === 'right' ? { right: 0 } : { left: 0 }),
	      });
	    } else {
	      chart.legend(false);
	    }

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config, {
	      crosshairs: null
	    });

	    if (config.area && config.stack) {
	      chart.areaStack().position('x*y').color('type', config.colors).active(false);
	      chart.lineStack().position('x*y').color('type', config.colors).style({
	        lineJoin: 'round'
	      });
	    } else if (config.area && !config.stack) {
	      chart.area().position('x*y').color('type', config.colors).active(false);
	      chart.line().position('x*y').color('type', config.colors).style({
	        lineJoin: 'round'
	      });
	    } else {
	      chart.line().position('x*y').color('type', config.colors).style({
	        lineJoin: 'round'
	      });
	    }
	    // 曲线默认点
	    if (config.symbol && config.area && config.stack) {
	      chart.point().adjust('stack').position('x*y').color('type', config.colors).shape('circle').size(3).active(false);
	    } else if (config.symbol) {
	      chart.point().position('x*y').color('type', config.colors).shape('circle').size(3).active(false);
	    }

	    chart.render();
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wradar\\G2Radar.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wradar\\G2Radar.js"); } } })();

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _dataSet = __webpack_require__(31);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectXAxis = __webpack_require__(29);

	var _rectXAxis2 = _interopRequireDefault(_rectXAxis);

	var _rectYAxis = __webpack_require__(30);

	var _rectYAxis2 = _interopRequireDefault(_rectYAxis);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	__webpack_require__(189);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  // 这里需要倒序排列
	  colors: _index.color.order_10.slice().reverse(),
	  padding: [40, 10, 32, 44],
	  xAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    autoRotate: false,
	    max: null,
	    min: null
	  },
	  yAxis: {
	    labelFormatter: null, // 可以强制覆盖，手动设置label
	    max: null,
	    min: null
	  },
	  tooltip: {
	    nameFormatter: null,
	    valueFormatter: null
	  },
	  bin: {
	    fields: ['x', 'y'],
	    bins: [20, 10] // 两个方向上的分箱个数
	    // binWidth: [ 10, 1000 ],    // 两个方向上的分箱步长（会覆盖bins的配置）
	    // offset: [ 0, 0 ],

	  },
	  grid: false
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var newConfig = (0, _merge2.default)({}, defaultConfig, config);

	    // TODO 处理padding
	    // let defaultPaddingTop = defaultConfig.padding[0];
	    // let defaultPaddingRight = defaultConfig.padding[1];
	    // const defaultPaddingBottom = defaultConfig.padding[2];
	    // const defaultPaddingLeft = defaultConfig.padding[3];
	    // if (defaultPaddingRight !== 'auto' && Array.isArray(newConfig.yAxis)) {
	    //   defaultPaddingRight = 44;
	    // }
	    // if (defaultPaddingTop !== 'auto' && !newConfig.legend) {
	    //   defaultPaddingTop = 16;
	    // }
	    return _extends({}, props, {
	      padding: props.padding || config.padding || defaultConfig.padding,
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = userConfig;

	    var ds = new _dataSet.DataSet();
	    var rectangleDataView = ds.createView('diamond').source(data).transform((0, _common.propertyAssign)(['fields', 'bins', 'binWidth', 'offset', 'sizeByCount'], {
	      type: 'bin.rectangle'
	    }, config.bin));

	    this.rectangleDataView = rectangleDataView;

	    var defs = {
	      x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	        // 折线图X轴的范围默认覆盖全部区域，保证没有空余
	        range: [0, 1]
	      }, config.xAxis),
	      y: (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	        type: 'linear',
	        tickCount: 5
	      }, config.yAxis),
	      type: {
	        type: 'cat'
	      }
	    };

	    chart.source(rectangleDataView, defs);

	    // 设置X轴
	    _rectXAxis2.default.call(this, chart, config);

	    // 设置单个Y轴
	    _rectYAxis2.default.call(this, chart, config);

	    // 设置图例
	    chart.legend(false);
	    // rectLegend.call(this, chart, config);

	    // tooltip
	    _rectTooltip2.default.call(this, chart, config, {
	      showTitle: false,
	      crosshairs: null
	    });

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    chart.polygon().position('x*y').color('count', config.colors).tooltip('x*y*count', function (x, y, count) {
	      return {
	        // title: x,
	        name: '数量',
	        value: count
	      };
	    });

	    chart.render();
	  },
	  changeData: function changeData(chart, newConfig, data) {
	    if (this.rectangleDataView) {
	      this.rectangleDataView.source(data);
	    }
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wrectangle\\G2Rectangle.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wrectangle\\G2Rectangle.js"); } } })();

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _dataSet = __webpack_require__(31);

	var _index = __webpack_require__(9);

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	__webpack_require__(190);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultConfig = {
	  padding: ['auto', 40, 'auto', 'auto'],
	  legend: {
	    align: 'left',
	    nameFormatter: null //可以强制覆盖，手动设置label
	  },
	  tooltip: {
	    nameFormatter: null
	  },
	  labels: true
	  // textStyle: {
	  //   fill: '#545454',
	  //   textAlign: 'start'
	  // }
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;
	    // TODO 处理padding

	    return _extends({}, props, {
	      padding: props.padding || config.padding || defaultConfig.padding
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = (0, _merge2.default)({}, defaultConfig, userConfig);
	    var ds = new _dataSet.DataSet();
	    var dv = ds.createView().source(data, {
	      type: 'graph',
	      edges: function edges(d) {
	        return d.links;
	      }
	    });
	    dv.transform({
	      type: 'diagram.sankey'
	    });

	    chart.legend(config.legend);
	    chart.tooltip({
	      showTitle: false
	    });
	    chart.axis(false);
	    chart.scale({
	      x: { sync: true },
	      y: { sync: true }
	    });

	    // edge view
	    var edgeView = chart.view();
	    edgeView.source(dv.edges);
	    edgeView.edge().position('x*y').shape('arc').color(_index.color.widgetsSankeyEdge).opacity(0.5).tooltip('target*source*value', config.tooltip.nameFormatter);

	    // node view
	    var nodeView = chart.view();
	    nodeView.source(dv.nodes);

	    var nodeGeom = nodeView.polygon().position('x*y') // nodes数据的x、y由layout方法计算得出
	    .color('name').tooltip(false).style({
	      stroke: 'transparent'
	    });

	    if (config.labels) {
	      nodeGeom.label('name', {
	        textStyle: {
	          fill: _index.color.widgetsSankeyNodeText,
	          textAlign: 'start'
	        },
	        offset: 0,
	        formatter: function formatter(v) {
	          return '    ' + v;
	        }
	      });
	    }

	    chart.render();
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wsankey\\G2Sankey.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wsankey\\G2Sankey.js"); } } })();

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// 引入所需要的库和样式

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _index = __webpack_require__(9);

	var _common = __webpack_require__(8);

	var _rectXAxis = __webpack_require__(29);

	var _rectXAxis2 = _interopRequireDefault(_rectXAxis);

	var _rectYAxis = __webpack_require__(30);

	var _rectYAxis2 = _interopRequireDefault(_rectYAxis);

	var _rectLegend = __webpack_require__(21);

	var _rectLegend2 = _interopRequireDefault(_rectLegend);

	var _guide = __webpack_require__(20);

	var _guide2 = _interopRequireDefault(_guide);

	var _rectTooltip = __webpack_require__(18);

	var _rectTooltip2 = _interopRequireDefault(_rectTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 建议将默认配置放在外层，方便后续维护
	var defaultConfig = {
	  padding: [40, 5, 32, 44],
	  colors: _index.color.category_12,
	  xAxis: {
	    type: 'linear',
	    mask: 'YYYY-MM-DD HH:mm:ss',
	    autoRotate: false
	  },
	  yAxis: {
	    min: 0
	  },
	  jitter: false,
	  tooltip: true,
	  legend: true
	};

	var setAxis = function setAxis(chart, config) {
	  // 设置X轴
	  var xAxis = {};

	  if (config.jitter) {
	    xAxis.grid = {
	      align: 'center', // 网格顶点从两个刻度中间开始
	      lineStyle: {
	        stroke: _index.color.widgetsAxisGrid,
	        lineWidth: 1
	        // lineDash: [3, 3]
	      }
	    };
	  }

	  // 扰动点图不能打开垂直网格线
	  if (config.grid && !config.jitter) {
	    xAxis.grid = {
	      lineStyle: {
	        stroke: _index.color.widgetsAxisGrid,
	        lineWidth: 1
	      }
	    };
	  }

	  _rectXAxis2.default.call(undefined, chart, config, xAxis);

	  // 设置单个Y轴
	  _rectYAxis2.default.call(undefined, chart, config);
	};

	var setSource = function setSource(chart, config, data) {
	  var defs = {
	    x: (0, _common.propertyAssign)(_common.propertyMap.xAxis, {
	      type: config.jitter ? 'cat' : 'linear'
	    }, config.xAxis),
	    type: {
	      type: 'cat'
	    }
	  };

	  defs.y = (0, _common.propertyAssign)(_common.propertyMap.yAxis, {
	    type: 'linear',
	    tickCount: 5
	  }, config.yAxis);

	  chart.source(data, defs);
	};

	var chartRender = function chartRender(chart, config) {
	  var geom = chart.point().color('type', config.colors).position('x*y').size(4).shape('circle').active(false);

	  if (config.jitter) {
	    geom.adjust('jitter');
	  }

	  chart.render();
	};

	exports.default = {
	  beforeInit: function beforeInit(props) {
	    var config = props.config;

	    var preConfig = {};
	    if (config.jitter) {
	      preConfig.xAxis = {
	        type: 'cat'
	      };
	    }
	    var newConfig = (0, _merge2.default)({}, defaultConfig, preConfig, config);

	    return _extends({}, props, {
	      padding: props.padding || config.padding || (newConfig.legend ? defaultConfig.padding : [16, 5, 32, 44]),
	      config: newConfig
	    });
	  },
	  init: function init(chart, userConfig, data) {
	    var config = userConfig;
	    setSource(chart, config, data);

	    setAxis(chart, config);

	    _rectTooltip2.default.call(this, chart, config, {
	      crosshairs: null
	    });

	    _rectLegend2.default.call(this, chart, config);

	    // 绘制辅助线，辅助背景区域
	    (0, _guide2.default)(chart, config);

	    chartRender(chart, config);
	  }
	};
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wscatter\\G2Scatter.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wscatter\\G2Scatter.js"); } } })();

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;
	// 暂时无需样式
	// import './index.scss';

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _classnames = __webpack_require__(13);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _log = __webpack_require__(15);

	var _log2 = _interopRequireDefault(_log);

	var _shoot = __webpack_require__(232);

	var _shoot2 = _interopRequireDefault(_shoot);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var prefix = 'aisc-wshoot';

	var Wshoot = (_temp = _class = function (_React$Component) {
	  _inherits(Wshoot, _React$Component);

	  function Wshoot(props) {
	    _classCallCheck(this, Wshoot);

	    // 图表初始化时记录日志
	    var _this = _possibleConstructorReturn(this, (Wshoot.__proto__ || Object.getPrototypeOf(Wshoot)).call(this, props));

	    _this.canvas = null;
	    _this.shoot = null;
	    (0, _log2.default)('Wshoot', 'init');
	    return _this;
	  }

	  _createClass(Wshoot, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          width = _props.width,
	          height = _props.height,
	          config = _props.config;

	      this.shoot = new _shoot2.default(this.canvas, {}, _extends({
	        width: width,
	        height: height
	      }, config));
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var newData = nextProps.data;
	      var oldData = this.props.data;
	      if (newData !== oldData) {
	        this.shoot.draw(newData);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.shoot && this.shoot.destroy();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames,
	          _this2 = this;

	      var _props2 = this.props,
	          className = _props2.className,
	          otherProps = _objectWithoutProperties(_props2, ['className']);

	      var mainClasses = (0, _classnames2.default)((_classNames = {}, _defineProperty(_classNames, '' + prefix, true), _defineProperty(_classNames, className, !!className), _classNames));

	      return _react2.default.createElement('canvas', _extends({ className: mainClasses }, otherProps, { ref: function ref(c) {
	          return _this2.canvas = c;
	        } }));
	    }
	  }]);

	  return Wshoot;
	}(_react2.default.Component), _class.displayName = 'Wshoot', _class.propTypes = {
	  config: _propTypes2.default.object,
	  data: _propTypes2.default.array
	}, _class.defaultProps = {
	  width: 800,
	  height: 600,
	  config: {},
	  data: []
	}, _temp);
	Wshoot.displayName = 'Wshoot';
	exports.default = Wshoot;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wshoot\\index.jsx"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wshoot\\index.jsx"); } } })();

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _merge = __webpack_require__(10);

	var _merge2 = _interopRequireDefault(_merge);

	var _tween = __webpack_require__(199);

	var _tween2 = _interopRequireDefault(_tween);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var uniqueId = 0;
	function generateUniqueId() {
	  return 'shoot-' + uniqueId++;
	}

	var PI = 2 * Math.PI;

	function Shoot(canvas, map, config) {
	  this.uuid = generateUniqueId();
	  this.map = map;
	  this.config = (0, _merge2.default)({
	    autoUpdate: true,
	    maxFps: 60,
	    interval: 10000, // 单次飞线总时间
	    dTime: 4000, // 单条飞线预计的时间
	    // batch: false,
	    shootTime: { // 飞行过程中的各个时间 值域[0, 1]
	      fromTime: 0, // 出发时间（瞬时）
	      fromStop: 0.4, // 出发点保留时间（持续）
	      fromFade: 0.1, // 出发点消失所用时间（持续）
	      toBegin: 0.3, // 到达目标点的时间（瞬时）
	      toTime: 0.1, // 到达点显示所用时间（持续）
	      toStop: 0, // 到达点停留持续时间（持续）
	      toFade: 0.1 // 到达点消失所用时间（持续）
	    },
	    fromRadius: 3, // 出发点半径
	    toRadius: 3, // 到达点半径
	    fromBorder: 1, // 出发点边框宽度
	    toBorder: 1, // 到达点边框宽度
	    shootPointColor: {
	      fromPoint: '46, 133, 255', // 出发点颜色
	      fromShadow: '46, 133, 255', // 出发点阴影颜色
	      toPoint: '46, 133, 255', // 到达点颜色
	      toShadow: '46, 133, 255' // 到达点阴影颜色
	    },
	    lineWidth: 2, // 飞线宽度
	    lineColor: {
	      from: '46, 133, 255', // 线出发颜色
	      to: '46, 133, 255' // 线到达颜色
	    },
	    bullet: {
	      r: 2.5, // 弹头半径
	      length: 20, // 弹头长度
	      color: 'rgb(46, 133, 255)',
	      shadowColor: 'rgb(46, 133, 255)'
	    },
	    keys: {
	      from: 'from',
	      to: 'to',
	      fromValue: 'fromValue',
	      toValue: 'toValue',
	      curvature: 'curvature' // 曲率半径，值越大越平坦
	    }
	  }, config);

	  canvas.width = this.config.width;
	  canvas.height = this.config.height;

	  // 射击canvas层
	  this.canvas = canvas;

	  this.sCtx = this.canvas.getContext('2d');
	  this.sCtx.lineWidth = this.config.lineWidth;
	}

	function random() {
	  return Math.random() * 5 + 2.5;
	}

	Shoot.prototype = {
	  // 清除画布
	  clear: function clear(ctx) {
	    var _config = this.config,
	        width = _config.width,
	        height = _config.height;


	    ctx.clearRect(0, 0, width, height);
	  },
	  draw: function draw(data) {
	    if (!data) {
	      return;
	    }
	    var self = this,
	        dTime = self.config.dTime,

	    // 由于要保证interval时间内完成全部动画
	    interval = self.config.interval,
	        autoUpdate = self.config.autoUpdate,
	        maxFps = self.config.maxFps,
	        times = interval / dTime >> 0,
	        keys = self.config.keys,
	        sCtx = self.sCtx,
	        shoots = [],
	        shootMap = {},
	        time = self.config.shootTime,
	        l = data.length;

	    var fCo = void 0,
	        tCo = void 0,
	        s = void 0;

	    // 先清除画布
	    self.clear(sCtx);

	    var _loop = function _loop(i) {
	      var d = data[i],
	          fromCityName = d[keys.from],
	          toCityName = d[keys.to];

	      if ((typeof fromCityName === 'undefined' ? 'undefined' : _typeof(fromCityName)) === 'object') {
	        fCo = fromCityName;
	        // } else {
	        //   // 获取出发城市在画布上的坐标
	        //   fCo = self.map.getCoord(fromCityName);
	      }

	      if ((typeof toCityName === 'undefined' ? 'undefined' : _typeof(toCityName)) === 'object') {
	        tCo = toCityName;
	        // } else {
	        //   // 获取到达城市在画布上的坐标
	        //   tCo = self.map.getCoord(toCityName);
	      }

	      if (fCo && tCo) {
	        var color = {};
	        // 如果数据带有颜色配置
	        if (d._color) {
	          _extends(color, d._color);
	        }

	        s = self.emit(fCo, tCo, d, color, time);

	        s.index = (times - 1) * Math.random();

	        // 判断是否是多点同时射击一个点
	        if (!shootMap[s.index]) {
	          shootMap[s.index] = [];
	        }

	        shootMap[s.index].forEach(function (city) {
	          if (city === toCityName) {
	            // 正在被攻击
	            s.shooting = true;
	          }
	        });

	        if (!s.shooting) {
	          shootMap[s.index].push(toCityName);
	        }

	        shoots.push(s);
	      }
	    };

	    for (var i = 0; i < l; i++) {
	      _loop(i);
	    }

	    this.tween = (0, _tween2.default)(this.uuid, {
	      duration: interval,
	      autoUpdate: autoUpdate,
	      maxFps: maxFps
	    }, function (t) {
	      self.clear(sCtx);
	      shoots.forEach(function (shootFunction) {
	        shootFunction(t * times - shootFunction.index);
	      });
	    });
	  },
	  emit: function emit(fCo, tCo, data, color, time) {
	    var self = this,
	        keys = self.config.keys,
	        sCtx = self.sCtx,

	    // 发射出现时间段
	    fromTime = time.fromTime,

	    // 发射停留时间段
	    fromStop = time.fromStop,

	    // 发射消失时间段
	    fromFade = time.fromFade,


	    // 击中开始时间点
	    toBegin = time.toBegin,

	    // 击中出现时间段
	    toTime = time.toTime,

	    // 击中停留时间段
	    toStop = time.toStop,

	    // 击中消失时间段
	    toFade = time.toFade,


	    // 发射消失时间点
	    fromFadeBegin = fromTime + fromStop,

	    // 命中消失时间点
	    toFadeBegin = toBegin + toTime + toStop,

	    // 发射半径
	    fr = self.config.fromRadius,
	        tr = self.config.toRadius,
	        h = data[keys.curvature] || random(),
	        shootDurable = self.config.shootDurable;

	    var _s = void 0;

	    _s = function s(t) {
	      if (fCo) {
	        // 出发:
	        // 1. 出现
	        if (t < fromTime) {
	          self.from(fCo, fr, color)(t / fromTime);
	          // 2. 停留
	        } else if (t > fromTime && t < fromFadeBegin) {
	          self.from(fCo, fr, color)(1);
	          // 3. 消失
	        } else if (t > fromFadeBegin) {
	          self.from(fCo, fr, color, true)((t - fromFadeBegin) / fromFade);
	        }
	      }

	      if (tCo) {
	        // 轨迹
	        if (t >= fromTime && t < toBegin) {
	          // 出发 - 到达瞬间
	          self.track(sCtx, fCo, tCo, false, color, h)((t - fromTime) / (toBegin - fromTime));
	        } else if (t > toBegin && t < toFadeBegin) {
	          // 到达后停留
	          // TODO add by kaihong.tkh
	          if (shootDurable) {
	            var _time = -(t - fromTime) / (toBegin - fromTime);
	            _time -= Math.floor(_time);
	            _time = 1 - _time;
	            self.track(sCtx, fCo, tCo, true, color, h)(_time);
	          } else {
	            self.track(sCtx, fCo, tCo, true, color, h)(0);
	          }
	        } else if (t > toFadeBegin && t < toFadeBegin + toFade) {
	          // 停留后消失时间
	          self.track(sCtx, fCo, tCo, true, color, h)((t - toFadeBegin) / toFade);
	        }

	        // 如果不是正在被射击
	        if (!_s.shooting) {
	          // 到达:
	          // 1. 放大
	          if (t >= toBegin && t < toBegin + toTime) {
	            if (!_s.to) {
	              _s.to = true;
	            }
	            self.to(tCo, tr, color)((t - toBegin) / toTime);
	            // 2. 停留
	          } else if (t > toBegin + toTime && t < toFadeBegin) {
	            self.to(tCo, tr, color)(1);
	            // 3. 消失
	          } else if (t >= toFadeBegin) {
	            self.to(tCo, tr, color, true, 3)((t - toFadeBegin) / toFade);
	          }
	        }
	      }
	    };

	    return _s;
	  },
	  from: function from(co, r, color, zoom) {
	    var self = this,
	        c = 'rgba(' + (color.fColor || this.config.shootPointColor.fromPoint) + ',',
	        b = self.config.fromBorder,
	        sCtx = self.sCtx;

	    return function (t) {
	      if (t > 1 || t < 0) {
	        return;
	      }

	      if (zoom) {
	        t = 1 - t;
	      }

	      sCtx.save();

	      // 画背景圆
	      sCtx.beginPath();
	      sCtx.strokeStyle = c + t + ')';
	      sCtx.lineWidth = b * t;
	      sCtx.fillStyle = c + '0.3)';

	      // shadow
	      sCtx.shadowColor = 'rgba(' + (color.fColor || self.config.shootPointColor.fromShadow) + ',1)';
	      sCtx.shadowBlur = 5;
	      sCtx.shadowOffsetX = 0;
	      sCtx.shadowOffsetY = 0;

	      sCtx.arc(co.x, co.y, r * t, 0, PI);

	      sCtx.fill();
	      sCtx.stroke();

	      // 画中心圆
	      sCtx.beginPath();
	      sCtx.fillStyle = c + '1)';
	      sCtx.arc(co.x, co.y, 2 * t, 0, PI);
	      sCtx.fill();

	      sCtx.restore();
	    };
	  },
	  to: function to(co, r, color, zoom, n, anticlockwise) {
	    var self = this,
	        c = 'rgba(' + (color.tColor || this.config.shootPointColor.toPoint) + ',',
	        b = self.config.toBorder,
	        sCtx = self.sCtx,
	        sin = Math.sin,
	        cos = Math.cos;

	    return function (t) {
	      var rad = 0;

	      if (t > 1 || t < 0) {
	        return;
	      }

	      sCtx.save();

	      // 每次转的角度
	      if (n) {
	        rad = n * PI * t;

	        if (anticlockwise) {
	          rad = -rad;
	        }
	      }

	      if (zoom) {
	        t = 1 - t;
	      }

	      // 画背景圆
	      sCtx.beginPath();
	      sCtx.fillStyle = c + '0.3)';
	      sCtx.arc(co.x, co.y, r * t, 0, PI);
	      sCtx.fill();

	      // 画离散弧线
	      sCtx.beginPath();
	      sCtx.strokeStyle = c + t + ')';
	      sCtx.lineWidth = b * t;
	      // shadow
	      sCtx.shadowColor = 'rgba(' + (color.tColor || self.config.shootPointColor.toShadow) + ',1)';
	      sCtx.shadowBlur = 10;
	      sCtx.shadowOffsetX = 0;
	      sCtx.shadowOffsetY = 0;

	      sCtx.arc(co.x, co.y, r * t, rad, PI / 6 + rad);
	      sCtx.moveTo(co.x + r * cos(PI / 3 + rad) * t, co.y + r * sin(PI / 3 + rad) * t);
	      sCtx.arc(co.x, co.y, r * t, PI / 3 + rad, PI / 2 + rad);
	      sCtx.moveTo(co.x + r * cos(PI * 2 / 3 + rad) * t, co.y + r * sin(PI * 2 / 3 + rad) * t);
	      sCtx.arc(co.x, co.y, r * t, PI * 2 / 3 + rad, PI * 5 / 6 + rad);

	      sCtx.stroke();

	      // 画中心圆
	      sCtx.beginPath();
	      sCtx.fillStyle = c + '1)';
	      sCtx.arc(co.x, co.y, 2 * t, 0, PI);
	      sCtx.fill();

	      sCtx.restore();
	    };
	  },
	  track: function track(ctx, fCo, tCo, fade, color, h, overview) {
	    var self = this,
	        cos = Math.cos,
	        atan = Math.atan,
	        pow2 = function pow2(x) {
	      return Math.pow(x, 2);
	    },
	        sqrt = Math.sqrt,
	        fColor = 'rgba(' + (color.fColor || self.config.lineColor.from) + ',',
	        tColor = 'rgba(' + (color.tColor || self.config.lineColor.to) + ',',


	    // (x1, y1) 出发点，(x2, y2) 到达点
	    x1 = fCo.x,
	        y1 = fCo.y,
	        x2 = tCo.x,
	        y2 = tCo.y,


	    // 求法线方程
	    // y = j * x + k
	    dx = (x1 + x2) / 2,
	        dy = (y1 + y2) / 2,
	        j = (x1 - x2) / (y2 - y1),
	        k = dy - j * dx,

	    // d用来控制弧线的弧度
	    d = sqrt(pow2(x1 - x2) + pow2(y1 - y2)) / h,
	        rad = atan(j),
	        cx = d * cos(rad),

	    // 渐变
	    gradient = ctx.createLinearGradient(x1, y1, x2, y2),
	        bulletR = this.config.bullet.r,
	        bulletLen = this.config.bullet.length,
	        shootDurable = self.config.shootDurable;

	    // 控制点坐标
	    var x3 = (x1 + x2) / 2 + cx,
	        y3 = j * x3 + k;

	    if (isNaN(j)) {
	      // 水平方向
	      x3 = dx;
	      y3 = dy + h;
	    } else if (j === 0) {
	      // 竖直方向
	      x3 = dx + h;
	      y3 = dy;
	    } else if (Math.abs(j) >= 1) {
	      // 之后的两个条件判断请画象限图理解。。。估计明天我也忘记为什么要这么写了
	      y3 = dy - cx;
	      x3 = (y3 - k) / j;
	    } else if (j > 0) {
	      x3 = (x1 + x2) / 2 - cx;
	      y3 = j * x3 + k;
	    }

	    return function (t) {
	      // 移动点坐标
	      var x0 = void 0,
	          y0 = void 0,

	      // 贝塞尔曲线切线斜率
	      kx = void 0,
	          ky = void 0,

	      // 蒙板起始坐标
	      rx = void 0,
	          ry = void 0,

	      // 蒙板半径
	      r = void 0,
	          gradientOpacity = 0.7;

	      if (t > 1 || t < 0) {
	        return;
	      }

	      // TODO：最好加上一个透明度变化的动画
	      if (!overview) {
	        if (fade) {
	          // 避免出现科学计数法，rgba中的透明值不能设为科学计数法
	          gradientOpacity = 1 - t < 0.01 ? 0.01 : 1 - t;
	        } else {
	          gradientOpacity = t < 0.01 ? 0.01 : t;
	        }

	        if (shootDurable) {
	          gradientOpacity = 1; // add by kaihong.tkh 线不需要渐变
	        }
	      }

	      // 贝塞尔曲线方程
	      x0 = (1 - t) * (1 - t) * x1 + 2 * t * (1 - t) * x3 + t * t * x2;
	      y0 = (1 - t) * (1 - t) * y1 + 2 * t * (1 - t) * y3 + t * t * y2;

	      // 贝塞尔曲线切线方程
	      kx = -2 * x1 * (1 - t) + 2 * x3 * (1 - 2 * t) + 2 * x2 * t;
	      ky = -2 * y1 * (1 - t) + 2 * y3 * (1 - 2 * t) + 2 * y2 * t;

	      rx = (x1 + x0) / 2;
	      ry = (y1 + y0) / 2;

	      r = sqrt(pow2(x1 - x0) + pow2(y1 - y0)) / 2;

	      ctx.save();

	      gradient.addColorStop(0, fColor + gradientOpacity + ')');
	      gradient.addColorStop(1, tColor + gradientOpacity + ')');

	      if (!fade && !overview) {
	        // 创建圆形蒙板
	        ctx.arc(rx, ry, r, 0, PI);
	        ctx.clip();
	      }

	      ctx.beginPath();
	      ctx.globalCompositeOperation = 'lighter';
	      ctx.strokeStyle = gradient;

	      ctx.lineWidth = self.config.lineWidth;

	      ctx.moveTo(x1, y1);
	      ctx.quadraticCurveTo(x3, y3, x2, y2);

	      ctx.stroke();

	      ctx.restore();

	      var a = atan(ky / kx);

	      // 计算旋转角度
	      if (ky > 0 && kx < 0) {
	        a += PI / 2;
	      } else if (ky < 0 && kx < 0) {
	        a -= PI / 2;
	      }

	      // TODO add by kaihong.tkh
	      if (shootDurable) {
	        self.drawBullet(x0, y0, a, color.bullet, bulletR, bulletLen);
	      } else if (!fade && !overview) {
	        // ky/kx 为切线斜率
	        self.drawBullet(x0, y0, a, color.bullet, bulletR, bulletLen);
	      }
	    };
	  },
	  drawBullet: function drawBullet(x, y, a, color, r, len) {
	    var self = this,
	        sCtx = self.sCtx;

	    sCtx.save();

	    sCtx.translate(x, y);
	    sCtx.rotate(a);
	    sCtx.translate(-x, -y);

	    sCtx.beginPath();

	    sCtx.globalCompositeOperation = 'lighter';

	    // shadow
	    sCtx.shadowColor = this.config.bullet.shadowColor;
	    sCtx.shadowBlur = 20;
	    sCtx.shadowOffsetX = 0;
	    sCtx.shadowOffsetY = 0;

	    sCtx.fillStyle = color || this.config.bullet.color;
	    sCtx.arc(x, y, r, -PI / 4, PI / 4);

	    sCtx.lineTo(x - len, y);

	    sCtx.closePath();

	    sCtx.fill();

	    sCtx.restore();
	  },
	  update: function update(time) {
	    if (this.tween && this.tween.update) {
	      this.tween.update(time);
	    }
	  },
	  destroy: function destroy() {
	    this.clear(this.sCtx);
	  }
	};

	exports.default = Shoot;
	module.exports = exports['default'];

	 ;(function register() { /* react-hot-loader/webpack */ if (false) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "D:\\Git\\aisc-widgets\\components\\wshoot\\shoot.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "D:\\Git\\aisc-widgets\\components\\wshoot\\shoot.js"); } } })();

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(module);
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod);
	    global.regression = mod.exports;
	  }
	})(this, function (module) {
	  'use strict';

	  function _defineProperty(obj, key, value) {
	    if (key in obj) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    } else {
	      obj[key] = value;
	    }

	    return obj;
	  }

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  function _toConsumableArray(arr) {
	    if (Array.isArray(arr)) {
	      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	        arr2[i] = arr[i];
	      }

	      return arr2;
	    } else {
	      return Array.from(arr);
	    }
	  }

	  var DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };

	  /**
	  * Determine the coefficient of determination (r^2) of a fit from the observations
	  * and predictions.
	  *
	  * @param {Array<Array<number>>} data - Pairs of observed x-y values
	  * @param {Array<Array<number>>} results - Pairs of observed predicted x-y values
	  *
	  * @return {number} - The r^2 value, or NaN if one cannot be calculated.
	  */
	  function determinationCoefficient(data, results) {
	    var predictions = [];
	    var observations = [];

	    data.forEach(function (d, i) {
	      if (d[1] !== null) {
	        observations.push(d);
	        predictions.push(results[i]);
	      }
	    });

	    var sum = observations.reduce(function (a, observation) {
	      return a + observation[1];
	    }, 0);
	    var mean = sum / observations.length;

	    var ssyy = observations.reduce(function (a, observation) {
	      var difference = observation[1] - mean;
	      return a + difference * difference;
	    }, 0);

	    var sse = observations.reduce(function (accum, observation, index) {
	      var prediction = predictions[index];
	      var residual = observation[1] - prediction[1];
	      return accum + residual * residual;
	    }, 0);

	    return 1 - sse / ssyy;
	  }

	  /**
	  * Determine the solution of a system of linear equations A * x = b using
	  * Gaussian elimination.
	  *
	  * @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]
	  * @param {number} order - How many degrees to solve for
	  *
	  * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)
	  */
	  function gaussianElimination(input, order) {
	    var matrix = input;
	    var n = input.length - 1;
	    var coefficients = [order];

	    for (var i = 0; i < n; i++) {
	      var maxrow = i;
	      for (var j = i + 1; j < n; j++) {
	        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {
	          maxrow = j;
	        }
	      }

	      for (var k = i; k < n + 1; k++) {
	        var tmp = matrix[k][i];
	        matrix[k][i] = matrix[k][maxrow];
	        matrix[k][maxrow] = tmp;
	      }

	      for (var _j = i + 1; _j < n; _j++) {
	        for (var _k = n; _k >= i; _k--) {
	          matrix[_k][_j] -= matrix[_k][i] * matrix[i][_j] / matrix[i][i];
	        }
	      }
	    }

	    for (var _j2 = n - 1; _j2 >= 0; _j2--) {
	      var total = 0;
	      for (var _k2 = _j2 + 1; _k2 < n; _k2++) {
	        total += matrix[_k2][_j2] * coefficients[_k2];
	      }

	      coefficients[_j2] = (matrix[n][_j2] - total) / matrix[_j2][_j2];
	    }

	    return coefficients;
	  }

	  /**
	  * Round a number to a precision, specificed in number of decimal places
	  *
	  * @param {number} number - The number to round
	  * @param {number} precision - The number of decimal places to round to:
	  *                             > 0 means decimals, < 0 means powers of 10
	  *
	  *
	  * @return {numbr} - The number, rounded
	  */
	  function round(number, precision) {
	    var factor = Math.pow(10, precision);
	    return Math.round(number * factor) / factor;
	  }

	  /**
	  * The set of all fitting methods
	  *
	  * @namespace
	  */
	  var methods = {
	    linear: function linear(data, options) {
	      var sum = [0, 0, 0, 0, 0];
	      var len = 0;

	      for (var n = 0; n < data.length; n++) {
	        if (data[n][1] !== null) {
	          len++;
	          sum[0] += data[n][0];
	          sum[1] += data[n][1];
	          sum[2] += data[n][0] * data[n][0];
	          sum[3] += data[n][0] * data[n][1];
	          sum[4] += data[n][1] * data[n][1];
	        }
	      }

	      var run = len * sum[2] - sum[0] * sum[0];
	      var rise = len * sum[3] - sum[0] * sum[1];
	      var gradient = run === 0 ? 0 : round(rise / run, options.precision);
	      var intercept = round(sum[1] / len - gradient * sum[0] / len, options.precision);

	      var predict = function predict(x) {
	        return [round(x, options.precision), round(gradient * x + intercept, options.precision)];
	      };

	      var points = data.map(function (point) {
	        return predict(point[0]);
	      });

	      return {
	        points: points,
	        predict: predict,
	        equation: [gradient, intercept],
	        r2: round(determinationCoefficient(data, points), options.precision),
	        string: intercept === 0 ? 'y = ' + gradient + 'x' : 'y = ' + gradient + 'x + ' + intercept
	      };
	    },
	    exponential: function exponential(data, options) {
	      var sum = [0, 0, 0, 0, 0, 0];

	      for (var n = 0; n < data.length; n++) {
	        if (data[n][1] !== null) {
	          sum[0] += data[n][0];
	          sum[1] += data[n][1];
	          sum[2] += data[n][0] * data[n][0] * data[n][1];
	          sum[3] += data[n][1] * Math.log(data[n][1]);
	          sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);
	          sum[5] += data[n][0] * data[n][1];
	        }
	      }

	      var denominator = sum[1] * sum[2] - sum[5] * sum[5];
	      var a = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);
	      var b = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;
	      var coeffA = round(a, options.precision);
	      var coeffB = round(b, options.precision);
	      var predict = function predict(x) {
	        return [round(x, options.precision), round(coeffA * Math.exp(coeffB * x), options.precision)];
	      };

	      var points = data.map(function (point) {
	        return predict(point[0]);
	      });

	      return {
	        points: points,
	        predict: predict,
	        equation: [coeffA, coeffB],
	        string: 'y = ' + coeffA + 'e^(' + coeffB + 'x)',
	        r2: round(determinationCoefficient(data, points), options.precision)
	      };
	    },
	    logarithmic: function logarithmic(data, options) {
	      var sum = [0, 0, 0, 0];
	      var len = data.length;

	      for (var n = 0; n < len; n++) {
	        if (data[n][1] !== null) {
	          sum[0] += Math.log(data[n][0]);
	          sum[1] += data[n][1] * Math.log(data[n][0]);
	          sum[2] += data[n][1];
	          sum[3] += Math.pow(Math.log(data[n][0]), 2);
	        }
	      }

	      var a = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);
	      var coeffB = round(a, options.precision);
	      var coeffA = round((sum[2] - coeffB * sum[0]) / len, options.precision);

	      var predict = function predict(x) {
	        return [round(x, options.precision), round(round(coeffA + coeffB * Math.log(x), options.precision), options.precision)];
	      };

	      var points = data.map(function (point) {
	        return predict(point[0]);
	      });

	      return {
	        points: points,
	        predict: predict,
	        equation: [coeffA, coeffB],
	        string: 'y = ' + coeffA + ' + ' + coeffB + ' ln(x)',
	        r2: round(determinationCoefficient(data, points), options.precision)
	      };
	    },
	    power: function power(data, options) {
	      var sum = [0, 0, 0, 0, 0];
	      var len = data.length;

	      for (var n = 0; n < len; n++) {
	        if (data[n][1] !== null) {
	          sum[0] += Math.log(data[n][0]);
	          sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);
	          sum[2] += Math.log(data[n][1]);
	          sum[3] += Math.pow(Math.log(data[n][0]), 2);
	        }
	      }

	      var b = (len * sum[1] - sum[0] * sum[2]) / (len * sum[3] - Math.pow(sum[0], 2));
	      var a = (sum[2] - b * sum[0]) / len;
	      var coeffA = round(Math.exp(a), options.precision);
	      var coeffB = round(b, options.precision);

	      var predict = function predict(x) {
	        return [round(x, options.precision), round(round(coeffA * Math.pow(x, coeffB), options.precision), options.precision)];
	      };

	      var points = data.map(function (point) {
	        return predict(point[0]);
	      });

	      return {
	        points: points,
	        predict: predict,
	        equation: [coeffA, coeffB],
	        string: 'y = ' + coeffA + 'x^' + coeffB,
	        r2: round(determinationCoefficient(data, points), options.precision)
	      };
	    },
	    polynomial: function polynomial(data, options) {
	      var lhs = [];
	      var rhs = [];
	      var a = 0;
	      var b = 0;
	      var len = data.length;
	      var k = options.order + 1;

	      for (var i = 0; i < k; i++) {
	        for (var l = 0; l < len; l++) {
	          if (data[l][1] !== null) {
	            a += Math.pow(data[l][0], i) * data[l][1];
	          }
	        }

	        lhs.push(a);
	        a = 0;

	        var c = [];
	        for (var j = 0; j < k; j++) {
	          for (var _l = 0; _l < len; _l++) {
	            if (data[_l][1] !== null) {
	              b += Math.pow(data[_l][0], i + j);
	            }
	          }
	          c.push(b);
	          b = 0;
	        }
	        rhs.push(c);
	      }
	      rhs.push(lhs);

	      var coefficients = gaussianElimination(rhs, k).map(function (v) {
	        return round(v, options.precision);
	      });

	      var predict = function predict(x) {
	        return [round(x, options.precision), round(coefficients.reduce(function (sum, coeff, power) {
	          return sum + coeff * Math.pow(x, power);
	        }, 0), options.precision)];
	      };

	      var points = data.map(function (point) {
	        return predict(point[0]);
	      });

	      var string = 'y = ';
	      for (var _i = coefficients.length - 1; _i >= 0; _i--) {
	        if (_i > 1) {
	          string += coefficients[_i] + 'x^' + _i + ' + ';
	        } else if (_i === 1) {
	          string += coefficients[_i] + 'x + ';
	        } else {
	          string += coefficients[_i];
	        }
	      }

	      return {
	        string: string,
	        points: points,
	        predict: predict,
	        equation: [].concat(_toConsumableArray(coefficients)).reverse(),
	        r2: round(determinationCoefficient(data, points), options.precision)
	      };
	    }
	  };

	  function createWrapper() {
	    var reduce = function reduce(accumulator, name) {
	      return _extends({
	        _round: round
	      }, accumulator, _defineProperty({}, name, function (data, supplied) {
	        return methods[name](data, _extends({}, DEFAULT_OPTIONS, supplied));
	      }));
	    };

	    return Object.keys(methods).reduce(reduce, {});
	  }

	  module.exports = createWrapper();
	});


/***/ },
/* 234 */
/***/ function(module, exports) {

	module.exports = {"fontFamilyNumber":"DINMediumNumber, \"Helvetica Neue\", Helvetica, \"PingFang SC\", \"Microsoft YaHei\", Arial, sans-serif","fontSizeLargeNumber":"28px","fontSizeXlargeNumber":"32px","widgetsColorWhite":"#FFFFFF","widgetsColorBlack":"#000000","widgetsColorText1":"#333333","widgetsColorText2":"#666666","widgetsColorText3":"#999999","widgetsColorDisable":"#CCCCCC","widgetsColorBlue":"#2E85FF","widgetsColorOrange":"#FAB34F","widgetsColorRed":"#FF656B","widgetsColorGreen":"#4AD051","widgetsColorGray":"#DCDEE3","widgetsColorCategory1":"#2E85FF","widgetsColorCategory2":"#FAB34F","widgetsColorCategory3":"#FF656B","widgetsColorCategory4":"#4AD051","widgetsColorCategory5":"#9979F2","widgetsColorCategory6":"#006CD9","widgetsColorCategory7":"#5CCDBB","widgetsColorCategory8":"#5C60E6","widgetsColorCategory9":"#E65CCB","widgetsColorCategory10":"#52D7FF","widgetsColorCategory11":"#9B5CE6","widgetsColorCategory12":"#E65C5C","widgetsColorLinear1":"#2E85FF","widgetsColorLinear2":"#4291FF","widgetsColorLinear3":"#589DFF","widgetsColorLinear4":"#6CA9FF","widgetsColorLinear5":"#82B6FF","widgetsColorLinear6":"#96C2FF","widgetsColorLinear7":"#ABCEFF","widgetsColorLinear8":"#C0DAFF","widgetsColorLinear9":"#D5E7FF","widgetsColorLinear10":"#EAF2FF","widgetsLegendUncheck":"#CCCCCC","widgetsLegendText":"#333333","widgetsLabelText":"#333333","widgetsTooltipBackground":"#ffffff","widgetsTooltipShadow":"0 1px 5px 0 rgba(0, 0, 0, 0.2)","widgetsTooltipCrossLine":"#dddddd","widgetsTooltipCrossReact":"#CCD6EC","widgetsTooltipCrossReactOpacity":"0.3","widgetsTooltipTitle":"#999999","widgetsTooltipText":"#333333","widgetsTooltipMarkerFill":"#FFFFFF","widgetsAxisLabel":"#999999","widgetsAxisLine":"#DCDEE3","widgetsAxisGrid":"#F2F3F7","widgetsMiniCardEmpty":"#F2F3F7","widgetsCircleNumber":"currentColor","widgetsMapAreaBg":"#DCDEE3","widgetsMapAreaBorder":"#ffffff","widgetsMapLabel":"#666666","widgetsContainerBackground":"#FFFFFF","widgetsContainerTitle":"#333333","widgetsContainerSplitLine":"#DCDEE3","widgetsSankeyEdge":"#DCDEE3","widgetsSankeyNodeText":"#999999","widgetsTableHeader":"#ECF4FF","widgetsTableBodyZebra":"#F5F9FE","widgetsTableSplit":"#ECF4FF"};

/***/ },
/* 235 */
/***/ function(module, exports) {

	module.exports = {"colorWhite":"#FFFFFF","colorBlack":"#000000","colorTransparent":"transparent","colorB11":"#579DFF","colorB12":"#EAF6FE","colorB16":"#2E85FF","colorB19":"#246ACC","colorB111":"#313b4c","colorB21":"#E8F6FF","colorB23":"#A6D3F0","colorB26":"#2683D4","colorB76":"#4F74B3","colorB79":"#2D559C","colorFill11":"#F7F8FA","colorN12":"#F7F8FA","colorFill12":"#F2F3F7","colorN13":"#F2F3F7","colorFill13":"#EBECF0","colorN14":"#EBECF0","colorLine11":"#E6E7EB","colorN15":"#E6E7EB","colorLine12":"#DCDEE3","colorN16":"#DCDEE3","colorLine13":"#C4C6CF","colorN17":"#C4C6CF","colorLine14":"#A0A2AD","colorN18":"#A0A2AD","colorText11":"#CCCCCC","colorN21":"#CCCCCC","colorText12":"#999999","colorN22":"#999999","colorText13":"#666666","colorN23":"#666666","colorText14":"#333333","colorN24":"#333333","colorText15":"#222222","colorN25":"#222222","colorWarning1":"#FB8C00","colorF11":"#FB8C00","colorWarning2":"#F6A71F","colorF12":"#F6A71F","colorWarning3":"#EB7C00","colorF13":"#EB7C00","colorWarning4":"#FFF7E9","colorF14":"#FFF7E9","colorSecondWarning1":"#FBC02D","colorF51":"#FBC02D","colorSecondWarning2":"#FFD751","colorF52":"#FFD751","colorSecondWarning3":"#EC9D40","colorF53":"#EC9D40","colorSecondWarning4":"#FFFDE7","colorF54":"#FFFDE7","colorError1":"#E93A3A","colorF21":"#E93A3A","colorError2":"#FFEBEE","colorF22":"#FFEBEE","colorError3":"#EF5350","colorF23":"#EF5350","colorError4":"#D32F2F","colorF24":"#D32F2F","colorSuccess1":"#6DC37D","colorF31":"#6DC37D","colorSuccess2":"#86D194","colorF32":"#86D194","colorSuccess3":"#52AC63","colorF33":"#52AC63","colorSuccess4":"#E8FEEA","colorF34":"#E8FEEA","colorLink1":"#166AE9","colorF41":"#166AE9","colorLink2":"#634cd9","colorF43":"#634cd9","colorLink3":"#1e66cb","colorF42":"#1e66cb","colorLink4":"#459efa","colorF44":"#459efa","colorF61":"#2889EC","colorF62":"#EAF6FE","colorS11":"#ECF4FF","colorS12":"#F5F9FE","colorS13":"#DCF0FE","colorS14":"#ECF4FF","colorS15":"#ECF4FF","colorS16":"#F5F9FE","colorS17":"#F6FCFE","colorS21":"#2D3035","colorS22":"#000000","colorS23":"#313B4B","colorS24":"#1f2227","colorS31":"#F8F8F8","colorS32":"#FFFFFF","colorExtra1":"#19b5d2","colorExtra1Hover":"#33cae6","colorExtra1Click":"#0ca1bd","colorExtra2":"#758fc6","colorExtra2Hover":"#94abdb","colorExtra2Click":"#5b78b5","colorExtra3":"#ad72ce","colorExtra3Hover":"#be8adb","colorExtra3Click":"#9656b9","colorExtra4":"#ca567c","colorExtra4Hover":"#de7496","colorExtra4Click":"#bb4068"};

/***/ },
/* 236 */
/***/ function(module, exports) {

	module.exports = {"fontLineheightBase":"1.5","fontFamilyBase":"\"Helvetica Neue\", Helvetica, \"PingFang SC\", \"Microsoft YaHei\", Arial, sans-serif","fontFamilyEn":"\"Helvetica Neue\", Helvetica, Arial","fontFamilyZh":"\"PingFang SC\", \"Microsoft YaHei\"","fontWeightLight":"lighter","fontWeightThin":"200","fontWeightRegular":"normal","fontWeightMedium":"500","fontWeightBold":"bold","fontWeightBolder":"bolder","fontSizeBaseDisplay3":"56px","fontSizeBaseDisplay2":"48px","fontSizeBaseDisplay1":"36px","fontSizeBaseHeadline":"24px","fontSizeBaseTitle":"20px","fontSizeBaseSubhead":"16px","fontSizeBaseBody2":"14px","fontSizeBaseBody1":"14px","fontSizeBaseCaption":"12px","fontLineheightBaseDisplay3":"84px","fontLineheightBaseDisplay2":"68px","fontLineheightBaseDisplay1":"54px","fontLineheightBaseHeadline":"36px","fontLineheightBaseTitle":"30px","fontLineheightBaseSubhead":"24px","fontLineheightBaseBody2":"20px","fontLineheightBaseBody1":"20px","fontLineheightBaseCaption":"18px"};

/***/ },
/* 237 */
/***/ function(module, exports) {

	module.exports = {"sizeBase":"4px","s0":"0","s1":"4px","s2":"8px","s3":"12px","s4":"16px","s5":"20px","s6":"24px","s7":"28px","s8":"32px","s9":"36px","s10":"40px","s11":"44px","s12":"48px","s13":"52px","s14":"56px","s15":"60px","s16":"64px","s17":"68px","s18":"72px","s19":"76px","s20":"80px","s21":"84px","s22":"88px","s23":"92px","s24":"96px","s25":"100px","s26":"104px","s27":"108px","s28":"112px","s29":"116px","s30":"120px","s31":"124px","s32":"128px","s33":"132px","s34":"136px","s35":"140px","s36":"144px","s37":"148px","s38":"152px","s39":"156px","s40":"160px","s41":"164px","s42":"168px","s43":"172px","s44":"176px","s45":"180px","s46":"184px","s47":"188px","s48":"192px","s49":"196px","s50":"200px"};

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/topojson/topojson-client Version 3.0.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.topojson = global.topojson || {})));
	}(this, (function (exports) { 'use strict';

	var identity = function(x) {
	  return x;
	};

	var transform = function(transform) {
	  if (transform == null) return identity;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(input, i) {
	    if (!i) x0 = y0 = 0;
	    var j = 2, n = input.length, output = new Array(n);
	    output[0] = (x0 += input[0]) * kx + dx;
	    output[1] = (y0 += input[1]) * ky + dy;
	    while (j < n) output[j] = input[j], ++j;
	    return output;
	  };
	};

	var bbox = function(topology) {
	  var t = transform(topology.transform), key,
	      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;

	  function bboxPoint(p) {
	    p = t(p);
	    if (p[0] < x0) x0 = p[0];
	    if (p[0] > x1) x1 = p[0];
	    if (p[1] < y0) y0 = p[1];
	    if (p[1] > y1) y1 = p[1];
	  }

	  function bboxGeometry(o) {
	    switch (o.type) {
	      case "GeometryCollection": o.geometries.forEach(bboxGeometry); break;
	      case "Point": bboxPoint(o.coordinates); break;
	      case "MultiPoint": o.coordinates.forEach(bboxPoint); break;
	    }
	  }

	  topology.arcs.forEach(function(arc) {
	    var i = -1, n = arc.length, p;
	    while (++i < n) {
	      p = t(arc[i], i);
	      if (p[0] < x0) x0 = p[0];
	      if (p[0] > x1) x1 = p[0];
	      if (p[1] < y0) y0 = p[1];
	      if (p[1] > y1) y1 = p[1];
	    }
	  });

	  for (key in topology.objects) {
	    bboxGeometry(topology.objects[key]);
	  }

	  return [x0, y0, x1, y1];
	};

	var reverse = function(array, n) {
	  var t, j = array.length, i = j - n;
	  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	};

	var feature = function(topology, o) {
	  return o.type === "GeometryCollection"
	      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
	      : feature$1(topology, o);
	};

	function feature$1(topology, o) {
	  var id = o.id,
	      bbox = o.bbox,
	      properties = o.properties == null ? {} : o.properties,
	      geometry = object(topology, o);
	  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
	      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
	      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
	}

	function object(topology, o) {
	  var transformPoint = transform(topology.transform),
	      arcs = topology.arcs;

	  function arc(i, points) {
	    if (points.length) points.pop();
	    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
	      points.push(transformPoint(a[k], k));
	    }
	    if (i < 0) reverse(points, n);
	  }

	  function point(p) {
	    return transformPoint(p);
	  }

	  function line(arcs) {
	    var points = [];
	    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
	    return points;
	  }

	  function ring(arcs) {
	    var points = line(arcs);
	    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
	    return points;
	  }

	  function polygon(arcs) {
	    return arcs.map(ring);
	  }

	  function geometry(o) {
	    var type = o.type, coordinates;
	    switch (type) {
	      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
	      case "Point": coordinates = point(o.coordinates); break;
	      case "MultiPoint": coordinates = o.coordinates.map(point); break;
	      case "LineString": coordinates = line(o.arcs); break;
	      case "MultiLineString": coordinates = o.arcs.map(line); break;
	      case "Polygon": coordinates = polygon(o.arcs); break;
	      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
	      default: return null;
	    }
	    return {type: type, coordinates: coordinates};
	  }

	  return geometry(o);
	}

	var stitch = function(topology, arcs) {
	  var stitchedArcs = {},
	      fragmentByStart = {},
	      fragmentByEnd = {},
	      fragments = [],
	      emptyIndex = -1;

	  // Stitch empty arcs first, since they may be subsumed by other arcs.
	  arcs.forEach(function(i, j) {
	    var arc = topology.arcs[i < 0 ? ~i : i], t;
	    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
	      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
	    }
	  });

	  arcs.forEach(function(i) {
	    var e = ends(i),
	        start = e[0],
	        end = e[1],
	        f, g;

	    if (f = fragmentByEnd[start]) {
	      delete fragmentByEnd[f.end];
	      f.push(i);
	      f.end = end;
	      if (g = fragmentByStart[end]) {
	        delete fragmentByStart[g.start];
	        var fg = g === f ? f : f.concat(g);
	        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else if (f = fragmentByStart[end]) {
	      delete fragmentByStart[f.start];
	      f.unshift(i);
	      f.start = start;
	      if (g = fragmentByEnd[start]) {
	        delete fragmentByEnd[g.end];
	        var gf = g === f ? f : g.concat(f);
	        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else {
	      f = [i];
	      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
	    }
	  });

	  function ends(i) {
	    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
	    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
	    else p1 = arc[arc.length - 1];
	    return i < 0 ? [p1, p0] : [p0, p1];
	  }

	  function flush(fragmentByEnd, fragmentByStart) {
	    for (var k in fragmentByEnd) {
	      var f = fragmentByEnd[k];
	      delete fragmentByStart[f.start];
	      delete f.start;
	      delete f.end;
	      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
	      fragments.push(f);
	    }
	  }

	  flush(fragmentByEnd, fragmentByStart);
	  flush(fragmentByStart, fragmentByEnd);
	  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

	  return fragments;
	};

	var mesh = function(topology) {
	  return object(topology, meshArcs.apply(this, arguments));
	};

	function meshArcs(topology, object$$1, filter) {
	  var arcs, i, n;
	  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);
	  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
	  return {type: "MultiLineString", arcs: stitch(topology, arcs)};
	}

	function extractArcs(topology, object$$1, filter) {
	  var arcs = [],
	      geomsByArc = [],
	      geom;

	  function extract0(i) {
	    var j = i < 0 ? ~i : i;
	    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
	  }

	  function extract1(arcs) {
	    arcs.forEach(extract0);
	  }

	  function extract2(arcs) {
	    arcs.forEach(extract1);
	  }

	  function extract3(arcs) {
	    arcs.forEach(extract2);
	  }

	  function geometry(o) {
	    switch (geom = o, o.type) {
	      case "GeometryCollection": o.geometries.forEach(geometry); break;
	      case "LineString": extract1(o.arcs); break;
	      case "MultiLineString": case "Polygon": extract2(o.arcs); break;
	      case "MultiPolygon": extract3(o.arcs); break;
	    }
	  }

	  geometry(object$$1);

	  geomsByArc.forEach(filter == null
	      ? function(geoms) { arcs.push(geoms[0].i); }
	      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });

	  return arcs;
	}

	function planarRingArea(ring) {
	  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
	  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
	  return Math.abs(area); // Note: doubled area!
	}

	var merge = function(topology) {
	  return object(topology, mergeArcs.apply(this, arguments));
	};

	function mergeArcs(topology, objects) {
	  var polygonsByArc = {},
	      polygons = [],
	      groups = [];

	  objects.forEach(geometry);

	  function geometry(o) {
	    switch (o.type) {
	      case "GeometryCollection": o.geometries.forEach(geometry); break;
	      case "Polygon": extract(o.arcs); break;
	      case "MultiPolygon": o.arcs.forEach(extract); break;
	    }
	  }

	  function extract(polygon) {
	    polygon.forEach(function(ring) {
	      ring.forEach(function(arc) {
	        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
	      });
	    });
	    polygons.push(polygon);
	  }

	  function area(ring) {
	    return planarRingArea(object(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]);
	  }

	  polygons.forEach(function(polygon) {
	    if (!polygon._) {
	      var group = [],
	          neighbors = [polygon];
	      polygon._ = 1;
	      groups.push(group);
	      while (polygon = neighbors.pop()) {
	        group.push(polygon);
	        polygon.forEach(function(ring) {
	          ring.forEach(function(arc) {
	            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
	              if (!polygon._) {
	                polygon._ = 1;
	                neighbors.push(polygon);
	              }
	            });
	          });
	        });
	      }
	    }
	  });

	  polygons.forEach(function(polygon) {
	    delete polygon._;
	  });

	  return {
	    type: "MultiPolygon",
	    arcs: groups.map(function(polygons) {
	      var arcs = [], n;

	      // Extract the exterior (unique) arcs.
	      polygons.forEach(function(polygon) {
	        polygon.forEach(function(ring) {
	          ring.forEach(function(arc) {
	            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
	              arcs.push(arc);
	            }
	          });
	        });
	      });

	      // Stitch the arcs into one or more rings.
	      arcs = stitch(topology, arcs);

	      // If more than one ring is returned,
	      // at most one of these rings can be the exterior;
	      // choose the one with the greatest absolute area.
	      if ((n = arcs.length) > 1) {
	        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
	          if ((ki = area(arcs[i])) > k) {
	            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
	          }
	        }
	      }

	      return arcs;
	    })
	  };
	}

	var bisect = function(a, x) {
	  var lo = 0, hi = a.length;
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;
	    if (a[mid] < x) lo = mid + 1;
	    else hi = mid;
	  }
	  return lo;
	};

	var neighbors = function(objects) {
	  var indexesByArc = {}, // arc index -> array of object indexes
	      neighbors = objects.map(function() { return []; });

	  function line(arcs, i) {
	    arcs.forEach(function(a) {
	      if (a < 0) a = ~a;
	      var o = indexesByArc[a];
	      if (o) o.push(i);
	      else indexesByArc[a] = [i];
	    });
	  }

	  function polygon(arcs, i) {
	    arcs.forEach(function(arc) { line(arc, i); });
	  }

	  function geometry(o, i) {
	    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
	    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
	  }

	  var geometryType = {
	    LineString: line,
	    MultiLineString: polygon,
	    Polygon: polygon,
	    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
	  };

	  objects.forEach(geometry);

	  for (var i in indexesByArc) {
	    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
	      for (var k = j + 1; k < m; ++k) {
	        var ij = indexes[j], ik = indexes[k], n;
	        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
	        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
	      }
	    }
	  }

	  return neighbors;
	};

	var untransform = function(transform) {
	  if (transform == null) return identity;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(input, i) {
	    if (!i) x0 = y0 = 0;
	    var j = 2,
	        n = input.length,
	        output = new Array(n),
	        x1 = Math.round((input[0] - dx) / kx),
	        y1 = Math.round((input[1] - dy) / ky);
	    output[0] = x1 - x0, x0 = x1;
	    output[1] = y1 - y0, y0 = y1;
	    while (j < n) output[j] = input[j], ++j;
	    return output;
	  };
	};

	var quantize = function(topology, transform) {
	  if (topology.transform) throw new Error("already quantized");

	  if (!transform || !transform.scale) {
	    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
	    box = topology.bbox || bbox(topology);
	    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
	    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};
	  } else {
	    box = topology.bbox;
	  }

	  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};

	  function quantizePoint(point) {
	    return t(point);
	  }

	  function quantizeGeometry(input) {
	    var output;
	    switch (input.type) {
	      case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry)}; break;
	      case "Point": output = {type: "Point", coordinates: quantizePoint(input.coordinates)}; break;
	      case "MultiPoint": output = {type: "MultiPoint", coordinates: input.coordinates.map(quantizePoint)}; break;
	      default: return input;
	    }
	    if (input.id != null) output.id = input.id;
	    if (input.bbox != null) output.bbox = input.bbox;
	    if (input.properties != null) output.properties = input.properties;
	    return output;
	  }

	  function quantizeArc(input) {
	    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic
	    output[0] = t(input[0], 0);
	    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points
	    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points
	    output.length = j;
	    return output;
	  }

	  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

	  return {
	    type: "Topology",
	    bbox: box,
	    transform: transform,
	    objects: outputs,
	    arcs: topology.arcs.map(quantizeArc)
	  };
	};

	exports.bbox = bbox;
	exports.feature = feature;
	exports.mesh = mesh;
	exports.meshArcs = meshArcs;
	exports.merge = merge;
	exports.mergeArcs = mergeArcs;
	exports.neighbors = neighbors;
	exports.quantize = quantize;
	exports.transform = transform;
	exports.untransform = untransform;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 239 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }
/******/ ])))
});
;